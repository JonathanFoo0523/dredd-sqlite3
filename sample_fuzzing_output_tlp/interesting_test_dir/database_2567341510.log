-- Time: 2024/06/09 06:45:53
-- Database: database10
-- Database version: 3.40.0
-- seed value: 2567341510
PRAGMA cache_size = 50000; -- 8ms;
PRAGMA temp_store=MEMORY; -- 1ms;
PRAGMA synchronous=off; -- 1ms;
PRAGMA encoding = 'UTF-16'; -- 0ms;
CREATE TABLE t0 (c0 INT ); -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=657087217 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1557093996 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1557093996 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-1557093996 1007122983 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('''}')AND(NULL)))IS((- (6.57087217E8)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '657087217 896163480 sz=657087217 noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((CASE NULL  WHEN -1512643644 THEN x'' WHEN 'cKl瀆.' THEN 0X21324978 WHEN NULL THEN -1.557093996E9 WHEN NULL THEN x'' WHEN 'CKL瀆.' THEN '' END)AND(((((x'52f1')OR(NULL)))OR('-1842164792')))))AND(CAST('730718422' AS INTEGER))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1696575372'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1696575372 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((CAST(0.05100174988338091 AS BLOB), ((NULL) NOT BETWEEN (0xffffffff8f97f0f0) AND (0.9830462758109324)), CAST(x'2fd7' AS INTEGER)))>(((('-315114135')<=(NULL)), CAST(0.24496988684595378 AS REAL), (NULL IN (9.81757958E8))))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('675342187') IS TRUE))GLOB(CASE 1753397441  WHEN '76,髅.	/SC' THEN 0xfffffffffd342dd1 WHEN '76,髅.	/SC' THEN 0.5516007360324497 WHEN NULL THEN 0.39820115989222205 WHEN '896163480' THEN x'330f' WHEN NULL THEN 'ZW' END)); -- 1ms;
DELETE FROM sqlite_stat1 WHERE CAST(COALESCE('-1109681467', '''y') AS REAL); -- 1ms;
DELETE FROM sqlite_stat1 WHERE CAST(0xfffffffffc12d70f AS TEXT); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2 1328726275 sz=-883647411 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1328726275 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1257505855 unordered noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NOT (0.4344350121863725)) COLLATE NOCASE; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '2 sz=1583700391'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=896163480 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 3ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '-250008095 sz=1328726275 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN CAST('-1109681467' AS INTEGER) THEN ((((0xfffffffffd342dd1)OR('')))OR(x'')) END; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 0 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE NULL  WHEN ((NULL) BETWEEN ('556943736') AND ('')) THEN (('')IS NOT('189234666')) END; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '226522359 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 sz=-886342297 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((NULL) NOT BETWEEN (x'') AND (NULL)))|((((0.24496988684595378))>((''))))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(((((NULL)OR(NULL)))OR(x'80fe')) AS NUMERIC); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=669840460 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1597710378 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1227427771'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-46912047 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN ((0.03864681762821642)>('0.05100174988338091')) THEN (~ ('981757958')) WHEN ((0.4344350121863725) NOT BETWEEN (0.6058729869027558) AND ('uv')) THEN (('491874186') NOT NULL) WHEN (~ ('06')) THEN ((x'')&(0.8867000715336765)) ELSE NULL END; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(((NULL)|(0.010029205520702411)) AS BLOB); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((CASE 0.2800049831095266  WHEN '556943736' THEN 0.8135210882997526 WHEN '675342187' THEN '1~b^,qR[' WHEN NULL THEN x'' WHEN NULL THEN 0x22725b29 WHEN 0.5496255737642434 THEN NULL ELSE 0Xffffffffe1d9e2fb END))<=(((((((((((((('491874186')AND(0.15969050638112603)))AND(x'b216')))OR(0xffffffff904c95db)))OR(x'')))AND('R')))AND('1696575372'))))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((x'bb3f')) NOT BETWEEN ((((x'') NOTNULL))) AND (((((x'')) BETWEEN (('f{\n{~')) AND ((0.44490155945975196)))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1298615358 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((NULL)) NOT BETWEEN (((+ (0.7627500016967357)))) AND ((CAST(0.03864681762821642 AS REAL)))); -- 1ms;
DELETE FROM sqlite_stat1 WHERE (- (0.6102520058691351)); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 2'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=21138542'); -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1109681467 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST((x'' IN ('start of dayF<', x'2f05')) AS INTEGER); -- 1ms;
DELETE FROM sqlite_stat1 WHERE (((((-195327883 IN (x'352c', NULL, 'ZW')))AND(((0.2772835847451357) BETWEEN (6.6984046E8) AND (NULL)))))AND(((0.8239828823674191)>=(x'')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1024835369 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2 sz=-250008095 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '21138542 0 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 2ms;
DELETE FROM sqlite_stat1 WHERE ((CASE WHEN x'' THEN '-1597710378' ELSE NULL END) BETWEEN ((NOT (NULL))) AND ((((((((('-1517982842')OR('-883647411')))OR('''}')))OR(-1.885867792E9)))OR(x'')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=220003471 unordered'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=519371908 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE COALESCE(DISTINCT (('1753397441')IS NOT(0X6882b8c1)), ((NULL) BETWEEN ('45') AND ('-521643317')), ((x'a821')-(-719275931)), ((('*Gx-Punixepochm')) NOT BETWEEN (('1035097051')) AND ((NULL))), ((((NULL)AND(NULL)))AND(NULL)), ((NULL) BETWEEN ('+6') AND (0.32164950610194454))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((+ (x'')))*((((((((('t')OR(NULL)))AND(0.4505332073514353)))AND('Zo(>|X	')))AND(6.6984046E8)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '-1623902290 492325724 sz=675342187 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((NULL)) NOT BETWEEN (((((NULL))>((NULL))))) AND ((('1907685197' IN ())))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE TOTAL_CHANGES(); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1301101615 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((((((x'') NOT BETWEEN (0xffffffffb1779385) AND ('ﲏj3T')))AND(((x'') NOT BETWEEN (0.6538390662142445) AND ('-1885867792')))))OR(('#' IN ('913225248', NULL)))))AND(((775794340)<=(x'')))))AND(CASE WHEN '-972678859' THEN '-1517982842' ELSE 0X79a5b765 END)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '116614198 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1512643644'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-250008095 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '572755762'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((0.6481702902127409)/(x''))) BETWEEN (CAST('0.39820115989222205' AS REAL)) AND (((((x'')OR(-1557093996)))OR(0.8370062862440151)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=80279744 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1696575372 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1109681467'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (- (COALESCE(DISTINCT '', NULL))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NOT (CASE WHEN '560084295' THEN NULL END)); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-1512643644 sz=1506628734 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((x'89f9')||(-1.885867792E9))) ISNULL); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST('' COLLATE RTRIM AS BLOB); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('-19941342') NOT NULL))>(((0.4563766847180708) NOTNULL))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((0.6538390662142445)||(0.9186419944926819)) COLLATE BINARY; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(((-5.21643317E8) ISNULL) AS REAL); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE ((-8.83647411E8) BETWEEN ('eH絧钃4p') AND ('1e500'))  WHEN ((x'b301')>=('1807857882')) THEN x'' ELSE ((('h7', NULL, 1007122983))=((x'73e8', x'', '492325724'))) END; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '1874909730 -1892036829 sz=-883647411 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(SQLITE_COMPILEOPTION_USED('-1512643644') AS TEXT); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1216076300 noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '2093352378 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('ﲏj3t' COLLATE BINARY)=((NOT (1004300794)))); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NOT ('' COLLATE NOCASE)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1347959565 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-517163762'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=981757958'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '-302356090 sz=675342187'); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-250008095 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((0.0039789701465903216)LIKE(-1964777722)))GLOB(2029703599 COLLATE NOCASE)); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((((((((((('..A ')OR(x'')))OR(NULL)))AND(NULL)))OR(0.7965341815397299)))OR(x'')))AND(NULL)))LIKE(CAST(x'' AS BLOB))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (- (STRFTIME(']}3yC*auw', '', 0.6152041073361039, NULL, 0.5469643370700407, NULL, 0.8867000715336765))); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=572755762'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=312270547 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '572755762 sz=2082866859 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE NULL; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=491874186'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1517982842 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2066701357 2 sz=-1557093996 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-250008095 sz=-1317563515 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE WHEN 0.5629328606691917 THEN '' WHEN '9LI8Un(' THEN 1e500 WHEN '1807857882' THEN x'' ELSE 0.8158793168129576 END) ISNULL); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((HEX(DISTINCT '1641559169'))OR(('18' IN (0.23267549419546973)))))AND(((((x'11d6')OR(0.11609505129463282)))AND('')))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '-1421568598 sz=-264666584 unordered noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1 WHERE (((('aCIez~l')>=(NULL)))LIKE((+ (0.9518283928868884)))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE TYPEOF(((x'')&(x''))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('0.2772835847451357') ISNULL) COLLATE RTRIM; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((('-1202972481', NULL, -4.6912047E7)) NOT BETWEEN (((('Y?') ISNULL), (((NULL)) NOT BETWEEN ((NULL)) AND ((NULL))), CASE WHEN 0.19240656053559335 THEN 1.328726275E9 WHEN 0X1ef4fc84 THEN NULL WHEN 'ylS딎7)uG' THEN 0.21351837823541897 ELSE x'' END)) AND ((('0.32164950610194454' IN (x'', x'')), ((((0.48998982391573886)OR(-1.257505855E9)))OR(x'')), (NOT (0.253836733950365))))); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('-255568917') IS TRUE); -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-586507664 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (CASE x''  WHEN NULL THEN '1328726275' WHEN 388761033 THEN 0.4764736568985497 WHEN NULL THEN NULL ELSE NULL END IN ()); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '4 sz=-75598701 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1959808154 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((0.15969050638112603 COLLATE BINARY)AND(0.0)))OR(('' IN (x'', NULL)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '-883647411 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CAST('894120443' AS BLOB)) ISNULL); -- 1ms;
DELETE FROM sqlite_stat1 WHERE (x'' COLLATE RTRIM IN ()); -- 0ms;
DELETE FROM sqlite_stat1 WHERE 0.42700519290264016; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 2 sz=577919785 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-980869115 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1312214543 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (- ((0x6ea092bc IN ()))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN NULL THEN NULL END COLLATE RTRIM; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '1528406109 -1216076300 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '1529122820 374455450 sz=-883647411 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-793810969 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE WHEN NULL THEN x'' END) IS FALSE); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-376368553 -808903740'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 sz=264074651'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-1874029093 226522359 sz=293888319 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '572755762 unordered'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '-331895938 sz=1347959565 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (0.8867000715336765 IN ()) COLLATE BINARY; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-699504903 179888160 sz=517126231'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE HEX(CAST(5.17126231E8 AS INTEGER)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=2055157691'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((NULL)AND('-1257505855')))AND(x''))) NOTNULL); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=667745246 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((NULL) IS FALSE); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-521643317 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN ((((((((NULL)AND(0X1de1a488)))OR(0.8863806145246835)))AND(7.7579434E8)))AND(0.286079324799802)) THEN NULL END; -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '1247239622 894740731 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-500888228'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=118419892 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST((- (736547705)) AS INTEGER); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1529122820'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-264666584 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('')GLOB(-363245845)))|(((((x'')AND(6.67745246E8)))AND(-1.109681467E9)))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((('o8' IN ()))OR((NOT (x'45d84580')))))AND(CAST(0X626a83cb AS REAL))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('')LIKE('1227427771')) COLLATE NOCASE; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=2040903525 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '542158395'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((NULL)) NOT BETWEEN (('f&ht4')) AND ((NULL))))GLOB(((((NULL)AND(1.007122983E9)))AND(x'9039')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((0.6481702902127409, x'' COLLATE RTRIM, 1136223558 COLLATE RTRIM))==(('' COLLATE BINARY, (+ (0.45519777810936446)), ((0.9055932425881021) IS TRUE)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 sz=-314079805 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '439899393 0 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-2078932675 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN -1.95327883E8 THEN '\\nqa' END COLLATE NOCASE; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('-980869115')|('-255568917')))-(CASE WHEN '1924637098' THEN 0X3db253db ELSE x'' END)); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((0.32119683455580195)) NOT BETWEEN ((((NULL)GLOB('Q2Y')))) AND (((~ (x'98ae'))))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE NULL; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 0 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2043869063 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '1687731498 sz=1177182361 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE WHEN 0X167354d6 THEN x'6cfe' WHEN x'228c' THEN -1795481078 WHEN NULL THEN x'73aa707a726e' END)OR((((NULL))==((0.9133959674213048))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE NULL COLLATE RTRIM; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=651304364 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-315114135 sz=21138542 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((x'') ISNULL)) ISNULL); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=667745246'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('1329117072')&(0.010029205520702411)))LIKE(('lb]ᢿM闛u' IN (-2091876447)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-1499461397 sz=2066701357'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0'); -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2 -1685689498 sz=1410732098 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((-1885867792 IN ())))<(('\n[' COLLATE RTRIM))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((0.7041431423737019, x'', '', '-1317563515', NULL)) BETWEEN ((CAST(NULL AS NUMERIC), (('cKl瀆.')<('741487266')), ('ox_' IN ()), ((0.8481254192980217) NOT BETWEEN (NULL) AND (0.4009784019438841)), ((x'')!=(0.3065372914793706)))) AND (((0.9848350115971329 IN ()), CAST(x'' AS TEXT), ((NULL)==(x'')), (('-2057361055') NOT BETWEEN ('-1244756336') AND (NULL)), (('2055157691')%('1616674911'))))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(((-1.95327883E8) NOTNULL) AS NUMERIC); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((NULL)) BETWEEN (((((x''))>=(('h8'))))) AND ((((((x'')AND(x'')))OR('0.7041431423737019'))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((-1439932519 COLLATE NOCASE)/(((NULL) IS FALSE))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '2 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '2022025076 4 sz=54457180 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1557093996 unordered noskipscan'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 sz=1521516259'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((x'c94dd7ff') NOT BETWEEN (x'') AND (-1191209976))) BETWEEN (((NULL)||(NULL))) AND (((('ᢿ룁YY~')) BETWEEN ((x'')) AND ((x''))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-9223372036854775808 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST((('D.')OR(0.8481254192980217)) AS INTEGER); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=642523421'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-300905797 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1806461258 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE MIN((+ (NULL)), ('z5' IN ())); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE WHEN 'r' THEN '2029703599' WHEN '~' THEN x'2750239b' WHEN 0.7337438543235467 THEN NULL END)GLOB((('-1419519983')LIKE('1896939029')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '533261886 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE 0.5700897413668076; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE WHEN x'' THEN '-127420892' ELSE 0.5988289417368139 END) ISNULL); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-250008095 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-264666584 0 sz=-2125431352'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '4 1298615358 sz=1312214543 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '1506628734 2 sz=-1131895893 noskipscan'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '2 2 sz=556943736 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((NULL) NOT NULL) IN ()); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1398683412 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-430608927'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((x'')IS(x'')) IN ()); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN ((((((((((((((((1.641559169E9)OR(0.7359989162016989)))AND(0.6152041073361039)))AND('1583700391')))OR('-315114135')))AND('f&ht4')))OR(x'')))OR(NULL)))OR(x'')) THEN ((0.5544195125915485)IS NOT(-920342734)) ELSE CASE WHEN 0x30b2ef33 THEN 0.6613930395414918 ELSE 0.4764736568985497 END END; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=688341958 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 0 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1347959565 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NOT ((('-1230082259')LIKE(x'2ed9')))); -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=226522359'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE '-699504903'; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-995373524 -530203686 sz=1959808154'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE WHEN 'lb]ᢿM闛u' THEN '1794612506' WHEN '-883647411' THEN '917285080' WHEN '-385944184' THEN NULL END) IS TRUE); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((NULL COLLATE NOCASE) NOT BETWEEN ((('') BETWEEN (0.3631867858585699) AND (0.8239828823674191))) AND ((+ (x'fc2c')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (- (((4.51712131E8)=(0.37349559506615904)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1274101287'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=293888319 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((x'' IN ()) IN ('-376368553', (~ (-691072262)))); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE UPPER(DISTINCT x''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-61462143 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('549451248')IS(((NULL)>(x'c0d8b4b9')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1301101615 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1707016403 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((x'' COLLATE RTRIM)IS NOT((((NULL))>=((-3.15114135E8))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-476072496 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((('-376368553' IN ()))|(((((((((0x50583b0d)OR(-0.0)))AND(NULL)))OR(0.9294734053764414)))OR('drFNr')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '1351771309 sz=-699504903 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=652480064'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((0.7749064851273813 IN ()))AND('-883647411' COLLATE BINARY)))OR(((x'')IS('-1874029093')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 1ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN ((x'')<=('-1111802399')) THEN (0.8576742573105417 IN ()) ELSE LIKELIHOOD(x'', 0.739665158671585) END; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-172870985 sz=-388938167'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '4 1227427771'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE ((NULL)|(0.3906878581354276))  WHEN ((NULL) ISNULL) THEN ((x'')=(x'')) ELSE ((NULL)<<(-1.202972481E9)) END; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1224339886 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-314056564'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((((((('-557139887') IS FALSE))OR(LIKELIHOOD(NULL, 0.9501646788655757))))OR(CASE x'9dd1'  WHEN 0.30883134281242575 THEN NULL ELSE '%' END)))OR((((2.040903525E9, x'', 0.9786575405550729))<((1.959808154E9, 501326984, '0.7627500016967357'))))))AND(0.27318492389957205)); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '116614198 9992275 sz=-1779954422 noskipscan'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-264666584 sz=-1668491862 unordered noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (~ (((x'') NOT NULL))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE WHEN '-713865566' THEN 0.5981520541340771 WHEN '1239253453' THEN '-255568917' WHEN '304954097' THEN -75598701 ELSE NULL END)GLOB((((''))<((''))))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE '776557800' COLLATE RTRIM COLLATE BINARY; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE LIKELY(((NULL) BETWEEN ('o8') AND ('gP\n>b(pW'))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 2ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 sz=-264666584 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=451712131'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ''; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1112844844'); -- 1ms;
DELETE FROM sqlite_stat1 WHERE (((((((((((((((0Xfffffffff1b5207e)OR(x'')))OR('334876837')))AND(0.9186419944926819)))OR('')))AND('-2094940250')))OR(0.2551811459011294))))<((((NULL) NOT NULL)))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE HEX((NULL IN (1e500))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((json_extract(NULL, 0.7794132049922196, NULL, 525413446)) NOTNULL); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 2 sz=733426818 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '20894793 2 sz=2029703599 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((~ (NULL))))<>((((0.5402655394852574) BETWEEN (NULL) AND (1870042919))))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1427129194'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE TYPEOF(DISTINCT '1874909730' COLLATE BINARY); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-585791707 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1696575372'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=21138542 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1268031277 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((0.6427357331546628 IN ()))>=(x'15e9')); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-130305374 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((x'')) BETWEEN ((((('-41321402', '-1695869801', NULL))>=(('0.8135210882997526', -191625091, x'614d'))))) AND (((NULL IN (0.5192737622913202))))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1529122820'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '1515701051'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2122259076 sz=-1721873895 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '1141621367 0 sz=607488107 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 -1557093996 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-493710147'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1641559169 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE 0.4727655126957774; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NULL IN ()) COLLATE BINARY; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=327120513 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1485326539 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-19941342'); -- 1ms;
DELETE FROM sqlite_stat1 WHERE ((((((((((((CASE WHEN x'459f' THEN x'' ELSE 0.8926727897674006 END)OR(GLOB(0Xffffffffe1d9e2fb, '-854750191'))))AND(((NULL) IS FALSE))))OR('' COLLATE NOCASE)))OR(HEX(DISTINCT 0xfffffffffe69ed12))))OR(LAST_INSERT_ROWID())))AND(ABS(NULL))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((x'8dc6' COLLATE NOCASE)OR(((0.6152041073361039) NOT BETWEEN (NULL) AND (x'52fb3cf5')))))OR((~ ('-149105745')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=659759089 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '630517216 sz=1753397441 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '4 2066701357 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE DATE(x'58d9', (NULL IN (x'')), CAST(0X283ac784 AS INTEGER)); -- 0ms;
DELETE FROM sqlite_stat1 WHERE NULL; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 0 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-140917140 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-376368553 1035097051 sz=1067794333 noskipscan'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((0.42553253719575346)) BETWEEN ((0.7250764305378374)) AND (('-315114135'))) IN (CASE '0.0'  WHEN '' THEN '-1174004014' WHEN '226522359' THEN NULL WHEN x'' THEN x'' END)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('0.5469643370700407')<<(NULL)))IS NOT(LIKELIHOOD(DISTINCT 0.6631834099671543, 0.2172910606435703))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(((0x6ea092bc) BETWEEN ('') AND ('1781710078')) AS TEXT); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-521643317 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1396231260 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((x'')<=(NULL)))+(CAST(1347959565 AS TEXT))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (CAST(1.87490973E9 AS REAL) IN ()); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '4 sz=-1560374321 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=138696700'); -- 1ms;
DELETE FROM sqlite_stat1 WHERE ((('1449976534')) BETWEEN ((((x'38f5') NOT BETWEEN ('913225248') AND ('-1652371403')))) AND ((((NULL) IS FALSE)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1347959565 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE UNICODE(0.3092531074650987 COLLATE RTRIM); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1583700391'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-671357015'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (- (TRIM(DISTINCT x''))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '2 0 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 sz=-972678859 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1109681467 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '715466929 sz=-1808357386 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((NULL COLLATE NOCASE)/(IFNULL(DISTINCT 0X3c0ebb8e, x''))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2 sz=2066701357 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=2082866859 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((NULL)IS NOT(x''))) IS TRUE); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN ((x'')IS(-1964777722)) THEN CASE '0.6631834099671543'  WHEN NULL THEN 667745246 END WHEN x'' COLLATE RTRIM THEN (~ ('ui)}')) WHEN (((('')AND(NULL)))AND(x'')) THEN (NOT ('-1874029093')) END; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=188262631'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '1753397441'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1463353720'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE LOWER(DISTINCT ((NULL) NOT BETWEEN ('0.4727655126957774') AND (0.19240656053559335))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((0.13668455041527572, 1776384961, x'7a46')) BETWEEN (((('556943736')>>(NULL)), CASE WHEN NULL THEN x'' ELSE 0.4563793146493257 END, 0x49198bff COLLATE RTRIM)) AND (((('116614198') IS FALSE), ((((0.37408739394281565)AND('3^')))AND(NULL)), ((x'') BETWEEN (509112478) AND ('1874909730'))))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1317563515 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((~ (0.0039789701465903216)))AND((179888160 IN ('1856017084')))))AND(0.8862421970760966 COLLATE NOCASE)); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((x'1fd9'))=((0.14045119290748798)))) IS TRUE); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '2 1189138972 sz=-225063360 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1529122820 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE load_extension(CAST(x'b816' AS INTEGER), (('mm0\nYK')GLOB(-1812796746))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((((((((95620110)) BETWEEN ((-9.72678859E8)) AND ((''))))AND(CAST('-1202972481' AS REAL))))OR((('')+('110523466')))))OR((('-883647411') IS TRUE))))OR(0X172c05c9 COLLATE NOCASE)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1483172573 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE -2084677080; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((((((NOT (x'')))OR(((x'') NOT BETWEEN ('') AND (0.34249431573709266)))))AND((NULL IN ()))))AND(0.06336931702989479 COLLATE RTRIM)))AND(UPPER('-1892036829'))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (+ ((NULL IN ()))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=312270547'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 sz=1765924860 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-1194405008 sz=-972678859'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1421568598 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1608619696 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE 'Yyv'; -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((((x'')AND(NULL)))AND(0.24816023874018855)))AND((x'' IN ()))))OR(CAST(NULL AS NUMERIC))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-926138861'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-1431961740 sz=2029703599'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((NULL) ISNULL)) ISNULL); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST((('1164838134')*(2.055157691E9)) AS TEXT); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST((NULL IN ()) AS REAL); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '2 sz=363268806 unordered noskipscan'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2093352378 2127774521 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=894120443 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '-312503954 sz=1007122983 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=797741702 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((0.8961444267050211)<(NULL)) IN ()); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN CASE NULL  WHEN '_l' THEN NULL END THEN ('-1246680895' IN ()) WHEN (0Xdfc6c6d IN ()) THEN '-1395951350' WHEN ((NULL)>>('*U')) THEN ((x'a3511ed1')<<(NULL)) END; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NOT ('1227427771')) COLLATE RTRIM; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=493572386 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '1451616215 2029703599 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((IFNULL(DISTINCT 0.14742344925203865, '667745246'))OR(('' IN ('bj')))))AND(GLOB(NULL, 4.51712131E8))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=388761033 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1856480373 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((((((((('-395865406')OR(0.8834569151301215)))AND('aCIez~l')))AND(((0.7900980564389475)>(0.5192737622913202)))))OR(GLOB(0.6980996441917853, x''))))AND(CASE WHEN 0x26b9fa89 THEN '0.9786575405550729' WHEN NULL THEN 1908557318 WHEN 0.9294734053764414 THEN 0.2935937892070376 END)))AND((((x''))!=(('1647732588'))))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE '׉I'; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 sz=1312214543 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((ABS(DISTINCT x''))AND(((0.42594816309594485) NOT NULL))))OR(NULL)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (- (((0.5910313949341467) BETWEEN (x'') AND ('\ni,SQ]7')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ABS((x'ea0c' IN (-9.80869115E8))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((CASE WHEN NULL THEN NULL WHEN '0.6058729869027558' THEN x'' WHEN '' THEN NULL END))=((CAST('189234666' AS INTEGER)))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((-847191005)GLOB(0.17577247883041658))) IS TRUE); -- 0ms;
DELETE FROM sqlite_stat1 WHERE rtreenode((((((((('')OR('')))AND(NULL)))AND(x'')))OR('1581119783')), TRIM(NULL, '1728140616')); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '2 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN x'f3c5' THEN '1328726275' WHEN 6.67745246E8 THEN NULL WHEN NULL THEN NULL END COLLATE RTRIM; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((NULL) IS TRUE)) ISNULL); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((NOT ('')))OR(CASE NULL  WHEN '' THEN '' ELSE NULL END)))AND(CASE WHEN '' THEN '-1096108406' ELSE x'' END)); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1505595242 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((0Xffffffffe1e8eba5)) NOT BETWEEN ((0.5368083070159059)) AND (('hgX銼!'))) COLLATE BINARY; -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-370851914 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '1066049455 0 sz=-1868091397 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=669840460 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(UPPER(DISTINCT '#') AS REAL); -- 0ms;
DELETE FROM sqlite_stat1 WHERE 0.03681623437623083; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1216076300'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (CAST('5*' AS REAL) IN ()); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE QUOTE(((((0Xffffffffbddb9ac5)AND(x'258a')))OR(0.5988289417368139))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1757461353 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((0.6908582856674265, '669840460', x'')) NOT BETWEEN ((0x65fb40b3, x'', '1301101615')) AND ((0.6047579447715945, x'', x''))) IN ()); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1312214543 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=2082866859'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((0.5907266019055951)AND(x'')))AND(''))) NOT NULL); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-766402866 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (- (((981757958) ISNULL))); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-505814277 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-264666584 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1638229354 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
DELETE FROM sqlite_stat1 WHERE COALESCE(DISTINCT 'pzHｭ' COLLATE BINARY, (((NULL)) BETWEEN (('Ik#657')) AND ((0.8452331493534165)))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(((NULL)>>('')) AS INTEGER); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(((-129720878) NOTNULL) AS REAL); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE TYPEOF((+ (0.8961444267050211))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 -586507664 sz=-884215655 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((((((~ (x'ea8c')))OR('-1215605652' COLLATE NOCASE)))OR(CASE WHEN NULL THEN 0.6427357331546628 ELSE '-254326853' END)))AND((((x'e787')) BETWEEN (('1866966545')) AND ((NULL))))))AND(('Ik#657' IN ()))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-1842164792 0 sz=-345571197 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1568399921'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE LIKELIHOOD((('')==(NULL)), 0.19780356129254062); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((CASE NULL  WHEN 0.39505873316658857 THEN NULL ELSE '-176990303' END)OR(((((((((0.33372944995608167)AND(0x22725b29)))AND(-5.05814277E8)))OR(x'')))OR(x'')))))AND(CAST(x'' AS TEXT))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-140613203 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '-963478336 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=667745246 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 sz=-1202972481'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '1562240625 0 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((NULL) NOTNULL); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((1824844405) BETWEEN ('uv') AND ('瘝1'))) NOT BETWEEN (-332572823 COLLATE NOCASE) AND (('' IN ('')))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '2 2 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((-7.93810969E8) NOT NULL) COLLATE NOCASE; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 2'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '1298615358'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '263541130 sz=-1827620689 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=63775123 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1 WHERE ((('1838270378' IN ()))%(CASE '501326984'  WHEN x'2f86' THEN x'' WHEN NULL THEN NULL WHEN x'' THEN x'' ELSE 0.8546431284855608 END)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-227030739 sz=-826150625 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-719275931 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '494273947'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(CASE WHEN '' THEN 0.24030171784999965 END AS REAL); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-2008214460 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((('-239158274') NOTNULL) IN ((NOT (x'')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((('1171324547')||('')))OR(-352760617 COLLATE BINARY)))AND((('179888160') IS TRUE))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CAST('h7' AS BLOB))>=(((x'3af4e521') NOTNULL))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '2 sz=686648399 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE 0.03399708082076969  WHEN PRINTF(0.30883134281242575) THEN ((x'') NOT NULL) END; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((NULL)IS(0.03056133844081954))))<>(((((('-699504903')AND(NULL)))OR(0.6036425144414508))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=312270547 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '1702574410'); -- 1ms;
DELETE FROM sqlite_stat1 WHERE (((0.8926727897674006) BETWEEN ('-BQBLsD') AND (NULL)) IN (UPPER(NULL))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((('wH๫paImN', NULL, '-1235062323')) BETWEEN (((('')>>('1846350225')), CAST(NULL AS REAL), (+ (NULL)))) AND (('-19941342', x'f343', NULL COLLATE BINARY))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1641559169'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=940791840 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=2066701357'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=53938445'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 833936031 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=226522359'); -- 1ms;
DELETE FROM sqlite_stat1 WHERE ((((x'') IS TRUE))IS NOT((('0')GLOB(0x354b31fb)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST((((x'')) NOT BETWEEN (('')) AND (('981757958'))) AS NUMERIC); -- 0ms;
DELETE FROM sqlite_stat1 WHERE UPPER(DISTINCT UNICODE(0.11159099117111526)); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((('-kO') IS TRUE)))<=(((1312214543 IN (1007118035, ''))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-1257505855 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-302356090 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((x''))<(('F6鑟\h')))) ISNULL); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE CAST(NULL AS NUMERIC)  WHEN ((NULL) BETWEEN ('1641559169') AND (NULL)) THEN (5.77919785E8 IN ()) WHEN CAST(0.36477262633784424 AS REAL) THEN CAST(0.8436933297297927 AS INTEGER) WHEN x'' COLLATE RTRIM THEN CAST(0.0 AS NUMERIC) END; -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((('')OR(x'')))OR(x'')))IS NOT((((x'1f43'))<((0.9534599802760798))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=164366128 unordered'); -- 1ms;
DELETE FROM sqlite_stat1 WHERE CASE ((0.8521317057527937)LIKE(-0.0))  WHEN ((0.05654449177411436)+(x'')) THEN (((NULL, x'', x''))<=((x'', 0.34133724945587807, '1531229511'))) ELSE NULL END; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=540129810 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('0.7900980564389475')<=(((0.3053248257063149)AND(1882481130)))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('16357679')||(981757958)) COLLATE BINARY; -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-54401191'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=730718422 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (~ (1524460432 COLLATE NOCASE)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=2082866859 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((CASE ''  WHEN x'' THEN NULL ELSE NULL END)AND(0.12335424952534269 COLLATE RTRIM)))OR(NULL COLLATE NOCASE)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1166768985'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 sz=-1342482940 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '-1004442307 sz=21138542 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 -2036875893 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1363101154 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1009598592'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((NOT (NULL)))OR(((NULL)IS NOT('')))))AND(x'6837')); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE LAST_INSERT_ROWID(); -- 1ms;
DELETE FROM sqlite_stat1 WHERE (~ (((1156845815) NOT BETWEEN (NULL) AND ('1782502893')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=312270547'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=244637950'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1528406109 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1896807990'); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1110124648 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=374455450 noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1 WHERE ((('-1885867792')||('챲4')) IN ()); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '963338070 sz=-1320724218 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '2 sz=-715915143'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '2 0'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((('' IN ()))|(((7.7579434E8)GLOB('')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1182824708 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '-1931343882 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=2029703599 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1002242511 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1874909730 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1007122983'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE UNLIKELY(DISTINCT (+ (675342187))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 1088442818 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-90133736 sz=730718422 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '2 -850292221 sz=470242190 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((NULL)OR(NULL)))AND('-1701870721')))<((+ (0.9543278450734941)))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '2 2 sz=775794340 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-82242945 0 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE NULL  WHEN x'fdca' THEN 0.9294734053764414 WHEN 0.5644692672238448 THEN NULL WHEN NULL THEN x'98f1' ELSE 'rG溯B驆y4N' END) NOTNULL); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1696575372 unordered'); -- 1ms;
DELETE FROM sqlite_stat1 WHERE ((TYPEOF(NULL)) NOT BETWEEN ((NULL IN (x'', NULL))) AND ((((0.06748176767631242))>=((NULL))))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-557164341 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((x'dfbc')>>(x'')))>=((('0.03681623437623083')GLOB('388803053')))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(0.7774195526423677 AS NUMERIC) COLLATE NOCASE; -- 0ms;
DELETE FROM sqlite_stat1 WHERE LIKELIHOOD(CASE '-1422881136'  WHEN NULL THEN x'9593' WHEN '1301101615' THEN NULL WHEN NULL THEN NULL ELSE 'X' END, 0.43429672268444963); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NOT ((0xffffffffb8f94657 IN ()))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 0 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '1670690240 sz=-1715304290 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '675342187 0 sz=610148383'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((- ('4s㕇')))-(((NULL) NOT BETWEEN (x'') AND (x'')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '242512649 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=299701777 noskipscan'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-65874161'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '4 sz=1758220277 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE HEX(DISTINCT ((((((((((((x'')OR(x'')))AND(NULL)))AND('0.5988289417368139')))OR(0.6251899873697003)))OR('j&')))OR(NULL))); -- 1ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (+ (1.807857882E9)); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE 0.35019132960749166  WHEN NULL THEN '2072569475' WHEN 'iKw飼#' THEN '' WHEN NULL THEN 2093352378 END)LIKE(x'' COLLATE RTRIM)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-2065889760 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 -736822 sz=-2017755026 unordered'); -- 1ms;
DELETE FROM sqlite_stat1 WHERE CASE (((x''))<=((NULL)))  WHEN ((((NULL)OR(0.6192011845747222)))AND(x'')) THEN ((x'') ISNULL) WHEN NULL COLLATE NOCASE THEN CASE 2082866859  WHEN x'' THEN 101944788 WHEN 1.312214543E9 THEN '' WHEN 0.27318492389957205 THEN x'' END WHEN (-14520709 IN (-771916564)) THEN LOWER(DISTINCT '-1202972481') WHEN LENGTH(x'') THEN NULL WHEN (0.6773424568027195 IN ()) THEN (~ (NULL)) ELSE (NOT ('BI')) END; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=189234666 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE WHEN ((x'') IS FALSE) THEN '1328726275' WHEN (((0.5071682806716723))<((0Xffffffff8f59e9d5))) THEN NULL COLLATE RTRIM WHEN x'' THEN CASE WHEN NULL THEN '2066701357' WHEN 0.4563793146493257 THEN -7.93810969E8 WHEN x'ec5d' THEN -65874161 END ELSE (+ (NULL)) END; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(CAST(x'' AS BLOB) AS INTEGER); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(((x'')<=(NULL)) AS BLOB); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((0.7468349718158676)AND('')))AND(0.08178981679774777))) IS TRUE); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((0.07989008924717977) BETWEEN (0X4a6d172a) AND (x'')))>=(CASE -505814277  WHEN 'f{\n{~' THEN 0.61927214707239 END)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=1484362572'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '-1257505855 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-928447597'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(UNLIKELY(DISTINCT NULL) AS BLOB); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((0.5275967263504011)&(x''))) NOT BETWEEN (CAST(x'' AS REAL)) AND (((((((((((((0.8128814495457329)OR(0.24245824598153498)))OR(x'5022')))AND(0.7338792847578449)))OR(1.87490973E9)))OR(NULL)))OR('0.010029205520702411')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '1573512755 sz=-1621452927 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(NULL COLLATE RTRIM AS REAL); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=2070293826 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '1753397441 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((-1026326572)AND('-808903740')))OR('/'))) IS FALSE); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-246012215 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((x'') IS FALSE))<(((((((((0.5360376761231718)OR(0.46410733397348014)))AND('')))AND('-1256082204')))AND('-1451627060')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '-840533043 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((NULL) IS TRUE))+(CASE WHEN 0.1279053438586839 THEN NULL WHEN NULL THEN x'' WHEN x'' THEN x'' END)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 -183340325 sz=-956933240 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-1580654743 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=1947310605'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 sz=1893125137 noskipscan'); -- 1ms;
DELETE FROM sqlite_stat1 WHERE CAST((x'' IN ()) AS BLOB); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('3{钃F]V' COLLATE RTRIM)OR(((0.730339479182103) IS FALSE))))AND((('d6*}R絞C5') NOT BETWEEN (x'') AND ('21138542')))); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=894120443 unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=730307871'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((x'') IS TRUE)) BETWEEN ((NULL IN ())) AND ((('|Y86\r,') BETWEEN (x'') AND (0.9476286932501888)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (+ (CAST(0.1712970534202264 AS BLOB))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '-1994239657 sz=672075827 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(((NULL)%('-1798972144')) AS INTEGER); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE CAST(CAST(x'529a' AS INTEGER) AS TEXT); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (- (json_quote(NULL))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', '0 0 sz=-1677057540 unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=189234666'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE (('' IN ()) IN (((NULL) NOT NULL), CASE x'c1a8'  WHEN 'w?s+nㇻoa' THEN 0.2479028078175849 ELSE 'hgX銼!' END)); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (NOT (x'')) COLLATE BINARY; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '-980869115 451712131 sz=-555186094 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-409295626'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-19941342 unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((('si/&')|(x'c323')) IN ()); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=677997259 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '264074651 sz=-1909517554 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE x''; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '-362569355 unordered'); -- 10ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((0.8483133212432025)>=(''))) ISNULL); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ABS(DISTINCT 0x78fad1af COLLATE NOCASE); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=-1530979971 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CAST('' AS INTEGER))/(0.39820115989222205 COLLATE NOCASE)); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ''); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((CASE x'6ad0'  WHEN '' THEN x'' END) NOT NULL); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((((0.42594816309594485))=((x'')))) ISNULL); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' sz=501326984'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE CASE TRIM(DISTINCT 'N_d}戴o~Z(', -0.0)  WHEN ((x'')<>(0.48204850566823176)) THEN (-1069939248 IN (x'2444', '(Bvm')) WHEN ((((x'')OR(x'')))AND('/O')) THEN (- ('1583700391')) WHEN ((((21138542)AND(NULL)))AND(x'')) THEN (((('-244370647')OR(x'fa6c')))AND(-395881950)) ELSE 0.5487341396459019 COLLATE BINARY END; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '2039689425 sz=1051705547 noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' unordered'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE '311360831'; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=250756857'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', '0 sz=-316922315 unordered noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE '1040233277' COLLATE NOCASE; -- 0ms;
DELETE FROM sqlite_stat1; -- 1ms;
DELETE FROM sqlite_stat1 WHERE 0.4344350121863725; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((((((x'c18b')AND(NULL)))AND(NULL)))OR(0.7607508432861773)))AND('㯪*'))) NOT BETWEEN (CAST(0xffffffffa0c4dfd6 AS NUMERIC)) AND (CAST(x'' AS NUMERIC))); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((('h%B5gp&0t')) BETWEEN (((('203047516') NOT BETWEEN (NULL) AND (NULL)))) AND (((- ('-195327883'))))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' sz=-195327883 noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((NULL) BETWEEN (((0Xbcf8078) NOT BETWEEN (NULL) AND ('-1173202131'))) AND ((('293888319')IS NOT(NULL)))); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((1641559169) BETWEEN (x'') AND (0.6594684063578126))) NOTNULL); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 't0', ' noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' unordered noskipscan'); -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('t0', 'null', ' noskipscan'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
UPDATE OR IGNORE t0 SET (c0)=(x'e9c5') WHERE CASE WHEN CASE WHEN t0.c0 THEN t0.c0 END THEN t0.c0 COLLATE RTRIM ELSE CAST(t0.c0 AS INTEGER) END; -- 0ms;
INSERT OR FAIL INTO t0(c0) VALUES (x''); -- 0ms;
ALTER TABLE t0 ADD COLUMN c85 INT CHECK ( (((t0.c0)AND(t0.c0)) IN ())); -- 1ms;
ALTER TABLE t0 RENAME TO t1; -- 1ms;
INSERT OR IGNORE INTO t1(c0) VALUES ('-926418090'); -- 0ms;
INSERT OR IGNORE INTO t1(c0) VALUES (0Xffffffffae14ee8d), ('-1430897055'), ('-670407985'); -- 0ms;
INSERT OR IGNORE INTO t1(c0) VALUES (0.6102316416668077); -- 0ms;
CREATE INDEX i63 ON t1(json_array_length(((c0) NOT BETWEEN (c0) AND (c0)), (+ (c0))) COLLATE RTRIM) WHERE CAST(((c0)<>(c0)) AS TEXT); -- 0ms;
END; -- 0ms;
COMMIT; -- 0ms;
REINDEX  t1; -- 0ms;
UPDATE OR IGNORE t1 SET (c0)=('[]v7') WHERE ((CAST(t1.c0 AS INTEGER))<=((t1.c0 IN ()))); -- 0ms;
UPDATE OR IGNORE t1 SET c0=1959808154; -- 0ms;
DELETE FROM t1; -- 0ms;
END TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO t1(c0) VALUES (NULL); -- 1ms;
UPDATE t1 SET (c0)=('䰾㉔C'); -- 0ms;
ANALYZE sqlite_master; -- 0ms;
INSERT OR IGNORE INTO t1(c0) VALUES (x'a9b2'); -- 1ms;
PRAGMA temp.stats; -- 0ms;
END; -- 0ms;
INSERT OR ABORT INTO t1 VALUES (0.8001362431510981); -- 0ms;
PRAGMA reverse_unordered_selects = false; -- 0ms;
REINDEX; -- 0ms;
INSERT OR IGNORE INTO t1(c0) VALUES ('>a'); -- 0ms;
INSERT OR FAIL INTO t1 VALUES ((('yMo7' COLLATE NOCASE) NOT BETWEEN (NULL) AND (CAST(0.6097659802250853 AS TEXT)))); -- 0ms;
BEGIN DEFERRED TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO t1 VALUES (''); -- 1ms;
REINDEX; -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
UPDATE t1 SET c0=0.13010551007238091; -- 0ms;
PRAGMA wal_autocheckpoint = 5302280114937958796; -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
INSERT OR FAIL INTO t1(c0) VALUES ('/'), (NULL), ('1993503253'); -- 0ms;
PRAGMA main.mmap_size; -- 0ms;
CREATE TABLE IF NOT EXISTS t0 (c0 INTEGER , c1 REAL , c2 BLOB ); -- 0ms;
REINDEX; -- 0ms;
PRAGMA recursive_triggers; -- 0ms;
PRAGMA temp.cache_spill; -- 0ms;
UPDATE OR IGNORE t0 SET (c1)=(NULL); -- 0ms;
UPDATE t0 SET c1=0.3497654438183644 WHERE GLOB(((t0.c2)!=(t0.c1)), NULL); -- 0ms;
INSERT OR REPLACE INTO t1 VALUES (0Xffffffffe34f43b3); -- 0ms;
CREATE VIRTUAL TABLE vt0 USING fts5(c0 UNINDEXED, c1 UNINDEXED); -- 1ms;
INSERT OR FAIL INTO t0(c2, c1) VALUES ('755520592', NULL); -- 0ms;
PRAGMA main.journal_size_limit; -- 0ms;
UPDATE t0 SET c0=0.9299325726074421, c2=NULL WHERE JULIANDAY((-1.892036829E9 IN ()), t0.c1, (((t0.c2))<((t0.c1))), LOWER(0.16970887368201282), 1566124305); -- 0ms;
UPDATE OR ABORT t0 SET c0=x'', c2=x'', c1='0.9294734053764414'; -- 0ms;
UPDATE t0 SET c1=NULL; -- 0ms;
UPDATE OR FAIL t0 SET c0=0.6190604156994299; -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO t1 VALUES (0.4286872581161215); -- 0ms;
ROLLBACK TRANSACTION; -- 1ms;
INSERT OR FAIL INTO t1 VALUES (-1872889425); -- 1ms;
UPDATE OR IGNORE t1 SET (c0, c0, c0)=(x'', NULL, x''); -- 1ms;
INSERT OR IGNORE INTO t1 VALUES (x''); -- 0ms;
UPDATE OR IGNORE t1 SET c0='826361883' WHERE TYPEOF(t1.c0); -- 0ms;
VACUUM; -- 0ms;
INSERT OR IGNORE INTO t1(c0) VALUES (NULL); -- 1ms;
ANALYZE i63; -- 0ms;
ANALYZE i63; -- 1ms;
UPDATE OR REPLACE t1 SET c0='80279744', c0=NULL WHERE ((NULL)-((- (t1.c0)))); -- 0ms;
CREATE UNIQUE INDEX i8 ON t1(((((c0) IS TRUE)) IS TRUE)); -- 1ms;
CREATE UNIQUE INDEX IF NOT EXISTS i27 ON t1(CAST(((c0) BETWEEN (NULL) AND (c0)) AS BLOB) DESC) WHERE ABS(DISTINCT ((c0) NOT BETWEEN (c0) AND (c0))); -- 0ms;
INSERT OR IGNORE INTO t1 VALUES (NULL), (x'077f'), ('n苀'); -- 0ms;
PRAGMA journal_mode = TRUNCATE; -- 0ms;
ANALYZE i27; -- 0ms;
ANALYZE; -- 0ms;
UPDATE t1 SET c0='-505814277', c0=NULL, c0='' WHERE ((t1.c0)<<(NULL)) COLLATE NOCASE; -- 1ms;
UPDATE t1 SET c0=x'3657'; -- 1ms;
UPDATE t1 SET (c0)=(NULL) WHERE (ABS(t1.c0) IN ()); -- 0ms;
UPDATE OR IGNORE t1 SET (c0)=(NULL); -- 0ms;
PRAGMA wal_autocheckpoint; -- 0ms;
ALTER TABLE t1 RENAME COLUMN c0 TO c64; -- 1ms;
PRAGMA main.secure_delete = FAST; -- 0ms;
UPDATE OR IGNORE t1 SET c64=0x74d04c9a WHERE (((((t1.c64))=((t1.c64)))) NOT NULL); -- 0ms;
REINDEX BINARY; -- 0ms;
UPDATE t1 SET c64=0x4e36ce0f WHERE x''; -- 0ms;
VACUUM; -- 0ms;
COMMIT TRANSACTION; -- 1ms;
INSERT OR IGNORE INTO t1(c64) VALUES ('-1874029093'); -- 1ms;
UPDATE t1 SET (c64, c64, c64)=(-1712128878, x'cd70', 1583700391); -- 1ms;
UPDATE OR REPLACE t1 SET (c64)=(0.12782338792614223); -- 1ms;
UPDATE OR REPLACE t1 SET c64=NULL; -- 0ms;
ANALYZE i63; -- 0ms;
UPDATE t1 SET (c64, c64)=(0x1da6dedf, '') WHERE ''; -- 0ms;
UPDATE OR ROLLBACK t1 SET c64='2066701357', c64='1448991240' WHERE (((t1.c64, t1.c64, t1.c64)) NOT BETWEEN ((((t1.c64)IS(t1.c64)), CAST(t1.c64 AS REAL), UNLIKELY(t1.c64))) AND ((CAST(t1.c64 AS NUMERIC), t1.c64 COLLATE RTRIM, '0G偂CnC'))); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
ALTER TABLE t1 RENAME TO t0; -- 1ms;
UPDATE t0 SET (c64)=(x''); -- 0ms;
INSERT OR IGNORE INTO t0 VALUES (NULL); -- 0ms;
REINDEX; -- 0ms;
REINDEX i27; -- 1ms;
INSERT OR ABORT INTO t0 VALUES (NULL); -- 0ms;
UPDATE OR REPLACE t0 SET (c64, c64)=('575366327', 0Xffffffffeae0ded0); -- 0ms;
BEGIN EXCLUSIVE TRANSACTION; -- 0ms;
BEGIN EXCLUSIVE TRANSACTION; -- 0ms;
ANALYZE; -- 0ms;
UPDATE t0 SET (c64, c64)=(NULL, '05'); -- 0ms;
END; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64)+(t0.c64))) IS TRUE)) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64)+(t0.c64))) IS TRUE)))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((((((t0.c64)+(t0.c64))) IS TRUE)) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN '-715490900' WHEN t0.c64 THEN t0.c64 END)>=(x''))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN '-715490900' WHEN t0.c64 THEN t0.c64 END)>=(x''))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN '-715490900' WHEN t0.c64 THEN t0.c64 END)>=(x''))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE ((((- (t0.c64))) IS FALSE)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT ((((- (t0.c64))) IS FALSE)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((((- (t0.c64))) IS FALSE)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING NULL UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (NULL)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((NULL) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING NULL UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (NULL)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((NULL) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT * FROM t0;
SELECT * FROM t0 WHERE ('0.5192737622913202' COLLATE BINARY) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT ('0.5192737622913202' COLLATE BINARY))) UNION ALL SELECT * FROM t0 WHERE ((('0.5192737622913202' COLLATE BINARY) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64 COLLATE NOCASE)AND(json_remove(t0.c64, t0.c64))))OR(CAST(t0.c64 AS INTEGER)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64 COLLATE NOCASE)AND(json_remove(t0.c64, t0.c64))))OR(CAST(t0.c64 AS INTEGER)))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((((t0.c64 COLLATE NOCASE)AND(json_remove(t0.c64, t0.c64))))OR(CAST(t0.c64 AS INTEGER)))) ISNULL));
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (t0.c64) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (t0.c64))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((t0.c64) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING json_patch(((MAX(t0.c64)) NOT BETWEEN (t0.c64) AND (TOTAL(COUNT(COUNT(*))))), TOTAL(t0.c64)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (json_patch(((MAX(t0.c64)) NOT BETWEEN (t0.c64) AND (TOTAL(COUNT(COUNT(*))))), TOTAL(t0.c64)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((json_patch(((MAX(t0.c64)) NOT BETWEEN (t0.c64) AND (TOTAL(COUNT(COUNT(*))))), TOTAL(t0.c64))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (t0.c64) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((t0.c64) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((t0.c64 IN ()) IN ())) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((t0.c64 IN ()) IN ())))) UNION SELECT DISTINCT * FROM t0 WHERE (((((t0.c64 IN ()) IN ())) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (t0.c64) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (t0.c64))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((t0.c64) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((AVG(MIN(MAX(t0.c64)))) BETWEEN (MIN(COUNT(MAX(AVG(t0.c64))))) AND (COUNT(*))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((AVG(MIN(MAX(t0.c64)))) BETWEEN (MIN(COUNT(MAX(AVG(t0.c64))))) AND (COUNT(*))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((AVG(MIN(MAX(t0.c64)))) BETWEEN (MIN(COUNT(MAX(AVG(t0.c64))))) AND (COUNT(*)))) ISNULL);
SELECT * FROM t0;
SELECT ALL * FROM t0 WHERE ((((t0.c64)) BETWEEN ((CAST(t0.c64 AS INTEGER))) AND ((CASE WHEN t0.c64 THEN 1301101615 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END)))) UNION ALL SELECT * FROM t0 WHERE ((NOT ((((t0.c64)) BETWEEN ((CAST(t0.c64 AS INTEGER))) AND ((CASE WHEN t0.c64 THEN 1301101615 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END)))))) UNION ALL SELECT * FROM t0 WHERE ((((((t0.c64)) BETWEEN ((CAST(t0.c64 AS INTEGER))) AND ((CASE WHEN t0.c64 THEN 1301101615 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END)))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64) BETWEEN (t0.c64) AND (t0.c64)))-(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64) BETWEEN (t0.c64) AND (t0.c64)))-(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((((t0.c64) BETWEEN (t0.c64) AND (t0.c64)))-(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64)IS(t0.c64))) IS TRUE)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64)IS(t0.c64))) IS TRUE)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((((t0.c64)IS(t0.c64))) IS TRUE)) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING AVG(MAX(AVG(COUNT(*)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (AVG(MAX(AVG(COUNT(*)))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((AVG(MAX(AVG(COUNT(*))))) ISNULL);
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE ((NOT (((((t0.c64)AND(t0.c64)))OR(t0.c64))))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT ((NOT (((((t0.c64)AND(t0.c64)))OR(t0.c64))))))) UNION ALL SELECT * FROM t0 WHERE ((((NOT (((((t0.c64)AND(t0.c64)))OR(t0.c64))))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ((('I8\rW*Bm')=(0.48998982391573886))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ((('I8\rW*Bm')=(0.48998982391573886))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((((('I8\rW*Bm')=(0.48998982391573886))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 NOT INDEXED GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((((t0.c64) BETWEEN (t0.c64) AND (395464890))) BETWEEN ((('-75598701') ISNULL)) AND (((t0.c64) IS FALSE)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64) BETWEEN (t0.c64) AND (395464890))) BETWEEN ((('-75598701') ISNULL)) AND (((t0.c64) IS FALSE)))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((((t0.c64) BETWEEN (t0.c64) AND (395464890))) BETWEEN ((('-75598701') ISNULL)) AND (((t0.c64) IS FALSE)))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 NOT INDEXED GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((TOTAL(0.5102327471993462))AND(t0.c64)))OR(SUM(SUM(AVG(COUNT(AVG(TOTAL(t0.c64)))))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((((TOTAL(0.5102327471993462))AND(t0.c64)))OR(SUM(SUM(AVG(COUNT(AVG(TOTAL(t0.c64)))))))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((TOTAL(0.5102327471993462))AND(t0.c64)))OR(SUM(SUM(AVG(COUNT(AVG(TOTAL(t0.c64))))))))) ISNULL);
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (((x'18ba') NOT BETWEEN (NULL) AND (((t0.c64)IS NOT(t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((x'18ba') NOT BETWEEN (NULL) AND (((t0.c64)IS NOT(t0.c64))))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((((x'18ba') NOT BETWEEN (NULL) AND (((t0.c64)IS NOT(t0.c64))))) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (load_extension(t0.c64, t0.c64) COLLATE NOCASE) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (load_extension(t0.c64, t0.c64) COLLATE NOCASE))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((load_extension(t0.c64, t0.c64) COLLATE NOCASE) ISNULL));
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((((((t0.c64 IN ()))AND((+ (t0.c64)))))OR(COALESCE(DISTINCT t0.c64, t0.c64)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((((((t0.c64 IN ()))AND((+ (t0.c64)))))OR(COALESCE(DISTINCT t0.c64, t0.c64)))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((((((t0.c64 IN ()))AND((+ (t0.c64)))))OR(COALESCE(DISTINCT t0.c64, t0.c64)))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(x'') UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(x''))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(x'')) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(x'') UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(x''))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(x'')) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE ((x'' IN ('501326984', '3^'))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT ((x'' IN ('501326984', '3^'))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((((x'' IN ('501326984', '3^'))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (QUOTE(((t0.c64) NOTNULL))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (QUOTE(((t0.c64) NOTNULL))))) UNION SELECT DISTINCT * FROM t0 WHERE (((QUOTE(((t0.c64) NOTNULL))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) COLLATE RTRIM) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) COLLATE RTRIM))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) COLLATE RTRIM) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MAX(((t0.c64)&(COUNT(t0.c64)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MAX(((t0.c64)&(COUNT(t0.c64)))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MAX(((t0.c64)&(COUNT(t0.c64))))) ISNULL);
SELECT ALL SUM(((-1637990938) NOT BETWEEN (((t0.c64)>('<b꩔OK{UT['))) AND (((((t0.c64)OR(t0.c64)))AND(t0.c64))))) FROM t0;
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (CASE ((((((((x'000c')OR(t0.c64)))AND(t0.c64)))AND(t0.c64)))AND(t0.c64))  WHEN ((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) THEN t0.c64 WHEN (t0.c64 IN ()) THEN (('-443351769') BETWEEN (t0.c64) AND (t0.c64)) WHEN CASE x''  WHEN t0.c64 THEN t0.c64 END THEN ((t0.c64)<(t0.c64)) ELSE CAST(t0.c64 AS NUMERIC) END) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CASE ((((((((x'000c')OR(t0.c64)))AND(t0.c64)))AND(t0.c64)))AND(t0.c64))  WHEN ((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) THEN t0.c64 WHEN (t0.c64 IN ()) THEN (('-443351769') BETWEEN (t0.c64) AND (t0.c64)) WHEN CASE x''  WHEN t0.c64 THEN t0.c64 END THEN ((t0.c64)<(t0.c64)) ELSE CAST(t0.c64 AS NUMERIC) END))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((CASE ((((((((x'000c')OR(t0.c64)))AND(t0.c64)))AND(t0.c64)))AND(t0.c64))  WHEN ((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) THEN t0.c64 WHEN (t0.c64 IN ()) THEN (('-443351769') BETWEEN (t0.c64) AND (t0.c64)) WHEN CASE x''  WHEN t0.c64 THEN t0.c64 END THEN ((t0.c64)<(t0.c64)) ELSE CAST(t0.c64 AS NUMERIC) END) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (CASE WHEN CAST(t0.c64 AS INTEGER) THEN t0.c64 ELSE UPPER(t0.c64) END) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (CASE WHEN CAST(t0.c64 AS INTEGER) THEN t0.c64 ELSE UPPER(t0.c64) END))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((CASE WHEN CAST(t0.c64 AS INTEGER) THEN t0.c64 ELSE UPPER(t0.c64) END) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CASE WHEN ((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) THEN t0.c64 COLLATE NOCASE WHEN ((t0.c64)>=(t0.c64)) THEN '1959808154' WHEN CAST(t0.c64 AS TEXT) THEN ((t0.c64)AND(0.27931978277081226)) END) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CASE WHEN ((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) THEN t0.c64 COLLATE NOCASE WHEN ((t0.c64)>=(t0.c64)) THEN '1959808154' WHEN CAST(t0.c64 AS TEXT) THEN ((t0.c64)AND(0.27931978277081226)) END))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((CASE WHEN ((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) THEN t0.c64 COLLATE NOCASE WHEN ((t0.c64)>=(t0.c64)) THEN '1959808154' WHEN CAST(t0.c64 AS TEXT) THEN ((t0.c64)AND(0.27931978277081226)) END) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING TOTAL(((AVG(TOTAL(AVG(t0.c64)))) ISNULL)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (TOTAL(((AVG(TOTAL(AVG(t0.c64)))) ISNULL)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((TOTAL(((AVG(TOTAL(AVG(t0.c64)))) ISNULL))) ISNULL);
SELECT * FROM t0;
SELECT ALL * FROM t0 WHERE (((NULL)<=(t0.c64 COLLATE RTRIM))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (((NULL)<=(t0.c64 COLLATE RTRIM))))) UNION ALL SELECT * FROM t0 WHERE (((((NULL)<=(t0.c64 COLLATE RTRIM))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (ABS(((t0.c64) BETWEEN (t0.c64) AND (t0.c64)))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (ABS(((t0.c64) BETWEEN (t0.c64) AND (t0.c64)))))) UNION SELECT DISTINCT * FROM t0 WHERE (((ABS(((t0.c64) BETWEEN (t0.c64) AND (t0.c64)))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((t0.c64)|(t0.c64)) COLLATE RTRIM) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((t0.c64)|(t0.c64)) COLLATE RTRIM))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64)|(t0.c64)) COLLATE RTRIM) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING GROUP_CONCAT(TOTAL(COUNT(MAX(t0.c64)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (GROUP_CONCAT(TOTAL(COUNT(MAX(t0.c64)))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((GROUP_CONCAT(TOTAL(COUNT(MAX(t0.c64))))) ISNULL);
SELECT * FROM t0;
SELECT ALL * FROM t0 WHERE ((((((t0.c64)GLOB(t0.c64))))<((t0.c64)))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT ((((((t0.c64)GLOB(t0.c64))))<((t0.c64)))))) UNION ALL SELECT * FROM t0 WHERE ((((((((t0.c64)GLOB(t0.c64))))<((t0.c64)))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (0Xffffffffcb2b7d67) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (0Xffffffffcb2b7d67))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((0xffffffffcb2b7d67) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((UPPER(t0.c64)) NOT NULL)) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((UPPER(t0.c64)) NOT NULL)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((UPPER(t0.c64)) NOT NULL)) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING 0.6402203197946154 UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (0.6402203197946154)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((0.6402203197946154) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING 0.6402203197946154 UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (0.6402203197946154)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((0.6402203197946154) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE ((((CAST(t0.c64 AS REAL)))<=((CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END)))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT ((((CAST(t0.c64 AS REAL)))<=((CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END)))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((((((CAST(t0.c64 AS REAL)))<=((CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END)))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (NULLIF((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))), ROUND(t0.c64, t0.c64))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (NULLIF((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))), ROUND(t0.c64, t0.c64))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((NULLIF((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))), ROUND(t0.c64, t0.c64))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CAST((((t0.c64, t0.c64, t0.c64))=((t0.c64, t0.c64, t0.c64))) AS TEXT)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (CAST((((t0.c64, t0.c64, t0.c64))==((t0.c64, t0.c64, t0.c64))) AS TEXT)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((CAST((((t0.c64, t0.c64, t0.c64))==((t0.c64, t0.c64, t0.c64))) AS TEXT)) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(*) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(*))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(*) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(*))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT * FROM t0;
SELECT * FROM t0 WHERE (t0.c64) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (t0.c64))) UNION ALL SELECT * FROM t0 WHERE (((t0.c64) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (t0.c64) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (t0.c64))) UNION SELECT DISTINCT * FROM t0 WHERE (((t0.c64) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (t0.c64 COLLATE BINARY) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (t0.c64 COLLATE BINARY))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((t0.c64 COLLATE BINARY) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((t0.c64, t0.c64, MAX(t0.c64))) BETWEEN ((CASE COUNT(*)  WHEN t0.c64 THEN t0.c64 END, x'', ((t0.c64)>=(t0.c64)))) AND ((((((TOTAL(TOTAL(GROUP_CONCAT(SUM(GROUP_CONCAT(GROUP_CONCAT(COUNT(t0.c64))))))))AND(MIN(MIN(t0.c64)))))AND(TOTAL(t0.c64))), (((t0.c64))=((0.016160549016600134))), GROUP_CONCAT(t0.c64) COLLATE RTRIM))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((((t0.c64, t0.c64, MAX(t0.c64))) BETWEEN ((CASE COUNT(*)  WHEN t0.c64 THEN t0.c64 END, x'', ((t0.c64)>=(t0.c64)))) AND ((((((TOTAL(TOTAL(GROUP_CONCAT(SUM(GROUP_CONCAT(GROUP_CONCAT(COUNT(t0.c64))))))))AND(MIN(MIN(t0.c64)))))AND(TOTAL(t0.c64))), (((t0.c64))=((0.016160549016600134))), GROUP_CONCAT(t0.c64) COLLATE RTRIM))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((t0.c64, t0.c64, MAX(t0.c64))) BETWEEN ((CASE COUNT(*)  WHEN t0.c64 THEN t0.c64 END, x'', ((t0.c64)>=(t0.c64)))) AND ((((((TOTAL(TOTAL(GROUP_CONCAT(SUM(GROUP_CONCAT(GROUP_CONCAT(COUNT(t0.c64))))))))AND(MIN(MIN(t0.c64)))))AND(TOTAL(t0.c64))), (((t0.c64))==((0.016160549016600134))), GROUP_CONCAT(t0.c64) COLLATE RTRIM)))) ISNULL);
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (((CAST(t0.c64 AS INTEGER))AND(t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((CAST(t0.c64 AS INTEGER))AND(t0.c64))))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((((CAST(t0.c64 AS INTEGER))AND(t0.c64))) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((~ ((t0.c64 IN ())))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((~ ((t0.c64 IN ())))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((~ ((t0.c64 IN ())))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END) NOT BETWEEN ((t0.c64 IN ())) AND (x''))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END) NOT BETWEEN ((t0.c64 IN ())) AND (x''))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END) NOT BETWEEN ((t0.c64 IN ())) AND (x''))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING CASE SUM(GROUP_CONCAT(t0.c64))  WHEN ((AVG(0.15149003972018593)) NOT NULL) THEN (t0.c64 IN ()) WHEN (~ (t0.c64)) THEN COUNT(*) WHEN (- (t0.c64)) THEN CASE MAX(SUM(COUNT(GROUP_CONCAT(MIN(0.03197157295838349)))))  WHEN TOTAL(t0.c64) THEN t0.c64 WHEN MIN(AVG(AVG(MAX(GROUP_CONCAT(t0.c64))))) THEN t0.c64 WHEN t0.c64 THEN AVG(AVG(t0.c64)) ELSE AVG(TOTAL(t0.c64)) END END UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CASE SUM(GROUP_CONCAT(t0.c64))  WHEN ((AVG(0.15149003972018593)) NOT NULL) THEN (t0.c64 IN ()) WHEN (~ (t0.c64)) THEN COUNT(*) WHEN (- (t0.c64)) THEN CASE MAX(SUM(COUNT(GROUP_CONCAT(MIN(0.03197157295838349)))))  WHEN TOTAL(t0.c64) THEN t0.c64 WHEN MIN(AVG(AVG(MAX(GROUP_CONCAT(t0.c64))))) THEN t0.c64 WHEN t0.c64 THEN AVG(AVG(t0.c64)) ELSE AVG(TOTAL(t0.c64)) END END)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CASE SUM(GROUP_CONCAT(t0.c64))  WHEN ((AVG(0.15149003972018593)) NOT NULL) THEN (t0.c64 IN ()) WHEN (~ (t0.c64)) THEN COUNT(*) WHEN (- (t0.c64)) THEN CASE MAX(SUM(COUNT(GROUP_CONCAT(MIN(0.03197157295838349)))))  WHEN TOTAL(t0.c64) THEN t0.c64 WHEN MIN(AVG(AVG(MAX(GROUP_CONCAT(t0.c64))))) THEN t0.c64 WHEN t0.c64 THEN AVG(AVG(t0.c64)) ELSE AVG(TOTAL(t0.c64)) END END) ISNULL);
SELECT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (0.32119683455580195) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (0.32119683455580195))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((0.32119683455580195) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN '0.19240656053559335' WHEN x'17d9' THEN t0.c64 ELSE t0.c64 END)&(x''))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN '0.19240656053559335' WHEN x'17d9' THEN t0.c64 ELSE t0.c64 END)&(x''))))) UNION SELECT DISTINCT * FROM t0 WHERE (((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN '0.19240656053559335' WHEN x'17d9' THEN t0.c64 ELSE t0.c64 END)&(x''))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((((((((t0.c64)OR(t0.c64)))AND(t0.c64)))OR(((t0.c64) ISNULL))))AND(t0.c64))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((((((((t0.c64)OR(t0.c64)))AND(t0.c64)))OR(((t0.c64) ISNULL))))AND(t0.c64))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((((((((t0.c64)OR(t0.c64)))AND(t0.c64)))OR(((t0.c64) ISNULL))))AND(t0.c64))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CAST(t0.c64 AS INTEGER))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((NOT (CAST(t0.c64 AS INTEGER))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((NOT (CAST(t0.c64 AS INTEGER)))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CAST(t0.c64 AS INTEGER))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((NOT (CAST(t0.c64 AS INTEGER))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((NOT (CAST(t0.c64 AS INTEGER)))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE (((((((t0.c64)GLOB(t0.c64)))OR(((t0.c64) NOTNULL))))OR(CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN x'ca00' THEN '' WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END))) UNION ALL SELECT * FROM t0 WHERE ((NOT (((((((t0.c64)GLOB(t0.c64)))OR(((t0.c64) NOTNULL))))OR(CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN x'ca00' THEN '' WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END))))) UNION ALL SELECT * FROM t0 WHERE (((((((((t0.c64)GLOB(t0.c64)))OR(((t0.c64) NOTNULL))))OR(CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN x'ca00' THEN '' WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (CASE WHEN t0.c64 THEN NULL ELSE t0.c64 END COLLATE RTRIM) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (CASE WHEN t0.c64 THEN NULL ELSE t0.c64 END COLLATE RTRIM))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((CASE WHEN t0.c64 THEN NULL ELSE t0.c64 END COLLATE RTRIM) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (LIKE(((t0.c64)<=(t0.c64)), t0.c64 COLLATE BINARY, '0')) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (LIKE(((t0.c64)<=(t0.c64)), t0.c64 COLLATE BINARY, '0')))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((LIKE(((t0.c64)<=(t0.c64)), t0.c64 COLLATE BINARY, '0')) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING MIN(COALESCE(t0.c64, t0.c64, MAX(t0.c64), MAX(MAX(MAX(COUNT(*)))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MIN(COALESCE(t0.c64, t0.c64, MAX(t0.c64), MAX(MAX(MAX(COUNT(*)))))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN(COALESCE(t0.c64, t0.c64, MAX(t0.c64), MAX(MAX(MAX(COUNT(*))))))) ISNULL);
SELECT SUM((((0Xffffffffea9ed4be) BETWEEN ('1951907671') AND (t0.c64)) IN ())) FROM t0 ORDER BY ((t0.c64 COLLATE RTRIM) NOTNULL) DESC;
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE ((((NOT (x''))) NOT BETWEEN (('-535605993' IN (t0.c64))) AND (t0.c64 COLLATE BINARY))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT ((((NOT (x''))) NOT BETWEEN (('-535605993' IN (t0.c64))) AND (t0.c64 COLLATE BINARY))))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((((((NOT (x''))) NOT BETWEEN (('-535605993' IN (t0.c64))) AND (t0.c64 COLLATE BINARY))) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((t0.c64)=(t0.c64)) COLLATE NOCASE) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((t0.c64)=(t0.c64)) COLLATE NOCASE))) UNION SELECT DISTINCT * FROM t0 WHERE (((((t0.c64)==(t0.c64)) COLLATE NOCASE) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((((t0.c64 IN ()), ((((t0.c64)OR(NULL)))OR(t0.c64)), ((t0.c64) NOT BETWEEN (t0.c64) AND (''))))<=((((((t0.c64)OR(t0.c64)))OR(t0.c64)), rtreenode(x'77e9', 1014495590), (t0.c64 IN ()))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((t0.c64 IN ()), ((((t0.c64)OR(NULL)))OR(t0.c64)), ((t0.c64) NOT BETWEEN (t0.c64) AND (''))))<=((((((t0.c64)OR(t0.c64)))OR(t0.c64)), rtreenode(x'77e9', 1014495590), (t0.c64 IN ()))))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((((t0.c64 IN ()), ((((t0.c64)OR(NULL)))OR(t0.c64)), ((t0.c64) NOT BETWEEN (t0.c64) AND (''))))<=((((((t0.c64)OR(t0.c64)))OR(t0.c64)), rtreenode(x'77e9', 1014495590), (t0.c64 IN ()))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((MAX(COUNT(t0.c64))) NOT BETWEEN (GROUP_CONCAT(AVG(t0.c64))) AND (GROUP_CONCAT(AVG(MAX(t0.c64)))))) ISNULL) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((((MAX(COUNT(t0.c64))) NOT BETWEEN (GROUP_CONCAT(AVG(t0.c64))) AND (GROUP_CONCAT(AVG(MAX(t0.c64)))))) ISNULL))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((MAX(COUNT(t0.c64))) NOT BETWEEN (GROUP_CONCAT(AVG(t0.c64))) AND (GROUP_CONCAT(AVG(MAX(t0.c64)))))) ISNULL)) ISNULL);
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE (CASE CAST(t0.c64 AS BLOB)  WHEN ((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) THEN ((((((((0.9450777168014879)OR(2081529275)))AND(t0.c64)))OR(t0.c64)))AND(x'114f')) END) UNION ALL SELECT * FROM t0 WHERE ((NOT (CASE CAST(t0.c64 AS BLOB)  WHEN ((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) THEN ((((((((0.9450777168014879)OR(2081529275)))AND(t0.c64)))OR(t0.c64)))AND(x'114f')) END))) UNION ALL SELECT * FROM t0 WHERE (((CASE CAST(t0.c64 AS BLOB)  WHEN ((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) THEN ((((((((0.9450777168014879)OR(2081529275)))AND(t0.c64)))OR(t0.c64)))AND(x'114f')) END) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((((t0.c64)IS(t0.c64))) IS TRUE)) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((((t0.c64)IS(t0.c64))) IS TRUE)))) UNION SELECT DISTINCT * FROM t0 WHERE (((((((t0.c64)IS(t0.c64))) IS TRUE)) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((~ (((t0.c64)<<(t0.c64))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT ((~ (((t0.c64)<<(t0.c64))))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((~ (((t0.c64)<<(t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(*) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(*))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(*) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(*))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE (((((((((((t0.c64)OR(t0.c64)))OR(t0.c64)))AND('1891222799')))OR(t0.c64))) BETWEEN ((~ (t0.c64))) AND (((t0.c64) ISNULL)))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (((((((((((t0.c64)OR(t0.c64)))OR(t0.c64)))AND('1891222799')))OR(t0.c64))) BETWEEN ((~ (t0.c64))) AND (((t0.c64) ISNULL)))))) UNION ALL SELECT ALL * FROM t0 WHERE (((((((((((((t0.c64)OR(t0.c64)))OR(t0.c64)))AND('1891222799')))OR(t0.c64))) BETWEEN ((~ (t0.c64))) AND (((t0.c64) ISNULL)))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (t0.c64) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (t0.c64))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((t0.c64 IN (t0.c64)) COLLATE BINARY) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((t0.c64 IN (t0.c64)) COLLATE BINARY))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((t0.c64 IN (t0.c64)) COLLATE BINARY) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING t0.c64 UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (t0.c64)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((t0.c64) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING t0.c64 UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (t0.c64)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((t0.c64) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (CASE WHEN t0.c64 COLLATE RTRIM THEN (((t0.c64))>=((t0.c64))) END) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (CASE WHEN t0.c64 COLLATE RTRIM THEN (((t0.c64))>=((t0.c64))) END))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((CASE WHEN t0.c64 COLLATE RTRIM THEN (((t0.c64))>=((t0.c64))) END) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64) NOTNULL) COLLATE RTRIM) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((t0.c64) NOTNULL) COLLATE RTRIM))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64) NOTNULL) COLLATE RTRIM) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (CAST(((('1696575372', '-1780067289', t0.c64)) BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64))) AS NUMERIC)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (CAST(((('1696575372', '-1780067289', t0.c64)) BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64))) AS NUMERIC)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((CAST(((('1696575372', '-1780067289', t0.c64)) BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64))) AS NUMERIC)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING MIN(MAX(t0.c64)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MIN(MAX(t0.c64)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN(MAX(t0.c64))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE ((+ (NULL))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((+ (NULL))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((((+ (NULL))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64)AND(t0.c64 COLLATE BINARY)))OR((- (t0.c64))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64)AND(t0.c64 COLLATE BINARY)))OR((- (t0.c64))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((((t0.c64)AND(t0.c64 COLLATE BINARY)))OR((- (t0.c64))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (t0.c64) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (t0.c64))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((t0.c64) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(TOTAL(COUNT(-1.874029093E9))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(TOTAL(COUNT(-1.874029093E9))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(TOTAL(COUNT(-1.874029093E9)))) ISNULL);
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE (((((((((x'11e5')OR(t0.c64 COLLATE RTRIM)))AND(t0.c64)))AND(((t0.c64) IS FALSE))))OR((+ (t0.c64))))) UNION ALL SELECT * FROM t0 WHERE ((NOT (((((((((x'11e5')OR(t0.c64 COLLATE RTRIM)))AND(t0.c64)))AND(((t0.c64) IS FALSE))))OR((+ (t0.c64))))))) UNION ALL SELECT * FROM t0 WHERE (((((((((((x'11e5')OR(t0.c64 COLLATE RTRIM)))AND(t0.c64)))AND(((t0.c64) IS FALSE))))OR((+ (t0.c64))))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64 IN ()) IN ((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((t0.c64 IN ()) IN ((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64 IN ()) IN ((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((((t0.c64) NOT NULL)) ISNULL)) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((t0.c64) NOT NULL)) ISNULL)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((((t0.c64) NOT NULL)) ISNULL)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((t0.c64 IN ()))OR(t0.c64)))OR(TOTAL(MIN(t0.c64)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((((((t0.c64 IN ()))OR(t0.c64)))OR(TOTAL(MIN(t0.c64)))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((((t0.c64 IN ()))OR(t0.c64)))OR(TOTAL(MIN(t0.c64))))) ISNULL);
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE (NULL) UNION ALL SELECT * FROM t0 WHERE ((NOT (NULL))) UNION ALL SELECT * FROM t0 WHERE (((NULL) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (NULL) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (NULL))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((NULL) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (UNLIKELY(HEX(DISTINCT t0.c64))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (UNLIKELY(HEX(DISTINCT t0.c64))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((UNLIKELY(HEX(DISTINCT t0.c64))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING MIN((MIN(AVG(TOTAL(AVG(t0.c64)))) IN ())) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MIN((MIN(AVG(TOTAL(AVG(t0.c64)))) IN ())))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN((MIN(AVG(TOTAL(AVG(t0.c64)))) IN ()))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING MIN((MIN(AVG(TOTAL(AVG(t0.c64)))) IN ())) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MIN((MIN(AVG(TOTAL(AVG(t0.c64)))) IN ())))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN((MIN(AVG(TOTAL(AVG(t0.c64)))) IN ()))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT * FROM t0;
SELECT * FROM t0 WHERE (t0.c64) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (t0.c64))) UNION ALL SELECT ALL * FROM t0 WHERE (((t0.c64) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((0.030749944061480572)IS NOT(((t0.c64)<>(t0.c64))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((0.030749944061480572)IS NOT(((t0.c64)<>(t0.c64))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((0.030749944061480572)IS NOT(((t0.c64)!=(t0.c64))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (0.45519777810936446) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (0.45519777810936446))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((0.45519777810936446) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING GROUP_CONCAT(LIKELY(COUNT(*))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (GROUP_CONCAT(LIKELY(COUNT(*))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((GROUP_CONCAT(LIKELY(COUNT(*)))) ISNULL);
SELECT * FROM t0;
SELECT ALL * FROM t0 WHERE ((((t0.c64)>>(t0.c64)) IN ())) UNION ALL SELECT * FROM t0 WHERE ((NOT ((((t0.c64)>>(t0.c64)) IN ())))) UNION ALL SELECT ALL * FROM t0 WHERE ((((((t0.c64)>>(t0.c64)) IN ())) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((+ (t0.c64)) IN ())) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((+ (t0.c64)) IN ())))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((+ (t0.c64)) IN ())) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CASE (+ (t0.c64))  WHEN ((((t0.c64)OR(t0.c64)))OR(t0.c64)) THEN (((t0.c64, t0.c64, t0.c64))>((NULL, t0.c64, t0.c64))) END) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (CASE (+ (t0.c64))  WHEN ((((t0.c64)OR(t0.c64)))OR(t0.c64)) THEN (((t0.c64, t0.c64, t0.c64))>((NULL, t0.c64, t0.c64))) END))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((CASE (+ (t0.c64))  WHEN ((((t0.c64)OR(t0.c64)))OR(t0.c64)) THEN (((t0.c64, t0.c64, t0.c64))>((NULL, t0.c64, t0.c64))) END) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING SUM(SUM(TOTAL(t0.c64))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (SUM(SUM(TOTAL(t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM(SUM(TOTAL(t0.c64)))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE ('d') UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT ('d'))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((('d') ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((((x'', t0.c64, t0.c64)) NOT BETWEEN (((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))), IFNULL(t0.c64, t0.c64), x'cd37' COLLATE BINARY)) AND ((CAST(t0.c64 AS INTEGER), t0.c64 COLLATE NOCASE, (t0.c64 IN ()))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((((x'', t0.c64, t0.c64)) NOT BETWEEN (((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))), IFNULL(t0.c64, t0.c64), x'cd37' COLLATE BINARY)) AND ((CAST(t0.c64 AS INTEGER), t0.c64 COLLATE NOCASE, (t0.c64 IN ()))))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((((x'', t0.c64, t0.c64)) NOT BETWEEN (((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))), IFNULL(t0.c64, t0.c64), x'cd37' COLLATE BINARY)) AND ((CAST(t0.c64 AS INTEGER), t0.c64 COLLATE NOCASE, (t0.c64 IN ()))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (UPPER(t0.c64) COLLATE RTRIM COLLATE BINARY) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (UPPER(t0.c64) COLLATE RTRIM COLLATE BINARY))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((UPPER(t0.c64) COLLATE RTRIM COLLATE BINARY) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MAX(t0.c64) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MAX(t0.c64))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MAX(t0.c64)) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MAX(t0.c64) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MAX(t0.c64))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MAX(t0.c64)) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (TRIM(t0.c64 COLLATE NOCASE)) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (TRIM(t0.c64 COLLATE NOCASE)))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((TRIM(t0.c64 COLLATE NOCASE)) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 INDEXED BY i63;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((((+ (t0.c64)))>=(-1.557093996E9))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((((+ (t0.c64)))>=(-1.557093996E9))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((((+ (t0.c64)))>=(-1.557093996E9))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (CAST(AVG(t0.c64) AS REAL) IN ()) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((CAST(AVG(t0.c64) AS REAL) IN ()))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((CAST(AVG(t0.c64) AS REAL) IN ())) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (CAST(AVG(t0.c64) AS REAL) IN ()) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((CAST(AVG(t0.c64) AS REAL) IN ()))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((CAST(AVG(t0.c64) AS REAL) IN ())) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE ((+ ((('0.7794132049922196')>>(t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((+ ((('0.7794132049922196')>>(t0.c64))))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((((+ ((('0.7794132049922196')>>(t0.c64))))) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (t0.c64) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (t0.c64))) UNION SELECT DISTINCT * FROM t0 WHERE (((t0.c64) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)AND(((t0.c64)>(t0.c64)))))OR(0.06783825149096279))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)AND(((t0.c64)>(t0.c64)))))OR(0.06783825149096279))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)AND(((t0.c64)>(t0.c64)))))OR(0.06783825149096279))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING CAST(CAST(MAX(TOTAL(t0.c64)) AS REAL) AS BLOB) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CAST(CAST(MAX(TOTAL(t0.c64)) AS REAL) AS BLOB))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CAST(CAST(MAX(TOTAL(t0.c64)) AS REAL) AS BLOB)) ISNULL);
SELECT * FROM t0;
SELECT ALL * FROM t0 WHERE (((((((t0.c64)AND(t0.c64)))AND(0.9518283928868884)))>((- (t0.c64))))) UNION ALL SELECT * FROM t0 WHERE ((NOT (((((((t0.c64)AND(t0.c64)))AND(0.9518283928868884)))>((- (t0.c64))))))) UNION ALL SELECT ALL * FROM t0 WHERE (((((((((t0.c64)AND(t0.c64)))AND(0.9518283928868884)))>((- (t0.c64))))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64) IS FALSE)) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((t0.c64) IS FALSE)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64) IS FALSE)) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (LIKELY((~ (t0.c64)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (LIKELY((~ (t0.c64)))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((LIKELY((~ (t0.c64)))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING GROUP_CONCAT(MIN(COUNT(t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (GROUP_CONCAT(MIN(COUNT(t0.c64))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((GROUP_CONCAT(MIN(COUNT(t0.c64)))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (CASE WHEN t0.c64 COLLATE BINARY THEN (((t0.c64))<=((t0.c64))) ELSE CASE t0.c64  WHEN t0.c64 THEN t0.c64 END END) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CASE WHEN t0.c64 COLLATE BINARY THEN (((t0.c64))<=((t0.c64))) ELSE CASE t0.c64  WHEN t0.c64 THEN t0.c64 END END))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((CASE WHEN t0.c64 COLLATE BINARY THEN (((t0.c64))<=((t0.c64))) ELSE CASE t0.c64  WHEN t0.c64 THEN t0.c64 END END) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ((((t0.c64, t0.c64, t0.c64)) BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((-376215849, t0.c64, t0.c64)))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ((NOT ((((t0.c64, t0.c64, t0.c64)) BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((-376215849, t0.c64, t0.c64)))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((((NOT ((((t0.c64, t0.c64, t0.c64)) BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((-376215849, t0.c64, t0.c64)))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((NOT (t0.c64)) COLLATE NOCASE) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((NOT (t0.c64)) COLLATE NOCASE))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((((NOT (t0.c64)) COLLATE NOCASE) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING TRIM(DISTINCT ((t0.c64) BETWEEN (t0.c64) AND (t0.c64))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (TRIM(DISTINCT ((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((TRIM(DISTINCT ((t0.c64) BETWEEN (t0.c64) AND (t0.c64)))) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING TRIM(DISTINCT ((t0.c64) BETWEEN (t0.c64) AND (t0.c64))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (TRIM(DISTINCT ((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((TRIM(DISTINCT ((t0.c64) BETWEEN (t0.c64) AND (t0.c64)))) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT * FROM t0;
SELECT ALL * FROM t0 WHERE ((((+ (t0.c64))) IS TRUE)) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT ((((+ (t0.c64))) IS TRUE)))) UNION ALL SELECT ALL * FROM t0 WHERE ((((((+ (t0.c64))) IS TRUE)) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (CASE WHEN CAST(t0.c64 AS TEXT) THEN (('-704684541') IS TRUE) ELSE CASE WHEN 0xffffffffb008774e THEN '}+' WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END END) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (CASE WHEN CAST(t0.c64 AS TEXT) THEN (('-704684541') IS TRUE) ELSE CASE WHEN 0Xffffffffb008774e THEN '}+' WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END END))) UNION SELECT DISTINCT * FROM t0 WHERE (((CASE WHEN CAST(t0.c64 AS TEXT) THEN (('-704684541') IS TRUE) ELSE CASE WHEN 0Xffffffffb008774e THEN '}+' WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END END) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((((((t0.c64)AND(t0.c64)))OR(t0.c64))) IS TRUE)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((((((t0.c64)AND(t0.c64)))OR(t0.c64))) IS TRUE)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((((((t0.c64)AND(t0.c64)))OR(t0.c64))) IS TRUE)) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (MAX(SUM(AVG(t0.c64))) IN (COUNT(*), CASE MIN(t0.c64)  WHEN COUNT(*) THEN COUNT(t0.c64) WHEN t0.c64 THEN x'' WHEN NULL THEN SUM(TOTAL(t0.c64)) END)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((MAX(SUM(AVG(t0.c64))) IN (COUNT(*), CASE MIN(t0.c64)  WHEN COUNT(*) THEN COUNT(t0.c64) WHEN t0.c64 THEN x'' WHEN NULL THEN SUM(TOTAL(t0.c64)) END)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((MAX(SUM(AVG(t0.c64))) IN (COUNT(*), CASE MIN(t0.c64)  WHEN COUNT(*) THEN COUNT(t0.c64) WHEN t0.c64 THEN x'' WHEN NULL THEN SUM(TOTAL(t0.c64)) END))) ISNULL);
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (t0.c64) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (t0.c64))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((t0.c64) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (t0.c64) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (t0.c64))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 END)OR(((t0.c64)OR(t0.c64)))))OR(ABS(t0.c64)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 END)OR(((t0.c64)OR(t0.c64)))))OR(ABS(t0.c64)))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 END)OR(((t0.c64)OR(t0.c64)))))OR(ABS(t0.c64)))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((t0.c64)) BETWEEN ((GROUP_CONCAT(AVG(TOTAL(t0.c64))))) AND ((GROUP_CONCAT(SUM(t0.c64))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((((t0.c64)) BETWEEN ((GROUP_CONCAT(AVG(TOTAL(t0.c64))))) AND ((GROUP_CONCAT(SUM(t0.c64))))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((t0.c64)) BETWEEN ((GROUP_CONCAT(AVG(TOTAL(t0.c64))))) AND ((GROUP_CONCAT(SUM(t0.c64)))))) ISNULL);
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE (((SQLITE_VERSION())OR((t0.c64 IN ())))) UNION ALL SELECT * FROM t0 WHERE ((NOT (((SQLITE_VERSION())OR((t0.c64 IN ())))))) UNION ALL SELECT ALL * FROM t0 WHERE (((((SQLITE_VERSION())OR((t0.c64 IN ())))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (CASE ((((t0.c64)AND(t0.c64)))AND(t0.c64))  WHEN (((t0.c64, '220003471', t0.c64)) NOT BETWEEN ((t0.c64, t0.c64, x'')) AND ((t0.c64, t0.c64, t0.c64))) THEN ((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) WHEN (((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64))) THEN 0.27021508642364167 WHEN (NOT (t0.c64)) THEN (t0.c64 IN (t0.c64)) END) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (CASE ((((t0.c64)AND(t0.c64)))AND(t0.c64))  WHEN (((t0.c64, '220003471', t0.c64)) NOT BETWEEN ((t0.c64, t0.c64, x'')) AND ((t0.c64, t0.c64, t0.c64))) THEN ((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) WHEN (((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64))) THEN 0.27021508642364167 WHEN (NOT (t0.c64)) THEN (t0.c64 IN (t0.c64)) END))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((CASE ((((t0.c64)AND(t0.c64)))AND(t0.c64))  WHEN (((t0.c64, '220003471', t0.c64)) NOT BETWEEN ((t0.c64, t0.c64, x'')) AND ((t0.c64, t0.c64, t0.c64))) THEN ((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) WHEN (((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64))) THEN 0.27021508642364167 WHEN (NOT (t0.c64)) THEN (t0.c64 IN (t0.c64)) END) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((t0.c64 COLLATE RTRIM IN ())) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((t0.c64 COLLATE RTRIM IN ())))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((t0.c64 COLLATE RTRIM IN ())) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MIN(COUNT(*)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MIN(COUNT(*)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN(COUNT(*))) ISNULL);
SELECT TOTAL(((((((((((t0.c64)AND(t0.c64)))OR(t0.c64)))AND(x'')))OR(t0.c64)))<=(CASE t0.c64  WHEN t0.c64 THEN t0.c64 END))) FROM t0 ORDER BY ((t0.c64) ISNULL)  NULLS FIRST, ((((t0.c64)<<(t0.c64))) NOT BETWEEN ((((t0.c64, NULL, t0.c64)) NOT BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, x'4150')))) AND (INSTR(t0.c64, t0.c64)));
SELECT * FROM t0;
SELECT * FROM t0 WHERE (((LAST_INSERT_ROWID())==(CAST(t0.c64 AS INTEGER)))) UNION ALL SELECT * FROM t0 WHERE ((NOT (((LAST_INSERT_ROWID())==(CAST(t0.c64 AS INTEGER)))))) UNION ALL SELECT * FROM t0 WHERE (((((LAST_INSERT_ROWID())=(CAST(t0.c64 AS INTEGER)))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (CAST((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))) AS REAL)) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (CAST((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))) AS REAL)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((CAST((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))) AS REAL)) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64)||(t0.c64)))||(((((((((t0.c64)AND(0xffffffffaf70c32f)))OR(0X5e6559a7)))OR(t0.c64)))AND(t0.c64))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64)||(t0.c64)))||(((((((((t0.c64)AND(0Xffffffffaf70c32f)))OR(0X5e6559a7)))OR(t0.c64)))AND(t0.c64))))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((((t0.c64)||(t0.c64)))||(((((((((t0.c64)AND(0Xffffffffaf70c32f)))OR(0x5e6559a7)))OR(t0.c64)))AND(t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING AVG(((t0.c64)AND(AVG(t0.c64)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (AVG(((t0.c64)AND(AVG(t0.c64)))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((AVG(((t0.c64)AND(AVG(t0.c64))))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (((((-1623902290)AND((((t0.c64))>=((t0.c64))))))OR(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((-1623902290)AND((((t0.c64))>=((t0.c64))))))OR(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((((((-1623902290)AND((((t0.c64))>=((t0.c64))))))OR(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ((((((((t0.c64)OR(t0.c64)))OR(t0.c64))))>((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ((((((((t0.c64)OR(t0.c64)))OR(t0.c64))))>((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((((((((((t0.c64)OR(t0.c64)))OR(t0.c64))))>((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (t0.c64) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (t0.c64))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((t0.c64) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING MIN(CASE MIN(t0.c64)  WHEN t0.c64 THEN SUM(TOTAL(t0.c64)) WHEN t0.c64 THEN COUNT(*) WHEN COUNT(*) THEN t0.c64 ELSE MAX(AVG(t0.c64)) END) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MIN(CASE MIN(t0.c64)  WHEN t0.c64 THEN SUM(TOTAL(t0.c64)) WHEN t0.c64 THEN COUNT(*) WHEN COUNT(*) THEN t0.c64 ELSE MAX(AVG(t0.c64)) END))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN(CASE MIN(t0.c64)  WHEN t0.c64 THEN SUM(TOTAL(t0.c64)) WHEN t0.c64 THEN COUNT(*) WHEN COUNT(*) THEN t0.c64 ELSE MAX(AVG(t0.c64)) END)) ISNULL);
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE (((NULL) IS TRUE)) UNION ALL SELECT * FROM t0 WHERE ((NOT (((NULL) IS TRUE)))) UNION ALL SELECT ALL * FROM t0 WHERE (((((NULL) IS TRUE)) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (NULL) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (NULL))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((NULL) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((((t0.c64)>=(x''))) ISNULL)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64)>=(x''))) ISNULL)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((((t0.c64)>=(x''))) ISNULL)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING 0.2875894780776691 UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (0.2875894780776691)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((0.2875894780776691) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING 0.2875894780776691 UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (0.2875894780776691)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((0.2875894780776691) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (ABS(DISTINCT CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN 'Wc' ELSE t0.c64 END)) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (ABS(DISTINCT CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN 'Wc' ELSE t0.c64 END)))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((ABS(DISTINCT CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN 'Wc' ELSE t0.c64 END)) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ((((896901890) IS FALSE) IN (CAST(t0.c64 AS REAL), CASE t0.c64  WHEN t0.c64 THEN t0.c64 END, t0.c64))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ((((896901890) IS FALSE) IN (CAST(t0.c64 AS REAL), CASE t0.c64  WHEN t0.c64 THEN t0.c64 END, t0.c64))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((((((896901890) IS FALSE) IN (CAST(t0.c64 AS REAL), CASE t0.c64  WHEN t0.c64 THEN t0.c64 END, t0.c64))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (1309706600) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (1309706600))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((1309706600) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 NOT INDEXED GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING SUM(MIN(t0.c64)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (SUM(MIN(t0.c64)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM(MIN(t0.c64))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE ((((t0.c64) NOT NULL) IN ())) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((((t0.c64) NOT NULL) IN ())))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((((((t0.c64) NOT NULL) IN ())) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ((t0.c64 COLLATE NOCASE IN (0.5324236586274375))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ((t0.c64 COLLATE NOCASE IN (0.5324236586274375))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((((t0.c64 COLLATE NOCASE IN (0.5324236586274375))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((((t0.c64, t0.c64, t0.c64)) NOT BETWEEN ((((t0.c64)<<(t0.c64)), ((t0.c64) NOTNULL), CASE WHEN 0.7134226043833358 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN NULL THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN 'Y#?\n<#쭀>' THEN t0.c64 END)) AND ((CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END, ((t0.c64) IS FALSE), ((t0.c64) ISNULL))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((((t0.c64, t0.c64, t0.c64)) NOT BETWEEN ((((t0.c64)<<(t0.c64)), ((t0.c64) NOTNULL), CASE WHEN 0.7134226043833358 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN NULL THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN 'Y#?\n<#쭀>' THEN t0.c64 END)) AND ((CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END, ((t0.c64) IS FALSE), ((t0.c64) ISNULL))))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((((t0.c64, t0.c64, t0.c64)) NOT BETWEEN ((((t0.c64)<<(t0.c64)), ((t0.c64) NOTNULL), CASE WHEN 0.7134226043833358 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN NULL THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN 'Y#?\n<#쭀>' THEN t0.c64 END)) AND ((CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END, ((t0.c64) IS FALSE), ((t0.c64) ISNULL))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING MAX(SUM(MIN(MIN(2055157691)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MAX(SUM(MIN(MIN(2055157691)))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MAX(SUM(MIN(MIN(2055157691))))) ISNULL);
SELECT * FROM t0;
SELECT * FROM t0 WHERE ((((NOT (t0.c64))) IS FALSE)) UNION ALL SELECT * FROM t0 WHERE ((NOT ((((NOT (t0.c64))) IS FALSE)))) UNION ALL SELECT ALL * FROM t0 WHERE ((((((NOT (t0.c64))) IS FALSE)) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (TRIM(DISTINCT ((((((((t0.c64)OR(t0.c64)))OR(3.88761033E8)))OR(t0.c64)))OR('p')))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (TRIM(DISTINCT ((((((((t0.c64)OR(t0.c64)))OR(3.88761033E8)))OR(t0.c64)))OR('p')))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((TRIM(DISTINCT ((((((((t0.c64)OR(t0.c64)))OR(3.88761033E8)))OR(t0.c64)))OR('p')))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((((RTRIM(t0.c64))OR(NULL)))AND(CAST(x'' AS INTEGER)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((RTRIM(t0.c64))OR(NULL)))AND(CAST(x'' AS INTEGER)))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((((RTRIM(t0.c64))OR(NULL)))AND(CAST(x'' AS INTEGER)))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((AVG(t0.c64), MAX(GROUP_CONCAT(t0.c64)), t0.c64)) BETWEEN ((x'', COUNT(*) COLLATE RTRIM, ((t0.c64) NOTNULL))) AND ((((GROUP_CONCAT(t0.c64)) IS FALSE), (+ (GROUP_CONCAT(AVG(MIN(t0.c64))))), ((t0.c64)&(t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((((AVG(t0.c64), MAX(GROUP_CONCAT(t0.c64)), t0.c64)) BETWEEN ((x'', COUNT(*) COLLATE RTRIM, ((t0.c64) NOTNULL))) AND ((((GROUP_CONCAT(t0.c64)) IS FALSE), (+ (GROUP_CONCAT(AVG(MIN(t0.c64))))), ((t0.c64)&(t0.c64))))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((AVG(t0.c64), MAX(GROUP_CONCAT(t0.c64)), t0.c64)) BETWEEN ((x'', COUNT(*) COLLATE RTRIM, ((t0.c64) NOTNULL))) AND ((((GROUP_CONCAT(t0.c64)) IS FALSE), (+ (GROUP_CONCAT(AVG(MIN(t0.c64))))), ((t0.c64)&(t0.c64)))))) ISNULL);
SELECT * FROM t0;
SELECT * FROM t0 WHERE (t0.c64) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (t0.c64))) UNION ALL SELECT ALL * FROM t0 WHERE (((t0.c64) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (TOTAL_CHANGES()) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (TOTAL_CHANGES()))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((TOTAL_CHANGES()) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((CASE WHEN t0.c64 THEN t0.c64 END)>>(CASE WHEN t0.c64 THEN '' ELSE t0.c64 END))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((CASE WHEN t0.c64 THEN t0.c64 END)>>(CASE WHEN t0.c64 THEN '' ELSE t0.c64 END))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((CASE WHEN t0.c64 THEN t0.c64 END)>>(CASE WHEN t0.c64 THEN '' ELSE t0.c64 END))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING AVG(TOTAL(GROUP_CONCAT(SUM(t0.c64)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (AVG(TOTAL(GROUP_CONCAT(SUM(t0.c64)))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((AVG(TOTAL(GROUP_CONCAT(SUM(t0.c64))))) ISNULL);
SELECT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE ((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) IN ())) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT ((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) IN ())))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) IN ())) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((((((((((((t0.c64)OR(NULL)))AND(t0.c64)))OR(t0.c64)))AND(t0.c64))))>((((((t0.c64)AND(t0.c64)))OR(t0.c64)))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((((((((((((t0.c64)OR(NULL)))AND(t0.c64)))OR(t0.c64)))AND(t0.c64))))>((((((t0.c64)AND(t0.c64)))OR(t0.c64)))))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((((((((((((t0.c64)OR(NULL)))AND(t0.c64)))OR(t0.c64)))AND(t0.c64))))>((((((t0.c64)AND(t0.c64)))OR(t0.c64)))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (t0.c64) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (t0.c64))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((t0.c64) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MIN(t0.c64 COLLATE RTRIM) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MIN(t0.c64 COLLATE RTRIM))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN(t0.c64 COLLATE RTRIM)) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MIN(t0.c64 COLLATE RTRIM) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MIN(t0.c64 COLLATE RTRIM))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN(t0.c64 COLLATE RTRIM)) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL MIN(CAST((- (t0.c64)) AS REAL)) FROM t0 ORDER BY UPPER(((t0.c64)IS NOT(t0.c64)));
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN 'Jk\rO''' WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)>(((((t0.c64)OR(t0.c64)))AND('-1091175929'))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN 'Jk\rO''' WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)>(((((t0.c64)OR(t0.c64)))AND('-1091175929'))))))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN 'Jk\rO''' WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)>(((((t0.c64)OR(t0.c64)))AND('-1091175929'))))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64)<(t0.c64))) BETWEEN (((t0.c64)+(t0.c64))) AND ((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64)<(t0.c64))) BETWEEN (((t0.c64)+(t0.c64))) AND ((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((((t0.c64)<(t0.c64))) BETWEEN (((t0.c64)+(t0.c64))) AND ((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((t0.c64) NOT NULL)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((t0.c64) NOT NULL)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((t0.c64) NOT NULL)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((COUNT(TOTAL(x'b455')))) BETWEEN ((TOTAL(GROUP_CONCAT(MIN(SUM(AVG(t0.c64))))))) AND ((COUNT(GROUP_CONCAT(AVG(t0.c64)))))))>((((MIN(TOTAL(t0.c64)))) NOT BETWEEN ((t0.c64)) AND ((TOTAL(t0.c64)))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((((((COUNT(TOTAL(x'b455')))) BETWEEN ((TOTAL(GROUP_CONCAT(MIN(SUM(AVG(t0.c64))))))) AND ((COUNT(GROUP_CONCAT(AVG(t0.c64)))))))>((((MIN(TOTAL(t0.c64)))) NOT BETWEEN ((t0.c64)) AND ((TOTAL(t0.c64)))))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((((COUNT(TOTAL(x'b455')))) BETWEEN ((TOTAL(GROUP_CONCAT(MIN(SUM(AVG(t0.c64))))))) AND ((COUNT(GROUP_CONCAT(AVG(t0.c64)))))))>((((MIN(TOTAL(t0.c64)))) NOT BETWEEN ((t0.c64)) AND ((TOTAL(t0.c64))))))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (LIKE(CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END, NULLIF(t0.c64, t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (LIKE(CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END, NULLIF(t0.c64, t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((LIKE(CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END, NULLIF(t0.c64, t0.c64))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ((((t0.c64)) NOT BETWEEN ((LOWER(DISTINCT t0.c64))) AND ((t0.c64 COLLATE RTRIM)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ((((t0.c64)) NOT BETWEEN ((LOWER(DISTINCT t0.c64))) AND ((t0.c64 COLLATE RTRIM)))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((((((t0.c64)) NOT BETWEEN ((LOWER(DISTINCT t0.c64))) AND ((t0.c64 COLLATE RTRIM)))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((t0.c64 COLLATE RTRIM) ISNULL)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((t0.c64 COLLATE RTRIM) ISNULL)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64 COLLATE RTRIM) ISNULL)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((COUNT(*))>>(t0.c64)) IN ()) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((((COUNT(*))>>(t0.c64)) IN ()))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((COUNT(*))>>(t0.c64)) IN ())) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((COUNT(*))>>(t0.c64)) IN ()) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((((COUNT(*))>>(t0.c64)) IN ()))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((COUNT(*))>>(t0.c64)) IN ())) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE (((t0.c64)<<(CAST(t0.c64 AS TEXT)))) UNION ALL SELECT * FROM t0 WHERE ((NOT (((t0.c64)<<(CAST(t0.c64 AS TEXT)))))) UNION ALL SELECT ALL * FROM t0 WHERE (((((t0.c64)<<(CAST(t0.c64 AS TEXT)))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 NOT INDEXED WHERE (((CASE WHEN t0.c64 THEN t0.c64 ELSE '1347959565' END) BETWEEN (t0.c64 COLLATE NOCASE) AND (CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((CASE WHEN t0.c64 THEN t0.c64 ELSE '1347959565' END) BETWEEN (t0.c64 COLLATE NOCASE) AND (CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))))) UNION SELECT DISTINCT * FROM t0 WHERE (((((CASE WHEN t0.c64 THEN t0.c64 ELSE '1347959565' END) BETWEEN (t0.c64 COLLATE NOCASE) AND (CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE ((UPPER(t0.c64) IN ((~ (t0.c64)), ((t0.c64)>=(t0.c64))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT ((UPPER(t0.c64) IN ((~ (t0.c64)), ((t0.c64)>=(t0.c64))))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((UPPER(t0.c64) IN ((~ (t0.c64)), ((t0.c64)>=(t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING CASE LIKE(t0.c64, t0.c64)  WHEN SUM(t0.c64) THEN COUNT(t0.c64) ELSE MAX(GROUP_CONCAT(t0.c64)) END UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CASE LIKE(t0.c64, t0.c64)  WHEN SUM(t0.c64) THEN COUNT(t0.c64) ELSE MAX(GROUP_CONCAT(t0.c64)) END)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CASE LIKE(t0.c64, t0.c64)  WHEN SUM(t0.c64) THEN COUNT(t0.c64) ELSE MAX(GROUP_CONCAT(t0.c64)) END) ISNULL);
SELECT * FROM t0;
SELECT * FROM t0 WHERE ((CASE t0.c64  WHEN t0.c64 THEN t0.c64 END IN (((NULL) BETWEEN (0.24018933350586336) AND (t0.c64))))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT ((CASE t0.c64  WHEN t0.c64 THEN t0.c64 END IN (((NULL) BETWEEN (0.24018933350586336) AND (t0.c64))))))) UNION ALL SELECT ALL * FROM t0 WHERE ((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 END IN (((NULL) BETWEEN (0.24018933350586336) AND (t0.c64))))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (CAST(((((((((t0.c64)AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))OR(t0.c64)) AS REAL)) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (CAST(((((((((t0.c64)AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))OR(t0.c64)) AS REAL)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((CAST(((((((((t0.c64)AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))OR(t0.c64)) AS REAL)) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((UNLIKELY(DISTINCT t0.c64) IN ())) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((UNLIKELY(DISTINCT t0.c64) IN ())))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((((UNLIKELY(DISTINCT t0.c64) IN ())) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING CASE WHEN MAX(COUNT(*)) THEN GROUP_CONCAT(MIN(t0.c64)) END UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CASE WHEN MAX(COUNT(*)) THEN GROUP_CONCAT(MIN(t0.c64)) END)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CASE WHEN MAX(COUNT(*)) THEN GROUP_CONCAT(MIN(t0.c64)) END) ISNULL);
SELECT * FROM t0;
SELECT * FROM t0 WHERE (((CHAR(t0.c64)) BETWEEN (CASE t0.c64  WHEN t0.c64 THEN x'' END) AND ((NOT (t0.c64))))) UNION ALL SELECT * FROM t0 WHERE ((NOT (((CHAR(t0.c64)) BETWEEN (CASE t0.c64  WHEN t0.c64 THEN x'' END) AND ((NOT (t0.c64))))))) UNION ALL SELECT ALL * FROM t0 WHERE (((((CHAR(t0.c64)) BETWEEN (CASE t0.c64  WHEN t0.c64 THEN x'' END) AND ((NOT (t0.c64))))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (CAST(t0.c64 COLLATE NOCASE AS BLOB)) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (CAST(t0.c64 COLLATE NOCASE AS BLOB)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((CAST(t0.c64 COLLATE NOCASE AS BLOB)) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (json_array_length(t0.c64)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (json_array_length(t0.c64)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((json_array_length(t0.c64)) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (- (GROUP_CONCAT(SUM(t0.c64)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((- (GROUP_CONCAT(SUM(t0.c64)))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((- (GROUP_CONCAT(SUM(t0.c64))))) ISNULL);
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE (0.11545850158492232) UNION ALL SELECT * FROM t0 WHERE ((NOT (0.11545850158492232))) UNION ALL SELECT * FROM t0 WHERE (((0.11545850158492232) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (CAST(((((((((t0.c64)AND('')))AND('TRUE')))OR(t0.c64)))OR(t0.c64)) AS INTEGER)) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (CAST(((((((((t0.c64)AND('')))AND('TRUE')))OR(t0.c64)))OR(t0.c64)) AS INTEGER)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((CAST(((((((((t0.c64)AND('')))AND('TRUE')))OR(t0.c64)))OR(t0.c64)) AS INTEGER)) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (CAST(((t0.c64)<>(t0.c64)) AS INTEGER)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (CAST(((t0.c64)<>(t0.c64)) AS INTEGER)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((CAST(((t0.c64)!=(t0.c64)) AS INTEGER)) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING GROUP_CONCAT((((MAX(GROUP_CONCAT(t0.c64))))=((t0.c64)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (GROUP_CONCAT((((MAX(GROUP_CONCAT(t0.c64))))=((t0.c64)))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((GROUP_CONCAT((((MAX(GROUP_CONCAT(t0.c64))))=((t0.c64))))) ISNULL);
SELECT SUM(((((t0.c64)-(t0.c64)))>>(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))) FROM t0 ORDER BY (((t0.c64)!=(t0.c64)) IN ()) ASC;
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (((('1103073233')) BETWEEN ((CAST(t0.c64 AS TEXT))) AND (((((t0.c64))>((t0.c64))))))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((('1103073233')) BETWEEN ((CAST(t0.c64 AS TEXT))) AND (((((t0.c64))>((t0.c64))))))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((((('1103073233')) BETWEEN ((CAST(t0.c64 AS TEXT))) AND (((((t0.c64))>((t0.c64))))))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((0.9213039771488056 IN ((((t0.c64))>((t0.c64)))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((0.9213039771488056 IN ((((t0.c64))>((t0.c64)))))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((0.9213039771488056 IN ((((t0.c64))>((t0.c64)))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((((CASE WHEN 0.6462760486874116 THEN t0.c64 ELSE t0.c64 END))<=(((((t0.c64))>((-117565166))))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT ((((CASE WHEN 0.6462760486874116 THEN t0.c64 ELSE t0.c64 END))<=(((((t0.c64))>((-117565166))))))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((((((CASE WHEN 0.6462760486874116 THEN t0.c64 ELSE t0.c64 END))<=(((((t0.c64))>((-117565166))))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING SUM(GROUP_CONCAT(COUNT(*))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (SUM(GROUP_CONCAT(COUNT(*))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM(GROUP_CONCAT(COUNT(*)))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (STRFTIME(((t0.c64) IS FALSE), ((t0.c64) NOTNULL), CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (STRFTIME(((t0.c64) IS FALSE), ((t0.c64) NOTNULL), CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((STRFTIME(((t0.c64) IS FALSE), ((t0.c64) NOTNULL), CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((CASE t0.c64  WHEN t0.c64 THEN x'' END)>=(1910325610))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((CASE t0.c64  WHEN t0.c64 THEN x'' END)>=(1910325610))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((CASE t0.c64  WHEN t0.c64 THEN x'' END)>=(1910325610))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((((((t0.c64) IS FALSE))AND((((('')OR(t0.c64)))AND(t0.c64)))))OR((t0.c64 IN ())))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((((t0.c64) IS FALSE))AND((((('')OR(t0.c64)))AND(t0.c64)))))OR((t0.c64 IN ())))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 NOT INDEXED WHERE (((((((((t0.c64) IS FALSE))AND((((('')OR(t0.c64)))AND(t0.c64)))))OR((t0.c64 IN ())))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING SUM(CASE t0.c64  WHEN TOTAL(MAX(AVG(SUM(t0.c64)))) THEN t0.c64 ELSE t0.c64 END) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (SUM(CASE t0.c64  WHEN TOTAL(MAX(AVG(SUM(t0.c64)))) THEN t0.c64 ELSE t0.c64 END))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM(CASE t0.c64  WHEN TOTAL(MAX(AVG(SUM(t0.c64)))) THEN t0.c64 ELSE t0.c64 END)) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (CAST('yumel*' AS REAL)) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (CAST('yumel*' AS REAL)))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((CAST('yumel*' AS REAL)) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((CAST(t0.c64 AS TEXT)) NOTNULL)) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((CAST(t0.c64 AS TEXT)) NOTNULL)))) UNION SELECT DISTINCT * FROM t0 WHERE (((((CAST(t0.c64 AS TEXT)) NOTNULL)) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 NOT INDEXED WHERE ((((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) IN ())) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT ((((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) IN ())))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) IN ())) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING MIN(TOTAL(t0.c64)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MIN(TOTAL(t0.c64)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN(TOTAL(t0.c64))) ISNULL);
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (CAST(t0.c64 AS REAL)) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CAST(t0.c64 AS REAL)))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((CAST(t0.c64 AS REAL)) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (CAST(TYPEOF(t0.c64) AS NUMERIC)) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (CAST(TYPEOF(t0.c64) AS NUMERIC)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((CAST(TYPEOF(t0.c64) AS NUMERIC)) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 END) BETWEEN ((t0.c64 IN ())) AND (((t0.c64) NOTNULL)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 END) BETWEEN ((t0.c64 IN ())) AND (((t0.c64) NOTNULL)))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 END) BETWEEN ((t0.c64 IN ())) AND (((t0.c64) NOTNULL)))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (TOTAL(TOTAL(SUM(SUM(COUNT(*))))) IN ()) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((TOTAL(TOTAL(SUM(SUM(COUNT(*))))) IN ()))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((TOTAL(TOTAL(SUM(SUM(COUNT(*))))) IN ())) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (TOTAL(TOTAL(SUM(SUM(COUNT(*))))) IN ()) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((TOTAL(TOTAL(SUM(SUM(COUNT(*))))) IN ()))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((TOTAL(TOTAL(SUM(SUM(COUNT(*))))) IN ())) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE (CAST(CASE WHEN t0.c64 THEN t0.c64 WHEN '-1033014312' THEN t0.c64 WHEN t0.c64 THEN t0.c64 END AS REAL)) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (CAST(CASE WHEN t0.c64 THEN t0.c64 WHEN '-1033014312' THEN t0.c64 WHEN t0.c64 THEN t0.c64 END AS REAL)))) UNION ALL SELECT ALL * FROM t0 WHERE (((CAST(CASE WHEN t0.c64 THEN t0.c64 WHEN '-1033014312' THEN t0.c64 WHEN t0.c64 THEN t0.c64 END AS REAL)) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((((((t0.c64)AND(t0.c64)))OR(t0.c64)))GLOB((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((((((t0.c64)AND(t0.c64)))OR(t0.c64)))GLOB((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((((((t0.c64)AND(t0.c64)))OR(t0.c64)))GLOB((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (CAST(t0.c64 COLLATE RTRIM AS BLOB)) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CAST(t0.c64 COLLATE RTRIM AS BLOB)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((CAST(t0.c64 COLLATE RTRIM AS BLOB)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(COUNT(AVG(MIN(t0.c64)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(COUNT(AVG(MIN(t0.c64)))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(COUNT(AVG(MIN(t0.c64))))) ISNULL);
SELECT MAX(NULL) FROM t0;
SELECT * FROM t0;
SELECT * FROM t0 WHERE (CASE WHEN (~ (t0.c64)) THEN (- (t0.c64)) ELSE (((t0.c64))<((t0.c64))) END) UNION ALL SELECT * FROM t0 WHERE ((NOT (CASE WHEN (~ (t0.c64)) THEN (- (t0.c64)) ELSE (((t0.c64))<((t0.c64))) END))) UNION ALL SELECT ALL * FROM t0 WHERE (((CASE WHEN (~ (t0.c64)) THEN (- (t0.c64)) ELSE (((t0.c64))<((t0.c64))) END) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((((0X25ed9e8c, t0.c64, t0.c64, t0.c64, t0.c64)) BETWEEN ((((t0.c64) BETWEEN (t0.c64) AND (t0.c64)), ((t0.c64) NOTNULL), (t0.c64 IN ()), (~ (t0.c64)), ((((t0.c64)OR(t0.c64)))OR(t0.c64)))) AND ((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)), ((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)), ((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)), CAST(t0.c64 AS INTEGER), (~ (t0.c64)))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((((0X25ed9e8c, t0.c64, t0.c64, t0.c64, t0.c64)) BETWEEN ((((t0.c64) BETWEEN (t0.c64) AND (t0.c64)), ((t0.c64) NOTNULL), (t0.c64 IN ()), (~ (t0.c64)), ((((t0.c64)OR(t0.c64)))OR(t0.c64)))) AND ((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)), ((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)), ((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)), CAST(t0.c64 AS INTEGER), (~ (t0.c64)))))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((((0x25ed9e8c, t0.c64, t0.c64, t0.c64, t0.c64)) BETWEEN ((((t0.c64) BETWEEN (t0.c64) AND (t0.c64)), ((t0.c64) NOTNULL), (t0.c64 IN ()), (~ (t0.c64)), ((((t0.c64)OR(t0.c64)))OR(t0.c64)))) AND ((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)), ((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)), ((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)), CAST(t0.c64 AS INTEGER), (~ (t0.c64)))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((NOT (ABS(DISTINCT t0.c64)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT ((NOT (ABS(DISTINCT t0.c64)))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((NOT (ABS(DISTINCT t0.c64)))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING t0.c64 UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (t0.c64)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((t0.c64) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING t0.c64 UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (t0.c64)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((t0.c64) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT SUM(((~ (t0.c64)) IN ())) FROM t0 ORDER BY (((((t0.c64) IS FALSE)))<=((x'')))  NULLS FIRST;
SELECT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (((CASE WHEN t0.c64 THEN t0.c64 END) IS FALSE)) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((CASE WHEN t0.c64 THEN t0.c64 END) IS FALSE)))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((((CASE WHEN t0.c64 THEN t0.c64 END) IS FALSE)) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (t0.c64) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (t0.c64))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((NULL)IS NOT(t0.c64 COLLATE BINARY))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((NULL)IS NOT(t0.c64 COLLATE BINARY))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((NULL)IS NOT(t0.c64 COLLATE BINARY))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING GROUP_CONCAT(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (GROUP_CONCAT(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((GROUP_CONCAT(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING GROUP_CONCAT(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (GROUP_CONCAT(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((GROUP_CONCAT(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT * FROM t0;
SELECT ALL * FROM t0 WHERE (CAST(CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END AS NUMERIC)) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (CAST(CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END AS NUMERIC)))) UNION ALL SELECT * FROM t0 WHERE (((CAST(CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END AS NUMERIC)) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((((t0.c64) NOTNULL)) NOT NULL)) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((((t0.c64) NOTNULL)) NOT NULL)))) UNION SELECT DISTINCT * FROM t0 WHERE (((((((t0.c64) NOTNULL)) NOT NULL)) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (NULLIF(DISTINCT ((t0.c64) IS TRUE), (('L0')/(t0.c64)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (NULLIF(DISTINCT ((t0.c64) IS TRUE), (('L0')/(t0.c64)))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((NULLIF(DISTINCT ((t0.c64) IS TRUE), (('L0')/(t0.c64)))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (- (MAX(MIN(t0.c64)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((- (MAX(MIN(t0.c64)))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((- (MAX(MIN(t0.c64))))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (t0.c64) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((t0.c64) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((((0.44490155945975196)AND(t0.c64)))OR(CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((((0.44490155945975196)AND(t0.c64)))OR(CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END))))) UNION SELECT DISTINCT * FROM t0 WHERE (((((((0.44490155945975196)AND(t0.c64)))OR(CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((((t0.c64)OR(t0.c64)))<=(((t0.c64) ISNULL)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64)OR(t0.c64)))<=(((t0.c64) ISNULL)))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((((t0.c64)OR(t0.c64)))<=(((t0.c64) ISNULL)))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((CASE SUM(SUM(AVG(t0.c64)))  WHEN t0.c64 THEN COUNT(*) WHEN COUNT(GROUP_CONCAT(t0.c64)) THEN t0.c64 WHEN SUM(AVG(t0.c64)) THEN t0.c64 ELSE t0.c64 END)AND(MIN(t0.c64))))OR(0.07320126521730796)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((((CASE SUM(SUM(AVG(t0.c64)))  WHEN t0.c64 THEN COUNT(*) WHEN COUNT(GROUP_CONCAT(t0.c64)) THEN t0.c64 WHEN SUM(AVG(t0.c64)) THEN t0.c64 ELSE t0.c64 END)AND(MIN(t0.c64))))OR(0.07320126521730796)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((CASE SUM(SUM(AVG(t0.c64)))  WHEN t0.c64 THEN COUNT(*) WHEN COUNT(GROUP_CONCAT(t0.c64)) THEN t0.c64 WHEN SUM(AVG(t0.c64)) THEN t0.c64 ELSE t0.c64 END)AND(MIN(t0.c64))))OR(0.07320126521730796))) ISNULL);
SELECT ALL MIN(((0.479305290180568) NOT BETWEEN (t0.c64) AND (t0.c64)) COLLATE NOCASE) FROM t0;
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (CAST(t0.c64 AS TEXT) COLLATE RTRIM) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (CAST(t0.c64 AS TEXT) COLLATE RTRIM))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((CAST(t0.c64 AS TEXT) COLLATE RTRIM) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((+ (((t0.c64)+(0.18787038933745592))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((+ (((t0.c64)+(0.18787038933745592))))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((+ (((t0.c64)+(0.18787038933745592))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((((t0.c64)) NOT BETWEEN ((((t0.c64)LIKE(t0.c64)))) AND ((t0.c64)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((((t0.c64)) NOT BETWEEN ((((t0.c64)LIKE(t0.c64)))) AND ((t0.c64)))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((((((t0.c64)) NOT BETWEEN ((((t0.c64)LIKE(t0.c64)))) AND ((t0.c64)))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((GROUP_CONCAT(-1911129076))+(MAX(SUM(SUM(t0.c64))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((GROUP_CONCAT(-1911129076))+(MAX(SUM(SUM(t0.c64))))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((GROUP_CONCAT(-1911129076))+(MAX(SUM(SUM(t0.c64)))))) ISNULL);
SELECT SUM(((((((((CAST(t0.c64 AS BLOB))AND(t0.c64 COLLATE RTRIM)))OR(((t0.c64)LIKE('-1109681467')))))OR(CASE WHEN t0.c64 THEN t0.c64 END)))OR(((t0.c64)-(x''))))) FROM t0 ORDER BY (NOT ((((t0.c64, t0.c64, t0.c64))!=((t0.c64, t0.c64, t0.c64))))) DESC;
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE (t0.c64) UNION ALL SELECT * FROM t0 WHERE ((NOT (t0.c64))) UNION ALL SELECT ALL * FROM t0 WHERE (((t0.c64) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (t0.c64) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (t0.c64))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CAST((~ (t0.c64)) AS REAL)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (CAST((~ (t0.c64)) AS REAL)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((CAST((~ (t0.c64)) AS REAL)) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(*) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(*))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(*) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(*))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE (((((t0.c64) IS TRUE))IS NOT(CAST(t0.c64 AS TEXT)))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (((((t0.c64) IS TRUE))IS NOT(CAST(t0.c64 AS TEXT)))))) UNION ALL SELECT ALL * FROM t0 WHERE (((((((t0.c64) IS TRUE))IS NOT(CAST(t0.c64 AS TEXT)))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ('374455450') UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ('374455450'))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((('374455450') ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CASE (+ (t0.c64))  WHEN (- (t0.c64)) THEN ('0v' IN (t0.c64)) END) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CASE (+ (t0.c64))  WHEN (- (t0.c64)) THEN ('0v' IN (t0.c64)) END))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((CASE (+ (t0.c64))  WHEN (- (t0.c64)) THEN ('0v' IN (t0.c64)) END) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(COUNT(MIN(GROUP_CONCAT(SUM(TOTAL(t0.c64)))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(COUNT(MIN(GROUP_CONCAT(SUM(TOTAL(t0.c64)))))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(COUNT(MIN(GROUP_CONCAT(SUM(TOTAL(t0.c64))))))) ISNULL);
SELECT ALL TOTAL(CAST((0xffffffffd64e66f9 IN ()) AS REAL)) FROM t0 ORDER BY t0.c64  NULLS LAST, ((((((t0.c64)OR(t0.c64)))AND(t0.c64)))/(t0.c64 COLLATE RTRIM)) DESC  NULLS LAST;
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE ((+ (((((t0.c64)OR(t0.c64)))OR(t0.c64))))) UNION ALL SELECT * FROM t0 WHERE ((NOT ((+ (((((t0.c64)OR(t0.c64)))OR(t0.c64))))))) UNION ALL SELECT * FROM t0 WHERE ((((+ (((((t0.c64)OR(t0.c64)))OR(t0.c64))))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ((((((t0.c64))>=((t0.c64)))) IS TRUE)) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ((((((t0.c64))>=((t0.c64)))) IS TRUE)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((((((((t0.c64))>=((t0.c64)))) IS TRUE)) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE ((((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))) NOT BETWEEN (CAST(' ' AS TEXT)) AND (((((t0.c64)OR(t0.c64)))AND(t0.c64))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))) NOT BETWEEN (CAST(' ' AS TEXT)) AND (((((t0.c64)OR(t0.c64)))AND(t0.c64))))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((((((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))) NOT BETWEEN (CAST(' ' AS TEXT)) AND (((((t0.c64)OR(t0.c64)))AND(t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING t0.c64 UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (t0.c64)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((t0.c64) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING t0.c64 UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (t0.c64)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((t0.c64) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (((CASE WHEN x'1f1c' THEN t0.c64 ELSE t0.c64 END) NOT NULL)) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((CASE WHEN x'1f1c' THEN t0.c64 ELSE t0.c64 END) NOT NULL)))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((((CASE WHEN x'1f1c' THEN t0.c64 ELSE t0.c64 END) NOT NULL)) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((((t0.c64 COLLATE BINARY, CAST(t0.c64 AS REAL), (((t0.c64, NULL, t0.c64))<=((t0.c64, t0.c64, t0.c64)))))>=((CAST(t0.c64 AS NUMERIC), CAST(t0.c64 AS INTEGER), ((t0.c64)||(x'')))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((((t0.c64 COLLATE BINARY, CAST(t0.c64 AS REAL), (((t0.c64, NULL, t0.c64))<=((t0.c64, t0.c64, t0.c64)))))>=((CAST(t0.c64 AS NUMERIC), CAST(t0.c64 AS INTEGER), ((t0.c64)||(x'')))))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((((t0.c64 COLLATE BINARY, CAST(t0.c64 AS REAL), (((t0.c64, NULL, t0.c64))<=((t0.c64, t0.c64, t0.c64)))))>=((CAST(t0.c64 AS NUMERIC), CAST(t0.c64 AS INTEGER), ((t0.c64)||(x'')))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE ((((NOT ('x,''5[Q*'))) IS FALSE)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT ((((NOT ('x,''5[Q*'))) IS FALSE)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((((((NOT ('x,''5[Q*'))) IS FALSE)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING GROUP_CONCAT(COUNT(COUNT(*))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (GROUP_CONCAT(COUNT(COUNT(*))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((GROUP_CONCAT(COUNT(COUNT(*)))) ISNULL);
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE (((((((((t0.c64)AND(t0.c64)))AND(t0.c64)))OR('2082866859')))AND(t0.c64)) COLLATE RTRIM) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (((((((((t0.c64)AND(t0.c64)))AND(t0.c64)))OR('2082866859')))AND(t0.c64)) COLLATE RTRIM))) UNION ALL SELECT * FROM t0 WHERE (((((((((((t0.c64)AND(t0.c64)))AND(t0.c64)))OR('2082866859')))AND(t0.c64)) COLLATE RTRIM) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((((((((t0.c64)AND(0x3d15bf29)))AND(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)))))OR(SQLITE_SOURCE_ID())))AND(((((t0.c64)OR(t0.c64)))AND(t0.c64))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((((((((t0.c64)AND(0x3d15bf29)))AND(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)))))OR(SQLITE_SOURCE_ID())))AND(((((t0.c64)OR(t0.c64)))AND(t0.c64))))))) UNION SELECT DISTINCT * FROM t0 WHERE (((((((((((t0.c64)AND(0X3d15bf29)))AND(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)))))OR(SQLITE_SOURCE_ID())))AND(((((t0.c64)OR(t0.c64)))AND(t0.c64))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (TRIM((t0.c64 IN ()), ((((t0.c64)AND(t0.c64)))AND('727093869')))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (TRIM((t0.c64 IN ()), ((((t0.c64)AND(t0.c64)))AND('727093869')))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((TRIM((t0.c64 IN ()), ((((t0.c64)AND(t0.c64)))AND('727093869')))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((SUM(MIN(GROUP_CONCAT(AVG(AVG(COUNT(t0.c64))))))) BETWEEN (t0.c64) AND (t0.c64))) BETWEEN (COUNT(MIN(MAX(t0.c64)))) AND ((t0.c64 IN ()))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((((SUM(MIN(GROUP_CONCAT(AVG(AVG(COUNT(t0.c64))))))) BETWEEN (t0.c64) AND (t0.c64))) BETWEEN (COUNT(MIN(MAX(t0.c64)))) AND ((t0.c64 IN ()))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((SUM(MIN(GROUP_CONCAT(AVG(AVG(COUNT(t0.c64))))))) BETWEEN (t0.c64) AND (t0.c64))) BETWEEN (COUNT(MIN(MAX(t0.c64)))) AND ((t0.c64 IN ())))) ISNULL);
SELECT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (CAST((((t0.c64))>=((NULL))) AS INTEGER)) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (CAST((((t0.c64))>=((NULL))) AS INTEGER)))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((CAST((((t0.c64))>=((NULL))) AS INTEGER)) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ('') UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (''))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((('') ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((t0.c64) IS TRUE) COLLATE NOCASE) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((t0.c64) IS TRUE) COLLATE NOCASE))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64) IS TRUE) COLLATE NOCASE) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (- (MIN(COUNT(t0.c64)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((- (MIN(COUNT(t0.c64)))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((- (MIN(COUNT(t0.c64))))) ISNULL);
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64)/(t0.c64)))>((t0.c64 IN ())))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64)/(t0.c64)))>((t0.c64 IN ())))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((((((t0.c64)/(t0.c64)))>((t0.c64 IN ())))) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((((CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))>=(((+ (t0.c64)))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((((CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))>=(((+ (t0.c64)))))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((((CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))>=(((+ (t0.c64)))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (CASE ((t0.c64)*(t0.c64))  WHEN ((t0.c64) BETWEEN (t0.c64) AND (1076914757)) THEN ((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) WHEN ((t0.c64)<>(t0.c64)) THEN (x'fc19' IN ()) WHEN t0.c64 COLLATE RTRIM THEN (t0.c64 IN (t0.c64, t0.c64)) ELSE CAST(t0.c64 AS INTEGER) END) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CASE ((t0.c64)*(t0.c64))  WHEN ((t0.c64) BETWEEN (t0.c64) AND (1076914757)) THEN ((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) WHEN ((t0.c64)<>(t0.c64)) THEN (x'fc19' IN ()) WHEN t0.c64 COLLATE RTRIM THEN (t0.c64 IN (t0.c64, t0.c64)) ELSE CAST(t0.c64 AS INTEGER) END))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((CASE ((t0.c64)*(t0.c64))  WHEN ((t0.c64) BETWEEN (t0.c64) AND (1076914757)) THEN ((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) WHEN ((t0.c64)<>(t0.c64)) THEN (x'fc19' IN ()) WHEN t0.c64 COLLATE RTRIM THEN (t0.c64 IN (t0.c64, t0.c64)) ELSE CAST(t0.c64 AS INTEGER) END) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (UNLIKELY(DISTINCT t0.c64) IN ('')) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((UNLIKELY(DISTINCT t0.c64) IN ('')))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((UNLIKELY(DISTINCT t0.c64) IN (''))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (UNLIKELY(DISTINCT t0.c64) IN ('')) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((UNLIKELY(DISTINCT t0.c64) IN ('')))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((UNLIKELY(DISTINCT t0.c64) IN (''))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT * FROM t0;
SELECT * FROM t0 WHERE (0.01391327089620431) UNION ALL SELECT * FROM t0 WHERE ((NOT (0.01391327089620431))) UNION ALL SELECT * FROM t0 WHERE (((0.01391327089620431) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((((t0.c64, t0.c64, t0.c64)) NOT BETWEEN (((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64))), CAST(t0.c64 AS BLOB), (((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64))))) AND ((((t0.c64)>=(t0.c64)), CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END, CASE WHEN t0.c64 THEN t0.c64 ELSE 0.946813425246164 END)))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((((t0.c64, t0.c64, t0.c64)) NOT BETWEEN (((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64))), CAST(t0.c64 AS BLOB), (((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64))))) AND ((((t0.c64)>=(t0.c64)), CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END, CASE WHEN t0.c64 THEN t0.c64 ELSE 0.946813425246164 END)))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((((t0.c64, t0.c64, t0.c64)) NOT BETWEEN (((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64))), CAST(t0.c64 AS BLOB), (((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64))))) AND ((((t0.c64)>=(t0.c64)), CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END, CASE WHEN t0.c64 THEN t0.c64 ELSE 0.946813425246164 END)))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (TRIM(DISTINCT ((t0.c64) NOT NULL))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (TRIM(DISTINCT ((t0.c64) NOT NULL))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((TRIM(DISTINCT ((t0.c64) NOT NULL))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING GROUP_CONCAT(TOTAL(t0.c64)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (GROUP_CONCAT(TOTAL(t0.c64)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((GROUP_CONCAT(TOTAL(t0.c64))) ISNULL);
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE (((2046648940) IS FALSE) COLLATE BINARY) UNION ALL SELECT * FROM t0 WHERE ((NOT (((2046648940) IS FALSE) COLLATE BINARY))) UNION ALL SELECT ALL * FROM t0 WHERE (((((2046648940) IS FALSE) COLLATE BINARY) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((((((((((('730718422')<<(t0.c64)))AND(((t0.c64)LIKE(t0.c64)))))AND(((t0.c64)<>(t0.c64)))))AND(((((t0.c64)OR(t0.c64)))AND(t0.c64)))))OR(0.8926727897674006))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((((((((((('730718422')<<(t0.c64)))AND(((t0.c64)LIKE(t0.c64)))))AND(((t0.c64)!=(t0.c64)))))AND(((((t0.c64)OR(t0.c64)))AND(t0.c64)))))OR(0.8926727897674006))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((((((((((('730718422')<<(t0.c64)))AND(((t0.c64)LIKE(t0.c64)))))AND(((t0.c64)!=(t0.c64)))))AND(((((t0.c64)OR(t0.c64)))AND(t0.c64)))))OR(0.8926727897674006))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((((((((((t0.c64)OR(t0.c64)))OR(t0.c64)))OR(t0.c64)))AND(t0.c64)))IS NOT(((t0.c64)AND(t0.c64))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((((((((t0.c64)OR(t0.c64)))OR(t0.c64)))OR(t0.c64)))AND(t0.c64)))IS NOT(((t0.c64)AND(t0.c64))))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((((((((((t0.c64)OR(t0.c64)))OR(t0.c64)))OR(t0.c64)))AND(t0.c64)))IS NOT(((t0.c64)AND(t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((MAX('5xKfa'))-(t0.c64))) IS TRUE) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((((MAX('5xKfa'))-(t0.c64))) IS TRUE))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((MAX('5xKfa'))-(t0.c64))) IS TRUE)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((MAX('5xKfa'))-(t0.c64))) IS TRUE) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((((MAX('5xKfa'))-(t0.c64))) IS TRUE))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((MAX('5xKfa'))-(t0.c64))) IS TRUE)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT * FROM t0;
SELECT ALL * FROM t0 WHERE (((((t0.c64)<=(t0.c64)))IS(LIKELIHOOD(t0.c64, 0.5292767915055193)))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (((((t0.c64)<=(t0.c64)))IS(LIKELIHOOD(t0.c64, 0.5292767915055193)))))) UNION ALL SELECT * FROM t0 WHERE (((((((t0.c64)<=(t0.c64)))IS(LIKELIHOOD(t0.c64, 0.5292767915055193)))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((0x3769dc51 COLLATE RTRIM)<>(NULL))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((0X3769dc51 COLLATE RTRIM)<>(NULL))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((0x3769dc51 COLLATE RTRIM)!=(NULL))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 NOT INDEXED GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((((CAST(t0.c64 AS INTEGER))AND('-1429523453')))AND(((((t0.c64)OR(t0.c64)))OR('e'))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((CAST(t0.c64 AS INTEGER))AND('-1429523453')))AND(((((t0.c64)OR(t0.c64)))OR('e'))))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((((CAST(t0.c64 AS INTEGER))AND('-1429523453')))AND(((((t0.c64)OR(t0.c64)))OR('e'))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 NOT INDEXED GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING CAST(t0.c64 AS NUMERIC) COLLATE RTRIM UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CAST(t0.c64 AS NUMERIC) COLLATE RTRIM)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CAST(t0.c64 AS NUMERIC) COLLATE RTRIM) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING CAST(t0.c64 AS NUMERIC) COLLATE RTRIM UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CAST(t0.c64 AS NUMERIC) COLLATE RTRIM)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CAST(t0.c64 AS NUMERIC) COLLATE RTRIM) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT MIN(x'') FROM t0;
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE ((((t0.c64 IN ()))%((t0.c64 IN ())))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT ((((t0.c64 IN ()))%((t0.c64 IN ())))))) UNION ALL SELECT * FROM t0 WHERE ((((((t0.c64 IN ()))%((t0.c64 IN ())))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (t0.c64) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (t0.c64))) UNION SELECT DISTINCT * FROM t0 WHERE (((t0.c64) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 INDEXED BY i27 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((~ (t0.c64)))GLOB(ABS(GROUP_CONCAT(AVG(GROUP_CONCAT(MIN(AVG(t0.c64)))))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((((~ (t0.c64)))GLOB(ABS(GROUP_CONCAT(AVG(GROUP_CONCAT(MIN(AVG(t0.c64)))))))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((~ (t0.c64)))GLOB(ABS(GROUP_CONCAT(AVG(GROUP_CONCAT(MIN(AVG(t0.c64))))))))) ISNULL);
SELECT * FROM t0;
SELECT ALL * FROM t0 WHERE (COALESCE(DISTINCT t0.c64 COLLATE RTRIM, ((((((((t0.c64)OR(t0.c64)))AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (COALESCE(DISTINCT t0.c64 COLLATE RTRIM, ((((((((t0.c64)OR(t0.c64)))AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))))) UNION ALL SELECT ALL * FROM t0 WHERE (((COALESCE(DISTINCT t0.c64 COLLATE RTRIM, ((((((((t0.c64)OR(t0.c64)))AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (1.528406109E9) UNION SELECT DISTINCT t0.c64 FROM t0 NOT INDEXED WHERE ((NOT (1.528406109E9))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((1.528406109E9) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((t0.c64 IN (CASE t0.c64  WHEN 'YᔛckT4' THEN t0.c64 ELSE t0.c64 END))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((t0.c64 IN (CASE t0.c64  WHEN 'YᔛckT4' THEN t0.c64 ELSE t0.c64 END))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((t0.c64 IN (CASE t0.c64  WHEN 'YᔛckT4' THEN t0.c64 ELSE t0.c64 END))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING CASE ((t0.c64)OR(t0.c64))  WHEN COUNT(AVG(MIN(COUNT(*)))) THEN MIN(t0.c64) ELSE AVG(AVG(t0.c64)) END UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CASE ((t0.c64)OR(t0.c64))  WHEN COUNT(AVG(MIN(COUNT(*)))) THEN MIN(t0.c64) ELSE AVG(AVG(t0.c64)) END)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CASE ((t0.c64)OR(t0.c64))  WHEN COUNT(AVG(MIN(COUNT(*)))) THEN MIN(t0.c64) ELSE AVG(AVG(t0.c64)) END) ISNULL);
SELECT * FROM t0;
SELECT * FROM t0 WHERE (x'') UNION ALL SELECT * FROM t0 WHERE ((NOT (x''))) UNION ALL SELECT * FROM t0 WHERE (((x'') ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 NOT INDEXED WHERE (CASE NULL  WHEN ((t0.c64)<=(t0.c64)) THEN (('1301101615') IS FALSE) END) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (CASE NULL  WHEN ((t0.c64)<=(t0.c64)) THEN (('1301101615') IS FALSE) END))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((CASE NULL  WHEN ((t0.c64)<=(t0.c64)) THEN (('1301101615') IS FALSE) END) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE ((((t0.c64 IN ()))+(CAST(t0.c64 AS NUMERIC)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((((t0.c64 IN ()))+(CAST(t0.c64 AS NUMERIC)))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((((((t0.c64 IN ()))+(CAST(t0.c64 AS NUMERIC)))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING HEX(COUNT(*)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (HEX(COUNT(*)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((HEX(COUNT(*))) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING HEX(COUNT(*)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (HEX(COUNT(*)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((HEX(COUNT(*))) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT * FROM t0;
SELECT * FROM t0 WHERE (((CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END) NOT BETWEEN (CASE t0.c64  WHEN t0.c64 THEN t0.c64 END) AND ((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))))) UNION ALL SELECT * FROM t0 WHERE ((NOT (((CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END) NOT BETWEEN (CASE t0.c64  WHEN t0.c64 THEN t0.c64 END) AND ((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))))))) UNION ALL SELECT * FROM t0 WHERE (((((CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END) NOT BETWEEN (CASE t0.c64  WHEN t0.c64 THEN t0.c64 END) AND ((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((- (((t0.c64)<=(t0.c64))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((- (((t0.c64)<=(t0.c64))))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((- (((t0.c64)<=(t0.c64))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((((((NOT (t0.c64)))AND(NULL)))OR((t0.c64 IN ())))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT ((((((NOT (t0.c64)))AND(NULL)))OR((t0.c64 IN ())))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((((((NOT (t0.c64)))AND(NULL)))OR((t0.c64 IN ())))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING SUM(AVG(COUNT(*)) COLLATE BINARY) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (SUM(AVG(COUNT(*)) COLLATE BINARY))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM(AVG(COUNT(*)) COLLATE BINARY)) ISNULL);
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (t0.c64) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (t0.c64))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((t0.c64) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (CAST(0.19150986770563205 AS NUMERIC)) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (CAST(0.19150986770563205 AS NUMERIC)))) UNION SELECT DISTINCT * FROM t0 WHERE (((CAST(0.19150986770563205 AS NUMERIC)) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END) IS TRUE)) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END) IS TRUE)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END) IS TRUE)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 INDEXED BY i27 GROUP BY t0.c64;
SELECT * FROM t0;
SELECT ALL * FROM t0 WHERE (CASE WHEN ((t0.c64)>(t0.c64)) THEN (((t0.c64, t0.c64, x'3617')) BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((t0.c64, NULL, t0.c64))) WHEN ((((((((x'')OR(x'')))OR(t0.c64)))AND(t0.c64)))OR(t0.c64)) THEN UNLIKELY(t0.c64) WHEN NULL THEN ((((((((t0.c64)AND('2')))OR(t0.c64)))OR(t0.c64)))OR(t0.c64)) WHEN QUOTE(t0.c64) THEN (((x'3b1a1117', NULL, t0.c64)) NOT BETWEEN ((22714520, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64))) WHEN (t0.c64 IN ()) THEN (('-944212587') NOT NULL) ELSE (t0.c64 IN (t0.c64)) END) UNION ALL SELECT * FROM t0 WHERE ((NOT (CASE WHEN ((t0.c64)>(t0.c64)) THEN (((t0.c64, t0.c64, x'3617')) BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((t0.c64, NULL, t0.c64))) WHEN ((((((((x'')OR(x'')))OR(t0.c64)))AND(t0.c64)))OR(t0.c64)) THEN UNLIKELY(t0.c64) WHEN NULL THEN ((((((((t0.c64)AND('2')))OR(t0.c64)))OR(t0.c64)))OR(t0.c64)) WHEN QUOTE(t0.c64) THEN (((x'3b1a1117', NULL, t0.c64)) NOT BETWEEN ((22714520, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64))) WHEN (t0.c64 IN ()) THEN (('-944212587') NOT NULL) ELSE (t0.c64 IN (t0.c64)) END))) UNION ALL SELECT ALL * FROM t0 WHERE (((CASE WHEN ((t0.c64)>(t0.c64)) THEN (((t0.c64, t0.c64, x'3617')) BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((t0.c64, NULL, t0.c64))) WHEN ((((((((x'')OR(x'')))OR(t0.c64)))AND(t0.c64)))OR(t0.c64)) THEN UNLIKELY(t0.c64) WHEN NULL THEN ((((((((t0.c64)AND('2')))OR(t0.c64)))OR(t0.c64)))OR(t0.c64)) WHEN QUOTE(t0.c64) THEN (((x'3b1a1117', NULL, t0.c64)) NOT BETWEEN ((22714520, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64))) WHEN (t0.c64 IN ()) THEN (('-944212587') NOT NULL) ELSE (t0.c64 IN (t0.c64)) END) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (CASE WHEN CAST(t0.c64 AS NUMERIC) THEN (((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64))) END) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (CASE WHEN CAST(t0.c64 AS NUMERIC) THEN (((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64))) END))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((CASE WHEN CAST(t0.c64 AS NUMERIC) THEN (((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64))) END) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((SQLITE_VERSION())<>(CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((SQLITE_VERSION())!=(CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((SQLITE_VERSION())<>(CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MAX(GROUP_CONCAT(COUNT(COUNT(*)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MAX(GROUP_CONCAT(COUNT(COUNT(*)))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MAX(GROUP_CONCAT(COUNT(COUNT(*))))) ISNULL);
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE ('') UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (''))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((('') ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((t0.c64 COLLATE NOCASE)-(((t0.c64)-(t0.c64))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((t0.c64 COLLATE NOCASE)-(((t0.c64)-(t0.c64))))))) UNION SELECT DISTINCT * FROM t0 WHERE (((((t0.c64 COLLATE NOCASE)-(((t0.c64)-(t0.c64))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE ((((((t0.c64)GLOB(t0.c64)), t0.c64, ((((t0.c64)AND(t0.c64)))AND('1843638953'))))!=((((t0.c64)<=(t0.c64)), CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END, ((t0.c64) NOT NULL))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 NOT INDEXED WHERE ((NOT ((((((t0.c64)GLOB(t0.c64)), t0.c64, ((((t0.c64)AND(t0.c64)))AND('1843638953'))))<>((((t0.c64)<=(t0.c64)), CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END, ((t0.c64) NOT NULL))))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((((((t0.c64)GLOB(t0.c64)), t0.c64, ((((t0.c64)AND(t0.c64)))AND('1843638953'))))!=((((t0.c64)<=(t0.c64)), CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END, ((t0.c64) NOT NULL))))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MAX(((((MIN(AVG(COUNT(MAX('/')))))OR(t0.c64)))AND(t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MAX(((((MIN(AVG(COUNT(MAX('/')))))OR(t0.c64)))AND(t0.c64))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MAX(((((MIN(AVG(COUNT(MAX('/')))))OR(t0.c64)))AND(t0.c64)))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (((((((t0.c64)OR(t0.c64)))OR(NULL))) NOTNULL)) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((((((t0.c64)OR(t0.c64)))OR(NULL))) NOTNULL)))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((((((((t0.c64)OR(t0.c64)))OR(NULL))) NOTNULL)) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (t0.c64) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (t0.c64))) UNION SELECT DISTINCT * FROM t0 WHERE (((t0.c64) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)IS NOT((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)IS NOT((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)IS NOT((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING t0.c64 UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (t0.c64)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((t0.c64) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING t0.c64 UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (t0.c64)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((t0.c64) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT * FROM t0;
SELECT * FROM t0 WHERE (((((((((((((t0.c64)OR(t0.c64)))OR(t0.c64)))AND(((((NULL)AND(t0.c64)))AND(t0.c64)))))AND(((t0.c64)<<(689804109)))))AND(t0.c64)))AND(CASE WHEN t0.c64 THEN x'f1a7' ELSE t0.c64 END))) UNION ALL SELECT * FROM t0 WHERE ((NOT (((((((((((((t0.c64)OR(t0.c64)))OR(t0.c64)))AND(((((NULL)AND(t0.c64)))AND(t0.c64)))))AND(((t0.c64)<<(689804109)))))AND(t0.c64)))AND(CASE WHEN t0.c64 THEN x'f1a7' ELSE t0.c64 END))))) UNION ALL SELECT * FROM t0 WHERE (((((((((((((((t0.c64)OR(t0.c64)))OR(t0.c64)))AND(((((NULL)AND(t0.c64)))AND(t0.c64)))))AND(((t0.c64)<<(689804109)))))AND(t0.c64)))AND(CASE WHEN t0.c64 THEN x'f1a7' ELSE t0.c64 END))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64) ISNULL)) NOT BETWEEN (NULL) AND (IFNULL(t0.c64, t0.c64)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64) ISNULL)) NOT BETWEEN (NULL) AND (IFNULL(t0.c64, t0.c64)))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((((t0.c64) ISNULL)) NOT BETWEEN (NULL) AND (IFNULL(t0.c64, t0.c64)))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE ((((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))!=((NULL)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))!=((NULL)))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))<>((NULL)))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ROUND(AVG(t0.c64), ((((COUNT(t0.c64))AND(t0.c64)))AND(t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (ROUND(AVG(t0.c64), ((((COUNT(t0.c64))AND(t0.c64)))AND(t0.c64))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((ROUND(AVG(t0.c64), ((((COUNT(t0.c64))AND(t0.c64)))AND(t0.c64)))) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ROUND(AVG(t0.c64), ((((COUNT(t0.c64))AND(t0.c64)))AND(t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (ROUND(AVG(t0.c64), ((((COUNT(t0.c64))AND(t0.c64)))AND(t0.c64))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((ROUND(AVG(t0.c64), ((((COUNT(t0.c64))AND(t0.c64)))AND(t0.c64)))) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT * FROM t0;
SELECT * FROM t0 WHERE ((~ (t0.c64))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT ((~ (t0.c64))))) UNION ALL SELECT * FROM t0 WHERE ((((~ (t0.c64))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (t0.c64) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (t0.c64))) UNION SELECT DISTINCT * FROM t0 WHERE (((t0.c64) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((+ (t0.c64)) IN (CAST(t0.c64 AS NUMERIC), ((t0.c64)GLOB(t0.c64))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((+ (t0.c64)) IN (CAST(t0.c64 AS NUMERIC), ((t0.c64)GLOB(t0.c64))))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((+ (t0.c64)) IN (CAST(t0.c64 AS NUMERIC), ((t0.c64)GLOB(t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((((t0.c64 COLLATE BINARY)AND(COUNT(COUNT(TOTAL(NULL))))))OR(MAX(t0.c64))))OR(SUM(TOTAL(AVG(t0.c64))))))OR(t0.c64 COLLATE BINARY)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((((((((t0.c64 COLLATE BINARY)AND(COUNT(COUNT(TOTAL(NULL))))))OR(MAX(t0.c64))))OR(SUM(TOTAL(AVG(t0.c64))))))OR(t0.c64 COLLATE BINARY)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((((((t0.c64 COLLATE BINARY)AND(COUNT(COUNT(TOTAL(NULL))))))OR(MAX(t0.c64))))OR(SUM(TOTAL(AVG(t0.c64))))))OR(t0.c64 COLLATE BINARY))) ISNULL);
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE (IFNULL(0.11107645547366574, t0.c64) COLLATE RTRIM) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (IFNULL(0.11107645547366574, t0.c64) COLLATE RTRIM))) UNION ALL SELECT ALL * FROM t0 WHERE (((IFNULL(0.11107645547366574, t0.c64) COLLATE RTRIM) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (CASE ((((t0.c64)AND(t0.c64)))OR(t0.c64))  WHEN (t0.c64 IN ()) THEN ((t0.c64)IS NOT(t0.c64)) END) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (CASE ((((t0.c64)AND(t0.c64)))OR(t0.c64))  WHEN (t0.c64 IN ()) THEN ((t0.c64)IS NOT(t0.c64)) END))) UNION SELECT DISTINCT * FROM t0 WHERE (((CASE ((((t0.c64)AND(t0.c64)))OR(t0.c64))  WHEN (t0.c64 IN ()) THEN ((t0.c64)IS NOT(t0.c64)) END) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((((t0.c64) IS FALSE)) NOTNULL)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64) IS FALSE)) NOTNULL)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((((t0.c64) IS FALSE)) NOTNULL)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN(t0.c64))IS NOT(((TOTAL(SUM(t0.c64)))/(COUNT(*))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((MIN(t0.c64))IS NOT(((TOTAL(SUM(t0.c64)))/(COUNT(*))))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((MIN(t0.c64))IS NOT(((TOTAL(SUM(t0.c64)))/(COUNT(*)))))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64) ISNULL))GLOB(CASE t0.c64  WHEN t0.c64 THEN t0.c64 END))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64) ISNULL))GLOB(CASE t0.c64  WHEN t0.c64 THEN t0.c64 END))))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((((((t0.c64) ISNULL))GLOB(CASE t0.c64  WHEN t0.c64 THEN t0.c64 END))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (CASE (NOT (t0.c64))  WHEN TRIM(DISTINCT t0.c64) THEN x'' END) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (CASE (NOT (t0.c64))  WHEN TRIM(DISTINCT t0.c64) THEN x'' END))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((CASE (NOT (t0.c64))  WHEN TRIM(DISTINCT t0.c64) THEN x'' END) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((((((t0.c64)LIKE(t0.c64)))OR(CASE WHEN t0.c64 THEN t0.c64 END)))OR((- (t0.c64))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((((((t0.c64)LIKE(t0.c64)))OR(CASE WHEN t0.c64 THEN t0.c64 END)))OR((- (t0.c64))))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((((((t0.c64)LIKE(t0.c64)))OR(CASE WHEN t0.c64 THEN t0.c64 END)))OR((- (t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING CASE COUNT(*)  WHEN COUNT(*) THEN TOTAL(COUNT(COUNT(*))) END UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CASE COUNT(*)  WHEN COUNT(*) THEN TOTAL(COUNT(COUNT(*))) END)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CASE COUNT(*)  WHEN COUNT(*) THEN TOTAL(COUNT(COUNT(*))) END) ISNULL);
SELECT ALL TOTAL(UNLIKELY(CAST(t0.c64 AS BLOB))) FROM t0 ORDER BY (((t0.c64, t0.c64, t0.c64)) BETWEEN (((+ (t0.c64)), ((t0.c64) NOT BETWEEN (t0.c64) AND (x'2be5')), ((t0.c64) NOT BETWEEN (x'') AND (t0.c64)))) AND ((CAST(t0.c64 AS BLOB), (t0.c64 IN (t0.c64)), 0.7114734558580108))) DESC  NULLS FIRST;
SELECT ALL t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN '189234666' THEN t0.c64 WHEN 1320506103 THEN t0.c64 WHEN t0.c64 THEN NULL WHEN t0.c64 THEN t0.c64 ELSE '}yss{>5' END) NOT BETWEEN (CAST(t0.c64 AS TEXT)) AND (((t0.c64)IS(t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN '189234666' THEN t0.c64 WHEN 1320506103 THEN t0.c64 WHEN t0.c64 THEN NULL WHEN t0.c64 THEN t0.c64 ELSE '}yss{>5' END) NOT BETWEEN (CAST(t0.c64 AS TEXT)) AND (((t0.c64)IS(t0.c64))))))) UNION ALL SELECT ALL t0.c64 FROM t0 NOT INDEXED WHERE (((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN '189234666' THEN t0.c64 WHEN 1320506103 THEN t0.c64 WHEN t0.c64 THEN NULL WHEN t0.c64 THEN t0.c64 ELSE '}yss{>5' END) NOT BETWEEN (CAST(t0.c64 AS TEXT)) AND (((t0.c64)IS(t0.c64))))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) COLLATE BINARY) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) COLLATE BINARY))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) COLLATE BINARY) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((t0.c64) NOTNULL)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((t0.c64) NOTNULL)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64) NOTNULL)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (COUNT(*) IN (CAST(MIN(MIN(MIN(GROUP_CONCAT(t0.c64)))) AS INTEGER))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((COUNT(*) IN (CAST(MIN(MIN(MIN(GROUP_CONCAT(t0.c64)))) AS INTEGER))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((COUNT(*) IN (CAST(MIN(MIN(MIN(GROUP_CONCAT(t0.c64)))) AS INTEGER)))) ISNULL);
SELECT * FROM t0;
SELECT * FROM t0 WHERE ((((t0.c64)) NOT BETWEEN ((CAST(t0.c64 AS REAL))) AND ((INSTR(t0.c64, t0.c64))))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT ((((t0.c64)) NOT BETWEEN ((CAST(t0.c64 AS REAL))) AND ((INSTR(t0.c64, t0.c64))))))) UNION ALL SELECT ALL * FROM t0 NOT INDEXED WHERE ((((((t0.c64)) NOT BETWEEN ((CAST(t0.c64 AS REAL))) AND ((INSTR(t0.c64, t0.c64))))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((('')OR(t0.c64 COLLATE RTRIM))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((('')OR(t0.c64 COLLATE RTRIM))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((('')OR(t0.c64 COLLATE RTRIM))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CASE ((t0.c64)!=(t0.c64))  WHEN ((t0.c64) IS FALSE) THEN ((t0.c64)%(t0.c64)) WHEN 'yq' THEN (+ ('')) WHEN TYPEOF(DISTINCT t0.c64) THEN (t0.c64 IN ()) WHEN CAST(t0.c64 AS NUMERIC) THEN ((((t0.c64)AND(t0.c64)))OR(t0.c64)) WHEN (~ (t0.c64)) THEN CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN NULL WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END ELSE ((t0.c64)<>(t0.c64)) END) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CASE ((t0.c64)<>(t0.c64))  WHEN ((t0.c64) IS FALSE) THEN ((t0.c64)%(t0.c64)) WHEN 'yq' THEN (+ ('')) WHEN TYPEOF(DISTINCT t0.c64) THEN (t0.c64 IN ()) WHEN CAST(t0.c64 AS NUMERIC) THEN ((((t0.c64)AND(t0.c64)))OR(t0.c64)) WHEN (~ (t0.c64)) THEN CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN NULL WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END ELSE ((t0.c64)!=(t0.c64)) END))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((CASE ((t0.c64)<>(t0.c64))  WHEN ((t0.c64) IS FALSE) THEN ((t0.c64)%(t0.c64)) WHEN 'yq' THEN (+ ('')) WHEN TYPEOF(DISTINCT t0.c64) THEN (t0.c64 IN ()) WHEN CAST(t0.c64 AS NUMERIC) THEN ((((t0.c64)AND(t0.c64)))OR(t0.c64)) WHEN (~ (t0.c64)) THEN CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN NULL WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END ELSE ((t0.c64)<>(t0.c64)) END) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING GROUP_CONCAT(((COUNT(*)) NOT NULL)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (GROUP_CONCAT(((COUNT(*)) NOT NULL)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((GROUP_CONCAT(((COUNT(*)) NOT NULL))) ISNULL);
SELECT * FROM t0;
SELECT ALL * FROM t0 WHERE (((((t0.c64)<=(t0.c64))) IS TRUE)) UNION ALL SELECT * FROM t0 WHERE ((NOT (((((t0.c64)<=(t0.c64))) IS TRUE)))) UNION ALL SELECT * FROM t0 WHERE (((((((t0.c64)<=(t0.c64))) IS TRUE)) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64 COLLATE RTRIM) IS TRUE)) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((t0.c64 COLLATE RTRIM) IS TRUE)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64 COLLATE RTRIM) IS TRUE)) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (t0.c64) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (t0.c64))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((t0.c64) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MAX(MIN(t0.c64)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MAX(MIN(t0.c64)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MAX(MIN(t0.c64))) ISNULL);
SELECT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE ('-505814277') UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT ('-505814277'))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((('-505814277') ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (NULL) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (NULL))) UNION SELECT DISTINCT * FROM t0 WHERE (((NULL) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (t0.c64) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (t0.c64))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((t0.c64) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((((((t0.c64)AND(t0.c64)))OR(t0.c64)))AND(COUNT(*))))OR(t0.c64))) NOT BETWEEN (AVG(t0.c64)) AND (SUM(COUNT(*)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((((((((((t0.c64)AND(t0.c64)))OR(t0.c64)))AND(COUNT(*))))OR(t0.c64))) NOT BETWEEN (AVG(t0.c64)) AND (SUM(COUNT(*)))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((((((((t0.c64)AND(t0.c64)))OR(t0.c64)))AND(COUNT(*))))OR(t0.c64))) NOT BETWEEN (AVG(t0.c64)) AND (SUM(COUNT(*))))) ISNULL);
SELECT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE ((((((((((((t0.c64, t0.c64, NULL)) BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64))))AND((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))))))AND(t0.c64)))AND(((t0.c64)/(t0.c64)))))OR(NULL))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT ((((((((((((t0.c64, t0.c64, NULL)) BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64))))AND((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))))))AND(t0.c64)))AND(((t0.c64)/(t0.c64)))))OR(NULL))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((((((((((((((t0.c64, t0.c64, NULL)) BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64))))AND((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))))))AND(t0.c64)))AND(((t0.c64)/(t0.c64)))))OR(NULL))) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (CASE ((((t0.c64)OR('')))AND(t0.c64))  WHEN (((t0.c64))>((t0.c64))) THEN NULL WHEN x'' THEN NULL WHEN t0.c64 THEN ((t0.c64) NOTNULL) ELSE (t0.c64 IN (t0.c64, t0.c64)) END) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (CASE ((((t0.c64)OR('')))AND(t0.c64))  WHEN (((t0.c64))>((t0.c64))) THEN NULL WHEN x'' THEN NULL WHEN t0.c64 THEN ((t0.c64) NOTNULL) ELSE (t0.c64 IN (t0.c64, t0.c64)) END))) UNION SELECT DISTINCT * FROM t0 WHERE (((CASE ((((t0.c64)OR('')))AND(t0.c64))  WHEN (((t0.c64))>((t0.c64))) THEN NULL WHEN x'' THEN NULL WHEN t0.c64 THEN ((t0.c64) NOTNULL) ELSE (t0.c64 IN (t0.c64, t0.c64)) END) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE ((((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))<=((((0.5198978461244441) NOTNULL))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT ((((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))<=((((0.5198978461244441) NOTNULL))))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((((((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))<=((((0.5198978461244441) NOTNULL))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING '-980869115' UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ('-980869115')) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (('-980869115') ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING '-980869115' UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ('-980869115')) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (('-980869115') ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (CASE t0.c64 COLLATE RTRIM  WHEN ((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) THEN t0.c64 ELSE '2055157691' END) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CASE t0.c64 COLLATE RTRIM  WHEN ((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) THEN t0.c64 ELSE '2055157691' END))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((CASE t0.c64 COLLATE RTRIM  WHEN ((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) THEN t0.c64 ELSE '2055157691' END) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((((t0.c64)) BETWEEN ((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)))) AND ((((((x'')AND(t0.c64)))AND(t0.c64)))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((((t0.c64)) BETWEEN ((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)))) AND ((((((x'')AND(t0.c64)))AND(t0.c64)))))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((((t0.c64)) BETWEEN ((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)))) AND ((((((x'')AND(t0.c64)))AND(t0.c64)))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 NOT INDEXED WHERE (t0.c64) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (t0.c64))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((t0.c64) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((((((COUNT(AVG(SUM(MIN(SUM(COUNT(*))))))) NOT NULL))OR(MAX(t0.c64))))AND(GROUP_CONCAT(COUNT(t0.c64)) COLLATE BINARY)))AND(MAX(SUM(SUM(AVG(TOTAL(COUNT(GROUP_CONCAT(AVG(GROUP_CONCAT(t0.c64))))))))))))OR(0.06289042304516579)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((((((((((COUNT(AVG(SUM(MIN(SUM(COUNT(*))))))) NOT NULL))OR(MAX(t0.c64))))AND(GROUP_CONCAT(COUNT(t0.c64)) COLLATE BINARY)))AND(MAX(SUM(SUM(AVG(TOTAL(COUNT(GROUP_CONCAT(AVG(GROUP_CONCAT(t0.c64))))))))))))OR(0.06289042304516579)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((((((((COUNT(AVG(SUM(MIN(SUM(COUNT(*))))))) NOT NULL))OR(MAX(t0.c64))))AND(GROUP_CONCAT(COUNT(t0.c64)) COLLATE BINARY)))AND(MAX(SUM(SUM(AVG(TOTAL(COUNT(GROUP_CONCAT(AVG(GROUP_CONCAT(t0.c64))))))))))))OR(0.06289042304516579))) ISNULL);
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (x'') UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (x''))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((x'') ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64)GLOB(NULL))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((t0.c64)GLOB(NULL))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64)GLOB(NULL))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (x'') GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (x''))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((x'') ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING CAST(((COUNT(1.52912282E9))<=(SUM(TOTAL(SUM(MIN(t0.c64)))))) AS TEXT) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CAST(((COUNT(1.52912282E9))<=(SUM(TOTAL(SUM(MIN(t0.c64)))))) AS TEXT))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CAST(((COUNT(1.52912282E9))<=(SUM(TOTAL(SUM(MIN(t0.c64)))))) AS TEXT)) ISNULL);
SELECT * FROM t0;
SELECT ALL * FROM t0 WHERE (IFNULL(DISTINCT (- (t0.c64)), t0.c64)) UNION ALL SELECT * FROM t0 WHERE ((NOT (IFNULL(DISTINCT (- (t0.c64)), t0.c64)))) UNION ALL SELECT * FROM t0 WHERE (((IFNULL(DISTINCT (- (t0.c64)), t0.c64)) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (TRIM(DISTINCT (0X2f11cddb IN ()), UPPER(DISTINCT t0.c64))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (TRIM(DISTINCT (0X2f11cddb IN ()), UPPER(DISTINCT t0.c64))))) UNION SELECT DISTINCT * FROM t0 WHERE (((TRIM(DISTINCT (0x2f11cddb IN ()), UPPER(DISTINCT t0.c64))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (t0.c64) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (t0.c64))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((t0.c64) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING NULL UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (NULL)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((NULL) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING NULL UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (NULL)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((NULL) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE ((- (CAST(t0.c64 AS NUMERIC)))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT ((- (CAST(t0.c64 AS NUMERIC)))))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((((- (CAST(t0.c64 AS NUMERIC)))) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (t0.c64) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (t0.c64))) UNION SELECT DISTINCT * FROM t0 WHERE (((t0.c64) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (json_quote(CASE WHEN -1.892036829E9 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (json_quote(CASE WHEN -1.892036829E9 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((json_quote(CASE WHEN -1.892036829E9 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING AVG(t0.c64 COLLATE NOCASE) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (AVG(t0.c64 COLLATE NOCASE))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((AVG(t0.c64 COLLATE NOCASE)) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING AVG(t0.c64 COLLATE NOCASE) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (AVG(t0.c64 COLLATE NOCASE))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((AVG(t0.c64 COLLATE NOCASE)) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE ((((x'')) NOT BETWEEN ((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN 0Xffffffffb3e990f1 WHEN t0.c64 THEN t0.c64 END)) AND (('(Y')))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT ((((x'')) NOT BETWEEN ((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN 0xffffffffb3e990f1 WHEN t0.c64 THEN t0.c64 END)) AND (('(Y')))))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((((((x'')) NOT BETWEEN ((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN 0Xffffffffb3e990f1 WHEN t0.c64 THEN t0.c64 END)) AND (('(Y')))) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (CAST(CAST(x'' AS BLOB) AS INTEGER)) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (CAST(CAST(x'' AS BLOB) AS INTEGER)))) UNION SELECT DISTINCT * FROM t0 WHERE (((CAST(CAST(x'' AS BLOB) AS INTEGER)) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN '' THEN t0.c64 END) ISNULL)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN '' THEN t0.c64 END) ISNULL)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN '' THEN t0.c64 END) ISNULL)) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING TOTAL((((1502213115)) NOT BETWEEN ((t0.c64)) AND ((t0.c64)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (TOTAL((((1502213115)) NOT BETWEEN ((t0.c64)) AND ((t0.c64)))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((TOTAL((((1502213115)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))))) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING TOTAL((((1502213115)) NOT BETWEEN ((t0.c64)) AND ((t0.c64)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (TOTAL((((1502213115)) NOT BETWEEN ((t0.c64)) AND ((t0.c64)))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((TOTAL((((1502213115)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))))) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT TOTAL((((t0.c64)) BETWEEN ((-1404059790)) AND ((GLOB(t0.c64, t0.c64))))) FROM t0;
SELECT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))) IN (((t0.c64)*(t0.c64))))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))) IN (((t0.c64)*(t0.c64))))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))) IN (((t0.c64)*(t0.c64))))) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ((((CAST(t0.c64 AS INTEGER)))>(((t0.c64 IN ()))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ((((CAST(t0.c64 AS INTEGER)))>(((t0.c64 IN ()))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((((((CAST(t0.c64 AS INTEGER)))>(((t0.c64 IN ()))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((((t0.c64) IS TRUE)) NOT BETWEEN ((((t0.c64))<((t0.c64)))) AND (((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64) IS TRUE)) NOT BETWEEN ((((t0.c64))<((t0.c64)))) AND (((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((((t0.c64) IS TRUE)) NOT BETWEEN ((((t0.c64))<((t0.c64)))) AND (((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MAX(COUNT(*)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MAX(COUNT(*)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MAX(COUNT(*))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (((NULL) IS FALSE) COLLATE RTRIM) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((NULL) IS FALSE) COLLATE RTRIM))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((((NULL) IS FALSE) COLLATE RTRIM) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (CAST(CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END AS NUMERIC)) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (CAST(CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END AS NUMERIC)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((CAST(CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END AS NUMERIC)) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)))IS(t0.c64 COLLATE BINARY))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)))IS(t0.c64 COLLATE BINARY))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)))IS(t0.c64 COLLATE BINARY))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((t0.c64))>=((MIN(t0.c64)))))GLOB(COUNT(*))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((((((t0.c64))>=((MIN(t0.c64)))))GLOB(COUNT(*))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((((t0.c64))>=((MIN(t0.c64)))))GLOB(COUNT(*)))) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((t0.c64))>=((MIN(t0.c64)))))GLOB(COUNT(*))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((((((t0.c64))>=((MIN(t0.c64)))))GLOB(COUNT(*))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((((t0.c64))>=((MIN(t0.c64)))))GLOB(COUNT(*)))) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT SUM((((t0.c64)) BETWEEN ((CAST(t0.c64 AS TEXT))) AND ((((x'9752')<=(t0.c64)))))) FROM t0 ORDER BY ((((t0.c64) IS TRUE)) IS FALSE) ASC;
SELECT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (CAST(t0.c64 AS REAL)) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CAST(t0.c64 AS REAL)))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((CAST(t0.c64 AS REAL)) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((- (((((t0.c64)OR(t0.c64)))AND(t0.c64))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((- (((((t0.c64)OR(t0.c64)))AND(t0.c64))))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((- (((((t0.c64)OR(t0.c64)))AND(t0.c64))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CAST(((t0.c64)IS NOT(t0.c64)) AS INTEGER)) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CAST(((t0.c64)IS NOT(t0.c64)) AS INTEGER)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((CAST(((t0.c64)IS NOT(t0.c64)) AS INTEGER)) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING CAST(((MIN(t0.c64)) NOT NULL) AS NUMERIC) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CAST(((MIN(t0.c64)) NOT NULL) AS NUMERIC))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CAST(((MIN(t0.c64)) NOT NULL) AS NUMERIC)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING CAST(((MIN(t0.c64)) NOT NULL) AS NUMERIC) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CAST(((MIN(t0.c64)) NOT NULL) AS NUMERIC))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CAST(((MIN(t0.c64)) NOT NULL) AS NUMERIC)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (((((((((((t0.c64)AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))AND(t0.c64)))-(CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((((((((((t0.c64)AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))AND(t0.c64)))-(CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((((((((((((t0.c64)AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))AND(t0.c64)))-(CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64))>=((t0.c64))) IN ())) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64))>=((t0.c64))) IN ())))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((((t0.c64))>=((t0.c64))) IN ())) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (TYPEOF(CASE WHEN t0.c64 THEN x'' ELSE 0.8111690351177616 END)) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (TYPEOF(CASE WHEN t0.c64 THEN x'' ELSE 0.8111690351177616 END)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((TYPEOF(CASE WHEN t0.c64 THEN x'' ELSE 0.8111690351177616 END)) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MAX(AVG(t0.c64)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MAX(AVG(t0.c64)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MAX(AVG(t0.c64))) ISNULL);
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE ((((((- (t0.c64)))OR(CAST(t0.c64 AS TEXT))))AND(0.24876650892378127))) UNION ALL SELECT * FROM t0 WHERE ((NOT ((((((- (t0.c64)))OR(CAST(t0.c64 AS TEXT))))AND(0.24876650892378127))))) UNION ALL SELECT * FROM t0 WHERE ((((((((- (t0.c64)))OR(CAST(t0.c64 AS TEXT))))AND(0.24876650892378127))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64 COLLATE RTRIM) ISNULL)) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((t0.c64 COLLATE RTRIM) ISNULL)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64 COLLATE RTRIM) ISNULL)) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (t0.c64) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (t0.c64))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((t0.c64) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((TOTAL(COUNT(*)))>(GROUP_CONCAT(t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((TOTAL(COUNT(*)))>(GROUP_CONCAT(t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((TOTAL(COUNT(*)))>(GROUP_CONCAT(t0.c64)))) ISNULL);
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE ((- (((t0.c64) NOT NULL)))) UNION ALL SELECT * FROM t0 WHERE ((NOT ((- (((t0.c64) NOT NULL)))))) UNION ALL SELECT ALL * FROM t0 WHERE ((((- (((t0.c64) NOT NULL)))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ((((t0.c64)-(t0.c64)) IN (((t0.c64)IS NOT(t0.c64)), ((((t0.c64)AND(x'2b90')))OR(t0.c64))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ((((t0.c64)-(t0.c64)) IN (((t0.c64)IS NOT(t0.c64)), ((((t0.c64)AND(x'2b90')))OR(t0.c64))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((((((t0.c64)-(t0.c64)) IN (((t0.c64)IS NOT(t0.c64)), ((((t0.c64)AND(x'2b90')))OR(t0.c64))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((((CASE t0.c64  WHEN t0.c64 THEN '-1731431071' WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))>((x'')))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((((CASE t0.c64  WHEN t0.c64 THEN '-1731431071' WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))>((x'')))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((((((CASE t0.c64  WHEN t0.c64 THEN '-1731431071' WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))>((x'')))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(*) UNION ALL SELECT t0.c64 FROM t0 NOT INDEXED GROUP BY t0.c64 HAVING (NOT (COUNT(*))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(*) UNION ALL SELECT t0.c64 FROM t0 NOT INDEXED GROUP BY t0.c64 HAVING (NOT (COUNT(*))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT * FROM t0;
SELECT * FROM t0 WHERE (((0.5358906203704376) ISNULL)) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (((0.5358906203704376) ISNULL)))) UNION ALL SELECT * FROM t0 WHERE (((((0.5358906203704376) ISNULL)) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (NULL COLLATE RTRIM) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (NULL COLLATE RTRIM))) UNION SELECT DISTINCT * FROM t0 WHERE (((NULL COLLATE RTRIM) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((((t0.c64 IN ())) IS FALSE)) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((((t0.c64 IN ())) IS FALSE)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((((t0.c64 IN ())) IS FALSE)) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MIN(((COUNT(GROUP_CONCAT(t0.c64)))IS NOT(MIN(t0.c64)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MIN(((COUNT(GROUP_CONCAT(t0.c64)))IS NOT(MIN(t0.c64)))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN(((COUNT(GROUP_CONCAT(t0.c64)))IS NOT(MIN(t0.c64))))) ISNULL);
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64)||(t0.c64))) BETWEEN (t0.c64) AND (((((((((t0.c64)AND(t0.c64)))OR(-1680904415)))AND(t0.c64)))AND(t0.c64))))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64)||(t0.c64))) BETWEEN (t0.c64) AND (((((((((t0.c64)AND(t0.c64)))OR(-1680904415)))AND(t0.c64)))AND(t0.c64))))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((((((t0.c64)||(t0.c64))) BETWEEN (t0.c64) AND (((((((((t0.c64)AND(t0.c64)))OR(-1680904415)))AND(t0.c64)))AND(t0.c64))))) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((((t0.c64 IN ()))>(t0.c64))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((((t0.c64 IN ()))>(t0.c64))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((((t0.c64 IN ()))>(t0.c64))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE ((+ (((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((+ (((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((((+ (((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING CASE COUNT(*)  WHEN ((t0.c64)>>(t0.c64)) THEN MIN(COUNT(COUNT(*))) ELSE COUNT(*) END UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CASE COUNT(*)  WHEN ((t0.c64)>>(t0.c64)) THEN MIN(COUNT(COUNT(*))) ELSE COUNT(*) END)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CASE COUNT(*)  WHEN ((t0.c64)>>(t0.c64)) THEN MIN(COUNT(COUNT(*))) ELSE COUNT(*) END) ISNULL);
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE (((((t0.c64)=(x'')))>=(((t0.c64)OR(t0.c64))))) UNION ALL SELECT * FROM t0 WHERE ((NOT (((((t0.c64)=(x'')))>=(((t0.c64)OR(t0.c64))))))) UNION ALL SELECT ALL * FROM t0 WHERE (((((((t0.c64)=(x'')))>=(((t0.c64)OR(t0.c64))))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((((((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)AND(t0.c64)))OR(HEX(x'a780'))))AND((t0.c64 IN ()))))AND(t0.c64 COLLATE RTRIM))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((((((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)AND(t0.c64)))OR(HEX(x'a780'))))AND((t0.c64 IN ()))))AND(t0.c64 COLLATE RTRIM))))) UNION SELECT DISTINCT * FROM t0 WHERE (((((((((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)AND(t0.c64)))OR(HEX(x'a780'))))AND((t0.c64 IN ()))))AND(t0.c64 COLLATE RTRIM))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))) BETWEEN (CASE t0.c64  WHEN t0.c64 THEN t0.c64 END) AND (x''))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))) BETWEEN (CASE t0.c64  WHEN t0.c64 THEN t0.c64 END) AND (x''))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))) BETWEEN (CASE t0.c64  WHEN t0.c64 THEN t0.c64 END) AND (x''))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING SUM(MIN(COUNT(t0.c64))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (SUM(MIN(COUNT(t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM(MIN(COUNT(t0.c64)))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (((0x1184613f)+(t0.c64))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((0X1184613f)+(t0.c64))))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((((0X1184613f)+(t0.c64))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((NULL) NOT BETWEEN (CAST(t0.c64 AS BLOB)) AND (t0.c64 COLLATE RTRIM))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((NULL) NOT BETWEEN (CAST(t0.c64 AS BLOB)) AND (t0.c64 COLLATE RTRIM))))) UNION SELECT DISTINCT * FROM t0 WHERE (((((NULL) NOT BETWEEN (CAST(t0.c64 AS BLOB)) AND (t0.c64 COLLATE RTRIM))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((((((t0.c64) NOT BETWEEN ('-250008095') AND (t0.c64)))AND(((((((((((((t0.c64)OR(t0.c64)))OR(t0.c64)))AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))OR(t0.c64)))))AND(t0.c64))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((((t0.c64) NOT BETWEEN ('-250008095') AND (t0.c64)))AND(((((((((((((t0.c64)OR(t0.c64)))OR(t0.c64)))AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))OR(t0.c64)))))AND(t0.c64))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 NOT INDEXED WHERE (((((((((t0.c64) NOT BETWEEN ('-250008095') AND (t0.c64)))AND(((((((((((((t0.c64)OR(t0.c64)))OR(t0.c64)))AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))OR(t0.c64)))))AND(t0.c64))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING x'' UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (x'')) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((x'') ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING x'' UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (x'')) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((x'') ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE ((((t0.c64 IN ())) IS FALSE)) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((((t0.c64 IN ())) IS FALSE)))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((((((t0.c64 IN ())) IS FALSE)) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 NOT INDEXED WHERE (((t0.c64 COLLATE BINARY) IS TRUE)) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((t0.c64 COLLATE BINARY) IS TRUE)))) UNION SELECT DISTINCT * FROM t0 WHERE (((((t0.c64 COLLATE BINARY) IS TRUE)) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (0.959120495564691) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (0.959120495564691))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((0.959120495564691) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(t0.c64) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(t0.c64)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(t0.c64) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(t0.c64)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT * FROM t0;
SELECT ALL * FROM t0 WHERE (((t0.c64)IS(t0.c64)) COLLATE NOCASE) UNION ALL SELECT * FROM t0 WHERE ((NOT (((t0.c64)IS(t0.c64)) COLLATE NOCASE))) UNION ALL SELECT ALL * FROM t0 WHERE (((((t0.c64)IS(t0.c64)) COLLATE NOCASE) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64)<<(t0.c64)))=(TRIM(DISTINCT t0.c64, t0.c64)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64)<<(t0.c64)))==(TRIM(DISTINCT t0.c64, t0.c64)))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((((t0.c64)<<(t0.c64)))==(TRIM(DISTINCT t0.c64, t0.c64)))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (ABS(DISTINCT ((t0.c64)IS NOT(t0.c64)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (ABS(DISTINCT ((t0.c64)IS NOT(t0.c64)))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((ABS(DISTINCT ((t0.c64)IS NOT(t0.c64)))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(*) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(*))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(*) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(*))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE (((CAST(t0.c64 AS INTEGER))OR(((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (((CAST(t0.c64 AS INTEGER))OR(((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))))) UNION ALL SELECT * FROM t0 WHERE (((((CAST(t0.c64 AS INTEGER))OR(((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (CAST((((t0.c64))<=((t0.c64))) AS TEXT)) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (CAST((((t0.c64))<=((t0.c64))) AS TEXT)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((CAST((((t0.c64))<=((t0.c64))) AS TEXT)) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (CAST(x'' AS NUMERIC)) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CAST(x'' AS NUMERIC)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((CAST(x'' AS NUMERIC)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MIN(COUNT(t0.c64)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MIN(COUNT(t0.c64)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN(COUNT(t0.c64))) ISNULL);
SELECT * FROM t0;
SELECT * FROM t0 WHERE ((((((t0.c64, t0.c64, t0.c64, t0.c64, t0.c64)) NOT BETWEEN ((NULL, t0.c64, t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64, t0.c64, t0.c64))))GLOB(((t0.c64)*(t0.c64))))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT ((((((t0.c64, t0.c64, t0.c64, t0.c64, t0.c64)) NOT BETWEEN ((NULL, t0.c64, t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64, t0.c64, t0.c64))))GLOB(((t0.c64)*(t0.c64))))))) UNION ALL SELECT ALL * FROM t0 WHERE ((((((((t0.c64, t0.c64, t0.c64, t0.c64, t0.c64)) NOT BETWEEN ((NULL, t0.c64, t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64, t0.c64, t0.c64))))GLOB(((t0.c64)*(t0.c64))))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 NOT INDEXED WHERE (((((((('4ℑ/I3s/!', t0.c64, t0.c64)) NOT BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64))))OR(((((t0.c64)OR(t0.c64)))OR(x'63fb')))))OR(CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN '0.5629328606691917' THEN t0.c64 ELSE 0.25830959602667203 END))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((((((('4ℑ/I3s/!', t0.c64, t0.c64)) NOT BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64))))OR(((((t0.c64)OR(t0.c64)))OR(x'63fb')))))OR(CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN '0.5629328606691917' THEN t0.c64 ELSE 0.25830959602667203 END))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((((((('4ℑ/I3s/!', t0.c64, t0.c64)) NOT BETWEEN ((t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64))))OR(((((t0.c64)OR(t0.c64)))OR(x'63fb')))))OR(CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN '0.5629328606691917' THEN t0.c64 ELSE 0.25830959602667203 END))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((((t0.c64, t0.c64, t0.c64)) NOT BETWEEN (((NOT (t0.c64)), ((((t0.c64)AND('-505814277')))OR(t0.c64)), (NOT (t0.c64)))) AND ((t0.c64, ((((t0.c64)OR(t0.c64)))OR(t0.c64)), CAST(t0.c64 AS INTEGER))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT ((((t0.c64, t0.c64, t0.c64)) NOT BETWEEN (((NOT (t0.c64)), ((((t0.c64)AND('-505814277')))OR(t0.c64)), (NOT (t0.c64)))) AND ((t0.c64, ((((t0.c64)OR(t0.c64)))OR(t0.c64)), CAST(t0.c64 AS INTEGER))))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((((t0.c64, t0.c64, t0.c64)) NOT BETWEEN (((NOT (t0.c64)), ((((t0.c64)AND('-505814277')))OR(t0.c64)), (NOT (t0.c64)))) AND ((t0.c64, ((((t0.c64)OR(t0.c64)))OR(t0.c64)), CAST(t0.c64 AS INTEGER))))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MAX(((t0.c64) NOT BETWEEN ('814519644') AND (t0.c64))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MAX(((t0.c64) NOT BETWEEN ('814519644') AND (t0.c64))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MAX(((t0.c64) NOT BETWEEN ('814519644') AND (t0.c64)))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MAX(((t0.c64) NOT BETWEEN ('814519644') AND (t0.c64))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MAX(((t0.c64) NOT BETWEEN ('814519644') AND (t0.c64))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MAX(((t0.c64) NOT BETWEEN ('814519644') AND (t0.c64)))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (((((t0.c64 COLLATE NOCASE)AND(CAST(t0.c64 AS NUMERIC))))AND(CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((t0.c64 COLLATE NOCASE)AND(CAST(t0.c64 AS NUMERIC))))AND(CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((((((t0.c64 COLLATE NOCASE)AND(CAST(t0.c64 AS NUMERIC))))AND(CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ((- (t0.c64 COLLATE NOCASE))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ((- (t0.c64 COLLATE NOCASE))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((((- (t0.c64 COLLATE NOCASE))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (LOWER(DISTINCT t0.c64) COLLATE NOCASE COLLATE NOCASE) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (LOWER(DISTINCT t0.c64) COLLATE NOCASE COLLATE NOCASE))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((LOWER(DISTINCT t0.c64) COLLATE NOCASE COLLATE NOCASE) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM(t0.c64)) NOT BETWEEN (((((((((t0.c64)OR(GROUP_CONCAT(COUNT(MAX(MAX(COUNT(*))))))))OR(t0.c64)))OR(AVG(t0.c64))))OR(t0.c64))) AND (TOTAL(SUM(t0.c64)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((SUM(t0.c64)) NOT BETWEEN (((((((((t0.c64)OR(GROUP_CONCAT(COUNT(MAX(MAX(COUNT(*))))))))OR(t0.c64)))OR(AVG(t0.c64))))OR(t0.c64))) AND (TOTAL(SUM(t0.c64)))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((SUM(t0.c64)) NOT BETWEEN (((((((((t0.c64)OR(GROUP_CONCAT(COUNT(MAX(MAX(COUNT(*))))))))OR(t0.c64)))OR(AVG(t0.c64))))OR(t0.c64))) AND (TOTAL(SUM(t0.c64))))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (((((((t0.c64)AND(t0.c64)))OR(t0.c64))) BETWEEN (((t0.c64) ISNULL)) AND (((t0.c64) IS TRUE)))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((((((t0.c64)AND(t0.c64)))OR(t0.c64))) BETWEEN (((t0.c64) ISNULL)) AND (((t0.c64) IS TRUE)))))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((((((((t0.c64)AND(t0.c64)))OR(t0.c64))) BETWEEN (((t0.c64) ISNULL)) AND (((t0.c64) IS TRUE)))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ((((t0.c64)) NOT BETWEEN (((~ (t0.c64)))) AND (((t0.c64 IN ()))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ((((t0.c64)) NOT BETWEEN (((~ (t0.c64)))) AND (((t0.c64 IN ()))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((((((t0.c64)) NOT BETWEEN (((~ (t0.c64)))) AND (((t0.c64 IN ()))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((IFNULL(DISTINCT t0.c64, t0.c64))AND(t0.c64 COLLATE BINARY))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((IFNULL(DISTINCT t0.c64, t0.c64))AND(t0.c64 COLLATE BINARY))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((IFNULL(DISTINCT t0.c64, t0.c64))AND(t0.c64 COLLATE BINARY))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING CAST(AVG(MIN(t0.c64)) AS BLOB) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CAST(AVG(MIN(t0.c64)) AS BLOB))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CAST(AVG(MIN(t0.c64)) AS BLOB)) ISNULL);
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE ((- (CASE t0.c64  WHEN t0.c64 THEN t0.c64 END))) UNION ALL SELECT * FROM t0 WHERE ((NOT ((- (CASE t0.c64  WHEN t0.c64 THEN t0.c64 END))))) UNION ALL SELECT * FROM t0 WHERE ((((- (CASE t0.c64  WHEN t0.c64 THEN t0.c64 END))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (t0.c64 COLLATE RTRIM) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (t0.c64 COLLATE RTRIM))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64 COLLATE RTRIM) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((+ (t0.c64))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((+ (t0.c64))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((((+ (t0.c64))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING CAST(AVG(COUNT(t0.c64)) AS INTEGER) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CAST(AVG(COUNT(t0.c64)) AS INTEGER))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CAST(AVG(COUNT(t0.c64)) AS INTEGER)) ISNULL);
SELECT ALL SUM(t0.c64) FROM t0;
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE (CASE WHEN ((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) THEN ((((t0.c64)OR(t0.c64)))OR(t0.c64)) END) ORDER BY x'' ASC;
SELECT * FROM t0 WHERE ((NOT (CASE WHEN ((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) THEN ((((t0.c64)OR(t0.c64)))OR(t0.c64)) END))) ORDER BY x'' ASC;
SELECT * FROM t0 WHERE (((CASE WHEN ((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) THEN ((((t0.c64)OR(t0.c64)))OR(t0.c64)) END) ISNULL)) ORDER BY x'' ASC;
SELECT ALL * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((0.38016874364346354 IN (t0.c64)) COLLATE BINARY) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((0.38016874364346354 IN (t0.c64)) COLLATE BINARY))) UNION SELECT DISTINCT * FROM t0 WHERE ((((0.38016874364346354 IN (t0.c64)) COLLATE BINARY) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CAST((t0.c64 IN ()) AS NUMERIC)) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CAST((t0.c64 IN ()) AS NUMERIC)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 NOT INDEXED WHERE (((CAST((t0.c64 IN ()) AS NUMERIC)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MIN(((TOTAL(SUM(t0.c64))) NOT BETWEEN (MIN(t0.c64)) AND (AVG(GROUP_CONCAT(AVG(t0.c64)))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MIN(((TOTAL(SUM(t0.c64))) NOT BETWEEN (MIN(t0.c64)) AND (AVG(GROUP_CONCAT(AVG(t0.c64)))))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN(((TOTAL(SUM(t0.c64))) NOT BETWEEN (MIN(t0.c64)) AND (AVG(GROUP_CONCAT(AVG(t0.c64))))))) ISNULL);
SELECT * FROM t0;
SELECT * FROM t0 WHERE (t0.c64) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (t0.c64))) UNION ALL SELECT ALL * FROM t0 WHERE (((t0.c64) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ((((t0.c64)<>(t0.c64)) IN (('h' IN ()), CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ((((t0.c64)<>(t0.c64)) IN (('h' IN ()), CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((((((t0.c64)<>(t0.c64)) IN (('h' IN ()), CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 END)/(((t0.c64)<<(t0.c64))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 END)/(((t0.c64)<<(t0.c64))))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 END)/(((t0.c64)<<(t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING AVG((- (t0.c64))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (AVG((- (t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((AVG((- (t0.c64)))) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING AVG((- (t0.c64))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (AVG((- (t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((AVG((- (t0.c64)))) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT * FROM t0;
SELECT * FROM t0 WHERE (((CAST(t0.c64 AS REAL)) NOT NULL)) ORDER BY highlight((- (t0.c64)), CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 END, t0.c64 COLLATE RTRIM, ((t0.c64) NOT NULL))  NULLS FIRST;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)!=(t0.c64))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)!=(t0.c64))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)<>(t0.c64))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (NULL COLLATE NOCASE) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (NULL COLLATE NOCASE))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((NULL COLLATE NOCASE) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING AVG((((t0.c64))<>((SUM(TOTAL(GROUP_CONCAT(t0.c64))))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (AVG((((t0.c64))!=((SUM(TOTAL(GROUP_CONCAT(t0.c64))))))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((AVG((((t0.c64))!=((SUM(TOTAL(GROUP_CONCAT(t0.c64)))))))) ISNULL);
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE ((((CASE t0.c64  WHEN t0.c64 THEN x'' ELSE t0.c64 END))<((CASE WHEN t0.c64 THEN t0.c64 END)))) UNION ALL SELECT * FROM t0 WHERE ((NOT ((((CASE t0.c64  WHEN t0.c64 THEN x'' ELSE t0.c64 END))<((CASE WHEN t0.c64 THEN t0.c64 END)))))) UNION ALL SELECT ALL * FROM t0 WHERE ((((((CASE t0.c64  WHEN t0.c64 THEN x'' ELSE t0.c64 END))<((CASE WHEN t0.c64 THEN t0.c64 END)))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (CASE 1753397441  WHEN CAST(t0.c64 AS INTEGER) THEN ((((t0.c64)AND(t0.c64)))AND(t0.c64)) END) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (CASE 1753397441  WHEN CAST(t0.c64 AS INTEGER) THEN ((((t0.c64)AND(t0.c64)))AND(t0.c64)) END))) UNION SELECT DISTINCT * FROM t0 WHERE (((CASE 1753397441  WHEN CAST(t0.c64 AS INTEGER) THEN ((((t0.c64)AND(t0.c64)))AND(t0.c64)) END) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CAST(((t0.c64)<(t0.c64)) AS INTEGER)) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CAST(((t0.c64)<(t0.c64)) AS INTEGER)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((CAST(((t0.c64)<(t0.c64)) AS INTEGER)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING CASE WHEN SUM(SUM(t0.c64)) THEN COUNT(AVG(COUNT(t0.c64))) END UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CASE WHEN SUM(SUM(t0.c64)) THEN COUNT(AVG(COUNT(t0.c64))) END)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CASE WHEN SUM(SUM(t0.c64)) THEN COUNT(AVG(COUNT(t0.c64))) END) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE ((SQLITE_VERSION() IN ())) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT ((SQLITE_VERSION() IN ())))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((((SQLITE_VERSION() IN ())) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (HEX(((((((((((((t0.c64)AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (HEX(((((((((((((t0.c64)AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))))) UNION SELECT DISTINCT * FROM t0 WHERE (((HEX(((((((((((((t0.c64)AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))AND(t0.c64)))OR(t0.c64)))OR(t0.c64)))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 NOT INDEXED GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((t0.c64 IN ()) IN ())) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((t0.c64 IN ()) IN ())))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((t0.c64 IN ()) IN ())) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 NOT INDEXED GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((GROUP_CONCAT(COUNT(*)))AND(((TOTAL(MAX(GROUP_CONCAT(t0.c64))))GLOB(MAX(COUNT(*)))))))OR(COUNT(*))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((((GROUP_CONCAT(COUNT(*)))AND(((TOTAL(MAX(GROUP_CONCAT(t0.c64))))GLOB(MAX(COUNT(*)))))))OR(COUNT(*))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((GROUP_CONCAT(COUNT(*)))AND(((TOTAL(MAX(GROUP_CONCAT(t0.c64))))GLOB(MAX(COUNT(*)))))))OR(COUNT(*)))) ISNULL);
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE ((NOT (CASE t0.c64  WHEN t0.c64 THEN t0.c64 END))) UNION ALL SELECT * FROM t0 WHERE ((NOT ((NOT (CASE t0.c64  WHEN t0.c64 THEN t0.c64 END))))) UNION ALL SELECT * FROM t0 WHERE ((((NOT (CASE t0.c64  WHEN t0.c64 THEN t0.c64 END))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((((('l')/(t0.c64))) IS TRUE)) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((((('l')/(t0.c64))) IS TRUE)))) UNION SELECT DISTINCT * FROM t0 WHERE ((((((('l')/(t0.c64))) IS TRUE)) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CAST(((t0.c64)%(t0.c64)) AS NUMERIC)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (CAST(((t0.c64)%(t0.c64)) AS NUMERIC)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((CAST(((t0.c64)%(t0.c64)) AS NUMERIC)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING SUM((SUM(SUM(t0.c64)) IN ())) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (SUM((SUM(SUM(t0.c64)) IN ())))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM((SUM(SUM(t0.c64)) IN ()))) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING SUM((SUM(SUM(t0.c64)) IN ())) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (SUM((SUM(SUM(t0.c64)) IN ())))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM((SUM(SUM(t0.c64)) IN ()))) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 END)LIKE(highlight(t0.c64, t0.c64, t0.c64, t0.c64)))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 END)LIKE(highlight(t0.c64, t0.c64, t0.c64, t0.c64)))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 END)LIKE(highlight(t0.c64, t0.c64, t0.c64, t0.c64)))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64) NOT BETWEEN (t0.c64) AND (CAST(t0.c64 AS REAL)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((t0.c64) NOT BETWEEN (t0.c64) AND (CAST(t0.c64 AS REAL)))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64) NOT BETWEEN (t0.c64) AND (CAST(t0.c64 AS REAL)))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CAST(json_array_length(t0.c64) AS INTEGER)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (CAST(json_array_length(t0.c64) AS INTEGER)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((CAST(json_array_length(t0.c64) AS INTEGER)) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING AVG(TOTAL(t0.c64) COLLATE RTRIM) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (AVG(TOTAL(t0.c64) COLLATE RTRIM))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((AVG(TOTAL(t0.c64) COLLATE RTRIM)) ISNULL);
SELECT ALL SUM(((t0.c64 COLLATE NOCASE)LIKE(CASE t0.c64  WHEN t0.c64 THEN t0.c64 END))) FROM t0 ORDER BY t0.c64  NULLS LAST;
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE (UPPER(((t0.c64)<(t0.c64)))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (UPPER(((t0.c64)<(t0.c64)))))) UNION ALL SELECT ALL * FROM t0 WHERE (((UPPER(((t0.c64)<(t0.c64)))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) COLLATE RTRIM) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) COLLATE RTRIM))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) COLLATE RTRIM) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (NULL) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (NULL))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((NULL) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING SUM(x'') UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (SUM(x''))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM(x'')) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING SUM(x'') UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (SUM(x''))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM(x'')) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (((')_]C') IS FALSE)) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((')_]C') IS FALSE)))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((((')_]C') IS FALSE)) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((((((t0.c64)+(t0.c64)))OR(((t0.c64)IS(t0.c64)))))OR((t0.c64 IN ())))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((((((t0.c64)+(t0.c64)))OR(((t0.c64)IS(t0.c64)))))OR((t0.c64 IN ())))))) UNION SELECT DISTINCT * FROM t0 WHERE (((((((((t0.c64)+(t0.c64)))OR(((t0.c64)IS(t0.c64)))))OR((t0.c64 IN ())))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((((((((((t0.c64) ISNULL))AND(((t0.c64)>(t0.c64)))))AND(((t0.c64)&(t0.c64)))))OR(((0X4c0ba6ed) ISNULL))))AND(0.27896540088493094))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((((((((((t0.c64) ISNULL))AND(((t0.c64)>(t0.c64)))))AND(((t0.c64)&(t0.c64)))))OR(((0x4c0ba6ed) ISNULL))))AND(0.27896540088493094))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((((((((((t0.c64) ISNULL))AND(((t0.c64)>(t0.c64)))))AND(((t0.c64)&(t0.c64)))))OR(((0x4c0ba6ed) ISNULL))))AND(0.27896540088493094))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((- (AVG(t0.c64)))) BETWEEN (MIN(GROUP_CONCAT(t0.c64), COUNT(*), COUNT(*), SUM(SUM(t0.c64)))) AND ((((t0.c64)) BETWEEN ((t0.c64)) AND ((SUM(t0.c64)))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((((- (AVG(t0.c64)))) BETWEEN (MIN(GROUP_CONCAT(t0.c64), COUNT(*), COUNT(*), SUM(SUM(t0.c64)))) AND ((((t0.c64)) BETWEEN ((t0.c64)) AND ((SUM(t0.c64)))))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((- (AVG(t0.c64)))) BETWEEN (MIN(GROUP_CONCAT(t0.c64), COUNT(*), COUNT(*), SUM(SUM(t0.c64)))) AND ((((t0.c64)) BETWEEN ((t0.c64)) AND ((SUM(t0.c64))))))) ISNULL);
SELECT * FROM t0 INDEXED BY i63;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (QUOTE(t0.c64)) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (QUOTE(t0.c64)))) UNION SELECT DISTINCT * FROM t0 WHERE (((QUOTE(t0.c64)) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CASE ((t0.c64)OR(t0.c64))  WHEN LIKELIHOOD(t0.c64, 0.5712305645456709) THEN ((((t0.c64)OR(t0.c64)))OR(t0.c64)) WHEN 'RW' THEN ((((t0.c64)AND(t0.c64)))AND('451712131')) WHEN t0.c64 COLLATE NOCASE THEN CAST(t0.c64 AS TEXT) END) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (CASE ((t0.c64)OR(t0.c64))  WHEN LIKELIHOOD(t0.c64, 0.5712305645456709) THEN ((((t0.c64)OR(t0.c64)))OR(t0.c64)) WHEN 'RW' THEN ((((t0.c64)AND(t0.c64)))AND('451712131')) WHEN t0.c64 COLLATE NOCASE THEN CAST(t0.c64 AS TEXT) END))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((CASE ((t0.c64)OR(t0.c64))  WHEN LIKELIHOOD(t0.c64, 0.5712305645456709) THEN ((((t0.c64)OR(t0.c64)))OR(t0.c64)) WHEN 'RW' THEN ((((t0.c64)AND(t0.c64)))AND('451712131')) WHEN t0.c64 COLLATE NOCASE THEN CAST(t0.c64 AS TEXT) END) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING CASE GROUP_CONCAT(t0.c64)  WHEN COUNT(TOTAL(t0.c64)) THEN ((COUNT(t0.c64)) IS FALSE) END UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CASE GROUP_CONCAT(t0.c64)  WHEN COUNT(TOTAL(t0.c64)) THEN ((COUNT(t0.c64)) IS FALSE) END)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CASE GROUP_CONCAT(t0.c64)  WHEN COUNT(TOTAL(t0.c64)) THEN ((COUNT(t0.c64)) IS FALSE) END) ISNULL);
SELECT ALL MAX((((t0.c64 IN ()))<(0.5565826846451885))) FROM t0;
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64 IN ('-1109681467'))))<=((((t0.c64) IS FALSE))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((t0.c64 IN ('-1109681467'))))<=((((t0.c64) IS FALSE))))))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((((((t0.c64 IN ('-1109681467'))))<=((((t0.c64) IS FALSE))))) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ((((((t0.c64))=((t0.c64)))) NOT BETWEEN ((t0.c64 IN ())) AND (((t0.c64)||(t0.c64))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ((((((t0.c64))==((t0.c64)))) NOT BETWEEN ((t0.c64 IN ())) AND (((t0.c64)||(t0.c64))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((((((((t0.c64))=((t0.c64)))) NOT BETWEEN ((t0.c64 IN ())) AND (((t0.c64)||(t0.c64))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((CASE WHEN t0.c64 THEN t0.c64 ELSE 0Xfffffffffe545989 END)&('Uㇻ'))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((CASE WHEN t0.c64 THEN t0.c64 ELSE 0Xfffffffffe545989 END)&('Uㇻ'))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((CASE WHEN t0.c64 THEN t0.c64 ELSE 0Xfffffffffe545989 END)&('Uㇻ'))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING 0.7474910403456524 UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (0.7474910403456524)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((0.7474910403456524) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING 0.7474910403456524 UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (0.7474910403456524)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((0.7474910403456524) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE (CAST(CAST(t0.c64 AS REAL) AS BLOB)) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (CAST(CAST(t0.c64 AS REAL) AS BLOB)))) UNION ALL SELECT * FROM t0 WHERE (((CAST(CAST(t0.c64 AS REAL) AS BLOB)) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (LOWER((((t0.c64, t0.c64, t0.c64))!=((t0.c64, t0.c64, '(h'))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (LOWER((((t0.c64, t0.c64, t0.c64))!=((t0.c64, t0.c64, '(h'))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((LOWER((((t0.c64, t0.c64, t0.c64))<>((t0.c64, t0.c64, '(h'))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CAST('-1557093996' AS REAL)) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CAST('-1557093996' AS REAL)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((CAST('-1557093996' AS REAL)) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING AVG(MIN(AVG(COUNT(t0.c64)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (AVG(MIN(AVG(COUNT(t0.c64)))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((AVG(MIN(AVG(COUNT(t0.c64))))) ISNULL);
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE (((((t0.c64)*(t0.c64)))==((t0.c64 IN ())))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (((((t0.c64)*(t0.c64)))==((t0.c64 IN ())))))) UNION ALL SELECT * FROM t0 WHERE (((((((t0.c64)*(t0.c64)))==((t0.c64 IN ())))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (UNLIKELY((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (UNLIKELY((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((UNLIKELY((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CAST(CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END AS BLOB)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (CAST(CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END AS BLOB)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((CAST(CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END AS BLOB)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((t0.c64)+(t0.c64)))OR(COUNT(SUM(COUNT(*))))))OR(MAX(AVG(TOTAL(t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((((((t0.c64)+(t0.c64)))OR(COUNT(SUM(COUNT(*))))))OR(MAX(AVG(TOTAL(t0.c64))))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((((t0.c64)+(t0.c64)))OR(COUNT(SUM(COUNT(*))))))OR(MAX(AVG(TOTAL(t0.c64)))))) ISNULL);
SELECT ALL SUM((((t0.c64 IN ()))>>(NULLIF(t0.c64, t0.c64)))) FROM t0;
SELECT * FROM t0;
SELECT * FROM t0 WHERE (CASE WHEN ((t0.c64)LIKE(x'')) THEN ((((t0.c64)OR(t0.c64)))OR(t0.c64)) ELSE CAST(t0.c64 AS TEXT) END) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (CASE WHEN ((t0.c64)LIKE(x'')) THEN ((((t0.c64)OR(t0.c64)))OR(t0.c64)) ELSE CAST(t0.c64 AS TEXT) END))) UNION ALL SELECT * FROM t0 WHERE (((CASE WHEN ((t0.c64)LIKE(x'')) THEN ((((t0.c64)OR(t0.c64)))OR(t0.c64)) ELSE CAST(t0.c64 AS TEXT) END) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((NULL) NOT BETWEEN ((t0.c64 IN ())) AND ((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64)))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((NULL) NOT BETWEEN ((t0.c64 IN ())) AND ((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64)))))))) UNION SELECT DISTINCT * FROM t0 WHERE (((((NULL) NOT BETWEEN ((t0.c64 IN ())) AND ((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64)))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (x'') GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (x''))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((x'') ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(*) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(*))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(*) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(*))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (CASE WHEN x'' THEN (t0.c64 IN ()) END) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CASE WHEN x'' THEN (t0.c64 IN ()) END))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((CASE WHEN x'' THEN (t0.c64 IN ()) END) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE ((((t0.c64)|(t0.c64)) IN (((t0.c64)>=(t0.c64)), CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT ((((t0.c64)|(t0.c64)) IN (((t0.c64)>=(t0.c64)), CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((((((t0.c64)|(t0.c64)) IN (((t0.c64)>=(t0.c64)), CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE ((~ (((((((((t0.c64)AND(t0.c64)))AND(t0.c64)))OR('')))OR(t0.c64))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((~ (((((((((t0.c64)AND(t0.c64)))AND(t0.c64)))OR('')))OR(t0.c64))))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((~ (((((((((t0.c64)AND(t0.c64)))AND(t0.c64)))OR('')))OR(t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((COUNT(t0.c64)) NOT BETWEEN (TOTAL(t0.c64)) AND (MIN(t0.c64))) IN ()) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((((COUNT(t0.c64)) NOT BETWEEN (TOTAL(t0.c64)) AND (MIN(t0.c64))) IN ()))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((COUNT(t0.c64)) NOT BETWEEN (TOTAL(t0.c64)) AND (MIN(t0.c64))) IN ())) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((COUNT(t0.c64)) NOT BETWEEN (TOTAL(t0.c64)) AND (MIN(t0.c64))) IN ()) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((((COUNT(t0.c64)) NOT BETWEEN (TOTAL(t0.c64)) AND (MIN(t0.c64))) IN ()))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((COUNT(t0.c64)) NOT BETWEEN (TOTAL(t0.c64)) AND (MIN(t0.c64))) IN ())) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT MAX(((UNLIKELY(t0.c64)) NOTNULL)) FROM t0 ORDER BY CAST(((t0.c64)<(t0.c64)) AS INTEGER) ASC;
SELECT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (CAST(CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END AS TEXT)) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CAST(CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END AS TEXT)))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((CAST(CASE t0.c64  WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END AS TEXT)) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64) NOTNULL)) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((t0.c64) NOTNULL)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64) NOTNULL)) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE ((((t0.c64)) BETWEEN ((CAST(t0.c64 AS BLOB))) AND ((('560084295' IN ()))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((((t0.c64)) BETWEEN ((CAST(t0.c64 AS BLOB))) AND ((('560084295' IN ()))))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((((((t0.c64)) BETWEEN ((CAST(t0.c64 AS BLOB))) AND ((('560084295' IN ()))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING GROUP_CONCAT(CASE COUNT(*)  WHEN SUM(COUNT(COUNT(*))) THEN MAX(0.9774971903320192) ELSE t0.c64 END) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (GROUP_CONCAT(CASE COUNT(*)  WHEN SUM(COUNT(COUNT(*))) THEN MAX(0.9774971903320192) ELSE t0.c64 END))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((GROUP_CONCAT(CASE COUNT(*)  WHEN SUM(COUNT(COUNT(*))) THEN MAX(0.9774971903320192) ELSE t0.c64 END)) ISNULL);
SELECT * FROM t0;
SELECT * FROM t0 WHERE (CASE (t0.c64 IN ())  WHEN (+ (t0.c64)) THEN 'k}' ELSE ((t0.c64)<(t0.c64)) END) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (CASE (t0.c64 IN ())  WHEN (+ (t0.c64)) THEN 'k}' ELSE ((t0.c64)<(t0.c64)) END))) UNION ALL SELECT ALL * FROM t0 WHERE (((CASE (t0.c64 IN ())  WHEN (+ (t0.c64)) THEN 'k}' ELSE ((t0.c64)<(t0.c64)) END) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (t0.c64 COLLATE RTRIM) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (t0.c64 COLLATE RTRIM))) UNION SELECT DISTINCT * FROM t0 WHERE (((t0.c64 COLLATE RTRIM) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((((t0.c64)<(t0.c64))) ISNULL)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64)<(t0.c64))) ISNULL)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((((t0.c64)<(t0.c64))) ISNULL)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(COUNT(MIN(MIN(TOTAL(COUNT(*)))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(COUNT(MIN(MIN(TOTAL(COUNT(*)))))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(COUNT(MIN(MIN(TOTAL(COUNT(*))))))) ISNULL);
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE (CAST(t0.c64 AS NUMERIC)) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (CAST(t0.c64 AS NUMERIC)))) UNION ALL SELECT ALL * FROM t0 WHERE (((CAST(t0.c64 AS NUMERIC)) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((((LIKELY(t0.c64))AND(CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)))OR((((t0.c64))>((t0.c64)))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((((LIKELY(t0.c64))AND(CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)))OR((((t0.c64))>((t0.c64)))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((((LIKELY(t0.c64))AND(CASE WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END)))OR((((t0.c64))>((t0.c64)))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE ((((((t0.c64))==((t0.c64))))LIKE(((t0.c64)|(t0.c64))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((((((t0.c64))=((t0.c64))))LIKE(((t0.c64)|(t0.c64))))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((((((((t0.c64))=((t0.c64))))LIKE(((t0.c64)|(t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING CASE WHEN TOTAL(SUM(t0.c64)) THEN (NULL IN ()) WHEN t0.c64 THEN AVG(t0.c64) WHEN AVG(t0.c64) THEN MAX(t0.c64) ELSE SUM(COUNT(t0.c64)) END UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CASE WHEN TOTAL(SUM(t0.c64)) THEN (NULL IN ()) WHEN t0.c64 THEN AVG(t0.c64) WHEN AVG(t0.c64) THEN MAX(t0.c64) ELSE SUM(COUNT(t0.c64)) END)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CASE WHEN TOTAL(SUM(t0.c64)) THEN (NULL IN ()) WHEN t0.c64 THEN AVG(t0.c64) WHEN AVG(t0.c64) THEN MAX(t0.c64) ELSE SUM(COUNT(t0.c64)) END) ISNULL);
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (CAST(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) AS NUMERIC)) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CAST(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) AS NUMERIC)))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((CAST(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) AS NUMERIC)) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64)LIKE(t0.c64))) NOTNULL)) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64)LIKE(t0.c64))) NOTNULL)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((((t0.c64)LIKE(t0.c64))) NOTNULL)) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((((((t0.c64) NOTNULL))AND((((t0.c64))==((t0.c64))))))AND(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((((t0.c64) NOTNULL))AND((((t0.c64))==((t0.c64))))))AND(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((((((t0.c64) NOTNULL))AND((((t0.c64))==((t0.c64))))))AND(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((AVG(t0.c64)) ISNULL) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((AVG(t0.c64)) ISNULL))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((AVG(t0.c64)) ISNULL)) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((AVG(t0.c64)) ISNULL) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((AVG(t0.c64)) ISNULL))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((AVG(t0.c64)) ISNULL)) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT * FROM t0;
SELECT * FROM t0 WHERE ((((((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64))))OR((~ (t0.c64)))))OR(CAST(t0.c64 AS BLOB)))) UNION ALL SELECT * FROM t0 WHERE ((NOT ((((((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64))))OR((~ (t0.c64)))))OR(CAST(t0.c64 AS BLOB)))))) UNION ALL SELECT ALL * FROM t0 WHERE ((((((((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64))))OR((~ (t0.c64)))))OR(CAST(t0.c64 AS BLOB)))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (CAST(t0.c64 COLLATE NOCASE AS NUMERIC)) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (CAST(t0.c64 COLLATE NOCASE AS NUMERIC)))) UNION SELECT DISTINCT * FROM t0 WHERE (((CAST(t0.c64 COLLATE NOCASE AS NUMERIC)) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (LIKELY(t0.c64 COLLATE BINARY)) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (LIKELY(t0.c64 COLLATE BINARY)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((LIKELY(t0.c64 COLLATE BINARY)) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MIN(COUNT(*)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MIN(COUNT(*)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN(COUNT(*))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (((((((x'') IS FALSE))AND((t0.c64 IN ()))))OR(t0.c64 COLLATE RTRIM))) ORDER BY ((((((((t0.c64)OR('1358056840')))AND(t0.c64)))AND(UNLIKELY(DISTINCT t0.c64))))OR((- (t0.c64))));
SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((((x'') IS FALSE))AND((t0.c64 IN ()))))OR(t0.c64 COLLATE RTRIM))))) ORDER BY ((((((((t0.c64)OR('1358056840')))AND(t0.c64)))AND(UNLIKELY(DISTINCT t0.c64))))OR((- (t0.c64))));
SELECT ALL t0.c64 FROM t0 WHERE (((((((((x'') IS FALSE))AND((t0.c64 IN ()))))OR(t0.c64 COLLATE RTRIM))) ISNULL)) ORDER BY ((((((((t0.c64)OR('1358056840')))AND(t0.c64)))AND(UNLIKELY(DISTINCT t0.c64))))OR((- (t0.c64))));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 INDEXED BY i27;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CASE WHEN x'4958' THEN t0.c64 END) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 NOT INDEXED WHERE ((NOT (CASE WHEN x'4958' THEN t0.c64 END))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((CASE WHEN x'4958' THEN t0.c64 END) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (+ (COUNT(*))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((+ (COUNT(*))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((+ (COUNT(*)))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (+ (COUNT(*))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((+ (COUNT(*))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((+ (COUNT(*)))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE ((~ (((t0.c64)+(t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((~ (((t0.c64)+(t0.c64))))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((((~ (((t0.c64)+(t0.c64))))) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (t0.c64) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (t0.c64))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((t0.c64) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((t0.c64 COLLATE NOCASE)>=(CAST(t0.c64 AS NUMERIC)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((t0.c64 COLLATE NOCASE)>=(CAST(t0.c64 AS NUMERIC)))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((t0.c64 COLLATE NOCASE)>=(CAST(t0.c64 AS NUMERIC)))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING SUM(MAX(GROUP_CONCAT(t0.c64)) COLLATE BINARY) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (SUM(MAX(GROUP_CONCAT(t0.c64)) COLLATE BINARY))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM(MAX(GROUP_CONCAT(t0.c64)) COLLATE BINARY)) ISNULL);
SELECT * FROM t0;
SELECT * FROM t0 WHERE (((t0.c64 COLLATE NOCASE)*(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (((t0.c64 COLLATE NOCASE)*(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))))) UNION ALL SELECT ALL * FROM t0 WHERE (((((t0.c64 COLLATE NOCASE)*(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((t0.c64) NOT NULL)) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((t0.c64) NOT NULL)))) UNION SELECT DISTINCT * FROM t0 WHERE (((((t0.c64) NOT NULL)) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) IN ())) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) IN ())))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((((t0.c64) BETWEEN (t0.c64) AND (t0.c64)) IN ())) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING TOTAL(COUNT(*)) COLLATE RTRIM UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (TOTAL(COUNT(*)) COLLATE RTRIM)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((TOTAL(COUNT(*)) COLLATE RTRIM) ISNULL);
SELECT * FROM t0;
SELECT * FROM t0 WHERE (((CAST(t0.c64 AS NUMERIC))>=(((NULL) IS FALSE)))) UNION ALL SELECT * FROM t0 WHERE ((NOT (((CAST(t0.c64 AS NUMERIC))>=(((NULL) IS FALSE)))))) UNION ALL SELECT ALL * FROM t0 WHERE (((((CAST(t0.c64 AS NUMERIC))>=(((NULL) IS FALSE)))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (CAST(t0.c64 AS TEXT) COLLATE RTRIM) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (CAST(t0.c64 AS TEXT) COLLATE RTRIM))) UNION SELECT DISTINCT * FROM t0 WHERE (((CAST(t0.c64 AS TEXT) COLLATE RTRIM) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((t0.c64)>=(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((t0.c64)>=(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((((t0.c64)>=(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((TOTAL(TOTAL(GROUP_CONCAT(AVG(AVG(GROUP_CONCAT(t0.c64))))))) NOT BETWEEN (((MIN(TOTAL(SUM(COUNT(MIN(SUM(t0.c64)))))))&(GROUP_CONCAT(SUM(MIN(t0.c64)))))) AND (((MAX(SUM(t0.c64))) BETWEEN (TOTAL(COUNT(t0.c64))) AND (COUNT(MIN(t0.c64)))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((TOTAL(TOTAL(GROUP_CONCAT(AVG(AVG(GROUP_CONCAT(t0.c64))))))) NOT BETWEEN (((MIN(TOTAL(SUM(COUNT(MIN(SUM(t0.c64)))))))&(GROUP_CONCAT(SUM(MIN(t0.c64)))))) AND (((MAX(SUM(t0.c64))) BETWEEN (TOTAL(COUNT(t0.c64))) AND (COUNT(MIN(t0.c64)))))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((TOTAL(TOTAL(GROUP_CONCAT(AVG(AVG(GROUP_CONCAT(t0.c64))))))) NOT BETWEEN (((MIN(TOTAL(SUM(COUNT(MIN(SUM(t0.c64)))))))&(GROUP_CONCAT(SUM(MIN(t0.c64)))))) AND (((MAX(SUM(t0.c64))) BETWEEN (TOTAL(COUNT(t0.c64))) AND (COUNT(MIN(t0.c64))))))) ISNULL);
SELECT * FROM t0;
SELECT ALL * FROM t0 WHERE ((+ (((t0.c64)AND(t0.c64))))) UNION ALL SELECT * FROM t0 WHERE ((NOT ((+ (((t0.c64)AND(t0.c64))))))) UNION ALL SELECT * FROM t0 WHERE ((((+ (((t0.c64)AND(t0.c64))))) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0 INDEXED BY i63;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((('4hR')AND(((t0.c64)*(t0.c64))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((('4hR')AND(((t0.c64)*(t0.c64))))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((('4hR')AND(((t0.c64)*(t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING SUM(CAST(t0.c64 AS BLOB)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (SUM(CAST(t0.c64 AS BLOB)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM(CAST(t0.c64 AS BLOB))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING SUM(CAST(t0.c64 AS BLOB)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (SUM(CAST(t0.c64 AS BLOB)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM(CAST(t0.c64 AS BLOB))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE (((((UNLIKELY(t0.c64))OR(t0.c64 COLLATE NOCASE)))AND(CASE t0.c64  WHEN '1301101615' THEN t0.c64 END))) UNION ALL SELECT * FROM t0 WHERE ((NOT (((((UNLIKELY(t0.c64))OR(t0.c64 COLLATE NOCASE)))AND(CASE t0.c64  WHEN '1301101615' THEN t0.c64 END))))) UNION ALL SELECT ALL * FROM t0 WHERE (((((((UNLIKELY(t0.c64))OR(t0.c64 COLLATE NOCASE)))AND(CASE t0.c64  WHEN '1301101615' THEN t0.c64 END))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT * FROM t0 INDEXED BY i27;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CAST(CAST(t0.c64 AS NUMERIC) AS REAL)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (CAST(CAST(t0.c64 AS NUMERIC) AS REAL)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((CAST(CAST(t0.c64 AS NUMERIC) AS REAL)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING GROUP_CONCAT(x'') UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (GROUP_CONCAT(x''))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((GROUP_CONCAT(x'')) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING GROUP_CONCAT(x'') UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (GROUP_CONCAT(x''))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((GROUP_CONCAT(x'')) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE ((t0.c64 IN ((((t0.c64))<((t0.c64))), ((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT ((t0.c64 IN ((((t0.c64))<((t0.c64))), ((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((((t0.c64 IN ((((t0.c64))<((t0.c64))), ((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64) BETWEEN (0.5060613967632189) AND (t0.c64))) NOT BETWEEN (t0.c64) AND (((((t0.c64)OR(t0.c64)))AND(t0.c64))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64) BETWEEN (0.5060613967632189) AND (t0.c64))) NOT BETWEEN (t0.c64) AND (((((t0.c64)OR(t0.c64)))AND(t0.c64))))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((((t0.c64) BETWEEN (0.5060613967632189) AND (t0.c64))) NOT BETWEEN (t0.c64) AND (((((t0.c64)OR(t0.c64)))AND(t0.c64))))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (CASE '-793810969'  WHEN ((((((((t0.c64)AND(t0.c64)))AND('()')))AND(t0.c64)))OR(t0.c64)) THEN (((t0.c64, t0.c64, t0.c64, 896163480, t0.c64)) BETWEEN ((t0.c64, t0.c64, t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64, x'', t0.c64))) END) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CASE '-793810969'  WHEN ((((((((t0.c64)AND(t0.c64)))AND('()')))AND(t0.c64)))OR(t0.c64)) THEN (((t0.c64, t0.c64, t0.c64, 896163480, t0.c64)) BETWEEN ((t0.c64, t0.c64, t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64, x'', t0.c64))) END))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((CASE '-793810969'  WHEN ((((((((t0.c64)AND(t0.c64)))AND('()')))AND(t0.c64)))OR(t0.c64)) THEN (((t0.c64, t0.c64, t0.c64, 896163480, t0.c64)) BETWEEN ((t0.c64, t0.c64, t0.c64, t0.c64, t0.c64)) AND ((t0.c64, t0.c64, t0.c64, x'', t0.c64))) END) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING '}+qRr뀲u' UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ('}+qRr뀲u')) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (('}+qRr뀲u') ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING '}+qRr뀲u' UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ('}+qRr뀲u')) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (('}+qRr뀲u') ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT SUM(((CAST(t0.c64 AS NUMERIC)) NOT BETWEEN (t0.c64) AND (CAST(t0.c64 AS NUMERIC)))) FROM t0;
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE ((((t0.c64)) BETWEEN ((((t0.c64) ISNULL))) AND ((t0.c64)))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT ((((t0.c64)) BETWEEN ((((t0.c64) ISNULL))) AND ((t0.c64)))))) UNION ALL SELECT * FROM t0 WHERE ((((((t0.c64)) BETWEEN ((((t0.c64) ISNULL))) AND ((t0.c64)))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((+ ('-1076185860')) IN ())) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((+ ('-1076185860')) IN ())))) UNION SELECT DISTINCT * FROM t0 WHERE (((((+ ('-1076185860')) IN ())) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (t0.c64) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (t0.c64))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((t0.c64) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING '179888160' UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ('179888160')) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (('179888160') ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING '179888160' UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ('179888160')) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (('179888160') ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE ((((t0.c64 IN ())) NOT BETWEEN ((((0.8059179770694741)) NOT BETWEEN ((t0.c64)) AND ((t0.c64)))) AND (''))) UNION ALL SELECT * FROM t0 WHERE ((NOT ((((t0.c64 IN ())) NOT BETWEEN ((((0.8059179770694741)) NOT BETWEEN ((t0.c64)) AND ((t0.c64)))) AND (''))))) UNION ALL SELECT ALL * FROM t0 WHERE ((((((t0.c64 IN ())) NOT BETWEEN ((((0.8059179770694741)) NOT BETWEEN ((t0.c64)) AND ((t0.c64)))) AND (''))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT t0.c64 FROM t0 INDEXED BY i27;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((((x'fef4'))=(((t0.c64 IN ()))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT ((((x'fef4'))=(((t0.c64 IN ()))))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((((((x'fef4'))=(((t0.c64 IN ()))))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) IS TRUE) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((COUNT(*)) IS TRUE))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((COUNT(*)) IS TRUE)) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) IS TRUE) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((COUNT(*)) IS TRUE))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((COUNT(*)) IS TRUE)) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE ((CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END IN ((t0.c64 IN ()), ((t0.c64)AND(t0.c64))))) ORDER BY CAST(t0.c64 AS REAL) DESC  NULLS FIRST;
SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END IN ((t0.c64 IN ()), ((t0.c64)AND(t0.c64))))))) ORDER BY CAST(t0.c64 AS REAL) DESC  NULLS FIRST;
SELECT t0.c64 FROM t0 WHERE ((((CASE WHEN t0.c64 THEN t0.c64 ELSE t0.c64 END IN ((t0.c64 IN ()), ((t0.c64)AND(t0.c64))))) ISNULL)) ORDER BY CAST(t0.c64 AS REAL) DESC  NULLS FIRST;
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (((((t0.c64) NOT NULL)) IS TRUE)) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64) NOT NULL)) IS TRUE)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((((t0.c64) NOT NULL)) IS TRUE)) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((t0.c64 COLLATE RTRIM) NOT BETWEEN (((t0.c64) IS TRUE)) AND (UNLIKELY(t0.c64)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((t0.c64 COLLATE RTRIM) NOT BETWEEN (((t0.c64) IS TRUE)) AND (UNLIKELY(t0.c64)))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64 COLLATE RTRIM) NOT BETWEEN (((t0.c64) IS TRUE)) AND (UNLIKELY(t0.c64)))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING AVG(CASE WHEN -7.93810969E8 THEN TOTAL(t0.c64) WHEN AVG(MAX(t0.c64)) THEN t0.c64 WHEN MAX(TOTAL('')) THEN GROUP_CONCAT(t0.c64) WHEN COUNT(t0.c64) THEN MIN(t0.c64) WHEN t0.c64 THEN GROUP_CONCAT(t0.c64) END) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (AVG(CASE WHEN -7.93810969E8 THEN TOTAL(t0.c64) WHEN AVG(MAX(t0.c64)) THEN t0.c64 WHEN MAX(TOTAL('')) THEN GROUP_CONCAT(t0.c64) WHEN COUNT(t0.c64) THEN MIN(t0.c64) WHEN t0.c64 THEN GROUP_CONCAT(t0.c64) END))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((AVG(CASE WHEN -7.93810969E8 THEN TOTAL(t0.c64) WHEN AVG(MAX(t0.c64)) THEN t0.c64 WHEN MAX(TOTAL('')) THEN GROUP_CONCAT(t0.c64) WHEN COUNT(t0.c64) THEN MIN(t0.c64) WHEN t0.c64 THEN GROUP_CONCAT(t0.c64) END)) ISNULL);
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE (((((((t0.c64)AND(t0.c64)))AND(0.12846563103571784))) NOT BETWEEN (CAST(t0.c64 AS TEXT)) AND (((t0.c64) ISNULL)))) UNION ALL SELECT * FROM t0 WHERE ((NOT (((((((t0.c64)AND(t0.c64)))AND(0.12846563103571784))) NOT BETWEEN (CAST(t0.c64 AS TEXT)) AND (((t0.c64) ISNULL)))))) UNION ALL SELECT * FROM t0 WHERE (((((((((t0.c64)AND(t0.c64)))AND(0.12846563103571784))) NOT BETWEEN (CAST(t0.c64 AS TEXT)) AND (((t0.c64) ISNULL)))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (CASE WHEN (t0.c64 IN ('特{૞anc㋷')) THEN ((t0.c64) BETWEEN (-1430458876) AND (t0.c64)) WHEN t0.c64 THEN x'fd549b63' WHEN SUBSTR(t0.c64, t0.c64) THEN (((t0.c64))<=((t0.c64))) END) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (CASE WHEN (t0.c64 IN ('特{૞anc㋷')) THEN ((t0.c64) BETWEEN (-1430458876) AND (t0.c64)) WHEN t0.c64 THEN x'fd549b63' WHEN SUBSTR(t0.c64, t0.c64) THEN (((t0.c64))<=((t0.c64))) END))) UNION SELECT DISTINCT * FROM t0 WHERE (((CASE WHEN (t0.c64 IN ('特{૞anc㋷')) THEN ((t0.c64) BETWEEN (-1430458876) AND (t0.c64)) WHEN t0.c64 THEN x'fd549b63' WHEN SUBSTR(t0.c64, t0.c64) THEN (((t0.c64))<=((t0.c64))) END) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (CAST(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) AS INTEGER)) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (CAST(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) AS INTEGER)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((CAST(((t0.c64) NOT BETWEEN (t0.c64) AND (t0.c64)) AS INTEGER)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING GROUP_CONCAT(COUNT(*)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (GROUP_CONCAT(COUNT(*)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((GROUP_CONCAT(COUNT(*))) ISNULL);
SELECT * FROM t0;
SELECT ALL * FROM t0 WHERE (((t0.c64 IN ()) IN ())) UNION ALL SELECT * FROM t0 WHERE ((NOT (((t0.c64 IN ()) IN ())))) UNION ALL SELECT * FROM t0 WHERE (((((t0.c64 IN ()) IN ())) ISNULL));
SELECT * FROM t0;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 NOT INDEXED WHERE (((0X65fbee18) NOT NULL)) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (((0x65fbee18) NOT NULL)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((((0X65fbee18) NOT NULL)) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((COALESCE(t0.c64, t0.c64))<<(((((t0.c64)AND(t0.c64)))OR(t0.c64))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((COALESCE(t0.c64, t0.c64))<<(((((t0.c64)AND(t0.c64)))OR(t0.c64))))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((COALESCE(t0.c64, t0.c64))<<(((((t0.c64)AND(t0.c64)))OR(t0.c64))))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING t0.c64 UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (t0.c64)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((t0.c64) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING t0.c64 UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (t0.c64)) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((t0.c64) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN -1.517982842E9 THEN t0.c64 END)>(t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN -1.517982842E9 THEN t0.c64 END)>(t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((((CASE t0.c64  WHEN t0.c64 THEN t0.c64 WHEN t0.c64 THEN t0.c64 WHEN -1.517982842E9 THEN t0.c64 END)>(t0.c64))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((0.36760403882685644)%(CAST(t0.c64 AS INTEGER)))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((0.36760403882685644)%(CAST(t0.c64 AS INTEGER)))))) UNION SELECT DISTINCT * FROM t0 WHERE (((((0.36760403882685644)%(CAST(t0.c64 AS INTEGER)))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64)GLOB(t0.c64))) NOTNULL)) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((((t0.c64)GLOB(t0.c64))) NOTNULL)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((((t0.c64)GLOB(t0.c64))) NOTNULL)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING TOTAL(t0.c64) COLLATE BINARY UNION ALL SELECT ALL t0.c64 FROM t0 NOT INDEXED GROUP BY t0.c64 HAVING (NOT (TOTAL(t0.c64) COLLATE BINARY)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((TOTAL(t0.c64) COLLATE BINARY) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING TOTAL(t0.c64) COLLATE BINARY UNION ALL SELECT ALL t0.c64 FROM t0 NOT INDEXED GROUP BY t0.c64 HAVING (NOT (TOTAL(t0.c64) COLLATE BINARY)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((TOTAL(t0.c64) COLLATE BINARY) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64) NOTNULL)) BETWEEN ((t0.c64 IN (t0.c64))) AND ((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64)))))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((((t0.c64) NOTNULL)) BETWEEN ((t0.c64 IN (t0.c64))) AND ((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64)))))))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((((((t0.c64) NOTNULL)) BETWEEN ((t0.c64 IN (t0.c64))) AND ((((t0.c64)) NOT BETWEEN ((t0.c64)) AND ((t0.c64)))))) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((t0.c64) BETWEEN (t0.c64) AND (CAST(t0.c64 AS TEXT)))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((t0.c64) BETWEEN (t0.c64) AND (CAST(t0.c64 AS TEXT)))))) UNION SELECT DISTINCT * FROM t0 WHERE (((((t0.c64) BETWEEN (t0.c64) AND (CAST(t0.c64 AS TEXT)))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE (((t0.c64 COLLATE BINARY) NOT BETWEEN (CASE WHEN t0.c64 THEN t0.c64 END) AND (t0.c64))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (((t0.c64 COLLATE BINARY) NOT BETWEEN (CASE WHEN t0.c64 THEN t0.c64 END) AND (t0.c64))))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((((t0.c64 COLLATE BINARY) NOT BETWEEN (CASE WHEN t0.c64 THEN t0.c64 END) AND (t0.c64))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(*) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(*))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING COUNT(*) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (COUNT(*))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*)) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL * FROM t0;
SELECT ALL * FROM t0 WHERE (((t0.c64)-(t0.c64)) COLLATE BINARY) UNION ALL SELECT * FROM t0 WHERE ((NOT (((t0.c64)-(t0.c64)) COLLATE BINARY))) UNION ALL SELECT ALL * FROM t0 WHERE (((((t0.c64)-(t0.c64)) COLLATE BINARY) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((((((((((NULL)OR(t0.c64)))OR(t0.c64)))OR(t0.c64)))OR(t0.c64)) IN (((t0.c64)AND(t0.c64))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((((((((((NULL)OR(t0.c64)))OR(t0.c64)))OR(t0.c64)))OR(t0.c64)) IN (((t0.c64)AND(t0.c64))))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((((((((((NULL)OR(t0.c64)))OR(t0.c64)))OR(t0.c64)))OR(t0.c64)) IN (((t0.c64)AND(t0.c64))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE ((~ (t0.c64 COLLATE NOCASE))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((~ (t0.c64 COLLATE NOCASE))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((~ (t0.c64 COLLATE NOCASE))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((AVG(MIN(COUNT(*))), ((MIN(t0.c64))>>(COUNT(*))), IFNULL(DISTINCT t0.c64, SUM(t0.c64))))!=(((~ (t0.c64)), MIN(TOTAL(t0.c64)), UNLIKELY(t0.c64)))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT ((((AVG(MIN(COUNT(*))), ((MIN(t0.c64))>>(COUNT(*))), IFNULL(DISTINCT t0.c64, SUM(t0.c64))))<>(((~ (t0.c64)), MIN(TOTAL(t0.c64)), UNLIKELY(t0.c64)))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (((((AVG(MIN(COUNT(*))), ((MIN(t0.c64))>>(COUNT(*))), IFNULL(DISTINCT t0.c64, SUM(t0.c64))))!=(((~ (t0.c64)), MIN(TOTAL(t0.c64)), UNLIKELY(t0.c64))))) ISNULL);
SELECT ALL * FROM t0;
SELECT * FROM t0 WHERE (((TRIM(DISTINCT t0.c64)) BETWEEN (CAST(t0.c64 AS BLOB)) AND (((t0.c64) IS FALSE)))) UNION ALL SELECT * FROM t0 WHERE ((NOT (((TRIM(DISTINCT t0.c64)) BETWEEN (CAST(t0.c64 AS BLOB)) AND (((t0.c64) IS FALSE)))))) UNION ALL SELECT * FROM t0 WHERE (((((TRIM(DISTINCT t0.c64)) BETWEEN (CAST(t0.c64 AS BLOB)) AND (((t0.c64) IS FALSE)))) ISNULL));
SELECT ALL * FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((CAST(t0.c64 AS REAL)) BETWEEN (((t0.c64) NOT NULL)) AND (((t0.c64)==(t0.c64))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((CAST(t0.c64 AS REAL)) BETWEEN (((t0.c64) NOT NULL)) AND (((t0.c64)==(t0.c64))))))) UNION SELECT DISTINCT * FROM t0 WHERE (((((CAST(t0.c64 AS REAL)) BETWEEN (((t0.c64) NOT NULL)) AND (((t0.c64)==(t0.c64))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (x'') GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (x''))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((x'') ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING SUM(((((t0.c64)AND(t0.c64)))OR(t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (SUM(((((t0.c64)AND(t0.c64)))OR(t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM(((((t0.c64)AND(t0.c64)))OR(t0.c64)))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING SUM(((((t0.c64)AND(t0.c64)))OR(t0.c64))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (SUM(((((t0.c64)AND(t0.c64)))OR(t0.c64))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((SUM(((((t0.c64)AND(t0.c64)))OR(t0.c64)))) ISNULL);
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE ((- ('\ꡈwfj쌬S'))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT ((- ('\ꡈwfj쌬S'))))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((((- ('\ꡈwfj쌬S'))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (((x'f65e')<>(((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (((x'f65e')<>(((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))))) UNION SELECT DISTINCT * FROM t0 WHERE (((((x'f65e')<>(((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (CAST(CASE t0.c64  WHEN t0.c64 THEN t0.c64 END AS REAL)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (CAST(CASE t0.c64  WHEN t0.c64 THEN t0.c64 END AS REAL)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((CAST(CASE t0.c64  WHEN t0.c64 THEN t0.c64 END AS REAL)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 NOT INDEXED GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING CAST(MIN(MIN(GROUP_CONCAT(t0.c64))) AS TEXT) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (CAST(MIN(MIN(GROUP_CONCAT(t0.c64))) AS TEXT))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((CAST(MIN(MIN(GROUP_CONCAT(t0.c64))) AS TEXT)) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (((CAST(t0.c64 AS REAL))|(((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))) UNION ALL SELECT t0.c64 FROM t0 WHERE ((NOT (((CAST(t0.c64 AS REAL))|(((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((((CAST(t0.c64 AS REAL))|(((t0.c64) BETWEEN (t0.c64) AND (t0.c64))))) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((((((t0.c64, t0.c64, t0.c64)) BETWEEN ((t0.c64, t0.c64, '.Q#ᭆ0rl')) AND ((t0.c64, '5*', t0.c64))))==(t0.c64))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((((((t0.c64, t0.c64, t0.c64)) BETWEEN ((t0.c64, t0.c64, '.Q#ᭆ0rl')) AND ((t0.c64, '5*', t0.c64))))=(t0.c64))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((((((t0.c64, t0.c64, t0.c64)) BETWEEN ((t0.c64, t0.c64, '.Q#ᭆ0rl')) AND ((t0.c64, '5*', t0.c64))))==(t0.c64))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (TRIM(DISTINCT t0.c64 COLLATE NOCASE)) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (TRIM(DISTINCT t0.c64 COLLATE NOCASE)))) GROUP BY t0.c64 UNION SELECT ALL t0.c64 FROM t0 WHERE (((TRIM(DISTINCT t0.c64 COLLATE NOCASE)) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((SUM(TOTAL(SUM(COUNT(t0.c64)))))OR(MIN(t0.c64))))AND(GROUP_CONCAT(GROUP_CONCAT(MAX(GROUP_CONCAT(AVG(t0.c64))))))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((((SUM(TOTAL(SUM(COUNT(t0.c64)))))OR(MIN(t0.c64))))AND(GROUP_CONCAT(GROUP_CONCAT(MAX(GROUP_CONCAT(AVG(t0.c64))))))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((((SUM(TOTAL(SUM(COUNT(t0.c64)))))OR(MIN(t0.c64))))AND(GROUP_CONCAT(GROUP_CONCAT(MAX(GROUP_CONCAT(AVG(t0.c64)))))))) ISNULL);
SELECT t0.c64 FROM t0;
SELECT ALL t0.c64 FROM t0 WHERE (((CASE WHEN 0.0039789701465903216 THEN t0.c64 ELSE t0.c64 END) NOT BETWEEN ((((t0.c64))!=((t0.c64)))) AND (t0.c64 COLLATE NOCASE))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (((CASE WHEN 0.0039789701465903216 THEN t0.c64 ELSE t0.c64 END) NOT BETWEEN ((((t0.c64))<>((t0.c64)))) AND (t0.c64 COLLATE NOCASE))))) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE (((((CASE WHEN 0.0039789701465903216 THEN t0.c64 ELSE t0.c64 END) NOT BETWEEN ((((t0.c64))<>((t0.c64)))) AND (t0.c64 COLLATE NOCASE))) ISNULL));
SELECT t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE ((((5.72755762E8))>((((t0.c64) NOTNULL))))) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT ((((5.72755762E8))>((((t0.c64) NOTNULL))))))) UNION SELECT DISTINCT * FROM t0 WHERE ((((((5.72755762E8))>((((t0.c64) NOTNULL))))) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 WHERE (t0.c64) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT (t0.c64))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE (((t0.c64) ISNULL)) GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((COUNT(*))<>(MAX(MIN(t0.c64)))) UNION ALL SELECT t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (((COUNT(*))!=(MAX(MIN(t0.c64)))))) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((((COUNT(*))!=(MAX(MIN(t0.c64))))) ISNULL);
SELECT ALL t0.c64 FROM t0;
SELECT t0.c64 FROM t0 WHERE (0.08080680903141224) UNION ALL SELECT ALL t0.c64 FROM t0 WHERE ((NOT (0.08080680903141224))) UNION ALL SELECT t0.c64 FROM t0 WHERE (((0.08080680903141224) ISNULL));
SELECT ALL t0.c64 FROM t0;
SELECT DISTINCT * FROM t0;
SELECT DISTINCT * FROM t0 WHERE (CASE WHEN ((t0.c64)!=(t0.c64)) THEN ((t0.c64)/(t0.c64)) ELSE t0.c64 COLLATE BINARY END) UNION SELECT DISTINCT * FROM t0 WHERE ((NOT (CASE WHEN ((t0.c64)<>(t0.c64)) THEN ((t0.c64)/(t0.c64)) ELSE t0.c64 COLLATE BINARY END))) UNION SELECT DISTINCT * FROM t0 WHERE (((CASE WHEN ((t0.c64)!=(t0.c64)) THEN ((t0.c64)/(t0.c64)) ELSE t0.c64 COLLATE BINARY END) ISNULL));
SELECT DISTINCT * FROM t0;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT t0.c64 FROM t0 WHERE ((((t0.c64 IN (t0.c64))) NOT BETWEEN ((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))) AND (CAST(t0.c64 AS TEXT)))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((NOT ((((t0.c64 IN (t0.c64))) NOT BETWEEN ((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))) AND (CAST(t0.c64 AS TEXT)))))) GROUP BY t0.c64 UNION SELECT t0.c64 FROM t0 WHERE ((((((t0.c64 IN (t0.c64))) NOT BETWEEN ((((t0.c64)) BETWEEN ((t0.c64)) AND ((t0.c64)))) AND (CAST(t0.c64 AS TEXT)))) ISNULL)) GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MIN(t0.c64) COLLATE NOCASE UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MIN(t0.c64) COLLATE NOCASE)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN(t0.c64) COLLATE NOCASE) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING MIN(t0.c64) COLLATE NOCASE UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING (NOT (MIN(t0.c64) COLLATE NOCASE)) UNION ALL SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64 HAVING ((MIN(t0.c64) COLLATE NOCASE) ISNULL);
SELECT ALL t0.c64 FROM t0 GROUP BY t0.c64;
SELECT * FROM t0 NOT INDEXED;
SELECT * FROM t0 WHERE (((((t0.c64) IS TRUE))&((('OlY')GLOB(5.01326984E8))))) UNION ALL SELECT ALL * FROM t0 WHERE ((NOT (((((t0.c64) IS TRUE))&((('OlY')GLOB(5.01326984E8))))))) UNION ALL SELECT * FROM t0 WHERE (((((((t0.c64) IS TRUE))&((('OlY')GLOB(5.01326984E8))))) ISNULL));
SELECT * FROM t0 NOT INDEXED;
SELECT DISTINCT t0.c64 FROM t0;
SELECT DISTINCT t0.c64 FROM t0 WHERE (DATETIME(ABS(DISTINCT t0.c64), NULL, (~ (t0.c64)))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE ((NOT (DATETIME(ABS(DISTINCT t0.c64), NULL, (~ (t0.c64)))))) UNION SELECT DISTINCT t0.c64 FROM t0 WHERE (((DATETIME(ABS(DISTINCT t0.c64), NULL, (~ (t0.c64)))) ISNULL));
SELECT DISTINCT t0.c64 FROM t0;
