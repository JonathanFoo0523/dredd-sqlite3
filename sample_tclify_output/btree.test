set testdir [file dirname $argv0]
source $testdir/tester.tcl

# kill mutants ['11030', '11031', '11032', '11033', '11034', '11061', '11065']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-1.1 {
  PRAGMA encoding = 'UTF16';
                          CREATE TABLE t0 (c0 TEXT );
                          ALTER TABLE t0 ADD c3 INT;
                          CREATE INDEX i72 ON t0(c0 ASC,((0)AND(0)) COLLATE NOCASE DESC);
                          PRAGMA cell_size_check = true;
                          CREATE INDEX i56 ON t0(((((((((((((((c0)IS(c0)))AND(((c0) BETWEEN (c0) AND (2058017123)))))AND((+ (c0)))))AND((c0 IN ()))))AND(MAX(1.67485134E8, c0, c0, c0))))AND(CASE c3  WHEN c0 THEN c0 END)))OR(((((((((c3)OR(c3)))OR(x'6c7c')))OR(c0)))OR(c0)))) COLLATE RTRIM,((json_remove(c0, c0, c0, c3)) ISNULL) DESC) WHERE x'';
} {}

# kill mutants ['10884', '10903', '10907', '10916', '10931', '10935', '10937', '10939', '10942', '10943', '10944', '10945', '10946', '10947', '10949', '10951', '10953', '10954', '10955', '10958', '10959', '10960', '10961', '10963', '10964', '10965', '10966', '10969', '10970', '10971', '10972', '10973', '10976', '10977', '10978', '10980', '10981', '10982', '10983', '10986', '10987', '10990', '10991', '10993', '10995', '10998', '10999', '11000', '11001', '11002', '11003', '11005', '11006', '11008', '11009', '11041', '11064', '11075', '11080', '11086', '11089', '11090', '11091', '11093', '11095', '11098', '11099', '11101', '11112', '11118', '11121', '11122', '11123', '11125', '11127', '11130', '11131', '11134', '11137', '11142', '11147', '11148', '11151', '11152', '11162', '11163', '11168', '11169', '11170', '11171', '11179', '11183', '11186', '11194', '11195']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-2.1 {
  PRAGMA cell_size_check = true;
  CREATE TABLE t0(a);
  INSERT INTO t0 VALUES(''), (5), (NULL);
  ALTER TABLE t0 RENAME TO t1;
  BEGIN TRANSACTION;
  INSERT OR IGNORE INTO t1 VALUES(1), ('');
  ROLLBACK;
  INSERT INTO t1 VALUES(0.18514760508456096);
} {}

# kill mutants ['10898', '11068']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-3.1 {
  PRAGMA cell_size_check = true;
  BEGIN;
  CREATE VIRTUAL TABLE a USING b;
} {1 {no such module: b}}
do_catchsql_test btree-dredd-3.2 {
  INSERT INTO c VALUES(8);
} {1 {no such table: c}}

# kill mutants ['11021', '11022', '11023', '11053', '11054', '11055', '11056', '11140']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-4.1 {
  CREATE TABLE a(b);
  INSERT INTO a VALUES(NULL);
  PRAGMA journal_mode = WAL;
} {wal }
do_execsql_test btree-dredd-4.2 {
  PRAGMA cell_size_check = true;
  VACUUM;
} {}

# kill mutants ['10967', '11143', '11485']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-5.1 {
  ANALYZE;
  PRAGMA cell_size_check = true;
  PRAGMA cache_size = 8335956023;
  CREATE VIEW a AS SELECT 5;
} {}

# kill mutants ['11208', '11209', '11210', '11211', '11214', '11215', '11217', '11218', '11219', '11220', '11221', '11222', '11223', '11224', '11225', '11226']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-6.1 {
  CREATE TABLE a(b);
} {}

# kill mutants ['11014', '11097', '11126', '11129']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-7.1 {
  CREATE TABLE a(b);
  PRAGMA cell_size_check = true;
  VACUUM;
  VACUUM;
} {}

# kill mutants ['10885', '10906', '10909', '10929', '10941', '11028', '11066', '11073', '11076', '11105', '11110', '11111', '11204', '11205', '11206', '11480', '11481', '11484']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-8.1 {
  PRAGMA cell_size_check = true;
  CREATE TABLE a(b);
  ALTER TABLE a RENAME TO c;
  BEGIN;
  INSERT INTO c VALUES(0.9594641972313799);
  ROLLBACK;
  INSERT INTO c VALUES(0.18514760508456096);
} {}

# kill mutants ['11016', '11042', '11045']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-9.1 {
  PRAGMA cell_size_check = true;
  VACUUM;
  VACUUM;
} {}

# kill mutants ['10899', '10901', '10905', '10910', '10911', '10930', '10948', '10950', '10968', '10979', '10985', '10992', '10996', '10997', '11062', '11063', '11067', '11078', '11079', '11100', '11102', '11103', '11107', '11108', '11132', '11133', '11135', '11136', '11138', '11139', '11174', '11175', '11180', '11184', '11236', '11237', '11238']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-10.1 {
  PRAGMA encoding = 'UTF16';
           CREATE TEMPORARY VIEW v00 AS SELECT ALL0 FROM vt1, t1,     vt0 WHERE0 GROUP     BY((CAST0)ISNULL) HAVING((((vt1.c0)ISNULL))NOT BETWEEN(         CASE vt0.c2 WHEN vt0.c2 THEN t1.c66 ELSE NULL END)                                                 AND((NOT(vt0.c1)))) ORDER     BY(((((-(t1.c66)))AND(CAST('-1132263021' AS REAL))))OR(LIKELY(vt0.c1))) ASC,     t1.c34 LIMIT - 138073592;
           PRAGMA cell_size_check = true;
           ANALYZE temp;
} {}

# kill mutants ['10913', '10914', '10915']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-11.1 {
  CREATE TABLE a(b);
  PRAGMA integrity_check;
} {ok }

# kill mutants ['10974']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-12.1 {
  PRAGMA cell_size_check = true;
  CREATE TABLE t0(INTEGER);
  INSERT INTO t0 VALUES(''), (281473985801535), (NULL);
  ALTER TABLE t0 RENAME TO t1;
  BEGIN TRANSACTION;
  INSERT OR IGNORE INTO t1 VALUES(98035681), ('');
  ROLLBACK;
  INSERT INTO t1 VALUES(0.18514760508456096);
} {}

# kill mutants ['11046']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-13.1 {
  CREATE TABLE b(a);
  PRAGMA cell_size_check = true;
  VACUUM;
  VACUUM;
} {}

# kill mutants ['10897']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-14.1 {
  PRAGMA encoding = 'UTF16';
           CREATE TEMPORARY TABLE t0(INT c1 BLOB, c2 INT);
           CREATE TEMPORARY TABLE t1(c0 TEXT, c1 INT,                                         c2 REAL CHECK0);
           PRAGMA cell_size_check = true;
           CREATE INDEX i49 ON t0(0 ASC,                        (0 * 0) COLLATE BINARY ASC,                        x'' DESC);
           CREATE UNIQUE INDEX IF NOT EXISTS i37 ON t1(((c0)BETWEEN(c1) AND(c2))COLLATE NOCASE DESC, c0 ASC,    (c0 IN())COLLATE BINARY COLLATE RTRIM) WHERE CAST('2116719410' AS TEXT);
} {}

# kill mutants ['11094']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-15.1 {
  CREATE TABLE a(b);
      PRAGMA cell_size_check = true;
      VACUUM;
      VACUUM;
} {}

# kill mutants ['10912']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-16.1 {
  CREATE TABLE a(b);
  INSERT INTO a VALUES('');
} {}

# kill mutants ['11182']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-17.1 {
  ANALYZE;
        PRAGMA cell_size_check = true;
        PRAGMA cache_size = 8335956023;
        CREATE VIEW a AS SELECT b;
} {}

# kill mutants ['11149']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-18.1 {
  PRAGMA cell_size_check = true;
  CREATE TABLE t0(a);
  INSERT INTO t0 VALUES(''), (3), (NULL);
  ALTER TABLE t0 RENAME TO t1;
  BEGIN TRANSACTION;
  INSERT OR IGNORE INTO t1 VALUES(x'');
  ROLLBACK;
  INSERT INTO t1 VALUES(NULL);
} {}

# kill mutants ['10908']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-19.1 {
  PRAGMA temp_store = MEMORY;
  PRAGMA cell_size_check = true;
  CREATE TEMPORARY TABLE b(a);
  INSERT INTO b VALUES(') ('), (NULL);
  BEGIN;
  CREATE UNIQUE INDEX c ON b(0);
} {1 {UNIQUE constraint failed: index 'c'}}
do_execsql_test btree-dredd-19.2 {
  CREATE INDEX d ON b(0);
} {}

# kill mutants ['11092']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-20.1 {
  PRAGMA encoding = 'UTF-16';
    CREATE TABLE IF NOT EXISTS t0 (c0 TEXT );
    ALTER TABLE t0 ADD COLUMN c3    ms;
    CREATE INDEX IF NOT EXISTS i72 ON t0(c0 ASC,((((((c3+c0)))AND(0)))AND(((c3)*c0))) COLLATE NOCASE DESC);
    PRAGMA cell_size_check = true;
    CREATE INDEX i56 ON t0(((((((((((((((c0)))AND(((c0) BETWEEN (c0) AND 0))))AND((+ (c0)))))AND((c0 IN ()))))AND(MAX(-1.67485134E8, c0, c0c0))))AND(CASE c3  WHEN c0 THEN c0 END)))OR(((((((((c3)))OR(x'6c7c')))OR(c0)))OR(c0)))) COLLATE RTRIM,((json_remove(c0, c0, c3)) ISNULL) DESC) WHERE x'';
} {}

# kill mutants ['10975']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-21.1 {
  PRAGMA cell_size_check = true;
  CREATE TABLE t0(a);
  INSERT INTO t0 VALUES(''), (18446744072718642495), (NULL);
  ALTER TABLE t0 RENAME TO t1;
  BEGIN TRANSACTION;
  INSERT OR IGNORE INTO t1 VALUES(298035681), ('');
  ROLLBACK;
  INSERT INTO t1 VALUES(0.18514760508456096);
} {}

# kill mutants ['10917']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-22.1 {
  PRAGMA cell_size_check = true;
  CREATE TABLE b(a);
  ALTER TABLE b RENAME TO c;
  BEGIN;
  INSERT INTO c VALUES(0.9594641972313799);
  ROLLBACK;
  INSERT INTO c VALUES(0.18514760508456096);
} {}

# kill mutants ['10940']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-23.1 {
  PRAGMA temp_store = MEMORY;
  PRAGMA cell_size_check = true;
  CREATE TEMPORARY TABLE a(b);
  INSERT INTO a VALUES(4), (5);
  BEGIN;
  CREATE UNIQUE INDEX c ON a(0);
} {1 {UNIQUE constraint failed: index 'c'}}
do_execsql_test btree-dredd-23.2 {
  CREATE INDEX d ON a(0);
} {}

# kill mutants ['10900', '10932', '10933']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-24.1 {
  PRAGMA cell_size_check = true;
  ANALYZE;
  PRAGMA shrink_memory;
  CREATE VIRTUAL TABLE a USING b;
} {1 {no such module: b}}

# kill mutants ['10887']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-25.1 {
  PRAGMA cell_size_check = true;
   BEGIN;
   CREATE VIRTUAL TABLE a USING b;
} {1 {no such module: b}}

# kill mutants ['11060']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-26.1 {
  PRAGMA encoding = 'UTF16';
           CREATE TEMPORARY VIEW v00 AS SELECT ALL0 FROM vt1t1,     vt0 WHERE0 GROUP     BY((CAST(vt0.c2 AS TEXT))ISNULL) HAVING((((vt1.c0)ISNULL))NOT BETWEEN(         CASE vt0.c2 WHEN vt0.c2 THEN t1.c66 ELSE NULL END)                                                 AND(0)) ORDER     BY(((((-(t1.c66)))AND(CAST('-1132263021' AS REAL))))OR(LIKELY(vt0.c1))) ASC,     t1.c34 LIMIT - 138073592;
           PRAGMA cell_size_check = true;
           ANALYZE temp;
} {}

# kill mutants ['11128']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-27.1 {
  CREATE TABLE IF NOT EXISTS t0 (c0  );
       PRAGMA cell_size_check = true;
       ALTER TABLE t0 RENAME TO t1;
       PRAGMA shrink_memory;
       ALTER TABLE t1 RENAME TO t0;
} {}

# kill mutants ['10938']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-28.1 {
   PRAGMA cell_size_check = true;
                  CREATE TABLE a (c );
                  ALTER TABLE a RENAME TO b;
                  BEGIN  ;
                  INSERT INTO b VALUES (0.9594641972313799);
                  ROLLBACK ;
                  INSERT INTO b VALUES (0.18514760508456096);
} {}

# kill mutants ['11146']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-29.1 {
  PRAGMA cell_size_check = true;
  CREATE TABLE t0(a);
  INSERT INTO t0 VALUES(''), (281473985801535), (NULL);
  ALTER TABLE t0 RENAME TO t1;
  BEGIN TRANSACTION;
  INSERT OR IGNORE INTO t1 VALUES(1), ('');
  ROLLBACK;
  INSERT INTO t1 VALUES(0.18514760508456096);
} {}

# kill mutants ['10919']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-30.1 {
  PRAGMA cell_size_check = true;
  BEGIN;
  CREATE VIRTUAL TABLE a USING b;
} {1 {no such module: b}}

# kill mutants ['11145']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-31.1 {
  PRAGMA encoding = 'UTF16';
              ANALYZE;
              PRAGMA cell_size_check = true;
              CREATE VIEW  v00 AS SELECT GROUP_CONCAT(((((((((t2.c0)AND(t2.c0)))OR(t1.c9)))OR(vt0.c0)))OR(t1.c9))), (0 NOT NULL), LEAD(((((t2.c1) BETWEEN (t2.c0) AND (t2.c2)))IS(((t2.c0)OR(t2.c2)))), ((t2.c0)OR(CASE WHEN t2.c1 THEN t2.c42 ELSE t2.c2 END)), ((((t2.c42) BETWEEN 0 AND (t2.c1)))<>(((t2.c0) NOTNULL)))) OVER () FROM t2 WHERE ((((NULL IN ())) IS FALSE)) LIMIT -1059100375;
} {}

# kill mutants ['11207']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-32.1 {
  CREATE TABLE b(a);
  PRAGMA integrity_check;
} {ok }

# kill mutants ['11212', '11213']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-33.1 {
  BEGIN;
  CREATE VIRTUAL TABLE a USING b;
} {1 {no such module: b}}
do_catchsql_test btree-dredd-33.2 {
  INSERT INTO c VALUES('optimize');
} {1 {no such table: c}}

# kill mutants ['11004']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-34.1 {
  PRAGMA cell_size_check = true;
  CREATE TABLE t0(a);
  INSERT INTO t0 VALUES(''), (0xffffffc4efed3f), (NULL);
  ALTER TABLE t0 RENAME TO t1;
  BEGIN TRANSACTION;
  INSERT OR IGNORE INTO t1 VALUES(98035681), ('');
  ROLLBACK;
  INSERT INTO t1 VALUES(0.18514760508456096);
} {}

# kill mutants ['11007']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-35.1 {
  CREATE TEMPORARY VIEW a AS SELECT 2;
  PRAGMA cell_size_check = true;
  BEGIN;
  ANALYZE temp;
} {}

# kill mutants ['11185']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-36.1 {
  PRAGMA encoding = 'UTF16';
  CREATE TEMPORARY VIEW v0 AS SELECT ALL(NOT0)
  FROM vt1, t1,
      vt0 WHERE(TYPEOF(0.41812343647504235 COLLATE BINARY)) GROUP
      BY((CAST(vt0.c2 AS TEXT))ISNULL) HAVING((((vt1.c0)ISNULL))NOT BETWEEN(
          CASE vt0.c2 WHEN vt0.c2 THEN t1.c66 ELSE NULL END) AND(0)) ORDER
      BY(((((-(t1.c66)))AND(CAST('-1132263021' AS REAL))))OR(LIKELY(vt0.c1))) ASC,
      t1.c34 LIMIT - 138073592;
  PRAGMA cell_size_check = true;
  ANALYZE temp;
} {}

# kill mutants ['11178']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-37.1 {
  PRAGMA cell_size_check = true;
  CREATE TABLE t0(a);
  INSERT INTO t0 VALUES(''), (05937855), (NULL);
  ALTER TABLE t0 RENAME TO t1;
  BEGIN TRANSACTION;
  INSERT OR IGNORE INTO t1 VALUES(1), ('');
  ROLLBACK;
  INSERT INTO t1 VALUES(0.18514760508456096);
} {}

# kill mutants ['41324']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-38.1 {
   PRAGMA encoding = 'UTF16be';
                           CREATE TABLE t0 (REAL INT  c2 TEXT , c3 TEXT , c4 INTEGER );
                           CREATE VIEW v0(c0, c1, c2) AS SELECT ALL ((((0)OR(LIKELIHOOD(t0.c4, 0.6809867764325728))))OR(t0.c2)), NTILE(CASE x'0a34890c' COLLATE NOCASE  WHEN x'' THEN CAST0 WHEN rt1.c2 COLLATE BINARY THEN ((t0.c2) IS TRUE) WHEN (~ (rt1.c2)) THEN (((rt1.c1, rt1.c2, t0.c0, t0.c3, x''))>((x'', t0.c2, 0.15518641091872531, rt1.c2, t0.c3))) END) OVER (), CASE AVG(rt1.c0)  WHEN t0.c3 THEN CAST(t0.c3 AS TEXT) ELSE t0.c3 END FROM rt1, t0;
                           ANALYZE ;
                           PRAGMA secure_delete = FAST;
} {2 }
do_execsql_test btree-dredd-38.2 {
                           DROP VIEW v0;
} {}

# kill mutants ['11036']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-39.1 {
  VACUUM;
  PRAGMA cell_size_check = true;
  CREATE VIRTUAL TABLE a USING b;
} {1 {no such module: b}}

# kill mutants ['11181']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-40.1 {
  ANALYZE;
    PRAGMA cell_size_check = true;
    PRAGMA shrink_memory;
    CREATE VIRTUAL TABLE a USING b;
} {1 {no such module: b}}

# kill mutants ['11040']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-41.1 {
  CREATE TABLE t1(a );
         PRAGMA cell_size_check = true;
         VACUUM;
         VACUUM;
} {}

# kill mutants ['11124']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-42.1 {
  PRAGMA cell_size_check = true;
   CREATE TABLE t0 ( INTEGER );
     ALTER TABLE t0 RENAME TO a;
     INSERT   INTO a VALUES ('-1702496155'), ('204984857');
     BEGIN  ;
   INSERT OR IGNORE INTO a VALUES  ('H띅');
     ROLLBACK ;
   ALTER TABLE a RENAME TO t0;
   INSERT OR IGNORE INTO t0 VALUES (NULL);
} {}

# kill mutants ['11069']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-43.1 {
  PRAGMA cell_size_check = true;
  CREATE TABLE a(b);
  ANALYZE;
  PRAGMA shrink_memory;
  BEGIN;
  CREATE VIRTUAL TABLE c USING d;
} {1 {no such module: d}}
do_execsql_test btree-dredd-43.2 {
  ALTER TABLE a RENAME TO e;
} {}

finish_test
