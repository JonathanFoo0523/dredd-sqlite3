-- Time: 2024/06/07 06:39:12
-- Database: database77
-- Database version: 3.40.0
-- seed value: 2732958477
PRAGMA cache_size = 50000; -- 0ms;
PRAGMA temp_store=MEMORY; -- 0ms;
PRAGMA synchronous=off; -- 0ms;
PRAGMA encoding = 'UTF-16le'; -- 0ms;
CREATE VIRTUAL TABLE rt0 USING rtree_i32(c0, c1, c2); -- 0ms;
PRAGMA temp.soft_heap_limit; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
ANALYZE sqlite_master; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
UPDATE OR REPLACE rt0 SET c0=0.9267912920156824; -- 0ms;
UPDATE OR IGNORE rt0 SET (c2, c1)=(0.5147058701968172, '-206578659'); -- 0ms;
UPDATE OR IGNORE rt0 SET c2=-2.06578659E8 WHERE CASE LAST_INSERT_ROWID()  WHEN ((rt0.c0)<<('iF')) THEN rt0.c2 COLLATE NOCASE END; -- 4ms;
UPDATE OR IGNORE rt0 SET c2=-2.06578659E8; -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
PRAGMA soft_heap_limit = 3899710902480118966; -- 0ms;
ANALYZE main; -- 0ms;
PRAGMA main.mmap_size = 2632454363705334807; -- 1ms;
PRAGMA cache_spill = true; -- 0ms;
UPDATE OR IGNORE rt0 SET c0=x''; -- 0ms;
UPDATE OR ROLLBACK rt0 SET (c1)=('if') WHERE (((rt0.c1) NOTNULL) IN ()); -- 0ms;
VACUUM main; -- 0ms;
VACUUM temp; -- 0ms;
UPDATE OR IGNORE rt0 SET c0=x'', c2=0.4649680608811848, c1=NULL WHERE ((TYPEOF(rt0.c1))GLOB(((rt0.c0) ISNULL))); -- 0ms;
PRAGMA legacy_file_format; -- 0ms;
ANALYZE rt0; -- 0ms;
END; -- 0ms;
BEGIN DEFERRED TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO rt0(c0, c1) VALUES ('3899710902480118966', '-9589809'); -- 0ms;
UPDATE OR IGNORE rt0 SET (c0, c2)=(-1076383916, '{}'); -- 0ms;
UPDATE OR IGNORE rt0 SET c2=x'5820'; -- 0ms;
ANALYZE; -- 0ms;
ANALYZE; -- 0ms;
ANALYZE; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
END; -- 0ms;
COMMIT; -- 0ms;
UPDATE OR IGNORE rt0 SET (c1, c2, c2)=(x'', NULL, 0xffffffffff6dabcf) WHERE CASE WHEN LIKE(x'', rt0.c2, '0') THEN ((((rt0.c2)AND(rt0.c0)))OR(rt0.c1)) WHEN (rt0.c0 IN ()) THEN ((rt0.c1)||(rt0.c0)) WHEN ((rt0.c2) ISNULL) THEN ((rt0.c0)AND(rt0.c2)) WHEN CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 ELSE '448279057' END THEN ((rt0.c2)>(rt0.c2)) WHEN x'' THEN ((((rt0.c1)AND(rt0.c0)))OR(rt0.c1)) ELSE ((rt0.c2)>(rt0.c2)) END; -- 0ms;
BEGIN DEFERRED TRANSACTION; -- 0ms;
UPDATE OR IGNORE rt0 SET (c0)=(''); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
UPDATE OR ROLLBACK rt0 SET c2=1762748248 WHERE CAST(CAST(rt0.c1 AS NUMERIC) AS INTEGER); -- 0ms;
PRAGMA journal_size_limit; -- 0ms;
INSERT OR IGNORE INTO rt0 VALUES (1762748248, '-1076383916', 0.4888692285842512); -- 0ms;
UPDATE rt0 SET (c0, c0)=(NULL, -2082744198); -- 0ms;
UPDATE rt0 SET (c2)=(0.9607225935642227) WHERE ((((rt0.c2) NOT NULL))+(((rt0.c2)GLOB(rt0.c0)))); -- 0ms;
PRAGMA recursive_triggers = false; -- 0ms;
INSERT OR REPLACE INTO rt0(c2, c1) VALUES ('1762748248', 0.31241731789107974), (UNLIKELY(DISTINCT ((x'c7fa')|(NULL))), x''), ('', '0.9607225935642227'); -- 0ms;
ANALYZE; -- 0ms;
PRAGMA stats; -- 0ms;
CREATE VIEW  IF NOT EXISTS v0(c0) AS SELECT DISTINCT rt0.c2 FROM rt0; -- 1ms;
UPDATE OR IGNORE rt0 SET (c2, c2)=(0.562540715993344, '448279057'); -- 0ms;
ANALYZE; -- 0ms;
UPDATE OR ROLLBACK rt0 SET (c1, c1)=('-206578659', 0Xffffffffd3a0a35b) WHERE '1762748248'; -- 0ms;
UPDATE OR FAIL rt0 SET c0=x'e23ebea8'; -- 0ms;
UPDATE OR IGNORE rt0 SET c0=NULL, c2=x'' WHERE ('448279057' IN ()); -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
UPDATE OR IGNORE rt0 SET (c2, c0)=(0Xffffffffb5bde749, '') WHERE rt0.c1; -- 1ms;
PRAGMA temp.mmap_size = 4769641934362829660; -- 0ms;
COMMIT; -- 0ms;
INSERT OR ROLLBACK INTO rt0(c2) VALUES (0.25161661298832605); -- 0ms;
UPDATE OR IGNORE rt0 SET c0=-9223372036854775808; -- 0ms;
UPDATE rt0 SET c0='' WHERE ((rt0.c1 COLLATE BINARY) IS FALSE); -- 0ms;
UPDATE OR IGNORE rt0 SET c0=''; -- 1ms;
COMMIT TRANSACTION; -- 0ms;
SELECT rtreecheck('rt0'); -- 1ms;
BEGIN  TRANSACTION; -- 0ms;
UPDATE OR IGNORE rt0 SET c2=0.8161625755633691; -- 0ms;
UPDATE OR IGNORE rt0 SET c2='f*'; -- 1ms;
UPDATE OR IGNORE rt0 SET (c0)=(-1345765470); -- 0ms;
PRAGMA cache_size = -5689756247908879842; -- 0ms;
VACUUM; -- 0ms;
VACUUM; -- 0ms;
VACUUM main; -- 0ms;
VACUUM; -- 0ms;
VACUUM temp; -- 0ms;
INSERT OR IGNORE INTO rt0 VALUES (0.9266468818598189, 0.9607225935642227, NULL); -- 0ms;
PRAGMA auto_vacuum; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO rt0(c0, c2) VALUES (1428364044, 0.0144530187708376), (NULL, x'7a66'), (x'', ((0xffffffff8b7c6eb4) BETWEEN (NULL) AND (x'')) COLLATE RTRIM); -- 0ms;
INSERT OR FAIL INTO rt0(c2) VALUES (0.9854916029122099); -- 0ms;
INSERT OR IGNORE INTO rt0(c1, c0) VALUES (0.09220318835022578, NULL); -- 0ms;
UPDATE rt0 SET c2=0X3b7c2ce8; -- 1ms;
UPDATE OR IGNORE rt0 SET (c0, c1, c1)=(x'01c7', '', 'k') WHERE ((LIKELIHOOD(DISTINCT rt0.c1, 0.9807018511215719)) BETWEEN (((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c2)))AND(rt0.c1)))AND(rt0.c2))) AND (((rt0.c0)<(rt0.c0)))); -- 1ms;
UPDATE OR IGNORE rt0 SET c0='O]2}\rmlw%', c2='0.4649680608811848'; -- 1ms;
ROLLBACK TRANSACTION; -- 0ms;
UPDATE OR REPLACE rt0 SET c2=NULL; -- 4ms;
END; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
SELECT ALL ((((((((rt0.c1)OR(rt0.c1)))OR(CASE rt0.c2  WHEN NULL THEN v0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN 0.9738387850470791 THEN rt0.c0 ELSE rt0.c0 END)))AND(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c2)))))OR(((((rt0.c2)AND(rt0.c0)))OR(v0.c0)))) FROM v0 WHERE (CAST((+ ('-2095604467')) AS INTEGER));SELECT DISTINCT (('i' COLLATE NOCASE) BETWEEN (((rt0.c2)>(rt0.c0))) AND (LIKELIHOOD(DISTINCT rt0.c0, 0.29866743119804606))) FROM v0 ORDER BY ((((((((x'')OR(((rt0.c1) NOT BETWEEN (v0.c0) AND (rt0.c2)))))OR(rt0.c1 COLLATE BINARY)))OR((+ (v0.c0)))))AND((+ (rt0.c2)))) DESC  NULLS FIRST;SELECT DISTINCT ((CASE v0.c0  WHEN rt0.c2 THEN 0Xffffffff83179d0d ELSE rt0.c1 END) NOT BETWEEN (((rt0.c0) NOT NULL)) AND (SUBSTR(rt0.c0, '58213133'))) FROM v0;SELECT CASE (NULL IN ())  WHEN CASE rt0.c0  WHEN rt0.c0 THEN rt0.c0 END THEN (rt0.c0 IN ()) ELSE ((rt0.c1)OR(rt0.c1)) END, ROW_NUMBER() OVER (), RANK() OVER ( ORDER BY ((rt0.c2)<>(((NULL) NOT BETWEEN (NULL) AND (v0.c0)))) ROWS (((rt0.c2 IN ())) NOTNULL) PRECEDING) FROM v0;SELECT AVG(v0.c0) OVER (), CASE WHEN v0.c0 THEN ((rt0.c1) NOT NULL) END, ((UPPER(rt0.c0)) IS TRUE), -9589809, ((CAST(rt0.c0 AS NUMERIC)) NOT BETWEEN (CASE WHEN rt0.c2 THEN x'bfd8f77b' END) AND (9.97993704E8)) FROM rt0;SELECT DISTINCT GROUP_CONCAT((rt0.c1 IN (rt0.c2, rt0.c2))) FROM rt0, v0; -- 0ms;
SELECT rt0.c2 FROM v0, rt0; -- 0ms;
SELECT DISTINCT RANK() OVER () FROM rt0 WHERE (((- (0.9854916029122099)) IN ())); -- 0ms;
SELECT DISTINCT (rt0.c1 IN ()) FROM rt0; -- 1ms;
SELECT DISTINCT (NOT ((~ (rt0.c0)))) FROM v0, rt0 WHERE (((0.7461146218725621 IN ()) IN ())) ORDER BY CASE (((v0.c0)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c0)))  WHEN ((rt0.c0)||(rt0.c1)) THEN CAST(rt0.c0 AS BLOB) END  NULLS LAST; -- 0ms;
SELECT ALL AVG('{}') OVER (), (((((((rt0.c2, v0.c0, x'', v0.c0, rt0.c0)) BETWEEN ((v0.c0, rt0.c2, v0.c0, rt0.c2, rt0.c0)) AND ((v0.c0, rt0.c1, rt0.c0, v0.c0, rt0.c1))))AND((((rt0.c1))<>((rt0.c2))))))AND(LOWER(DISTINCT rt0.c2))), CAST(((v0.c0)+(rt0.c1)) AS INTEGER), ((COUNT(*)) NOTNULL), 'i' FROM rt0, v0 WHERE (((HEX(DISTINCT x'')) NOT NULL)); -- 0ms;
SELECT DISTINCT json_array((((v0.c0, 0.8942763588968383, rt0.c2, rt0.c2, v0.c0)) NOT BETWEEN ((rt0.c0, rt0.c1, rt0.c2, v0.c0, rt0.c1)) AND ((v0.c0, v0.c0, rt0.c2, rt0.c0, rt0.c2))), rt0.c0 COLLATE BINARY, COALESCE(DISTINCT rt0.c1, rt0.c0), CAST(rt0.c1 AS REAL)) FROM rt0, v0; -- 0ms;
SELECT DISTINCT UPPER(DISTINCT TOTAL(v0.c0)) FROM rt0 WHERE (((((((((NULL COLLATE NOCASE)AND(((NULL)&(0.6437017453332518)))))AND(NULL)))OR('	L*^I')))AND(((x'5a07')<=(1039616351)))));SELECT DISTINCT (((rt0.c0 IN ()))<=(SQLITE_SOURCE_ID())), ((((rt0.c1)LIKE(rt0.c0)))<(CAST(rt0.c0 AS BLOB))), rt0.c0 FROM rt0 WHERE (CAST((x'' IN (-1709070136)) AS BLOB)); -- 0ms;
SELECT DISTINCT ((NULL)*((((rt0.c2)) BETWEEN ((rt0.c1)) AND ((rt0.c1))))) FROM rt0 WHERE (('0.9266468818598189' IN ())) GROUP BY INSTR(v0.c0 COLLATE RTRIM, (rt0.c1 IN (rt0.c1))) HAVING rt0.c0;SELECT DISTINCT x'' FROM v0, rt0; -- 1ms;
SELECT ALL (((((v0.c0, rt0.c0, v0.c0))<>((rt0.c1, '448279057', rt0.c2))))&((rt0.c1 IN ()))) FROM v0 GROUP BY ((((((rt0.c1)AND(rt0.c0)))AND(x'')))>(CASE WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c2 END));SELECT DISTINCT CASE WHEN ((v0.c0)%(rt0.c1)) THEN ((v0.c0)<(rt0.c2)) END FROM rt0 LIMIT 887182413;SELECT DISTINCT UNLIKELY(v0.c0) COLLATE BINARY FROM v0, rt0 GROUP BY CASE (((rt0.c0)) BETWEEN ((rt0.c1)) AND ((v0.c0)))  WHEN rt0.c0 COLLATE NOCASE THEN '997993704' END, ((rt0.c1)GLOB(rt0.c1 COLLATE BINARY)), ((((v0.c0)) BETWEEN ((rt0.c1)) AND ((rt0.c2))) IN ()), 0.9738387850470791, ((((x'')AND(CASE rt0.c0  WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END)))OR(((rt0.c0)<<(v0.c0)))) HAVING (ABS(DISTINCT rt0.c2) IN ()); -- 0ms;
SELECT DISTINCT CUME_DIST() OVER () FROM v0, rt0; -- 0ms;
SELECT DISTINCT ((((rt0.c0)||(rt0.c1)))%((((('⳨⏑')OR(x'')))AND(rt0.c0)))) FROM v0, rt0 WHERE (((CAST(NULL AS BLOB))||(MIN(-1858019973, NULL)))); -- 0ms;
SELECT DISTINCT (load_extension(v0.c0, v0.c0) IN ((((v0.c0)) BETWEEN ((rt0.c2)) AND ((v0.c0))))), CAST(((v0.c0)GLOB(rt0.c0)) AS INTEGER), (v0.c0 COLLATE NOCASE IN ()) FROM rt0, v0;SELECT DISTINCT MAX(((rt0.c0)IS NOT(v0.c0))) FROM rt0, v0 WHERE (CASE WHEN ((0x361e8e677d0ba4b6)IS(0.47020584448896086)) THEN CAST(x'd74c' AS NUMERIC) END); -- 0ms;
SELECT DISTINCT v0.c0 FROM rt0 WHERE (COALESCE(DISTINCT highlight(NULL, '337223462', x'', x''), CAST('-103668199' AS BLOB), CAST('-744447141' AS REAL), CAST(0.08058760595802072 AS BLOB)));SELECT rt0.c2 FROM v0, rt0 WHERE (CASE WHEN json_type(NULL) THEN ((0.8149421099607513)IS('-2002585887')) WHEN NULL COLLATE RTRIM THEN ((((((((((((4.48279057E8)AND(-1709070136)))OR('m')))OR(x'')))AND(x'')))OR(x'8467')))AND(0.9196553851857932)) WHEN NULL THEN NULL COLLATE NOCASE ELSE ((-2094280280) NOT BETWEEN (0.2947795598527374) AND (x'')) END) ORDER BY ((rt0.c0)-(((((rt0.c2)AND(rt0.c2)))OR(v0.c0)))) ASC; -- 0ms;
SELECT LIKELY(((rt0.c1) BETWEEN (v0.c0) AND (rt0.c0))) FROM v0;SELECT ((((v0.c0) IS FALSE))&(((((rt0.c0)OR(rt0.c1)))OR(v0.c0)))) FROM v0 ORDER BY ((((v0.c0)>(rt0.c2)))IS(CAST(0xfffffffff6bf9eec AS NUMERIC))) ASC;SELECT DISTINCT (((rt0.c0, rt0.c1, v0.c0)) BETWEEN ((NULL, x'', rt0.c0)) AND ((x'', rt0.c2, rt0.c0))) COLLATE NOCASE, ((CAST(rt0.c0 AS NUMERIC)) BETWEEN (((((x'fbf5')OR(v0.c0)))OR(rt0.c2))) AND (GROUP_CONCAT(rt0.c2))), NULL FROM v0, rt0 WHERE (UPPER(DISTINCT ((0.2745151506149325) IS TRUE))); -- 0ms;
SELECT ALL COUNT(CAST(NULL AS NUMERIC)) OVER () FROM v0; -- 0ms;
SELECT (AVG(v0.c0) IN ()), ((((((((CAST(rt0.c2 AS TEXT))AND(CAST(v0.c0 AS NUMERIC))))OR((((rt0.c2))=(('j'))))))OR(v0.c0 COLLATE RTRIM)))OR(((rt0.c1)<<(rt0.c0)))), '1ꯏ)' COLLATE BINARY FROM rt0 WHERE ('-1076383916');SELECT DISTINCT ((((rt0.c2) NOTNULL)) NOT BETWEEN (NULL) AND (CAST(v0.c0 AS REAL))) FROM v0 WHERE ((((0.6647187956200272, '', 0X1c7d7d43, 0.15753956901089072, '0.6647187956200272')) NOT BETWEEN ((((3.899710902480119E18)|(0.5548631898734874)), CAST('?~⏑U衐qq8' AS TEXT), ((0.8161625755633691) IS TRUE), LIKE(NULL, NULL, '2'), ((NULL) IS FALSE))) AND ((((-1178121816) NOT BETWEEN (x'') AND (x'')), CASE WHEN '' THEN NULL WHEN x'' THEN NULL WHEN x'' THEN ']%' WHEN 'd()' THEN '1627797278' WHEN NULL THEN x'' END, ((613086324)<(0.09976982473451224)), x'' COLLATE BINARY, ((((-2.095604467E9)AND(0.9738387850470791)))OR(0x27c3d89b))))));SELECT DISTINCT ((CAST(v0.c0 AS INTEGER))OR((~ (rt0.c2)))) FROM v0, rt0 ORDER BY CAST(rt0.c2 COLLATE RTRIM AS TEXT) ASC, (((+ (rt0.c2))) NOT BETWEEN (((v0.c0)<<(rt0.c1))) AND (((rt0.c0) NOT BETWEEN (v0.c0) AND (rt0.c0)))) DESC  NULLS FIRST; -- 0ms;
SELECT (((TRIM(DISTINCT v0.c0), ((v0.c0)OR(v0.c0)), json_insert(v0.c0, rt0.c0, rt0.c2)))>=((rt0.c2 COLLATE RTRIM, ((rt0.c1) NOT BETWEEN (v0.c0) AND (rt0.c1)), (rt0.c1 IN ())))) FROM rt0, v0 LIMIT -2094280280 OFFSET -1578497042; -- 0ms;
SELECT DISTINCT (('1762748248')|((NOT (rt0.c0)))) FROM rt0 WHERE (((-440024863 IN ()) IN ())); -- 0ms;
SELECT DISTINCT CAST(CAST(v0.c0 AS INTEGER) AS NUMERIC) FROM v0, rt0 WHERE ((((((x'')|(0.15753956901089072))))>((((0.24655362010909887)|('F}')))))) ORDER BY CASE ((v0.c0) BETWEEN (v0.c0) AND (-8.7690232E8))  WHEN ((v0.c0) BETWEEN (rt0.c2) AND (v0.c0)) THEN CAST(rt0.c2 AS TEXT) ELSE (((v0.c0))=((rt0.c1))) END; -- 0ms;
SELECT ROW_NUMBER() OVER (), (+ ((rt0.c2 IN (NULL)))), '1280523099' FROM rt0, v0; -- 0ms;
SELECT DISTINCT (((((((((rt0.c2)OR(rt0.c2)))AND(v0.c0)))AND('ᬌW')))OR(x'')) IN ()) FROM v0; -- 1ms;
SELECT ALL CASE WHEN ((rt0.c2)=(rt0.c1)) THEN rt0.c2 WHEN (v0.c0 IN ()) THEN ((((rt0.c1)AND(v0.c0)))AND(rt0.c0)) WHEN (~ (rt0.c2)) THEN (~ (rt0.c1)) WHEN ((rt0.c2)&(v0.c0)) THEN (rt0.c1 IN ()) WHEN CASE rt0.c0  WHEN v0.c0 THEN v0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END THEN SUM(rt0.c1) WHEN CASE rt0.c1  WHEN rt0.c1 THEN v0.c0 END THEN v0.c0 WHEN rt0.c1 COLLATE NOCASE THEN ((rt0.c0)LIKE(rt0.c1)) ELSE COUNT(rt0.c2) END FROM rt0;SELECT DISTINCT ((v0.c0 COLLATE NOCASE) IS FALSE) FROM v0, rt0 GROUP BY (((rt0.c0) BETWEEN (x'') AND (NULL)) IN (rt0.c2)) HAVING rt0.c1; -- 0ms;
SELECT DISTINCT (~ (((rt0.c2)<<(rt0.c1)))), (((rt0.c1 IN (rt0.c0))) NOT NULL), TRIM(COUNT(v0.c0), rt0.c1 COLLATE NOCASE) FROM rt0 WHERE (CAST(CASE WHEN NULL THEN '750812088' END AS INTEGER)) LIMIT 58213133 OFFSET 233534811;SELECT DISTINCT SQLITE_COMPILEOPTION_GET(CAST(v0.c0 AS TEXT)) FROM v0 WHERE ((((('' COLLATE NOCASE)AND(((-9589809.0)IS NOT('448279057')))))OR(0.5775446045550073))); -- 0ms;
SELECT DISTINCT ((((((rt0.c0)AND(rt0.c0)))OR(rt0.c0)))<<(((rt0.c0)/(v0.c0)))), CAST(((rt0.c2)||(v0.c0)) AS NUMERIC), rt0.c1 FROM v0, rt0 WHERE (((('887182413'))>=((NULL))) COLLATE NOCASE); -- 0ms;
SELECT (((rt0.c0)) NOT BETWEEN ((((v0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c2)))) AND (((((((((('-103668199')AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c0)))AND('PSb#\njZ'))))), (((rt0.c2) NOT NULL) IN ()), ((((((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c1)))AND(rt0.c1 COLLATE RTRIM)))AND(SQLITE_VERSION())) FROM v0, rt0; -- 0ms;
SELECT ALL COUNT(TYPEOF(DISTINCT rt0.c0)) FROM rt0 WHERE ((((((((NULL))<((1707438119))))OR(CAST(NULL AS REAL))))AND(((NULL) NOT NULL)))); -- 0ms;
SELECT CASE ((v0.c0) BETWEEN (rt0.c1) AND (v0.c0))  WHEN rt0.c0 COLLATE NOCASE THEN v0.c0 COLLATE NOCASE WHEN (- ('	n')) THEN CAST(rt0.c2 AS TEXT) WHEN 0.35737144548183764 THEN json_array_length(v0.c0) WHEN rt0.c1 THEN CAST(v0.c0 AS REAL) WHEN CAST(rt0.c1 AS BLOB) THEN CAST(0.7251309287792289 AS BLOB) ELSE MAX(0.1337451015982304) END FROM v0 WHERE (('' COLLATE RTRIM IN (CAST(0.8148697578854867 AS NUMERIC))));SELECT DISTINCT LAST_VALUE('-155214100') OVER ( PARTITION BY ((((CASE rt0.c0  WHEN rt0.c2 THEN rt0.c0 END)OR('R\n')))OR(((((rt0.c1)OR(rt0.c0)))AND(rt0.c2)))), rt0.c2), COUNT(*) OVER (), ((((((rt0.c2)OR(rt0.c0)))AND('-1578497042'))) NOT BETWEEN ((rt0.c0 IN (rt0.c1))) AND (COUNT(rt0.c0))) FROM rt0 WHERE ((((('-155214100') NOT BETWEEN (0.8161625755633691) AND (x'')))-(NULL COLLATE NOCASE))); -- 0ms;
SELECT (- ((+ (rt0.c2)))) FROM rt0 WHERE ((- (CASE '58213133'  WHEN NULL THEN 'v[' ELSE NULL END))) ORDER BY (((rt0.c0)) BETWEEN (((((rt0.c0))<>((x''))))) AND ((x'5056'))) ASC  NULLS FIRST, (((v0.c0, rt0.c1, v0.c0, rt0.c1, rt0.c2)) BETWEEN ((UNLIKELY(DISTINCT rt0.c2), (('dW?')=(rt0.c1)), (- (rt0.c1)), ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c0)), ((rt0.c0) NOT BETWEEN (v0.c0) AND (rt0.c1)))) AND ((((((rt0.c2)OR(rt0.c0)))OR(NULL)), v0.c0 COLLATE RTRIM, ((((0.4442873527785013)AND(rt0.c0)))OR(rt0.c0)), (~ (v0.c0)), ((((rt0.c2)AND(rt0.c2)))AND('0.7251309287792289'))))) DESC  NULLS LAST, IFNULL(CAST(0.12883203386823572 AS INTEGER), CAST(rt0.c2 AS INTEGER));SELECT ALL (((((rt0.c1))>=((v0.c0)))) ISNULL) FROM v0, rt0 WHERE ((- (('-876902320' IN ())))) LIMIT -2139481729 OFFSET 1198863753; -- 0ms;
SELECT highlight((~ (v0.c0)), rt0.c0, (rt0.c1 IN ()), (+ (rt0.c2))), ((67775580 COLLATE NOCASE) NOTNULL), CAST((NOT (rt0.c1)) AS INTEGER) FROM v0 WHERE (((((((NULL)AND(x'f68e')))OR(NULL)))&((- (0.7481428539785753))))) GROUP BY (((v0.c0, rt0.c0, rt0.c2)) NOT BETWEEN ((((((((((rt0.c1)OR(rt0.c0)))OR(rt0.c0)))AND(v0.c0)))AND(rt0.c2)), (v0.c0 IN (rt0.c0)), (NOT (rt0.c1)))) AND (((~ (rt0.c2)), rt0.c0, rt0.c0 COLLATE RTRIM)));SELECT DISTINCT ((rt0.c1)>(v0.c0)) COLLATE BINARY FROM v0, rt0 WHERE ((- (('[' IN (0.608027857639706, -1245845687))))); -- 0ms;
SELECT ((CAST(v0.c0 AS REAL))LIKE(((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c0)))) FROM v0 GROUP BY CASE WHEN ((rt0.c0)<=(v0.c0)) THEN ((rt0.c0) NOTNULL) ELSE x'' END, CAST(v0.c0 AS INTEGER), rt0.c0 HAVING (+ (CAST(rt0.c2 AS NUMERIC)));SELECT ALL CASE WHEN rt0.c0 COLLATE BINARY THEN ((((rt0.c0)AND(rt0.c0)))OR(v0.c0)) WHEN ((rt0.c0) BETWEEN (v0.c0) AND (rt0.c0)) THEN (((v0.c0, rt0.c0, v0.c0))<=((rt0.c0, rt0.c1, v0.c0))) WHEN ((((rt0.c2)AND(v0.c0)))OR(rt0.c0)) THEN rt0.c0 END FROM v0, rt0; -- 0ms;
SELECT ALL CAST(((v0.c0) BETWEEN (rt0.c1) AND (rt0.c0)) AS TEXT) FROM v0, rt0 WHERE ((NOT (((0.5814786055494144)IS(1401969157))))); -- 1ms;
SELECT ALL ((((rt0.c0)<<(rt0.c1))) NOT BETWEEN (CAST(rt0.c1 AS INTEGER)) AND (((rt0.c0)/(rt0.c2)))) FROM v0 WHERE ((((CAST(-1e500 AS NUMERIC), (((((((('')OR(0.562540715993344)))AND(x'0d68')))AND('-2139481729')))AND(x'')), ((0.9136394253787997) NOT BETWEEN ('') AND ('Jx()'))))>=(((((-2.002585887E9, -2.095604467E9, '/溴'))>((NULL, '-155214100', '1198863753'))), (((x'edf2', x'', '0.5548631898734874')) NOT BETWEEN (('f*', '1851877312', NULL)) AND (('-863468940', x'', NULL))), (('')*('-155214100')))))) ORDER BY ((((((((((((rt0.c1)AND(rt0.c2)))AND(rt0.c0)))OR('j')))OR((((0.07005120132419285, rt0.c2, rt0.c1)) BETWEEN ((v0.c0, rt0.c2, rt0.c1)) AND (('-1904414024', rt0.c1, rt0.c2))))))AND(((((v0.c0)OR(0.11626520184231803)))OR(rt0.c0)))))AND(CAST(rt0.c1 AS BLOB))) ASC, (((TYPEOF(DISTINCT rt0.c2), CASE rt0.c2  WHEN rt0.c2 THEN v0.c0 END, ((NULL)-(rt0.c1)), ((rt0.c2)||(v0.c0)), x''))>=((((rt0.c0) NOT NULL), '黬', ((rt0.c2)+(rt0.c0)), json_array(rt0.c2, rt0.c0), (v0.c0 IN ())))), ((((rt0.c1)<(rt0.c0))) ISNULL) ASC;SELECT DISTINCT (- (rt0.c0)) FROM rt0; -- 0ms;
SELECT DISTINCT NTILE(rt0.c1) OVER () FROM v0, rt0;SELECT DISTINCT (NOT (MIN(rt0.c0))) FROM v0, rt0 WHERE ('1401969157'); -- 0ms;
SELECT CASE ((((v0.c0)OR(v0.c0)))AND(v0.c0))  WHEN ((rt0.c2)==(rt0.c1)) THEN GROUP_CONCAT(rt0.c0) ELSE ((rt0.c1)==(v0.c0)) END, (NOT ((((rt0.c1, rt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c2, 0.35737144548183764, rt0.c1)) AND (('-814434774', rt0.c1, rt0.c1))))), (((NOT (rt0.c2))) NOT BETWEEN (((rt0.c0)<>(rt0.c0))) AND (((((v0.c0)AND(rt0.c1)))OR(rt0.c1)))) FROM v0;SELECT DISTINCT v0.c0, ((rt0.c0) NOTNULL) COLLATE RTRIM, (+ (((58213133)-(rt0.c1)))) FROM v0, rt0; -- 0ms;
SELECT DISTINCT ((((((((((v0.c0)AND(x'6bb6')))AND(rt0.c1)))OR(NULL)))OR(rt0.c1)))&(CAST(rt0.c1 AS BLOB))), LOWER(DISTINCT ((((rt0.c2)AND(v0.c0)))OR(rt0.c2))), (((rt0.c2 IN ())) NOT BETWEEN ((NOT (v0.c0))) AND (CAST(rt0.c0 AS BLOB))) FROM v0, rt0 WHERE (((((((NULL)OR('')))AND(''))) BETWEEN (((x'')OR('^}t恟'))) AND (CAST(NULL AS INTEGER)))); -- 1ms;
SELECT rt0.c1 FROM v0, rt0; -- 0ms;
SELECT DISTINCT COUNT((~ (v0.c0))) FROM rt0;SELECT ((((rt0.c2) BETWEEN (rt0.c0) AND (v0.c0)))IS NOT((- (rt0.c0)))), CASE (NOT (rt0.c1))  WHEN TOTAL(rt0.c0) THEN '' WHEN ((((v0.c0)AND(NULL)))OR(rt0.c2)) THEN CAST(v0.c0 AS BLOB) WHEN rt0.c2 COLLATE NOCASE THEN v0.c0 END, ((UPPER(rt0.c2))IS(((v0.c0)>(rt0.c2)))), COUNT((((0.4442873527785013))<=((rt0.c1)))), rt0.c2 FROM rt0, v0 WHERE (DATETIME(((NULL)>>(0.43234774694278777)), (x'0c27' IN ()), ((0.6553795260127727) IS FALSE))) LIMIT -1439303802 OFFSET -2094280280; -- 0ms;
SELECT DISTINCT ((rt0.c1 COLLATE RTRIM) NOT BETWEEN ((((rt0.c0, rt0.c2, v0.c0)) BETWEEN ((rt0.c1, rt0.c0, v0.c0)) AND ((v0.c0, '-744447141', rt0.c2)))) AND (TRIM(rt0.c0))), ((CAST(rt0.c1 AS NUMERIC))|(((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c2)))), LEAD((NOT (((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c0)))), CASE ((((((((((((rt0.c2)AND(rt0.c1)))AND(rt0.c2)))OR(rt0.c0)))OR(rt0.c1)))OR(0.6243788247460903)))AND(rt0.c0))  WHEN CAST(rt0.c2 AS NUMERIC) THEN rt0.c2 END, CAST((((-1.954779468E9, rt0.c2, rt0.c1)) BETWEEN ((rt0.c1, rt0.c0, rt0.c1)) AND ((rt0.c1, rt0.c0, rt0.c1))) AS INTEGER)) OVER () FROM rt0 WHERE (((((((((((NULL)OR('//R<y[Ex')))OR(6.777558E7)))OR(NULL)))OR('1176636156'))) NOT BETWEEN (CAST('-1445806351' AS INTEGER)) AND (((((NULL)OR(0.6176070347136614)))AND(0.6420434373821351)))));SELECT (+ (((rt0.c1) NOTNULL))), MAX(rt0.c2), GROUP_CONCAT((- (rt0.c0))) FROM rt0 WHERE (((NULL COLLATE RTRIM)AND((- ('|.Coj'))))); -- 0ms;
SELECT COUNT(*) OVER () FROM rt0; -- 0ms;
SELECT CUME_DIST() OVER () FROM v0 WHERE (CAST((~ (x'')) AS NUMERIC)); -- 0ms;
SELECT DISTINCT CAST(ABS(DISTINCT 0Xffffffffa9d2bef1) AS REAL), rt0.c1, ((v0.c0)!=(MIN(rt0.c2))), ((((CASE rt0.c2  WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c0 END)AND(((rt0.c2) NOT BETWEEN (rt0.c1) AND (v0.c0)))))AND(((((((((rt0.c2)OR(rt0.c2)))AND(v0.c0)))AND(rt0.c1)))AND(rt0.c1)))), (((((v0.c0, NULL, v0.c0)) BETWEEN ((rt0.c2, v0.c0, rt0.c1)) AND ((rt0.c2, rt0.c1, rt0.c1)))) NOT BETWEEN (CAST(rt0.c2 AS NUMERIC)) AND (((rt0.c2) BETWEEN (v0.c0) AND (rt0.c2)))) FROM v0, rt0 WHERE ((CASE WHEN ',N' THEN x'aa83' WHEN '' THEN 0.6099907647672566 WHEN '0.09976982473451224' THEN -645953 ELSE 0.9196553851857932 END IN ())); -- 0ms;
SELECT (((~ (rt0.c1)))GLOB(v0.c0 COLLATE NOCASE)) FROM rt0 WHERE (COALESCE(CASE NULL  WHEN NULL THEN 'd' END, NULLIF(DISTINCT '', NULL))) ORDER BY (((v0.c0)) NOT BETWEEN ((((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c0)))) AND (((rt0.c1 IN ())))), (((((rt0.c0) ISNULL)))>=((CASE WHEN 0.12883203386823572 THEN rt0.c0 WHEN v0.c0 THEN v0.c0 WHEN rt0.c1 THEN rt0.c1 END)))  NULLS FIRST, ((rt0.c2 IN ()) IN ())  NULLS LAST LIMIT -961795495;SELECT (NOT (x'75ce')) FROM v0 WHERE ((('245556560') NOT BETWEEN (NULL) AND (x'')) COLLATE BINARY COLLATE NOCASE); -- 0ms;
SELECT ALL (((+ (rt0.c0)))*(x'1f22')) FROM v0 GROUP BY (CAST(rt0.c1 AS INTEGER) IN ()), (((CAST(rt0.c1 AS INTEGER), (((rt0.c1)) BETWEEN ((rt0.c0)) AND ((rt0.c2))), 0.09961919357617322))<=((((((((((rt0.c1)OR(rt0.c2)))AND(v0.c0)))OR(rt0.c2)))AND(rt0.c0)), ((rt0.c1)*(v0.c0)), (((rt0.c0))>=((rt0.c0)))))), ((((((((((rt0.c1)AND(rt0.c2)))OR(v0.c0)))OR(rt0.c1)))OR(rt0.c0)))%(((((rt0.c1)AND(rt0.c0)))OR(rt0.c1))));SELECT ((((rt0.c2)IS NOT(v0.c0))) IS TRUE) FROM v0 ORDER BY (((rt0.c2)) BETWEEN ((rt0.c1)) AND ((rt0.c2))) COLLATE BINARY ASC LIMIT 2023600841;SELECT ALL HEX(v0.c0 COLLATE BINARY), (- (json_quote(rt0.c0))), (((rt0.c1)) NOT BETWEEN ((UPPER(v0.c0))) AND ((CASE WHEN rt0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c0 WHEN rt0.c2 THEN rt0.c2 ELSE 0.5814786055494144 END))) FROM rt0 WHERE (((((1.762748248E9 COLLATE RTRIM)AND(x'' COLLATE BINARY)))AND(NULL))) ORDER BY CASE WHEN CAST(rt0.c1 AS NUMERIC) THEN rt0.c2 COLLATE NOCASE ELSE ((((rt0.c2)AND(rt0.c1)))AND(rt0.c2)) END DESC, TRIM(v0.c0 COLLATE BINARY, '-1733042133')  NULLS LAST;SELECT DISTINCT ((COUNT(*))OR((+ (rt0.c2)))) FROM rt0 WHERE ('-206578659'); -- 0ms;
SELECT ALL CUME_DIST() OVER ( ORDER BY ((rt0.c2)<>(((v0.c0) BETWEEN (v0.c0) AND (rt0.c0)))) ASC  NULLS FIRST, (~ (((-361148747)|(rt0.c0))))), COUNT(((((rt0.c2)AND(rt0.c0)))OR(v0.c0)) COLLATE RTRIM), ((TRIM(DISTINCT rt0.c1)) BETWEEN ((~ (rt0.c1))) AND (((rt0.c0)-(rt0.c0)))) FROM v0 WHERE ((~ (0.5205961806151206)) COLLATE RTRIM COLLATE BINARY);SELECT DISTINCT rt0.c1 FROM v0;SELECT DISTINCT TIME(((rt0.c0)==(rt0.c1)), (v0.c0 IN ()), x'8472') FROM v0, rt0 WHERE (((((0.6437017453332518) ISNULL)) IS TRUE)); -- 0ms;
SELECT ((CASE rt0.c2  WHEN rt0.c0 THEN x'2658' END) BETWEEN (rt0.c1) AND ((((v0.c0))==((rt0.c1))))) FROM v0 WHERE (CASE (~ (''))  WHEN 0.35737144548183764 COLLATE NOCASE THEN ((x'') NOT BETWEEN (x'') AND (NULL)) ELSE NULL END);SELECT ALL (~ (v0.c0 COLLATE NOCASE)) FROM v0, rt0 LIMIT -1733042133; -- 0ms;
SELECT DISTINCT rt0.c1, v0.c0, (((~ (rt0.c1)))%(x'')) FROM v0, rt0 GROUP BY ((rt0.c1)/(((v0.c0)/(rt0.c2)))) HAVING UNLIKELY((((v0.c0, rt0.c0, rt0.c1)) BETWEEN ((rt0.c0, rt0.c2, rt0.c1)) AND ((rt0.c0, rt0.c1, rt0.c1)))) LIMIT -247379793; -- 0ms;
SELECT DISTINCT json_type(rt0.c1) COLLATE RTRIM FROM rt0 GROUP BY ((rt0.c1 IN (rt0.c2)) IN ()); -- 0ms;
SELECT DISTINCT ((((((((rt0.c1)AND(rt0.c1)))AND(v0.c0)))AND(-933703614)))OR(v0.c0)) COLLATE NOCASE FROM rt0, v0; -- 0ms;
SELECT ALL GROUP_CONCAT((((v0.c0)) BETWEEN ((v0.c0)) AND ((0.5814786055494144)))) FROM rt0 ORDER BY CASE WHEN ((v0.c0) IS FALSE) THEN ((v0.c0)<(rt0.c0)) END  NULLS LAST;SELECT DISTINCT ((((((v0.c0)AND(rt0.c2)))OR(v0.c0)))&(((rt0.c2) IS TRUE))) FROM v0, rt0; -- 0ms;
SELECT ALL (((rt0.c0) NOT BETWEEN (rt0.c0) AND (v0.c0)) IN ()) FROM rt0, v0; -- 0ms;
SELECT v0.c0 FROM rt0 LIMIT 337223462;SELECT ((+ (NULL)) IN ()) FROM rt0 WHERE (CAST(((x'') NOT BETWEEN ('쐈?rI!m') AND (0.5403817902489393)) AS TEXT)) ORDER BY (NOT ((rt0.c2 IN ()))) DESC  NULLS FIRST; -- 0ms;
SELECT ALL (((((((((((rt0.c0)) BETWEEN ((rt0.c0)) AND ((rt0.c1))))OR((('') NOT BETWEEN (rt0.c0) AND (rt0.c1)))))AND(IFNULL(rt0.c1, rt0.c1))))AND((v0.c0 IN (rt0.c0)))))AND(v0.c0)) FROM v0, rt0; -- 0ms;
SELECT DISTINCT v0.c0, ((x'') NOT BETWEEN (((613086324) IS FALSE)) AND (load_extension(rt0.c1))), '-1345765470' FROM v0 WHERE (((CASE x''  WHEN 0xffffffff95626713 THEN '6e0/\nCD' WHEN '' THEN NULL WHEN 1.707438119E9 THEN 0.6553795260127727 ELSE ',n' END)&(GLOB('', 0.2678483016956915))));SELECT DISTINCT ((((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c0)))LIKE(((((x'')OR(rt0.c1)))OR(rt0.c0)))) FROM rt0; -- 0ms;
SELECT ALL CASE NULLIF(DISTINCT rt0.c2, rt0.c1)  WHEN CAST(rt0.c0 AS BLOB) THEN (+ (v0.c0)) ELSE (((rt0.c0)) BETWEEN ((v0.c0)) AND ((rt0.c0))) END FROM rt0;SELECT ALL (NOT (((rt0.c2)<=(rt0.c2)))) FROM rt0, v0 WHERE (((((0.938712221091789)<=('-2139481729')))GLOB(TYPEOF('2028743336')))) ORDER BY ((((((((((rt0.c2)OR(rt0.c2)))AND(rt0.c1)))OR(v0.c0)))AND(rt0.c0))) NOT NULL); -- 0ms;
SELECT DISTINCT ((((rt0.c1) IS TRUE)) BETWEEN (CAST(rt0.c0 AS BLOB)) AND (((v0.c0) NOT NULL))) FROM rt0 GROUP BY (NOT (((rt0.c0)IS(v0.c0)))), ((rt0.c0)=(CAST(0.1459994291939315 AS BLOB))), LIKELIHOOD(DISTINCT 0.3435064255817647, 0.9653119266902175), ((((rt0.c0) NOT BETWEEN (x'') AND (rt0.c0)))/(0X4c533b5b)), SUBSTR((rt0.c2 IN (rt0.c2)), ((v0.c0)!=(v0.c0))), (~ ((((v0.c0)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c0))))), NULL HAVING ((((((rt0.c2)AND(v0.c0)))AND(rt0.c2))) IS FALSE);SELECT ((((rt0.c2) NOT NULL))LIKE(SUM(v0.c0))) FROM rt0;SELECT DISTINCT CASE MAX(rt0.c2)  WHEN ((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c2)) THEN MAX(rt0.c1) END FROM v0, rt0 WHERE (CASE (('477986115')IS NOT(NULL))  WHEN ((NULL)<<(NULL)) THEN ((((((((x'')OR(-247379793)))OR(x'')))OR(x'434e')))AND(x'')) ELSE (- (NULL)) END); -- 0ms;
SELECT ALL (((rt0.c0, rt0.c0, rt0.c0))<((rt0.c1, rt0.c2, v0.c0))) COLLATE NOCASE FROM rt0 NATURAL JOIN v0; -- 0ms;
SELECT DISTINCT ((((rt0.c0)>=(rt0.c0))) IS FALSE) FROM v0;SELECT DISTINCT ((((rt0.c1)<(rt0.c1)))<<((rt0.c0 IN (rt0.c1)))) FROM rt0, v0 WHERE ((((NULL, x'5408', NULL)) BETWEEN ((((((((((NULL)OR(0X1694c507)))OR(0x185e7a16)))AND(NULL)))OR('1632284630')), 0.37680015226633623, ((NULL)LIKE(0.012922597055444296)))) AND ((((NULL)+(NULL)), ((592459876)AND(NULL)), ((0.12883203386823572)+(NULL)))))); -- 0ms;
SELECT ((((rt0.c1)%('')))<>(((rt0.c0)>(rt0.c2)))) FROM v0 WHERE ((0.9854916029122099 IN (0.12883203386823572 COLLATE RTRIM)));SELECT (((v0.c0)) BETWEEN ((((rt0.c1) BETWEEN (v0.c0) AND (rt0.c0)))) AND ((CASE WHEN NULL THEN rt0.c0 ELSE rt0.c1 END))) FROM v0, rt0 WHERE (CASE COALESCE(0.6141136560324582, NULL)  WHEN CAST(-1178121816 AS REAL) THEN ((0.921972349683828)||(x'b177')) END); -- 0ms;
SELECT ALL ((rt0.c2)LIKE(rt0.c1)) COLLATE BINARY FROM rt0, v0; -- 0ms;
SELECT DISTINCT (- (((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c1)))) FROM v0 ORDER BY v0.c0  NULLS FIRST;SELECT DISTINCT CASE WHEN ((rt0.c1)GLOB('772575529')) THEN v0.c0 COLLATE RTRIM END FROM rt0 WHERE (-1.709070136E9) ORDER BY ((rt0.c1 COLLATE NOCASE) NOTNULL)  NULLS FIRST;SELECT DISTINCT GROUP_CONCAT(0.30165123170762587) OVER (), ((TOTAL(x'466cfd34')) BETWEEN (0.2112914471470655) AND (TRIM(rt0.c1, rt0.c1))), (- ((~ (v0.c0)))) FROM rt0, v0 WHERE (((((((x'')AND(750812088)))AND(x'87a7')))IS((+ (x'd0d7'))))); -- 0ms;
SELECT DISTINCT ((COUNT(*)) BETWEEN (CAST(x'' AS REAL)) AND (((rt0.c0) NOT NULL))) FROM v0, rt0 WHERE (((TRIM(DISTINCT '', 0Xfffffffff3afdc1d)) ISNULL)); -- 0ms;
SELECT ALL 0.8358239796791851, CASE WHEN MAX(rt0.c0) THEN NULL WHEN ((rt0.c0) BETWEEN (v0.c0) AND (rt0.c2)) THEN (('-1447288241')>=(rt0.c0)) WHEN (((rt0.c0)) BETWEEN ((rt0.c1)) AND ((rt0.c1))) THEN rt0.c2 COLLATE RTRIM END, MIN(SUM(((v0.c0) BETWEEN (NULL) AND ('')))) FROM rt0;SELECT ALL (~ ((v0.c0 IN (rt0.c2)))) FROM rt0, v0 ORDER BY CAST(((((rt0.c0)OR(rt0.c0)))AND(rt0.c0)) AS INTEGER) DESC  NULLS FIRST; -- 0ms;
SELECT DISTINCT NULL, ((((+ (rt0.c0))))>((COUNT(*)))), ((rt0.c2 COLLATE RTRIM) IS TRUE), ((0x4c351c6d)<<(NULL)), UPPER(CASE rt0.c1  WHEN rt0.c2 THEN 0.4649680608811848 WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c0 WHEN 0.6165172230123611 THEN v0.c0 WHEN v0.c0 THEN rt0.c1 END) FROM rt0;SELECT ALL SUM(v0.c0), ((((((rt0.c2)OR(rt0.c0)))OR(rt0.c2)))*(((v0.c0) ISNULL))), COUNT(CAST(rt0.c0 AS BLOB)) FROM v0, rt0; -- 0ms;
SELECT DISTINCT CASE CAST(rt0.c1 AS TEXT)  WHEN IFNULL(DISTINCT v0.c0, v0.c0) THEN (((v0.c0))<=((rt0.c1))) WHEN CASE x''  WHEN rt0.c2 THEN rt0.c1 WHEN v0.c0 THEN v0.c0 WHEN '1401969157' THEN rt0.c1 END THEN HEX(rt0.c1) WHEN CASE rt0.c0  WHEN x'' THEN rt0.c1 END THEN NULL COLLATE NOCASE ELSE LIKE(v0.c0, NULL, '0') END FROM v0, rt0 WHERE (((((x'ccec')*(x''))) BETWEEN ('0.9854916029122099' COLLATE RTRIM) AND ((((x'')) BETWEEN ((NULL)) AND ((x'')))))); -- 1ms;
SELECT DISTINCT CAST(((((x'')OR(rt0.c1)))AND(rt0.c0)) AS REAL) FROM v0, rt0 WHERE (NULL); -- 0ms;
SELECT DISTINCT ((((rt0.c1)>>(rt0.c0))) NOT NULL), (0.6752191914591535 IN (rt0.c2)) COLLATE NOCASE, CAST(NULLIF(v0.c0, rt0.c0) AS BLOB) FROM rt0 GROUP BY CAST(rt0.c0 AS TEXT);SELECT ((((((rt0.c0))<((rt0.c0)))))!=(((rt0.c1 IN ())))), (NOT (((v0.c0) IS TRUE))), (((v0.c0 IN ()))IS(CAST(rt0.c1 AS INTEGER))) FROM v0 WHERE (((CASE 'hN''?YJ?'  WHEN 'pK' THEN NULL END) BETWEEN (((-814434774) NOT NULL)) AND ((('') ISNULL)))) LIMIT 673578327 OFFSET -863468940;SELECT DISTINCT ROW_NUMBER() OVER (), (((rt0.c0)IS(rt0.c2)) IN (((rt0.c1)>=(rt0.c2)))), CASE MAX(rt0.c0)  WHEN CASE WHEN rt0.c0 THEN v0.c0 ELSE rt0.c2 END THEN ((((rt0.c2)AND(v0.c0)))AND(rt0.c1)) WHEN ((rt0.c0)<>(rt0.c0)) THEN json_type(rt0.c2) WHEN rt0.c0 THEN (+ (rt0.c1)) ELSE ((((rt0.c0)OR(rt0.c2)))OR(v0.c0)) END FROM rt0, v0; -- 0ms;
SELECT ALL CAST(rt0.c2 AS NUMERIC) FROM v0;SELECT DISTINCT (((rt0.c1))!=((((rt0.c0) NOT NULL)))), CAST(COALESCE(rt0.c1, rt0.c0) AS REAL), (- (((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c1)))) FROM v0, rt0; -- 0ms;
SELECT DISTINCT rt0.c1 FROM v0, rt0 GROUP BY ((((((((rt0.c0)OR(((rt0.c1)*(rt0.c0)))))OR((+ (rt0.c0)))))AND(rt0.c1)))OR((((('-652284500')OR(rt0.c2)))AND(v0.c0)))) HAVING (+ (rt0.c1)); -- 0ms;
SELECT DISTINCT ((((((rt0.c1)AND(rt0.c0)))OR(rt0.c1))) NOT BETWEEN (MAX(rt0.c0)) AND ((rt0.c2 IN (v0.c0)))) FROM v0 WHERE (TRIM(DISTINCT '474975087', LIKELY(DISTINCT NULL))) LIMIT 2114839964;SELECT DISTINCT ((CAST(v0.c0 AS TEXT))>(CAST(v0.c0 AS BLOB))) FROM rt0 LEFT OUTER JOIN v0 ON rt0.c0 WHERE (((CASE WHEN '-1788713197' THEN 'n뻱' END) ISNULL)); -- 1ms;
SELECT DISTINCT x'' FROM v0 ORDER BY ((v0.c0) IS FALSE)  NULLS LAST, TYPEOF(rt0.c0) COLLATE NOCASE  NULLS LAST, ((((73272182)AND(rt0.c2)))AND('-247379793')) DESC;SELECT ALL (+ (rt0.c0)) FROM v0, rt0; -- 0ms;
SELECT ((AVG(rt0.c1))OR(COUNT('592459876'))) FROM v0, rt0 WHERE (CAST(CAST('o~aZ' AS TEXT) AS REAL)); -- 0ms;
SELECT (((((((((rt0.c1)OR('337223462')))OR(rt0.c0)))AND(v0.c0)))OR(rt0.c0)) IN ()), (((+ (rt0.c1))) IS FALSE), ((((rt0.c0)>>(rt0.c0))) ISNULL) FROM v0;SELECT DISTINCT ((((((((((((((((rt0.c0)OR(rt0.c0)))OR(x'')))AND(rt0.c0)))AND(rt0.c2)))OR(v0.c0)))AND(v0.c0)))OR(((((rt0.c1)AND(rt0.c0)))AND(rt0.c0)))))OR(SUM(v0.c0))), ((('-744447141' IN (v0.c0, rt0.c0))) NOT BETWEEN (CASE rt0.c0  WHEN rt0.c1 THEN v0.c0 WHEN rt0.c0 THEN v0.c0 WHEN v0.c0 THEN rt0.c2 END) AND (COUNT(*))), CAST((((rt0.c1))<>((rt0.c2))) AS BLOB) FROM v0 ORDER BY (((rt0.c1)<<(rt0.c2)) IN (0.0940779917182587, ('-2052797596' IN ()))) ASC  NULLS LAST;SELECT DISTINCT x'' FROM rt0 WHERE ((((((('恟{')) BETWEEN ((x'07f4')) AND ((NULL)))))<=((CAST('1563439288' AS BLOB))))); -- 0ms;
SELECT DISTINCT ((((rt0.c1)+(rt0.c0))) IS TRUE) FROM rt0 RIGHT OUTER JOIN v0 ON ((rt0.c1) NOT NULL) WHERE ((((x'')||('I')) IN ())); -- 0ms;
SELECT DISTINCT ((((((rt0.c0)OR(v0.c0)))AND(v0.c0)))&(json_array_length(rt0.c0, rt0.c1))) FROM v0, rt0 WHERE ((~ (CAST(x'd862' AS BLOB)))) ORDER BY ((rt0.c1 COLLATE BINARY)>>(v0.c0 COLLATE BINARY));SELECT DISTINCT ((SUM(rt0.c2)) IS TRUE) FROM rt0, v0 GROUP BY ((v0.c0 COLLATE BINARY)>=(((((rt0.c2)OR(rt0.c1)))OR(rt0.c1)))); -- 1ms;
SELECT ALL ((((rt0.c1)&(x'8fcc'))) ISNULL) FROM v0 LIMIT -1000981181 OFFSET -472275568;SELECT DISTINCT rt0.c1 FROM v0, rt0; -- 0ms;
SELECT ALL (((rt0.c2 IN (rt0.c1)))-(CASE WHEN rt0.c1 THEN rt0.c1 END)), (- (((x'') IS TRUE))), rt0.c2, CASE ((rt0.c0)||(rt0.c2))  WHEN COUNT(*) THEN ((rt0.c0) BETWEEN (v0.c0) AND (v0.c0)) END, (CAST(v0.c0 AS INTEGER) IN ()) FROM v0, rt0; -- 0ms;
SELECT DISTINCT COUNT(*) FROM rt0; -- 0ms;
SELECT DISTINCT HEX((('-94008672') NOT BETWEEN (rt0.c1) AND (rt0.c1))) FROM rt0 WHERE ((((('613086324')AND('d{p}' COLLATE NOCASE)))AND(((0.7488196769019964)>=('-1007250617'))))) ORDER BY CAST(load_extension(rt0.c0, rt0.c0) AS BLOB); -- 0ms;
SELECT ALL CUME_DIST() OVER (), (((v0.c0 IN ()))>(((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c0)))), x'' FROM v0, rt0 WHERE (TYPEOF(((750812088)>(997993704)))); -- 0ms;
SELECT ((COUNT(rt0.c0))>(CASE x''  WHEN 0.08097505800045923 THEN rt0.c2 WHEN v0.c0 THEN rt0.c2 WHEN rt0.c1 THEN v0.c0 END)) FROM v0, rt0 WHERE ((((x'')) BETWEEN ((((x'') NOT BETWEEN (x'd00e') AND (NULL)))) AND ((NULL)))) LIMIT -1709070136 OFFSET -1000981181; -- 0ms;
SELECT ((rt0.c0) IS TRUE) FROM rt0, v0; -- 0ms;
SELECT DISTINCT GROUP_CONCAT(((rt0.c1)<<(rt0.c1))) OVER ( ROWS  UNBOUNDED PRECEDING EXCLUDE NO OTHERS) FROM rt0, v0; -- 1ms;
SELECT ALL rt0.c0 FROM rt0 WHERE ((((('')-('3899710902480118966'))) BETWEEN ('030v/龝Oi#' COLLATE RTRIM) AND (TYPEOF(DISTINCT 0.43410320757885446)))); -- 0ms;
SELECT (((rt0.c1, rt0.c0, rt0.c2)) NOT BETWEEN ((0.3214380709452488, ((((((((rt0.c2)AND(rt0.c2)))OR(rt0.c2)))AND('-876902320')))OR(v0.c0)), CAST(rt0.c2 AS NUMERIC))) AND ((CAST(rt0.c2 AS INTEGER), ((rt0.c2)<<(rt0.c2)), v0.c0 COLLATE BINARY))) FROM rt0, v0 WHERE (((NOT (x'dd5fc1af')) IN (CAST('' AS NUMERIC)))) LIMIT -1000981181 OFFSET -249060896; -- 0ms;
SELECT DISTINCT COUNT(((rt0.c2) BETWEEN (v0.c0) AND (rt0.c2))) OVER () FROM v0, rt0 ORDER BY -863468940 COLLATE BINARY  NULLS FIRST, ((((rt0.c2)OR(rt0.c2)))OR(rt0.c1)) COLLATE BINARY ASC  NULLS LAST, (- (((v0.c0)||(rt0.c0))));SELECT ALL SUM(58213133) OVER () FROM rt0 WHERE (((CASE WHEN 1.278549101E9 THEN 'Pj꿖FRn'')' WHEN 'o~aZ' THEN '-1054548765' WHEN NULL THEN 0.6141136560324582 END)>=((x'' IN (NULL))))); -- 0ms;
SELECT DISTINCT ((SUM(rt0.c2))+(((v0.c0) IS TRUE))) FROM rt0, v0; -- 0ms;
SELECT ALL RANK() OVER ( RANGE LIKELIHOOD(((((rt0.c0)AND(rt0.c1)))AND(rt0.c0)), 0.6999183857550528) PRECEDING) FROM rt0 WHERE (((('' IN ()))||((('?Fz4ZB') NOTNULL))));SELECT DISTINCT (NOT (((rt0.c1) NOT BETWEEN (v0.c0) AND (rt0.c2)))) FROM rt0 WHERE (((((((('259990481')) BETWEEN ((0Xffffffffeaf19a64)) AND (('44'))))AND(0.8700316283819107 COLLATE RTRIM)))OR('o(⅐)' COLLATE BINARY))) GROUP BY CASE CAST(NULL AS BLOB)  WHEN ((rt0.c1) IS TRUE) THEN ((rt0.c2) NOT NULL) WHEN ((v0.c0)>=(rt0.c1)) THEN ((rt0.c0) NOT BETWEEN (v0.c0) AND ('')) WHEN UNLIKELY(DISTINCT rt0.c0) THEN CASE rt0.c0  WHEN rt0.c2 THEN rt0.c1 END END HAVING v0.c0 COLLATE BINARY ORDER BY '?Fz4ZB' COLLATE BINARY  NULLS FIRST, ((HEX(rt0.c1)) NOT BETWEEN ((((rt0.c2)) NOT BETWEEN ((rt0.c0)) AND ((v0.c0)))) AND (0.03014606208304449));SELECT DISTINCT (((((((v0.c0)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c0))))OR(((rt0.c2)-('891861201')))))OR(((rt0.c0)IS NOT(rt0.c2)))) FROM rt0, v0 WHERE (CASE json_patch(0xffffffffaa35f786, '-1887325604')  WHEN x'' THEN ('592459876' IN ()) WHEN CAST('' AS BLOB) THEN (NULL IN ()) WHEN '194069928' THEN NULLIF(0.3314116904015352, 0.4296073017040217) END) ORDER BY ((((rt0.c1) NOTNULL)) NOT BETWEEN (CASE WHEN rt0.c0 THEN rt0.c2 END) AND (UNLIKELY(rt0.c1)))  NULLS FIRST; -- 0ms;
SELECT DISTINCT ((((((((CASE v0.c0  WHEN v0.c0 THEN rt0.c1 ELSE v0.c0 END)AND((NOT (v0.c0)))))AND(((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c1)))))OR(((rt0.c2)GLOB(v0.c0)))))AND(((rt0.c2) BETWEEN (rt0.c2) AND (v0.c0)))) FROM v0, rt0 LIMIT 2029724266 OFFSET -1445806351; -- 1ms;
SELECT DISTINCT (((rt0.c1))==((((NULL) BETWEEN (rt0.c0) AND (rt0.c0))))) FROM rt0 FULL OUTER JOIN v0 ON LIKE(((rt0.c2)>>(0Xffffffff9daf33f8)), CAST(rt0.c2 AS INTEGER), '-'); -- 0ms;
SELECT (MAX(rt0.c2) IN ()) FROM v0, rt0; -- 0ms;
SELECT (((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c2)))) NOT NULL) FROM v0, rt0; -- 0ms;
SELECT ALL '' FROM rt0, v0 WHERE (CASE WHEN (('-955732686')>>(0.9650242708425932)) THEN CASE NULL  WHEN -9589809 THEN NULL WHEN '796461078' THEN 1.94069928E8 WHEN '891861201' THEN 0.05241563949009043 ELSE NULL END ELSE CASE '^}T恟'  WHEN '0.938712221091789' THEN NULL WHEN NULL THEN x'' WHEN 2003880304 THEN 0.11943521973043014 ELSE '194069928' END END); -- 0ms;
SELECT ALL (+ (((((rt0.c1)AND(v0.c0)))AND(rt0.c1)))) FROM rt0 WHERE (((((((0.47020584448896086) BETWEEN (NULL) AND (x'')))OR((- (346043714)))))OR((NOT (x''))))) GROUP BY CAST(((((rt0.c0)AND('XY五#')))AND(x'8af9')) AS NUMERIC) HAVING (~ (((v0.c0)<=(v0.c0))));SELECT ALL ((((((rt0.c1)) BETWEEN ((v0.c0)) AND ((v0.c0)))))<>((STRFTIME(rt0.c1, rt0.c1, rt0.c1)))) FROM v0, rt0 WHERE (CAST(((x'164e') IS TRUE) AS TEXT)); -- 0ms;
SELECT ((MAX(rt0.c2)) ISNULL), (NOT (TYPEOF(rt0.c1))), (rt0.c1 IN ()) COLLATE NOCASE FROM rt0, v0 WHERE (((((('rV/EZ', 0x4d373e7d, '-1000981181'))<=((-837258407, 0.5889371563888676, x'')))) IS FALSE)) LIMIT 1253378114 OFFSET -259653892; -- 0ms;
SELECT ((v0.c0) NOT BETWEEN (rt0.c2) AND (v0.c0)) COLLATE BINARY FROM rt0;SELECT DISTINCT COUNT(*) FROM rt0, v0 GROUP BY COALESCE(((rt0.c0)GLOB(rt0.c2)), (- (rt0.c2))) HAVING ((((rt0.c1, rt0.c0, rt0.c0)) NOT BETWEEN ((rt0.c1, rt0.c2, rt0.c0)) AND ((rt0.c1, rt0.c0, rt0.c1))) IN (((rt0.c1) IS TRUE))); -- 0ms;
SELECT DISTINCT ((rt0.c0)AND(((rt0.c0)GLOB(rt0.c2)))) FROM v0;SELECT DISTINCT 'UV', (((((rt0.c2)OR(rt0.c1)))AND(v0.c0)) IN ()), TOTAL(((rt0.c1)<=(rt0.c2))), NTH_VALUE(UPPER(CAST(v0.c0 AS TEXT)), v0.c0) OVER (), SUM(((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c0))) OVER () FROM v0 WHERE (((CASE WHEN 0.17119428472391285 THEN x'' WHEN x'' THEN x'' WHEN NULL THEN 9223372036854775807 ELSE '1e500' END) IS FALSE)) LIMIT -888253871 OFFSET 2023600841;SELECT (((NOT (rt0.c1)))AND(TYPEOF(rt0.c0))) FROM rt0 UNION ALL SELECT ALL ((rt0.c2)==((rt0.c2 IN ()))) FROM v0 WHERE ((CAST(0.07005120132419285 AS NUMERIC) IN ())) GROUP BY ((((SQLITE_COMPILEOPTION_USED(v0.c0))OR(((((rt0.c2)AND(rt0.c2)))OR(v0.c0)))))OR(((rt0.c0) ISNULL)));SELECT DISTINCT (((((rt0.c0) NOT NULL)))<=(((~ (rt0.c1))))) FROM rt0 WHERE ((((~ (0.012922597055444296))) NOTNULL)); -- 0ms;
SELECT DISTINCT ((v0.c0)OR(CASE rt0.c2  WHEN rt0.c1 THEN '-2082744198' END)), (((rt0.c0)) BETWEEN ((((((((((rt0.c0)AND(v0.c0)))OR(rt0.c2)))OR(v0.c0)))AND(v0.c0)))) AND ((((rt0.c1)IS(rt0.c2))))), ((((rt0.c0)==(rt0.c0)))/((rt0.c2 IN ()))) FROM v0, rt0 WHERE ((+ ((('')<('-887765317'))))); -- 1ms;
SELECT ALL CAST(CAST(rt0.c0 AS BLOB) AS REAL), NULL, CASE WHEN GROUP_CONCAT(rt0.c1) THEN CAST(rt0.c1 AS REAL) WHEN '+s' THEN (rt0.c0 IN (rt0.c0)) WHEN CASE WHEN rt0.c1 THEN v0.c0 ELSE rt0.c0 END THEN ((rt0.c2)+(rt0.c0)) WHEN (((rt0.c2)) BETWEEN ((rt0.c0)) AND ((rt0.c0))) THEN ((((((((rt0.c1)AND(v0.c0)))OR(rt0.c1)))OR(rt0.c1)))OR(v0.c0)) WHEN (((rt0.c2, rt0.c1, v0.c0)) BETWEEN ((rt0.c1, x'', rt0.c1)) AND ((rt0.c2, rt0.c2, v0.c0))) THEN (rt0.c2 IN ()) ELSE ((rt0.c2) NOT BETWEEN (rt0.c2) AND (NULL)) END FROM v0, rt0; -- 0ms;
SELECT (-1649462280 IN (((rt0.c0)|(rt0.c0)))) FROM rt0 WHERE ((((('鴍BK~')&(NULL)))-('' COLLATE NOCASE))); -- 0ms;
SELECT ((x'1728') NOTNULL), ((((((((((v0.c0)OR(NULL)))AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c1)))LIKE(CASE rt0.c0  WHEN v0.c0 THEN rt0.c0 ELSE rt0.c2 END)), CAST(rt0.c2 AS INTEGER) COLLATE BINARY FROM rt0, v0 ORDER BY ((x'') BETWEEN (((rt0.c1) IS FALSE)) AND (rt0.c1 COLLATE BINARY)) ASC  NULLS LAST LIMIT -1000981181 OFFSET -1490822153; -- 0ms;
SELECT ALL (((((NOT (rt0.c2)))AND(((rt0.c1) NOT BETWEEN (v0.c0) AND (rt0.c0)))))OR(((((((((((((rt0.c0)AND(rt0.c2)))AND(rt0.c0)))OR(rt0.c2)))AND(v0.c0)))OR(rt0.c0)))AND(rt0.c0)))) FROM v0, rt0 WHERE (((UPPER(DISTINCT x'72bfd3f4'))%((('692342016')AND(''))))) ORDER BY rt0.c1  NULLS LAST; -- 0ms;
SELECT DISTINCT v0.c0 FROM rt0, v0 WHERE (((((1.63228463E9)AND(CASE -2052372000  WHEN x'784d' THEN NULL WHEN -645953 THEN '' WHEN '' THEN NULL ELSE NULL END)))AND((('-237274375')<>(''))))); -- 0ms;
SELECT DISTINCT (('㑽⅐v莭>')<>(rt0.c2 COLLATE NOCASE)) FROM rt0 WHERE ((((CAST(165788183 AS NUMERIC)))=((-6.522845E8 COLLATE NOCASE)))); -- 0ms;
SELECT DISTINCT CASE WHEN rt0.c2 THEN (- (rt0.c1)) WHEN LOWER(0.26421284451885785) THEN (('-495272695')*(v0.c0)) WHEN ((((rt0.c2)AND(rt0.c0)))AND(rt0.c2)) THEN ((rt0.c0)OR(rt0.c2)) ELSE CAST(rt0.c1 AS BLOB) END FROM v0 NOT INDEXED WHERE (((('-868379459', 0x49fc45ec, '750812088', x'', '')) BETWEEN (((x'' IN ()), (+ (NULL)), (('601117125') NOT BETWEEN (0xffffffff98b3e02b) AND (-1.887325604E9)), 0x1ab83211 COLLATE NOCASE, ((((297156221)OR(8.87182413E8)))OR(NULL)))) AND ((-908036587, '' COLLATE BINARY, ((0.7488196769019964) NOT BETWEEN (0.7069116352698747) AND (0Xffffffffcc888274)), ((-1649462280) IS TRUE), SUBSTR(x'1f7e', ''))))) ORDER BY (- (((rt0.c1) ISNULL))) ASC, rt0.c0;SELECT ALL COUNT(CAST(rt0.c0 AS BLOB)), ((HEX('2lr'))+((((0.03039262972650847, rt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c0, rt0.c2, rt0.c1)) AND ((rt0.c2, rt0.c1, rt0.c2))))), DATETIME((((1322968419, rt0.c2, v0.c0)) NOT BETWEEN (('-261475943', rt0.c2, rt0.c0)) AND (('v[', v0.c0, rt0.c0))), json_quote(rt0.c2), 0.1683581423795626, ((0.48168257600146747) BETWEEN (rt0.c2) AND (v0.c0)), rt0.c2, 'dW?', 0.49310246982264194) FROM rt0;SELECT DISTINCT rt0.c0, (((v0.c0)>(rt0.c1)) IN (((rt0.c1)-(rt0.c2)))), LAST_VALUE((((~ (rt0.c2)))<((NOT (rt0.c0))))) OVER () FROM rt0;SELECT ALL rt0.c2 FROM rt0, v0 WHERE (CAST(UPPER(NULL) AS BLOB)); -- 0ms;
SELECT DISTINCT rt0.c1 COLLATE RTRIM COLLATE BINARY, COUNT(*), x'' FROM rt0, v0 WHERE (CAST(((NULL) BETWEEN ('-1503129643') AND (0.23955660169701198)) AS NUMERIC)); -- 0ms;
SELECT DISTINCT (((+ (rt0.c1))) BETWEEN (((v0.c0) IS FALSE)) AND ((((81108893, rt0.c0, rt0.c1))<=((v0.c0, v0.c0, v0.c0))))) FROM rt0, v0 LIMIT -1346610258 OFFSET 592459876; -- 0ms;
SELECT DISTINCT ((((rt0.c2)%(v0.c0))) NOTNULL) FROM rt0 WHERE (IFNULL(HEX(DISTINCT 'i'), CASE 7.3272182E7  WHEN '' THEN '67775580' WHEN NULL THEN 0X3bc68b6b WHEN NULL THEN 1830713880 ELSE 6.71829652E8 END));SELECT DISTINCT ((CASE WHEN v0.c0 THEN rt0.c2 ELSE rt0.c2 END) IS TRUE), ((x'') IS TRUE), (~ (((rt0.c1)>=(v0.c0)))), CAST((((v0.c0, v0.c0, v0.c0))>((rt0.c1, rt0.c0, rt0.c1))) AS REAL), ((('\n\iF\G'))<((rt0.c2))) COLLATE NOCASE FROM v0 WHERE ((NOT (NULL)) COLLATE BINARY);SELECT ((((((((((rt0.c2)>=(rt0.c2)))AND(CASE v0.c0  WHEN rt0.c0 THEN '-2002585887' ELSE 0.6243788247460903 END)))AND(x'9afb')))AND(CAST(rt0.c1 AS BLOB))))OR(CAST(rt0.c1 AS TEXT))) FROM v0, rt0; -- 0ms;
SELECT ((TRIM(DISTINCT v0.c0, rt0.c2))IS(CASE WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c0 END)), (((rt0.c0 IN ())) IS TRUE), ((((((((((v0.c0)OR(rt0.c2)))AND(0.465587346289831)))AND(rt0.c1)))AND(rt0.c1))) NOT NULL) FROM v0, rt0 ORDER BY (((- (v0.c0)))>(UNLIKELY(DISTINCT rt0.c1))) ASC  NULLS FIRST; -- 0ms;
SELECT DISTINCT (((0.26644823071336965)) BETWEEN ((rt0.c2)) AND ((rt0.c2))) FROM rt0, v0 WHERE (33465688 COLLATE NOCASE COLLATE BINARY COLLATE BINARY); -- 0ms;
SELECT ALL 0.1303094083404459, ((((((((((rt0.c1)OR(rt0.c2)))AND(v0.c0)))OR(v0.c0)))OR(rt0.c0)))/(rt0.c0)), rtreenode(rt0.c1, v0.c0) COLLATE BINARY FROM v0, rt0 WHERE ('*3誠'); -- 0ms;
SELECT ALL 'O]2}\rMLW%' FROM v0 WHERE ((((('2114839964') BETWEEN ('1968085210') AND (346043714))) NOTNULL)) GROUP BY (((('-1786830365')|(rt0.c1)))>(((v0.c0)||(rt0.c0)))), LOWER(((((v0.c0)OR(v0.c0)))AND(v0.c0))), CAST(TOTAL_CHANGES() AS REAL) HAVING -771851917;SELECT DISTINCT (('Ed')<<(NULL)) FROM rt0 GROUP BY 0.9064778122570966, ((((v0.c0)>=(rt0.c2))) IS TRUE), (((((rt0.c1 IN ()))OR(v0.c0 COLLATE BINARY)))OR(rt0.c1 COLLATE BINARY)), (rt0.c2 IN (rt0.c2, rt0.c2)) COLLATE RTRIM, ((((((((CAST(v0.c0 AS NUMERIC))OR(((rt0.c0) NOTNULL))))AND(rt0.c2)))OR((((rt0.c2, rt0.c0, v0.c0)) BETWEEN ((0.5244189131845829, rt0.c1, v0.c0)) AND ((rt0.c0, rt0.c0, rt0.c2))))))AND(((rt0.c2) IS TRUE))) HAVING (((('1428364044')|(v0.c0))) BETWEEN (((((rt0.c0)AND(v0.c0)))AND(rt0.c0))) AND (((rt0.c2)+(rt0.c0))));SELECT (TOTAL(rt0.c2) IN ((+ (rt0.c1)))) FROM v0, rt0 WHERE (CAST(ROUND(0.1337451015982304, 1.280523099E9) AS REAL)); -- 0ms;
SELECT ALL '346043714' FROM v0 WHERE (((('-1178121816')) BETWEEN ((((0.9211789477008718) IS FALSE))) AND ((((x'') NOT BETWEEN (0x4f0ab37f) AND (x'129c')))))) ORDER BY v0.c0; -- 0ms;
SELECT (((((rt0.c2))==(('u\nFpK5kg')))) BETWEEN ((((rt0.c2))!=((rt0.c1)))) AND (rtreenode(v0.c0, rt0.c0))) FROM rt0, v0; -- 0ms;
SELECT DISTINCT ((((((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c2)))OR(v0.c0 COLLATE NOCASE)))AND(CASE WHEN v0.c0 THEN rt0.c0 END)) FROM rt0, v0; -- 1ms;
SELECT DISTINCT MIN((~ (rt0.c0))) FROM rt0, v0 WHERE (((0Xffffffffa9bc224f) ISNULL) COLLATE RTRIM); -- 0ms;
SELECT SUM(((rt0.c2)LIKE(v0.c0))) FROM v0;SELECT CAST(CASE WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c0 THEN v0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c1 END AS BLOB) FROM v0;SELECT ALL CAST(CASE WHEN rt0.c2 THEN rt0.c1 ELSE v0.c0 END AS TEXT) FROM rt0, v0; -- 0ms;
SELECT ((rt0.c0)>=(rt0.c2)) FROM v0, rt0; -- 0ms;
SELECT DISTINCT PERCENT_RANK() OVER ( RANGE (((((((((rt0.c0 IN ()))OR(((rt0.c2) IS TRUE))))OR((((rt0.c0, v0.c0, v0.c0)) NOT BETWEEN ((rt0.c0, rt0.c2, rt0.c2)) AND ((rt0.c2, rt0.c1, v0.c0))))))AND((rt0.c2 IN (rt0.c0, rt0.c2)))))OR(((rt0.c0) NOT NULL))) PRECEDING EXCLUDE CURRENT ROW) FROM rt0, v0 WHERE (((((')IA') ISNULL)) IS TRUE));SELECT DISTINCT (+ (CASE WHEN rt0.c0 THEN v0.c0 END)), ((rt0.c0)<>(rt0.c0)) COLLATE RTRIM, ((CAST(rt0.c1 AS NUMERIC))!=(v0.c0)) FROM v0 UNION SELECT rt0.c1, rt0.c1, (NOT (((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c0)))) FROM rt0 WHERE (((('ᴸKb*fd')<=(x'')) IN ()));SELECT DISTINCT CAST(((v0.c0) IS TRUE) AS REAL) FROM rt0, v0 GROUP BY (~ (((rt0.c1)&(rt0.c1)))), CAST(rt0.c0 COLLATE BINARY AS INTEGER), ((((rt0.c2) NOT BETWEEN (v0.c0) AND (rt0.c2)))LIKE(LOWER(DISTINCT rt0.c0))) HAVING rt0.c1; -- 0ms;
SELECT ALL CASE rt0.c1 COLLATE BINARY  WHEN (((v0.c0, rt0.c0, rt0.c1)) NOT BETWEEN ((rt0.c2, rt0.c1, rt0.c1)) AND ((v0.c0, rt0.c2, v0.c0))) THEN 0.9614177064031593 END FROM rt0;SELECT ALL (((((((rt0.c1)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2))))OR(CAST(rt0.c2 AS TEXT))))OR(((rt0.c2)-(rt0.c2)))) FROM rt0; -- 0ms;
SELECT 0xffffffffba5251ec FROM rt0 WHERE (((((((((((NULL) BETWEEN ('') AND (0Xffffffffe3d9a590)))AND((- (NULL)))))AND(CASE -1654234266  WHEN -837258407 THEN NULL WHEN 0.30670606158010716 THEN x'7665' WHEN '844601566' THEN NULL ELSE 0x6c683272 END)))AND(((x'')GLOB('0.26644823071336965')))))AND(CASE WHEN 0x3df7495f THEN x'' WHEN '-625180905' THEN '' WHEN x'' THEN NULL ELSE 'ⱜTAI' END))); -- 0ms;
SELECT ALL ((((v0.c0 COLLATE NOCASE)AND(CASE rt0.c2  WHEN v0.c0 THEN rt0.c0 END)))OR(CASE rt0.c0  WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c2 END)), rt0.c0, ((((((((TRIM(DISTINCT rt0.c1))OR(x'')))OR((rt0.c2 IN ()))))OR(((rt0.c1) NOT BETWEEN (0.08804920445796416) AND ('-888253871')))))AND((rt0.c0 IN ()))) FROM v0, rt0; -- 0ms;
SELECT ALL v0.c0 FROM v0 WHERE ((+ ((((x'16d6'))=(('?HpvVYI')))))) LIMIT 2082403989; -- 0ms;
SELECT CASE WHEN LOWER(DISTINCT rt0.c1) THEN ((rt0.c2)-(rt0.c1)) WHEN v0.c0 THEN (((rt0.c0, rt0.c2, rt0.c2)) NOT BETWEEN ((v0.c0, rt0.c1, v0.c0)) AND ((rt0.c1, rt0.c2, rt0.c1))) WHEN CAST(v0.c0 AS INTEGER) THEN CASE WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c0 END END, (- ((((rt0.c0)) BETWEEN ((rt0.c1)) AND ((rt0.c1))))), CAST(CAST(v0.c0 AS NUMERIC) AS INTEGER) FROM rt0, v0 WHERE (((((NULL)!=(''))) BETWEEN (TYPEOF(DISTINCT NULL)) AND (CASE ''  WHEN '6&]' THEN '0.30670606158010716' END))); -- 0ms;
SELECT DISTINCT COUNT(NULL COLLATE BINARY COLLATE RTRIM) FROM v0, rt0 WHERE (UNLIKELY(DISTINCT '2114839964') COLLATE RTRIM); -- 0ms;
SELECT ALL ROW_NUMBER() OVER (), ((((CAST(v0.c0 AS INTEGER))OR(UPPER(DISTINCT v0.c0))))AND(((v0.c0)GLOB(0.9614177064031593)))), ((rt0.c0 COLLATE BINARY) IS FALSE) FROM v0, rt0 WHERE (((((x'')-(x'')))|(((NULL) BETWEEN (x'4621') AND ('1192719446'))))) GROUP BY ((((CASE rt0.c1  WHEN rt0.c2 THEN '-1837326663' ELSE v0.c0 END)AND(CAST(rt0.c2 AS TEXT))))AND(((rt0.c2) NOTNULL))) HAVING rt0.c2; -- 0ms;
SELECT DISTINCT ((CAST(rt0.c1 AS REAL)) NOT BETWEEN (COUNT(*)) AND ((((v0.c0, rt0.c0, v0.c0))<=((rt0.c2, rt0.c1, 9.97993704E8))))), v0.c0, CASE 'Ju'  WHEN (rt0.c1 IN ()) THEN ((rt0.c1) NOT NULL) END FROM rt0, v0 GROUP BY ((((rt0.c2) NOTNULL))>=(((rt0.c1) IS TRUE))) LIMIT 1814380711 OFFSET -594894196; -- 0ms;
SELECT CAST((((rt0.c2, rt0.c1, 0.1459994291939315))>=((rt0.c2, rt0.c1, rt0.c0))) AS REAL) FROM v0, rt0 WHERE (CAST(((('-955732686'))<=((NULL))) AS NUMERIC)); -- 1ms;
SELECT DISTINCT ((x'') BETWEEN (rt0.c1) AND (v0.c0)) COLLATE NOCASE FROM v0, rt0 WHERE ((((('')||(x''))) ISNULL)); -- 0ms;
SELECT DISTINCT (TYPEOF(rt0.c2) IN (v0.c0 COLLATE BINARY)) FROM rt0;SELECT ALL AVG(MAX(x'')) FROM v0 ORDER BY rtreenode(((((((((rt0.c0)OR(rt0.c2)))OR(rt0.c0)))AND(rt0.c0)))AND(rt0.c0)), ((((rt0.c1)AND(rt0.c0)))OR(rt0.c1))) DESC;SELECT ((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c0)) COLLATE NOCASE FROM rt0 WHERE (('-522652255' COLLATE RTRIM IN (''))); -- 0ms;
SELECT LOWER(DISTINCT CASE rt0.c0  WHEN v0.c0 THEN rt0.c1 ELSE rt0.c2 END) FROM rt0 WHERE (((x'') NOTNULL));SELECT DISTINCT (((rt0.c2)) BETWEEN (((rt0.c0 IN (NULL)))) AND (((((v0.c0)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2)))))), UPPER((((rt0.c2))=((0X48f6bbdb)))), (((v0.c0)) BETWEEN (((((x''))<=((v0.c0))))) AND ((((NULL) IS TRUE)))), ((rt0.c0 COLLATE NOCASE) NOT BETWEEN (x'b05e450e') AND ('796461078')), COUNT(((rt0.c0) BETWEEN (v0.c0) AND (rt0.c0))) FROM v0;SELECT DISTINCT CAST(rt0.c0 COLLATE RTRIM AS NUMERIC) FROM rt0; -- 0ms;
SELECT DISTINCT ABS(DISTINCT CAST(rt0.c0 AS REAL)) FROM rt0, v0; -- 0ms;
SELECT DISTINCT TOTAL(((rt0.c2)-(0.6662890969648742))) FROM v0 WHERE (((x'')>=(1.707438119E9)) COLLATE RTRIM);SELECT DISTINCT TOTAL(((rt0.c2) ISNULL)), rt0.c2, '7' FROM rt0, v0; -- 0ms;
SELECT DISTINCT x'' COLLATE NOCASE COLLATE BINARY FROM v0; -- 0ms;
SELECT CAST(rt0.c0 AS INTEGER) FROM v0 WHERE (((((384025056) BETWEEN (x'') AND ('-1825426300'))) NOTNULL));SELECT DISTINCT COUNT(*) OVER (), ((TIME(rt0.c0, rt0.c1, rt0.c1, rt0.c1, rt0.c1)) ISNULL), CAST(((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c0)) AS BLOB) FROM rt0, v0 WHERE ((('-2095604467') NOT BETWEEN ('gZ') AND (x''))); -- 0ms;
SELECT DISTINCT 0.304116833936003 FROM rt0, v0; -- 0ms;
SELECT DISTINCT (- (CAST(rt0.c2 AS NUMERIC))), MIN(((0.1687563517786268) NOT BETWEEN (v0.c0) AND (v0.c0)), 0.08861050614176236), (NOT (((rt0.c2) IS FALSE))), CAST(((rt0.c1) BETWEEN (x'cf27') AND (rt0.c1)) AS REAL), AVG((((rt0.c2, rt0.c2, rt0.c1)) NOT BETWEEN ((rt0.c1, rt0.c2, rt0.c0)) AND ((v0.c0, rt0.c0, rt0.c2)))) OVER () FROM rt0, v0 WHERE (CASE (('')/(0.36530169150107705))  WHEN (- (0.938712221091789)) THEN ((-1.552141E8)IS(0.2754561797610833)) END); -- 0ms;
SELECT DISTINCT COUNT(*) FROM rt0 WHERE (CAST((('0.6243788247460903')IS NOT('Y(}<㹽')) AS TEXT)); -- 0ms;
SELECT ALL RANK() OVER () FROM rt0 WHERE (((0.6003407891951115)IS(NULL)) COLLATE BINARY); -- 0ms;
SELECT DISTINCT (((v0.c0 COLLATE RTRIM))!=((json(rt0.c0)))), 0.2463660399727161, ((GLOB(rt0.c2, v0.c0)) IS TRUE) FROM rt0;SELECT MAX(CASE WHEN v0.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 WHEN v0.c0 THEN v0.c0 ELSE rt0.c2 END, GROUP_CONCAT(NULL), (~ (rt0.c0)), x'93c2') FROM rt0, v0 ORDER BY (0.08160568198565776 IN ()) COLLATE RTRIM ASC  NULLS LAST, (~ (CASE WHEN 870297674 THEN rt0.c1 END)) DESC  NULLS FIRST; -- 1ms;
SELECT (((((v0.c0) ISNULL), CAST(v0.c0 AS NUMERIC), rt0.c0 COLLATE NOCASE))<((CASE WHEN x'aee9a67d' THEN rt0.c0 WHEN '?Ui,^' THEN rt0.c2 WHEN rt0.c0 THEN rt0.c2 END, CASE WHEN rt0.c0 THEN rt0.c1 ELSE v0.c0 END, ((((rt0.c1)OR(v0.c0)))AND(rt0.c2))))) FROM v0, rt0; -- 0ms;
SELECT ALL LEAD(((((((((((((((((0xffffffff83dbd87a)OR(v0.c0)))OR(v0.c0)))OR(((v0.c0) BETWEEN (v0.c0) AND (v0.c0)))))OR(rtreenode(v0.c0, v0.c0))))AND(((v0.c0)-(v0.c0)))))AND(CASE WHEN v0.c0 THEN v0.c0 END)))AND(CAST(v0.c0 AS BLOB))))OR((((v0.c0))==((v0.c0))))), (~ (v0.c0)), (((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)) IN ())) OVER () FROM v0 WHERE (((((((((CASE WHEN 0.38945203977668263 THEN 0.1999492892341852 WHEN '0.9136394253787997' THEN x'' WHEN NULL THEN 0xffffffffc82a189f END)OR((('-955732686')/(x'')))))AND((('')-(0.11262284476620399)))))AND((('-1019957969')IS('0.3214380709452488')))))OR(x'0a3aa560' COLLATE RTRIM))); -- 0ms;
SELECT (((((((v0.c0)OR(v0.c0)))OR(rt0.c2)), ((((((((v0.c0)AND(rt0.c0)))AND(rt0.c2)))AND(rt0.c0)))OR(v0.c0)), ((x'')<(rt0.c1))))<>((AVG(v0.c0), ((rt0.c2)<=(rt0.c2)), (rt0.c2 IN ())))) FROM rt0;SELECT DISTINCT ((((CASE WHEN rt0.c1 THEN rt0.c1 ELSE v0.c0 END)OR(AVG(rt0.c1))))AND((((rt0.c2, rt0.c2, x'')) NOT BETWEEN ((v0.c0, rt0.c2, x'e448')) AND ((rt0.c1, v0.c0, rt0.c2))))), (((((NOT (rt0.c0)))AND((((v0.c0)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c2))))))AND((((rt0.c0)) NOT BETWEEN ((v0.c0)) AND ((rt0.c1))))), ((rt0.c0) BETWEEN (v0.c0) AND (NULL)) COLLATE BINARY COLLATE BINARY, ((CASE rt0.c1  WHEN '-1206778690' THEN rt0.c2 END)>('-961795495')), (rt0.c1 IN ()) COLLATE NOCASE FROM v0 WHERE ((- (((((((((0.6611042181159532)AND('')))AND(x'3763')))OR(NULL)))OR(x'9a65'))))) GROUP BY CASE WHEN rt0.c0 COLLATE NOCASE THEN ((((rt0.c1)AND(rt0.c1)))AND(NULL)) ELSE ((v0.c0)-(rt0.c2)) END;SELECT ((rt0.c2 IN ()) IN ((~ (v0.c0)))) FROM v0, rt0; -- 0ms;
SELECT ALL CASE WHEN ((rt0.c2) ISNULL) THEN (((rt0.c1, x'', rt0.c2)) NOT BETWEEN (('-563820024', rt0.c0, NULL)) AND ((rt0.c2, v0.c0, rt0.c2))) WHEN rt0.c2 THEN v0.c0 WHEN 0.2670507114639321 THEN -2.09428028E9 END FROM rt0;SELECT DISTINCT ((TOTAL(rt0.c2)) NOT BETWEEN ((rt0.c2 IN (rt0.c1, rt0.c2))) AND (CAST(v0.c0 AS NUMERIC))) FROM rt0 WHERE ((('0.7481428539785753')>=(((x'')<>(NULL))))) ORDER BY ((rt0.c2)<(rt0.c0)) COLLATE NOCASE  NULLS LAST;SELECT ALL (((((+ (v0.c0)))OR(((rt0.c1)*(rt0.c1)))))AND(NULL)) FROM rt0, v0 WHERE ((CAST(x'' AS BLOB) IN (CAST(0X2825fd57 AS NUMERIC)))); -- 0ms;
SELECT DISTINCT SUM((rt0.c0 IN ())) OVER () FROM rt0; -- 0ms;
SELECT DISTINCT ((((rt0.c1)<<(rt0.c1))) ISNULL), ((v0.c0)IS(x'')), CAST(((rt0.c2)IS NOT(rt0.c0)) AS REAL), (((rt0.c2)) NOT BETWEEN ((((rt0.c2)>=(rt0.c2)))) AND ((((rt0.c1)||(rt0.c2))))), ((('81108893', v0.c0, rt0.c0)) BETWEEN ((CASE v0.c0  WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c2 THEN v0.c0 WHEN rt0.c1 THEN rt0.c2 END, (rt0.c0 IN (rt0.c1)), '쐈?rI!m')) AND (((- (v0.c0)), CASE WHEN rt0.c2 THEN rt0.c0 WHEN x'' THEN '-682455694' WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c0 END, ((1.851877312E9)IS NOT(v0.c0))))) FROM v0, rt0 WHERE ((((0.7668822801634171)+(0.223966045108969)) IN ((((('-1573553551')AND(-1.904414024E9)))AND(0.5863428703821958)), (('')-(NULL))))) ORDER BY 'h4o7GT}'; -- 0ms;
SELECT DISTINCT SUBSTR((((v0.c0))<>((rt0.c1))), v0.c0 COLLATE NOCASE) FROM v0 WHERE (LIKELY(((NULL) NOTNULL))) ORDER BY ((((x'') BETWEEN (rt0.c2) AND (v0.c0)))!=((((rt0.c1, v0.c0, 1.428364044E9)) NOT BETWEEN ((rt0.c0, rt0.c1, rt0.c0)) AND ((rt0.c0, rt0.c1, v0.c0)))))  NULLS LAST;SELECT DISTINCT '1627797278' FROM rt0 WHERE (((((x'') NOTNULL)) NOT NULL)); -- 0ms;
SELECT DISTINCT LIKELIHOOD('259990481', 0.06550161502213836) FROM rt0 LIMIT 1496902470 OFFSET -887765317; -- 0ms;
SELECT DISTINCT AVG(((rt0.c1) ISNULL)) OVER () FROM v0, rt0; -- 1ms;
SELECT ((((((rt0.c2)OR(rt0.c1)))OR(rt0.c2)))>>(NULLIF(v0.c0, NULL))) FROM v0, rt0 WHERE (((x'')>>(CAST(x'' AS TEXT)))) ORDER BY CASE WHEN TYPEOF(DISTINCT rt0.c1) THEN ((rt0.c2) IS TRUE) WHEN ((rt0.c2)<=(rt0.c1)) THEN ((v0.c0) NOT NULL) WHEN CASE rt0.c0  WHEN rt0.c1 THEN v0.c0 WHEN rt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN v0.c0 ELSE rt0.c1 END THEN ((((rt0.c1)AND(v0.c0)))OR(rt0.c1)) WHEN rt0.c1 COLLATE BINARY THEN TRIM(rt0.c1, rt0.c2) WHEN (+ (rt0.c0)) THEN (- (v0.c0)) ELSE ((rt0.c1)OR(rt0.c1)) END ASC; -- 0ms;
SELECT ALL ((rt0.c0) NOT NULL) FROM v0;SELECT DISTINCT DENSE_RANK() OVER () FROM v0, rt0; -- 0ms;
SELECT DISTINCT (((NULL COLLATE BINARY))>((CASE WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c2 END))) FROM v0 WHERE (json_remove((- (NULL)), ('I' IN ()), json_array_length(0x1f62d542, '-9589809'), '1199228782' COLLATE BINARY));SELECT DISTINCT (NOT (CASE WHEN rt0.c1 THEN x'' ELSE v0.c0 END)) FROM rt0, v0 WHERE ((((0.2916996109901091 IN (NULL)))==(CAST(0xffffffffee652f4b AS REAL)))) ORDER BY CASE WHEN v0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN NULL WHEN rt0.c2 THEN v0.c0 WHEN rt0.c2 THEN rt0.c1 END COLLATE RTRIM  NULLS LAST, TRIM(DISTINCT ((((rt0.c2)AND(rt0.c2)))AND(rt0.c1))) DESC  NULLS LAST; -- 0ms;
SELECT ALL ((UNLIKELY(v0.c0)) NOT NULL) FROM rt0, v0 WHERE (CAST((('-1489505169')>>(1557860648)) AS BLOB)); -- 0ms;
SELECT DISTINCT ((v0.c0)+(CAST(rt0.c0 AS TEXT))) FROM v0, rt0 WHERE (((((('v', '1e500', NULL))>((x'', x'', x'e022')))) BETWEEN (NULL COLLATE RTRIM) AND (CAST('359572804' AS INTEGER)))); -- 1ms;
SELECT ALL (~ (((((rt0.c0)AND(x'')))AND(v0.c0)))) FROM v0;SELECT DISTINCT (((v0.c0) IS TRUE) IN ()) FROM v0, rt0; -- 0ms;
SELECT v0.c0 FROM rt0, v0 WHERE (((TRIM(DISTINCT 0Xffffffffbed78c4b)) NOTNULL)); -- 0ms;
SELECT ALL (MIN(v0.c0) IN ()) FROM v0, rt0 WHERE ('-746753150'); -- 0ms;
SELECT DISTINCT CAST((rt0.c1 IN (v0.c0, v0.c0)) AS INTEGER) FROM rt0;SELECT CAST(TOTAL(rt0.c1) AS INTEGER) FROM rt0; -- 0ms;
SELECT DISTINCT (((highlight(rt0.c2, rt0.c0, v0.c0, rt0.c0), '', (- (rt0.c0))))<((GROUP_CONCAT(rt0.c2), ((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c2)), rt0.c2 COLLATE BINARY))) FROM v0 WHERE ((((((((('-88842185')OR('-2079052258')))OR(2.59990481E8)))AND(x'')))AND('637469245')) COLLATE NOCASE);SELECT ALL json(((rt0.c0) NOT NULL)) FROM v0 WHERE (((((('') BETWEEN (x'496a') AND (x'0ee8')), 0.6685772962349811 COLLATE NOCASE, (- (NULL))))<=((('-11096955' IN ()), CAST('mK]BMMy' AS BLOB), CAST(x'd957' AS REAL))))) GROUP BY ((((CASE WHEN NULL THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c1 END)AND((((rt0.c0, rt0.c2, rt0.c2)) BETWEEN (('030v/龝Oi#', rt0.c1, rt0.c1)) AND ((rt0.c2, v0.c0, v0.c0))))))OR((v0.c0 IN (x'')))) ORDER BY ((CAST(rt0.c0 AS TEXT)) NOT BETWEEN (CASE rt0.c1  WHEN x'78e7' THEN '()' WHEN v0.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c2 ELSE x'b52b' END) AND (x''))  NULLS FIRST, CASE WHEN rt0.c2 COLLATE RTRIM THEN (((rt0.c2, rt0.c2, rt0.c1)) NOT BETWEEN ((NULL, rt0.c1, rt0.c0)) AND ((rt0.c1, rt0.c1, rt0.c0))) WHEN LIKELY(rt0.c1) THEN HEX(rt0.c1) WHEN ((((((((((((rt0.c0)OR(rt0.c0)))AND(rt0.c0)))OR(v0.c0)))OR(rt0.c1)))OR(rt0.c1)))OR(rt0.c2)) THEN ((rt0.c0)*(rt0.c2)) END ASC LIMIT 671829652 OFFSET 625838114;SELECT rt0.c1, (- (((((((((((((0.9574831040599894)OR(rt0.c2)))OR(rt0.c0)))AND(rt0.c1)))AND(v0.c0)))AND(rt0.c1)))AND(rt0.c0)))), NTILE((((rt0.c0)) NOT BETWEEN (((rt0.c1 IN ()))) AND ((CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 END)))) OVER () FROM v0, rt0 WHERE (CAST(((((0.25161661298832605)OR('誠t)''u')))OR('-1311622053')) AS REAL)); -- 0ms;
SELECT ALL LAG((((rt0.c2 IN ())) BETWEEN (((v0.c0) NOT BETWEEN (rt0.c2) AND (v0.c0))) AND ((rt0.c1 IN (rt0.c2)))), 0X46220afc, (- (CASE rt0.c1  WHEN v0.c0 THEN rt0.c1 ELSE rt0.c1 END))) OVER () FROM rt0, v0 WHERE ((((0.6516682533812075 IN (0.5516157000942872))) NOT BETWEEN (((-1305932133) NOT BETWEEN (NULL) AND ('1021498703'))) AND (NULL))) ORDER BY TYPEOF((+ ('ⰬTAI'))) ASC  NULLS FIRST LIMIT -1584968000; -- 0ms;
SELECT ALL highlight((((rt0.c2))<=((rt0.c0))), ((((((((rt0.c2)OR(rt0.c0)))OR(rt0.c0)))OR(rt0.c1)))OR(rt0.c1)), rt0.c2, ((rt0.c2)IS NOT(rt0.c0))), ((NULL) BETWEEN (rt0.c2) AND (rt0.c2)), ((((v0.c0)!=(v0.c0))) IS FALSE) FROM rt0, v0 GROUP BY '0.1459994291939315';SELECT DISTINCT COUNT(0.507235585319086) OVER () FROM v0, rt0 WHERE ((('-1245845687' IN ()) IN ())); -- 0ms;
SELECT DISTINCT (NULL IN (((((v0.c0)AND(v0.c0)))AND(rt0.c1)), CAST(0.03014606208304449 AS INTEGER))) FROM rt0 WHERE ((x'0fa7' IN ()));SELECT DISTINCT (NOT (TOTAL(rt0.c1))) FROM v0, rt0 WHERE (((((NULL)GLOB(0.25718249543996075)))||(((NULL) ISNULL)))); -- 1ms;
SELECT DISTINCT ((AVG(v0.c0))/(MIN(rt0.c1))), rt0.c0 COLLATE NOCASE, (~ (((NULL) BETWEEN (v0.c0) AND (0.11450616691963234)))) FROM rt0 WHERE (-1076383916) ORDER BY ((((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c1))) BETWEEN (rt0.c0) AND ((NOT (rt0.c1)))) ASC  NULLS FIRST, ((((((0.665464677463593)=(rt0.c2)))OR(CASE rt0.c1  WHEN rt0.c0 THEN rt0.c1 END)))OR((((rt0.c0)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))))) ASC;SELECT DISTINCT (((UPPER(v0.c0)))<((AVG(rt0.c0)))) FROM rt0, v0 WHERE (CASE ((0.37754827485325515) IS FALSE)  WHEN ((1955522550) NOT BETWEEN ('+vV') AND (0.4776764522088204)) THEN CAST('' AS BLOB) WHEN (0.9852601471772348 IN ()) THEN NULLIF('i#e''xXO', '-353265052') WHEN ((561488390)LIKE(-2082744198)) THEN CAST('-1778179760' AS REAL) ELSE ((-2023688794)=(NULL)) END); -- 0ms;
SELECT DISTINCT -1262668061, rt0.c1, STRFTIME((- (rt0.c2)), (NOT (rt0.c1)), TOTAL(v0.c0)) FROM rt0, v0 WHERE (CASE WHEN CASE WHEN x'' THEN 0xfffffffff583e766 ELSE '1295466109' END THEN ((x'') NOT NULL) END); -- 0ms;
SELECT ALL ((v0.c0)+((rt0.c2 IN ()))) FROM v0, rt0 WHERE (((x'7254' COLLATE RTRIM) NOTNULL)) GROUP BY ((rt0.c1) NOT BETWEEN (TIME(v0.c0, rt0.c0, v0.c0)) AND ((v0.c0 IN ()))), CASE WHEN CASE rt0.c2  WHEN v0.c0 THEN rt0.c0 END THEN '194069928' WHEN '' THEN rt0.c2 WHEN ((rt0.c0)<>(v0.c0)) THEN (((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((0.9928149788389488))) END, CASE (v0.c0 IN (rt0.c2))  WHEN (((rt0.c0, rt0.c1, rt0.c0))!=((rt0.c2, rt0.c1, rt0.c2))) THEN CAST(x'' AS REAL) WHEN (+ (rt0.c2)) THEN rt0.c1 COLLATE BINARY WHEN CASE rt0.c0  WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN v0.c0 THEN '[h4~Xm' END THEN ((rt0.c2)*(v0.c0)) END HAVING ((((CAST(rt0.c1 AS REAL))OR(COUNT(v0.c0))))AND(((rt0.c0) NOTNULL))); -- 0ms;
SELECT ((CASE v0.c0  WHEN v0.c0 THEN rt0.c2 END) BETWEEN (CAST(rt0.c2 AS INTEGER)) AND ((((v0.c0, rt0.c2, rt0.c0)) NOT BETWEEN ((rt0.c1, rt0.c1, rt0.c0)) AND ((v0.c0, rt0.c1, rt0.c2))))), COUNT(*) OVER (), (('') IS TRUE) FROM v0, rt0 WHERE (CAST(LTRIM(0.6915271345814012, x'') AS NUMERIC)); -- 1ms;
SELECT DISTINCT (((((NOT (rt0.c1)))AND(((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c2)))))AND(COUNT(v0.c0))), ((((v0.c0)/(v0.c0)))*((rt0.c0 IN ()))), ((AVG(v0.c0)) NOTNULL) FROM rt0 NOT INDEXED GROUP BY v0.c0 HAVING ((((rt0.c2) NOT BETWEEN (v0.c0) AND (rt0.c1)))OR(x''));SELECT ALL ((((rt0.c0) ISNULL))&(rt0.c2 COLLATE NOCASE)) FROM v0;SELECT DISTINCT ((HEX(DISTINCT rt0.c1))-((- (rt0.c2)))) FROM v0 WHERE ((((((0.8007816446678584) BETWEEN ('1281551282') AND (NULL))))>=(((~ (NULL))))));SELECT ALL ((SUM(v0.c0))!=(NULL)) FROM rt0, v0 WHERE (NULL); -- 0ms;
SELECT DISTINCT ((((NULL) IS TRUE)) IS FALSE) FROM rt0, v0 WHERE ((~ (-2124569287)) COLLATE RTRIM) ORDER BY (~ (CAST(rt0.c0 AS REAL))) DESC, (NOT ((v0.c0 IN ()))) DESC  NULLS FIRST, ((((((((((rt0.c0)!=(rt0.c2)))OR(((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c2)))))AND((((rt0.c1)) NOT BETWEEN ((rt0.c0)) AND ((v0.c0))))))AND(json_extract(v0.c0, rt0.c0))))AND(((rt0.c2) NOT BETWEEN (x'0b7d') AND (rt0.c1))))  NULLS LAST;SELECT ALL CAST((((v0.c0)) BETWEEN ((rt0.c2)) AND ((v0.c0))) AS BLOB) FROM v0;SELECT DISTINCT rt0.c0 FROM v0;SELECT SUM(((v0.c0)IS(v0.c0))) OVER () FROM rt0 WHERE ((((((('', x'467e', NULL)) NOT BETWEEN (('107614003', NULL, '1_')) AND ((NULL, '0.3214380709452488', 0.010023968550769258)))))<((NULL))));SELECT ((((v0.c0) NOTNULL))%(MAX(rt0.c2))) FROM v0, rt0; -- 1ms;
SELECT DISTINCT (- ((((rt0.c2))<=((rt0.c2))))) FROM rt0; -- 0ms;
SELECT ALL (rt0.c0 IN ((((rt0.c0)) BETWEEN ((rt0.c2)) AND ((rt0.c0))))) FROM v0 ORDER BY (((((((rt0.c2))>((v0.c0))))AND(CAST(rt0.c0 AS BLOB))))AND(((rt0.c2)+(0xffffffffa55622f6))))  NULLS FIRST;SELECT CASE rt0.c0 COLLATE BINARY  WHEN (((v0.c0)) BETWEEN ((rt0.c0)) AND ((rt0.c1))) THEN rt0.c1 END FROM v0;SELECT DISTINCT ((CAST(rt0.c0 AS TEXT))>(((rt0.c0) IS FALSE))) FROM rt0, v0 WHERE (CAST(((NULL) IS FALSE) AS REAL)); -- 0ms;
SELECT (((rt0.c0, 0.947266024809104, v0.c0)) NOT BETWEEN ((((((v0.c0)AND(rt0.c0)))AND(v0.c0)), RTRIM(rt0.c1), rt0.c2 COLLATE BINARY)) AND ((((((rt0.c0)AND(rt0.c0)))OR(v0.c0)), '-796115886', ((v0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c0))))) FROM v0, rt0; -- 0ms;
SELECT DISTINCT ((((((((((rt0.c0) IS FALSE))OR((((rt0.c0))>((rt0.c0))))))OR(rt0.c2)))OR(AVG(v0.c0))))OR(((x'')+(rt0.c0)))), LEAD(((((('全R')GLOB(rt0.c2))))=(((((v0.c0)) BETWEEN ((rt0.c1)) AND ((rt0.c0)))))), CAST(rt0.c2 AS TEXT), ((((((((((((((v0.c0)AND(rt0.c1)))OR(rt0.c2)))OR(rt0.c2)))AND(v0.c0)))OR(rt0.c2)))OR(rt0.c2)))<(CAST(rt0.c2 AS REAL)))) OVER ( GROUPS  UNBOUNDED PRECEDING EXCLUDE CURRENT ROW), ((((rt0.c1) NOTNULL))<(CAST(rt0.c0 AS INTEGER))) FROM rt0, v0 WHERE (((CASE 0.3962970619470877  WHEN NULL THEN x'' END) BETWEEN (CASE WHEN '' THEN x'' END) AND (CAST(x'' AS NUMERIC)))); -- 0ms;
SELECT ALL ((((x'')GLOB(rt0.c0)))%(LOWER(DISTINCT rt0.c2))) FROM v0, rt0; -- 0ms;
SELECT DISTINCT COUNT(*) OVER (), ((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c0)) COLLATE NOCASE, CASE rt0.c1 COLLATE RTRIM  WHEN (~ (rt0.c2)) THEN ((((rt0.c1)AND(rt0.c2)))AND(rt0.c1)) ELSE ((rt0.c0) NOT BETWEEN (rt0.c2) AND (v0.c0)) END, ((CAST(rt0.c1 AS INTEGER)) NOT BETWEEN ((rt0.c0 IN ())) AND ((((v0.c0, rt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c1, rt0.c2, 0.04931034374465659)) AND ((v0.c0, rt0.c2, rt0.c0))))), (((CAST(rt0.c2 AS BLOB)))>(((NOT (rt0.c0))))) FROM v0, rt0 WHERE (0.6437017453332518); -- 1ms;
SELECT ALL INSTR(v0.c0, NULLIF(rt0.c1, rt0.c0)) FROM rt0, v0 WHERE (CASE CAST(x'' AS TEXT)  WHEN ((NULL)-('408844822')) THEN '1687384212' COLLATE RTRIM END) LIMIT -432721652 OFFSET -249060896; -- 0ms;
SELECT (((rt0.c2 IN (rt0.c0)))<=((((rt0.c1)) NOT BETWEEN ((v0.c0)) AND ((rt0.c2))))) FROM v0, rt0 WHERE ((((x'')<<(')#s_')) IN (((x'8a9e')>('黬'))))); -- 0ms;
SELECT ALL ((((((((((v0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c2)))AND(CAST(rt0.c0 AS TEXT))))OR(MAX(rt0.c2))))OR('-1356691339')))OR(TOTAL(0.3206353050826636))) FROM v0 WHERE ((((0.9628682863392257, 0.28496444915819263, 0.938712221091789)) BETWEEN ((((0.4368256997962109)<<('')), '-103668199', LIKELIHOOD(DISTINCT NULL, 0.5606480167811893))) AND ((((((NULL)AND(x'')))AND('yGCq')), ((('Z54'))=((x'0768'))), ((412441060) NOT BETWEEN (x'') AND ('986000435')))))) GROUP BY (((rt0.c2, rt0.c0, rt0.c1)) BETWEEN (('2009025086', (+ (rt0.c2)), ((x'3f50')GLOB(rt0.c1)))) AND ((NULL COLLATE NOCASE, ((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c2)), (rt0.c1 IN ())))) HAVING (~ ((~ (v0.c0))));SELECT ((x'')AND(COUNT(rt0.c1))), CASE ((v0.c0)GLOB(''))  WHEN v0.c0 THEN CASE WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 WHEN v0.c0 THEN v0.c0 END WHEN ((((rt0.c2)OR(rt0.c1)))AND(259990481)) THEN rt0.c1 COLLATE RTRIM WHEN (((0.4296073017040217)) BETWEEN ((rt0.c1)) AND ((rt0.c0))) THEN UPPER(0.4680014628559124) END, (((rt0.c1)) BETWEEN ((CASE WHEN rt0.c1 THEN NULL ELSE rt0.c0 END)) AND (((~ (rt0.c0))))) FROM v0, rt0; -- 0ms;
SELECT (((CASE WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c0 END, DATETIME(rt0.c1, rt0.c0, rt0.c2, rt0.c2, rt0.c2), ((((rt0.c1)AND(v0.c0)))AND(rt0.c1))))<>((TOTAL('os㹽휎4B}	'), NULLIF(rt0.c0, v0.c0), ((rt0.c0)!=(v0.c0))))) FROM rt0, v0 WHERE (((0.11943521973043014 COLLATE RTRIM) IS TRUE)) ORDER BY ((((rt0.c2)||(v0.c0)))%(UNLIKELY(DISTINCT rt0.c0))); -- 1ms;
SELECT DISTINCT '0.5775446045550073' FROM v0, rt0 ORDER BY CAST(rt0.c1 AS BLOB) ASC  NULLS FIRST, -814434774;SELECT ALL NULL, ((((rt0.c1) ISNULL)) NOT NULL), CASE WHEN (rt0.c2 IN ()) THEN rt0.c0 ELSE ((rt0.c2) IS TRUE) END FROM v0 WHERE ((((CASE WHEN 0.8666614344744329 THEN NULL END))=((((NULL)IS('243338129'))))));SELECT DISTINCT CAST((v0.c0 IN ()) AS NUMERIC) FROM rt0, v0; -- 0ms;
SELECT MAX(((rt0.c0) NOT BETWEEN (v0.c0) AND (rt0.c1))), PERCENT_RANK() OVER (), TYPEOF(DISTINCT GROUP_CONCAT(rt0.c1)) FROM rt0;SELECT DISTINCT CAST(((rt0.c2) ISNULL) AS REAL) FROM v0, rt0; -- 0ms;
SELECT DISTINCT (((v0.c0)) BETWEEN ((v0.c0)) AND ((rt0.c2))), ('lWs|J\' IN ()), ((((((((AVG(rt0.c1))AND(((rt0.c0)!=(v0.c0)))))AND((((v0.c0)) BETWEEN ((rt0.c0)) AND ((v0.c0))))))AND(((rt0.c1) IS FALSE))))OR(((((((((rt0.c0)OR(rt0.c2)))AND(rt0.c1)))OR(x'')))AND(v0.c0)))) FROM v0, rt0 WHERE (CASE WHEN NULL COLLATE NOCASE THEN '-863468940' COLLATE NOCASE WHEN CAST(0.8942763588968383 AS TEXT) THEN ((((-1262304248)OR(0.8780465235283397)))OR(x'fa15')) WHEN x'a551' COLLATE RTRIM THEN ((x'') BETWEEN (NULL) AND (0.10869597611946047)) END) GROUP BY ((-1.578497042E9)GLOB(((rt0.c0) NOT BETWEEN (v0.c0) AND (rt0.c0)))); -- 0ms;
SELECT TRIM(DISTINCT ((((v0.c0)OR(rt0.c1)))OR(rt0.c2))) FROM rt0, v0; -- 1ms;
SELECT DISTINCT (((rt0.c2 IN (rt0.c2)))%(CASE rt0.c2  WHEN rt0.c0 THEN v0.c0 ELSE rt0.c0 END)) FROM rt0;SELECT DISTINCT highlight(rt0.c1 COLLATE NOCASE, ((x'842f32b0') NOT BETWEEN (v0.c0) AND (v0.c0)), x'', rt0.c1) FROM rt0, v0;SELECT CASE (- (rt0.c0))  WHEN CAST(rt0.c1 AS REAL) THEN CASE rt0.c0  WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN v0.c0 ELSE x'' END ELSE 0.3121286312525575 END, CAST((+ (rt0.c2)) AS BLOB), (- (((rt0.c0)<(v0.c0)))) FROM rt0 WHERE (((CAST('' AS NUMERIC)) NOT NULL)) ORDER BY (((v0.c0)) NOT BETWEEN ((((rt0.c0)IS NOT(rt0.c2)))) AND ((CASE rt0.c2  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN 0.7653307310163525 WHEN v0.c0 THEN rt0.c0 ELSE v0.c0 END))) DESC  NULLS FIRST;SELECT DISTINCT CASE ((((((((rt0.c1)AND(rt0.c1)))OR(rt0.c1)))AND(v0.c0)))OR(rt0.c0))  WHEN CASE WHEN rt0.c2 THEN NULL WHEN v0.c0 THEN rt0.c0 WHEN rt0.c1 THEN '1352825861' END THEN ((((((((rt0.c0)OR(rt0.c0)))OR(rt0.c1)))OR(rt0.c1)))AND(rt0.c1)) WHEN ((rt0.c1)>(rt0.c1)) THEN CAST(rt0.c1 AS BLOB) WHEN ((rt0.c1)<<(rt0.c0)) THEN rt0.c2 ELSE rt0.c0 END, rt0.c0, ((rt0.c0 COLLATE BINARY) IS TRUE) FROM rt0, v0 WHERE ((+ ((+ (x''))))); -- 0ms;
SELECT CAST(v0.c0 AS REAL) COLLATE RTRIM, (- (NULL)), ((((rt0.c0) BETWEEN (rt0.c1) AND (v0.c0))) NOT BETWEEN (rt0.c0) AND (x'')) FROM v0 WHERE (LTRIM(CASE WHEN 'kx' THEN x'' END)) GROUP BY (((rt0.c1, rt0.c1, rt0.c0)) BETWEEN ((CASE rt0.c0  WHEN rt0.c1 THEN v0.c0 END, rt0.c1, (((v0.c0))>=((rt0.c0))))) AND ((((rt0.c0)<=(v0.c0)), (rt0.c0 IN ()), (((v0.c0))=((v0.c0)))))) ORDER BY HEX(DISTINCT (NOT (rt0.c2))) ASC LIMIT 346043714;SELECT ALL CASE WHEN 0.465587346289831 COLLATE RTRIM THEN COUNT(rt0.c2) ELSE CASE v0.c0  WHEN -1.7976931348623157E308 THEN v0.c0 WHEN v0.c0 THEN '' WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c0 END END FROM rt0;SELECT DISTINCT CAST(CASE 0.056538016225156196  WHEN rt0.c0 THEN '' END AS NUMERIC), CAST((v0.c0 IN ()) AS REAL), MIN(CAST(-8.4288963E7 AS REAL)) FROM v0;SELECT ((LIKELIHOOD(rt0.c0, 0.22644090006706774)) NOT BETWEEN (CHANGES()) AND (rt0.c2 COLLATE BINARY)), (CASE v0.c0  WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c1 END IN ()), MAX(((((rt0.c1)OR(rt0.c1)))AND(v0.c0))) FROM v0, rt0; -- 1ms;
SELECT DISTINCT '-876902320', ((((rt0.c1) NOT BETWEEN (rt0.c0) AND (v0.c0)))-((+ (rt0.c1)))), ((((rt0.c2)) BETWEEN ((rt0.c1)) AND ((v0.c0))) IN ()) FROM v0, rt0; -- 0ms;
SELECT DISTINCT DENSE_RANK() OVER () FROM v0, rt0; -- 0ms;
SELECT DISTINCT ((((rt0.c1)+(v0.c0))) NOT BETWEEN (rt0.c0 COLLATE BINARY) AND (((((v0.c0)OR(rt0.c1)))AND(rt0.c0)))) FROM rt0 INNER JOIN v0 ON ((((rt0.c1) NOTNULL))<<((~ (v0.c0)))) WHERE (((('q')) NOT BETWEEN ((x'' COLLATE RTRIM)) AND ((CASE '479849601'  WHEN NULL THEN NULL WHEN '' THEN 0Xffffffffe37aeb8d WHEN 'j' THEN x'' END)))); -- 0ms;
SELECT DISTINCT (NOT (((rt0.c1)OR(x'b4b3')))) FROM v0 WHERE (CASE ((x'c9e8')%(x'9164'))  WHEN ((x'') NOT BETWEEN (-1.7976931348623157E308) AND ('447656475')) THEN (NULL IN ()) ELSE CASE WHEN 1951704991 THEN NULL WHEN x'' THEN NULL WHEN NULL THEN 0.3227378860028177 ELSE '121711652' END END) LIMIT -2085640988;SELECT AVG(CASE WHEN rt0.c2 THEN v0.c0 WHEN rt0.c2 THEN v0.c0 WHEN rt0.c0 THEN rt0.c1 ELSE 'X9B[' END), ((((v0.c0)<=(rt0.c0))) IS TRUE), (NOT (CASE 0x4d373e7d  WHEN 0.6715902065991617 THEN rt0.c1 END)), LAG(CAST(((rt0.c0)>(rt0.c2)) AS NUMERIC), CAST(((((((((rt0.c1)OR(rt0.c0)))AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c1)) AS REAL), CASE ((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c2))  WHEN CASE WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c1 END THEN (rt0.c2 IN (rt0.c1)) END) OVER (), CASE WHEN rt0.c2 THEN rt0.c2 END COLLATE NOCASE FROM rt0 ORDER BY '1428364044'  NULLS LAST;SELECT DISTINCT CAST((v0.c0 IN ()) AS TEXT) FROM rt0, v0 WHERE ((((0.22849881910252912, x'', '', x'', NULL)) NOT BETWEEN ((((NULL)IS(0xfffffffffb397562)), ((NULL)IS('34046429')), (('')IS NOT(0.47037366827932425)), (- (0.44152501770866726)), CASE 0.3214380709452488  WHEN x'' THEN '-1703930036' END)) AND ((CASE WHEN -259653892 THEN NULL WHEN 0xe300b83 THEN x'daf6' WHEN NULL THEN '772575529' ELSE -4.40024863E8 END, (('')OR(x'')), CAST('-259653892' AS TEXT), CAST(x'' AS INTEGER), (((x'')) NOT BETWEEN ((0.9777250857364687)) AND (('772575529'))))))); -- 1ms;
SELECT DISTINCT ((((((((CASE rt0.c2  WHEN rt0.c0 THEN rt0.c1 WHEN v0.c0 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c1 END)OR(((((v0.c0)AND(rt0.c0)))OR(v0.c0)))))AND(((((rt0.c2)OR(v0.c0)))OR(rt0.c2)))))OR(CAST(rt0.c0 AS BLOB))))AND(((((rt0.c2)AND(rt0.c0)))AND(rt0.c1)))) FROM rt0 WHERE ((- (CASE ''  WHEN 2028743336 THEN -2.052797596E9 WHEN x'defc9fd4' THEN x'' WHEN x'' THEN '-1527540359' ELSE '699041663' END)));SELECT DISTINCT NULLIF((((rt0.c2))==((rt0.c0))), ((rt0.c2) BETWEEN (v0.c0) AND (rt0.c2))) FROM v0 WHERE (((0.5652591400232768 COLLATE RTRIM)OR((((0.38655565980009743))>=(('-249224777')))))) GROUP BY (((- (rt0.c0))) NOT NULL) HAVING ((((rt0.c1) IS FALSE))>>(((((rt0.c2)AND(rt0.c0)))AND(v0.c0))));SELECT (CASE NULL  WHEN x'' THEN v0.c0 ELSE v0.c0 END IN ()) FROM v0 WHERE (((CAST(0.7922160452315214 AS REAL)) ISNULL)); -- 0ms;
SELECT LAG(((TYPEOF(DISTINCT v0.c0)) NOT BETWEEN (rt0.c0) AND ((~ (rt0.c1)))), ((rt0.c2) IS TRUE) COLLATE NOCASE, (NOT (CAST(v0.c0 AS NUMERIC)))) OVER () FROM rt0, v0 WHERE ((((('Xsh\nJ5') NOT BETWEEN (0x792a6fa2) AND (x''))) NOTNULL)); -- 0ms;
SELECT DISTINCT ((rt0.c1)IS((((rt0.c2, v0.c0, 0Xfffffffffbee75dc))<=((rt0.c0, '0.012922597055444296', v0.c0))))) FROM rt0 FULL OUTER JOIN v0 ON ((((((((((rt0.c2)IS NOT(rt0.c1)))OR(LIKELY(DISTINCT rt0.c0))))OR((((rt0.c2, 0.5147058701968172, v0.c0)) BETWEEN ((rt0.c2, rt0.c2, rt0.c0)) AND ((rt0.c2, rt0.c2, rt0.c2))))))AND(CASE WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c2 END)))AND(COALESCE(rt0.c0, rt0.c0))) WHERE (((((986727087) ISNULL)) ISNULL)); -- 0ms;
SELECT DISTINCT (((((((rt0.c0)AND(0.26421284451885785)))AND(rt0.c2))))<=(((rt0.c2 IN ())))) FROM rt0, v0; -- 0ms;
SELECT (rt0.c1 IN (((rt0.c1)|(rt0.c1)), (((v0.c0, rt0.c2, v0.c0)) NOT BETWEEN ((rt0.c1, rt0.c0, '613086324')) AND ((rt0.c0, rt0.c2, '-259653892'))))), ((LOWER(rt0.c1)) ISNULL), rt0.c1 FROM v0;SELECT SUM(((rt0.c0) NOT BETWEEN (rt0.c2) AND (-4.72275568E8))) FROM v0 WHERE (CASE WHEN ((('0.08861050614176236'))!=((0.8142464583392749))) THEN (((x'2dce'))>((0.6165172230123611))) ELSE (('233534811')<>(-1742159558)) END);SELECT DISTINCT COUNT((rt0.c0 IN ())) FROM rt0, v0 WHERE (((((((0.0401185321452302)AND(x'')))OR(NULL))) NOT NULL)); -- 0ms;
SELECT DISTINCT (((NULL)) NOT BETWEEN (((rt0.c0 IN ()))) AND ((((rt0.c2) ISNULL)))) FROM v0, rt0 WHERE (((((((((((NULL) NOT BETWEEN (x'426c') AND (-1.7976931348623157E308)))AND(0.998156150750809)))AND(json_type(0.7545309488839224))))OR((('1028820565')IS(NULL)))))OR(CAST(1.198863753E9 AS INTEGER)))); -- 0ms;
SELECT UPPER(DISTINCT COUNT(rt0.c2)) FROM rt0, v0; -- 0ms;
SELECT DISTINCT ((x'') BETWEEN ((((rt0.c0, rt0.c2, rt0.c1))<((rt0.c0, v0.c0, x'42cd')))) AND (LOWER(rt0.c1))) FROM rt0, v0 WHERE ((~ ((+ (x''))))) LIMIT 0 OFFSET -1954779468; -- 0ms;
SELECT (((- (rt0.c2)))IS((rt0.c2 IN ()))) FROM rt0, v0; -- 0ms;
SELECT ((((rt0.c1)IS NOT(rt0.c0)))LIKE((NOT (x'20c83683')))) FROM v0 ORDER BY ((((- (v0.c0))))==(((((rt0.c0, '', rt0.c0, rt0.c0, v0.c0))=((rt0.c0, x'77649c2d', rt0.c0, rt0.c2, rt0.c2))))));SELECT ALL ABS(DISTINCT rt0.c1) FROM rt0 WHERE (((((('', 'j', NULL))<(('u_~R{⪨L', NULL, 0.6859900128602959)))) NOTNULL)); -- 0ms;
SELECT DISTINCT CASE WHEN ((0.45595214298879205) BETWEEN (rt0.c0) AND (rt0.c1)) THEN CAST(rt0.c2 AS REAL) ELSE TOTAL(rt0.c0) END FROM rt0, v0; -- 0ms;
SELECT ((v0.c0 IN (rt0.c2, rt0.c2)) IN (CAST(rt0.c0 AS INTEGER), '', rt0.c0 COLLATE NOCASE)), TOTAL(TIME(rt0.c0, rt0.c1, rt0.c1)), COUNT(((rt0.c1) NOT BETWEEN (v0.c0) AND (v0.c0))) OVER ( RANGE (~ ((~ (rt0.c1)))) PRECEDING EXCLUDE TIES) FROM rt0, v0 GROUP BY ((v0.c0 IN (v0.c0)) IN ());SELECT DISTINCT ((CASE WHEN rt0.c0 THEN rt0.c0 ELSE NULL END) NOT BETWEEN (((rt0.c2) NOTNULL)) AND (((rt0.c2)<(rt0.c1)))), ((((v0.c0)+(rt0.c0)))IS(((((((((((((rt0.c0)AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c0)))AND(v0.c0)))AND(v0.c0)))AND(rt0.c0)))), x'' FROM rt0 WHERE (((CAST(x'34b5' AS INTEGER))/(NULL))) ORDER BY LOWER(CASE WHEN rt0.c1 THEN rt0.c0 END) DESC, 0.08804920445796416  NULLS FIRST;SELECT ALL CASE x''  WHEN rt0.c2 THEN rt0.c0 END COLLATE BINARY, TOTAL(rt0.c1) OVER (), (((rt0.c1)) NOT BETWEEN ((COALESCE(-154623071, rt0.c2, v0.c0, rt0.c1))) AND ((((v0.c0) IS FALSE)))) FROM rt0, v0; -- 0ms;
SELECT ((0.9196553851857932)*((~ (rt0.c1)))) FROM v0, rt0; -- 0ms;
SELECT DISTINCT TRIM(DISTINCT v0.c0, rt0.c1) COLLATE NOCASE FROM rt0;SELECT DISTINCT ((rt0.c2 IN ()) IN ()) FROM v0, rt0 WHERE ((('-2095604467')+(CAST(x'' AS BLOB)))) ORDER BY CAST(rt0.c0 COLLATE RTRIM AS NUMERIC) ASC  NULLS LAST, CAST(((v0.c0)<>(rt0.c0)) AS REAL)  NULLS FIRST, CASE WHEN ((rt0.c2) IS FALSE) THEN (rt0.c0 IN ()) ELSE rt0.c0 END  NULLS FIRST; -- 1ms;
SELECT DISTINCT (((((- (rt0.c1)))OR((((rt0.c1)) NOT BETWEEN ((rt0.c0)) AND (('-2082744198'))))))AND((- (NULL)))) FROM v0, rt0 WHERE ((((CAST(0.37101210661510786 AS TEXT), '-1709070136', ((0.6650746624039956)<=(x''))))<(('-1209567897' COLLATE RTRIM, (('j') BETWEEN (0) AND (x'd50f')), (((0.2874055204418756)) NOT BETWEEN ((-9589809.0)) AND ((0.1577574349043176))))))); -- 0ms;
SELECT DISTINCT ((((rt0.c1 COLLATE RTRIM)AND(CAST(rt0.c0 AS NUMERIC))))OR(((rt0.c0)<(v0.c0)))) FROM rt0 WHERE ((((((x'' IN ()))AND((('-769319647') IS TRUE))))AND('-482906691'))) ORDER BY UPPER(DISTINCT (NOT (NULL))) ASC, ((TRIM(DISTINCT v0.c0, rt0.c2)) BETWEEN (((rt0.c0)AND(rt0.c2))) AND (CASE WHEN v0.c0 THEN rt0.c2 ELSE '-283223865' END)) ASC  NULLS FIRST;SELECT ALL ROW_NUMBER() OVER () FROM rt0, v0 WHERE (('-1447288241' IN (NULL))); -- 0ms;
SELECT ((((((v0.c0)OR(rt0.c1)))AND(rt0.c0))) ISNULL) FROM rt0, v0; -- 0ms;
SELECT ALL CUME_DIST() OVER () FROM v0 GROUP BY (((rt0.c2)) BETWEEN ((rt0.c2)) AND ((rt0.c2))) COLLATE BINARY COLLATE NOCASE;SELECT rt0.c2 FROM rt0; -- 0ms;
SELECT (((('黬')AND(rt0.c1 COLLATE NOCASE)))OR(json_array(rt0.c0, rt0.c2))) FROM rt0 WHERE ((((('-481014927')>>('-2094280280'))) IS TRUE)); -- 0ms;
SELECT DISTINCT CAST('2097365637' AS INTEGER) FROM rt0, v0 WHERE ((('q') NOT BETWEEN (((('-45750689', 0xd8314a9, NULL)) NOT BETWEEN ((x'', x'', x'')) AND ((0.25811558047258965, 0.7307341012082577, '0.30670606158010716')))) AND (INSTR(0.10542900900352159, NULL)))); -- 1ms;
SELECT DISTINCT json_array_length(CASE WHEN rt0.c0 THEN rt0.c0 END, ((0.05241563949009043) IS TRUE)) FROM v0, rt0;SELECT DISTINCT COUNT(*) FROM v0, rt0; -- 0ms;
SELECT DISTINCT ((((rt0.c2)*(v0.c0))) ISNULL) FROM v0 WHERE (json_array((((((((('0')AND(NULL)))OR('0.23955660169701198')))AND('>5_u')))AND('*?]')), x''));SELECT ALL (~ (((v0.c0)<=(rt0.c2)))), GLOB(IFNULL(DISTINCT '-1262304248', rt0.c0), ((rt0.c1) NOT NULL)), 0.8230099518671108 FROM rt0, v0; -- 0ms;
SELECT DISTINCT (((((0.4830619987881354, rt0.c1, rt0.c0))<=((rt0.c2, rt0.c2, v0.c0)))) BETWEEN (CASE rt0.c2  WHEN v0.c0 THEN '' WHEN rt0.c1 THEN v0.c0 WHEN rt0.c2 THEN v0.c0 WHEN -1346153905 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c0 ELSE v0.c0 END) AND (CASE rt0.c1  WHEN rt0.c2 THEN rt0.c1 END)) FROM v0, rt0; -- 0ms;
SELECT DISTINCT ((NULL)OR(TRIM(DISTINCT v0.c0, v0.c0))) FROM v0, rt0; -- 0ms;
SELECT DISTINCT (NOT (COUNT(rt0.c1))) FROM rt0 WHERE ((((0.12255340398450976)) NOT BETWEEN ((((x'd5f1')%('1762748248')))) AND ((((x'') NOT BETWEEN (NULL) AND ('k\r')))))); -- 1ms;
SELECT SUM(((((rt0.c2)OR(v0.c0)))OR(v0.c0))) FROM v0, rt0 WHERE ((((CAST(NULL AS INTEGER), json_insert(NULL, x'', x''), ((NULL)IS NOT('#F'))))>((((('-1270873984', x'', NULL))!=((0.5910507717910071, 0.4665815150185977, NULL))), (((-2.06578659E8, 'Bf', '0.465587346289831'))==((NULL, -1.887325604E9, -1.245845687E9))), (('-876902320')*(NULL)))))); -- 0ms;
SELECT DISTINCT ((((v0.c0)GLOB(rt0.c1))) ISNULL) FROM v0 WHERE ((('67775580' COLLATE NOCASE) NOT BETWEEN (0.9646022739906311) AND (CAST(NULL AS BLOB)))) ORDER BY CAST(CASE WHEN rt0.c2 THEN rt0.c0 WHEN rt0.c2 THEN rt0.c0 WHEN '1666900630' THEN NULL ELSE rt0.c2 END AS REAL)  NULLS LAST;SELECT ALL ((rt0.c1) BETWEEN ((((v0.c0, rt0.c2, rt0.c0)) BETWEEN ((rt0.c2, x'', rt0.c0)) AND ((x'', rt0.c1, rt0.c1)))) AND (((v0.c0)||(rt0.c1)))) FROM v0, rt0 GROUP BY ((((rt0.c2) NOT NULL))IS NOT(rt0.c2 COLLATE NOCASE)) HAVING rt0.c0 ORDER BY (((rt0.c2 IN ())) NOTNULL) DESC  NULLS LAST; -- 0ms;
SELECT ALL ((AVG(rt0.c0))>(CAST(rt0.c0 AS BLOB))) FROM rt0, v0 WHERE ((((x'c386'))>=((x''))) COLLATE RTRIM); -- 0ms;
SELECT DISTINCT ((TRIM(rt0.c1)) IS TRUE) FROM v0, rt0 WHERE ((((('^So_c{Ib')<<('-744447141')))/(('1251381507' IN ())))); -- 0ms;
SELECT CAST('k' AS TEXT) FROM rt0; -- 0ms;
SELECT DISTINCT CASE WHEN ((((rt0.c0)OR('933607634')))AND(v0.c0)) THEN ((((rt0.c2)AND(v0.c0)))OR(rt0.c1)) ELSE ABS(rt0.c0) END FROM rt0, v0 WHERE (((((x'1f57dffd') NOT BETWEEN (NULL) AND (0xffffffffbfd7af54)))<<(((((x'0631')OR(0.16598251943246456)))AND(NULL))))); -- 1ms;
SELECT DISTINCT ((rt0.c0 COLLATE RTRIM) BETWEEN (((rt0.c2)||(rt0.c0))) AND (NULL)) FROM v0;SELECT ALL ((CASE WHEN rt0.c2 THEN rt0.c1 END)>(((rt0.c0)||(rt0.c0)))) FROM rt0, v0 GROUP BY CAST((+ (v0.c0)) AS TEXT) HAVING (NOT ((rt0.c1 IN ()))); -- 0ms;
SELECT MIN((v0.c0 IN ())) FROM v0, rt0; -- 0ms;
SELECT DISTINCT (((((rt0.c2, x'', x'3c2c')) BETWEEN ((v0.c0, rt0.c2, rt0.c2)) AND ((rt0.c1, v0.c0, x'')))) NOT NULL), GROUP_CONCAT((~ (rt0.c0))) FILTER(WHERE ((((((((((rt0.c2) BETWEEN (rt0.c1) AND (v0.c0)))AND(x'dd74')))AND(CASE ''  WHEN rt0.c0 THEN rt0.c0 ELSE 'Mz' END)))AND(CAST(rt0.c2 AS BLOB))))OR(((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c2))))) OVER (), GROUP_CONCAT(v0.c0), ((NULL)>(((v0.c0) IS TRUE))), ((rt0.c2) IS TRUE) FROM v0, rt0; -- 0ms;
SELECT DISTINCT ((((CAST(rt0.c1 AS REAL))AND(((rt0.c0) IS TRUE))))AND((v0.c0 IN ()))) FROM v0; -- 0ms;
SELECT ALL (('245556560')IS((rt0.c2 IN (0X47bfa4fb, 0.32678902492612105)))), LAST_VALUE(TYPEOF(DISTINCT ((rt0.c2)<<(v0.c0)))) OVER (), (('-1345765470') BETWEEN (COUNT(*)) AND (((v0.c0) IS TRUE))) FROM rt0, v0 ORDER BY CAST(((rt0.c1)LIKE(rt0.c1)) AS TEXT); -- 0ms;
SELECT DISTINCT ((CAST(v0.c0 AS INTEGER))<<(v0.c0 COLLATE RTRIM)) FROM v0, rt0 WHERE ((CAST(x'' AS NUMERIC) IN (((NULL)>('V{FG'))))); -- 0ms;
SELECT DISTINCT TOTAL(((rt0.c1)-(x'088d'))) OVER () FROM v0 WHERE (((- ('337223462')) IN ()));SELECT DISTINCT (~ (COUNT(rt0.c0))) FROM rt0, v0; -- 0ms;
SELECT ALL ((NULLIF(v0.c0, rt0.c0)) NOT BETWEEN (COUNT(*)) AND (((((((((rt0.c0)AND(rt0.c0)))AND(rt0.c0)))OR(rt0.c2)))OR(rt0.c2)))) FROM v0;SELECT ALL v0.c0 FROM rt0;SELECT ALL (((UNLIKELY(rt0.c1), (rt0.c1 IN ()), rt0.c0 COLLATE NOCASE))<((0Xfffffffff085fefc, TOTAL(rt0.c0), (v0.c0 IN ())))) FROM rt0; -- 0ms;
SELECT DISTINCT ((((rt0.c0)<(rt0.c0))) IS TRUE) FROM rt0; -- 0ms;
SELECT SUM(((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c0))) FROM v0;SELECT DISTINCT NULL, AVG(((0.5835758027316926)AND(rt0.c0))), LAG((((rt0.c0) NOTNULL) IN ()), (LIKELIHOOD(DISTINCT rt0.c2, 0.10217214012409348) IN ()), (((v0.c0)) BETWEEN (((rt0.c0 IN (v0.c0)))) AND ((594511161)))) OVER () FROM v0, rt0 LIMIT 81108893; -- 0ms;
SELECT DISTINCT ((CASE WHEN v0.c0 THEN rt0.c0 END)&((((rt0.c2)) BETWEEN ((rt0.c2)) AND ((rt0.c2))))), CASE ((rt0.c1) NOT BETWEEN (v0.c0) AND (rt0.c1))  WHEN MIN(rt0.c2) THEN ((rt0.c2) IS TRUE) ELSE ((v0.c0) IS FALSE) END, ((LIKELY(DISTINCT 2003880304)) BETWEEN (((v0.c0)<=(rt0.c2))) AND ((0.6745086753388739 IN ()))) FROM v0;SELECT ALL LAG(TYPEOF(((v0.c0)OR(v0.c0))), ((((rt0.c1) NOTNULL)) ISNULL), ((((rt0.c0)>>(rt0.c0))) NOT NULL)) OVER (), ((((rt0.c1) IS TRUE)) NOTNULL), COUNT(*) FROM rt0, v0; -- 0ms;
SELECT ALL QUOTE(rt0.c0 COLLATE BINARY), AVG(CASE rt0.c0  WHEN rt0.c0 THEN rt0.c1 END) OVER ( ORDER BY CASE WHEN (rt0.c0 IN ()) THEN ((rt0.c1)-(v0.c0)) WHEN CAST(rt0.c1 AS INTEGER) THEN CAST(rt0.c0 AS NUMERIC) WHEN (- (x'')) THEN CASE WHEN rt0.c2 THEN rt0.c2 WHEN 0.49310246982264194 THEN rt0.c0 WHEN v0.c0 THEN '-HK' ELSE rt0.c2 END ELSE ((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c0)) END  NULLS LAST), CASE ((((rt0.c0)AND(rt0.c2)))AND(rt0.c2))  WHEN v0.c0 THEN (((rt0.c1))=((v0.c0))) WHEN TOTAL(rt0.c2) THEN CASE rt0.c0  WHEN rt0.c1 THEN rt0.c1 WHEN NULL THEN rt0.c0 WHEN rt0.c1 THEN rt0.c2 ELSE v0.c0 END WHEN ((rt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c0)) THEN CASE rt0.c2  WHEN rt0.c0 THEN rt0.c2 ELSE v0.c0 END END FROM rt0 WHERE (CASE (('')<=(3.46043714E8))  WHEN 0.6079010978169843 COLLATE RTRIM THEN CAST(x'' AS INTEGER) WHEN json_insert(NULL, -1610649059, 'X짟L*zj') THEN (NULL IN ()) WHEN (1030961999 IN ()) THEN 0.1363026917859308 COLLATE BINARY END);SELECT DISTINCT v0.c0 FROM rt0, v0; -- 0ms;
SELECT DISTINCT '-571722409' FROM v0 WHERE (((((x'8542') IS TRUE)) NOT BETWEEN (((NULL)>(0.944460220883213))) AND (x'' COLLATE BINARY))); -- 0ms;
SELECT ALL (((x''))<=(((rt0.c0 IN ())))) FROM v0, rt0; -- 0ms;
SELECT DISTINCT GROUP_CONCAT(((0xffffffff832bd1a8) NOT NULL)), SQLITE_COMPILEOPTION_GET(STRFTIME(rt0.c2, rt0.c0, rt0.c0)), ((TOTAL(v0.c0))>>((((rt0.c0))<((rt0.c2))))) FROM rt0, v0 WHERE ((0.9617415849980305 COLLATE RTRIM IN (TYPEOF(DISTINCT NULL)))) GROUP BY (NOT (STRFTIME(v0.c0, rt0.c1, rt0.c2, rt0.c0, rt0.c0))) HAVING ((((((rt0.c0)AND(rt0.c1)))AND(rt0.c0))) NOT BETWEEN (((((rt0.c1)AND('Gz-e')))AND(rt0.c0))) AND ((+ (rt0.c1)))) ORDER BY ((((rt0.c1) NOT NULL)) BETWEEN (((rt0.c1) NOT BETWEEN (rt0.c2) AND (x''))) AND (CASE WHEN rt0.c1 THEN v0.c0 ELSE v0.c0 END))  NULLS FIRST; -- 0ms;
SELECT DISTINCT SQLITE_SOURCE_ID(), ((CAST(v0.c0 AS BLOB)) IS FALSE), CASE WHEN rt0.c0 THEN -4.40024863E8 END COLLATE NOCASE FROM rt0, v0 WHERE (x''); -- 0ms;
SELECT DISTINCT (((rt0.c2 IN ()))AND(rt0.c1)) FROM v0 GROUP BY ((rt0.c2) NOTNULL);SELECT DISTINCT (- (rt0.c1)) FROM rt0; -- 0ms;
SELECT DISTINCT (- (x'')) FROM v0; -- 0ms;
SELECT DISTINCT (NULL IN ()) FROM v0, rt0 LIMIT -1732331334; -- 0ms;
SELECT DISTINCT ((CASE rt0.c2  WHEN rt0.c0 THEN rt0.c0 WHEN v0.c0 THEN rt0.c1 WHEN NULL THEN rt0.c2 END) NOT BETWEEN (((v0.c0)%(rt0.c1))) AND (GROUP_CONCAT(rt0.c2))), '0.26644823071336965', ((((rt0.c2) BETWEEN (v0.c0) AND (v0.c0))) NOT BETWEEN (CASE WHEN v0.c0 THEN rt0.c0 ELSE rt0.c1 END) AND (x'')) FROM v0;SELECT ALL CAST(v0.c0 AS INTEGER) COLLATE BINARY FROM rt0, v0; -- 0ms;
SELECT ALL COUNT(*), (NOT (((rt0.c0)<=(rt0.c2)))), ((((rt0.c2)+(rt0.c0)))/(((rt0.c0)=(rt0.c2)))) FROM rt0, v0; -- 0ms;
SELECT DISTINCT ((((('759545036', rt0.c0, rt0.c1)) BETWEEN ((v0.c0, rt0.c2, rt0.c2)) AND ((rt0.c2, rt0.c1, rt0.c2)))) IS FALSE), GROUP_CONCAT(CAST(rt0.c2 AS REAL)), (((rt0.c0)GLOB(rt0.c2)) IN ()) FROM v0, rt0 WHERE (CAST(CAST(x'' AS REAL) AS TEXT)) UNION SELECT ALL (((('N낔') NOT NULL)) NOT NULL), (~ (rt0.c2)), ROW_NUMBER() OVER ( ORDER BY ((rt0.c0)>=(CASE rt0.c1  WHEN rt0.c1 THEN rt0.c1 END))  NULLS FIRST, CASE ((rt0.c0)>=(rt0.c0))  WHEN (- (rt0.c2)) THEN TRIM(v0.c0, v0.c0) END ASC) FROM v0;SELECT ALL TOTAL(((v0.c0)=(v0.c0)) COLLATE BINARY) FROM rt0, v0 LIMIT -1170316462; -- 0ms;
SELECT ALL (((rt0.c0 IN (rt0.c1, rt0.c1)))/(((rt0.c2) NOT BETWEEN (rt0.c2) AND (v0.c0)))) FROM rt0 WHERE (((-1.64946228E9)*(NULL)) COLLATE RTRIM);SELECT DISTINCT (+ ((((rt0.c2))>=((v0.c0))))) FROM rt0, v0 WHERE (CASE (('u6k')IS(0.8995336080474253))  WHEN ((0.8082543213145479) IS FALSE) THEN ((((x'aa2b')AND(x'')))AND(x'')) WHEN (('0.1337451015982304') BETWEEN (0.7251309287792289) AND (NULL)) THEN ('^so_c{ib' IN ()) WHEN (+ (0.24655362010909887)) THEN 0.3767777849210058 COLLATE BINARY ELSE CASE 0X3371e5a2  WHEN 1607705376 THEN 1.428364044E9 ELSE '-645953' END END); -- 0ms;
SELECT CAST(MIN(rt0.c2) AS REAL), CAST((v0.c0 IN (rt0.c1)) AS NUMERIC), (((((NOT (NULL)))AND(((v0.c0)&(rt0.c0)))))AND((rt0.c2 IN ()))) FROM rt0, v0; -- 0ms;
SELECT (~ (((rt0.c0)AND(rt0.c1)))) FROM v0 GROUP BY (((rt0.c0)AND(rt0.c0)) IN (CASE WHEN rt0.c2 THEN v0.c0 WHEN v0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c2 ELSE v0.c0 END)) HAVING (((rt0.c0)) NOT BETWEEN (((- (v0.c0)))) AND (((((0.21782276533166678, rt0.c0, rt0.c1)) NOT BETWEEN ((rt0.c0, v0.c0, rt0.c0)) AND ((rt0.c1, rt0.c0, rt0.c2))))));SELECT DISTINCT CAST((((rt0.c1, v0.c0, rt0.c2)) NOT BETWEEN (('-1649462280', rt0.c1, rt0.c0)) AND ((rt0.c0, v0.c0, '-1954779468'))) AS BLOB), ((((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c2)))=('1938661326')), ((LIKELIHOOD(v0.c0, 0.3487278778561528)) NOT BETWEEN (((((((((rt0.c0)AND(rt0.c1)))AND(rt0.c2)))AND(x'')))OR(v0.c0))) AND ((rt0.c1 IN ()))) FROM v0, rt0 ORDER BY ((CAST('MzwCwF{' AS INTEGER))AND(((rt0.c0) IS FALSE))), (v0.c0 IN (rt0.c0)) COLLATE RTRIM DESC; -- 1ms;
SELECT ((CASE WHEN rt0.c0 THEN '' END) IS FALSE) FROM rt0, v0; -- 0ms;
SELECT ALL (~ (COUNT(x''))) FROM rt0, v0 WHERE ((+ ((x'' IN (NULL))))); -- 0ms;
SELECT NTH_VALUE((((((v0.c0))=((v0.c0)))) NOTNULL), (((v0.c0 IN (v0.c0))) BETWEEN ((((v0.c0)) BETWEEN ((v0.c0)) AND ((v0.c0)))) AND (((v0.c0) NOT NULL)))) OVER () FROM v0 WHERE (NULL); -- 0ms;
SELECT DISTINCT COUNT(*) FROM rt0; -- 0ms;
SELECT ALL (((~ (rt0.c0))) BETWEEN ((((rt0.c0))==((rt0.c2)))) AND (NULL)), GROUP_CONCAT(((rt0.c2)<=(rt0.c2))) OVER (), ((((rt0.c1)*(rt0.c2)))<=(((rt0.c1) IS TRUE))) FROM v0 WHERE ('-166577796');SELECT DISTINCT ABS(DISTINCT ((rt0.c0)-(rt0.c1))), CASE WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c2 END COLLATE BINARY, (((rt0.c0))<=((v0.c0))) COLLATE RTRIM FROM v0, rt0; -- 0ms;
SELECT (+ (rt0.c2)) FROM v0, rt0; -- 0ms;
SELECT DISTINCT (((v0.c0, rt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c0, rt0.c1, v0.c0)) AND ((rt0.c2, rt0.c0, '-247379793'))) COLLATE RTRIM FROM v0, rt0; -- 0ms;
SELECT DISTINCT x'' FROM rt0 WHERE (((x'' COLLATE BINARY) IS TRUE)); -- 0ms;
SELECT DISTINCT COUNT((('rK')<=(v0.c0))) OVER ( ORDER BY rt0.c2) FROM v0, rt0 ORDER BY CAST(CASE WHEN v0.c0 THEN rt0.c2 ELSE v0.c0 END AS BLOB), ((((((((v0.c0)AND(rt0.c2)))OR(v0.c0)))AND(CASE WHEN rt0.c1 THEN v0.c0 END)))AND(((rt0.c1)+(rt0.c2))))  NULLS LAST; -- 0ms;
SELECT ALL SUM('643934826') FROM rt0 ORDER BY ((((((v0.c0) NOT NULL))AND(((rt0.c1) ISNULL))))OR(((rt0.c1)&(rt0.c0))))  NULLS LAST LIMIT 337223462;SELECT ((((CAST(rt0.c1 AS INTEGER))AND(v0.c0)))AND(((v0.c0)OR(v0.c0)))) FROM rt0 WHERE (CASE WHEN x'0aec' THEN NULL WHEN NULL THEN NULL WHEN NULL THEN x'' ELSE 0.9943999533058565 END COLLATE NOCASE);SELECT ((0.921972349683828)*(CASE WHEN v0.c0 THEN rt0.c0 ELSE rt0.c2 END)), (((((rt0.c0) BETWEEN (rt0.c1) AND (v0.c0))))<=((HEX(DISTINCT rt0.c0)))), (~ (MIN(rt0.c1))) FROM v0 WHERE (((((0.9607225935642227)>(x'0853')))IS NOT(LIKELIHOOD(x'', 0.4171828934639783)))) ORDER BY NULLIF(DISTINCT (NULL IN ()), ((rt0.c0)>>(rt0.c1)));SELECT DISTINCT CAST(CAST(rt0.c0 AS INTEGER) AS BLOB) FROM v0 WHERE (('-1000981181' COLLATE BINARY IN ((((('-961795495')AND('')))AND('Z?6hB#')))));SELECT DISTINCT '', (+ (CASE rt0.c0  WHEN rt0.c0 THEN v0.c0 END)), COUNT(CASE WHEN rt0.c0 THEN rt0.c0 WHEN v0.c0 THEN v0.c0 WHEN rt0.c2 THEN v0.c0 WHEN v0.c0 THEN rt0.c0 WHEN rt0.c0 THEN v0.c0 ELSE rt0.c1 END) FROM rt0, v0; -- 0ms;
SELECT CAST('' AS BLOB), ((((v0.c0)>(rt0.c1)))!=(rt0.c1)), CASE TRIM(rt0.c1, v0.c0)  WHEN ((((v0.c0)OR(rt0.c1)))AND(v0.c0)) THEN ABS(rt0.c1) END FROM v0, rt0; -- 0ms;
SELECT ALL (('-249060896') NOT BETWEEN (json_remove(rt0.c0, rt0.c2, v0.c0, v0.c0)) AND ('408844822')) FROM rt0, v0 WHERE ((NOT ((('-7ex~~') IS FALSE))));SELECT DISTINCT AVG(CAST(rt0.c2 AS REAL)) OVER (), (+ (((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c1)))), CAST(v0.c0 AS NUMERIC) COLLATE RTRIM, NTH_VALUE((('-1619646440' IN ('1008143533')) IN ()), CAST(((NULL)<(0.6267731484259199)) AS BLOB)) OVER ( RANGE  CURRENT ROW EXCLUDE GROUP), ((rt0.c0)/(rt0.c1)) COLLATE BINARY FROM rt0, v0; -- 0ms;
SELECT DISTINCT ((CASE x''  WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c1 END)<(x'')), (((((rt0.c2))>=((rt0.c0)))) NOT BETWEEN (CAST(0.9267912920156824 AS NUMERIC)) AND (((rt0.c1) IS TRUE))), MIN(((rt0.c2) IS TRUE)) FROM v0 GROUP BY CAST(((rt0.c1)IS(0.849922386959788)) AS REAL) HAVING rt0.c2;SELECT ((((((rt0.c1)GLOB(rt0.c0)))OR(((v0.c0)&(rt0.c0)))))AND(((v0.c0) IS TRUE))), (NOT (rt0.c2)), ((((AVG(v0.c0))OR(v0.c0)))OR(rt0.c2 COLLATE BINARY)) FROM rt0, v0; -- 0ms;
SELECT DISTINCT CAST(((rt0.c1) BETWEEN (v0.c0) AND (rt0.c0)) AS REAL) FROM v0, rt0 WHERE (((NULL COLLATE NOCASE) NOT BETWEEN (((x'') NOT BETWEEN (NULL) AND (0xffffffffa9a33ccf))) AND ((NULL IN ())))) LIMIT 1044832670; -- 0ms;
SELECT DISTINCT ((rt0.c1) NOT BETWEEN (rt0.c1) AND (v0.c0)) COLLATE NOCASE FROM rt0 WHERE (((('1278549101')) BETWEEN ((((x'5f70')*(0.16260866825993547)))) AND (((~ ('0.6752191914591535')))))) LIMIT 1597114121;SELECT DISTINCT 'ꌖ#' FROM rt0, v0; -- 0ms;
SELECT DISTINCT CASE (+ (rt0.c0))  WHEN rt0.c1 THEN CAST(rt0.c0 AS TEXT) END FROM v0, rt0 WHERE (CAST(((0.09445296290767091) ISNULL) AS REAL)) ORDER BY ((rt0.c0 COLLATE BINARY) BETWEEN ((- (rt0.c2))) AND (rt0.c1)); -- 0ms;
SELECT x'ea2a', (~ (v0.c0)), ((((((((((((rt0.c2 COLLATE BINARY)OR((rt0.c0 IN ()))))OR(MAX(v0.c0))))OR(json_object(rt0.c1, 0.23226040502663803, rt0.c2, rt0.c0))))AND(((rt0.c0) ISNULL))))AND(((((((((rt0.c1)AND(rt0.c1)))OR(x'')))AND(rt0.c2)))OR(rt0.c1)))))AND(((((rt0.c1)AND(rt0.c2)))AND(v0.c0)))), CAST(((rt0.c2)>=(v0.c0)) AS REAL), ((CASE WHEN v0.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c0 WHEN v0.c0 THEN rt0.c0 END)&(((v0.c0)GLOB(rt0.c1)))) FROM rt0, v0 WHERE (((((NULL)GLOB(0.5775446045550073)))>(rtreenode(0.6444282166109565, 'm')))) GROUP BY CAST(((rt0.c2) IS TRUE) AS INTEGER), ((CAST(rt0.c2 AS TEXT)) NOT BETWEEN (((rt0.c2) NOT BETWEEN (rt0.c0) AND (v0.c0))) AND (v0.c0 COLLATE BINARY)), (((0.3435064255817647, rt0.c2, v0.c0)) NOT BETWEEN ((rt0.c2, 0.37110188229102103, rt0.c1 COLLATE BINARY)) AND ((SQLITE_COMPILEOPTION_USED(rt0.c2), -961795495, CAST('751883678' AS INTEGER)))); -- 1ms;
SELECT DISTINCT (((((((v0.c0))>=((rt0.c2))))AND(((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c1)))))AND(CASE WHEN v0.c0 THEN v0.c0 ELSE v0.c0 END)) FROM v0, rt0 WHERE (((NULL) IS TRUE) COLLATE NOCASE); -- 0ms;
SELECT ALL rt0.c2, 0.9730415361551883, SUM(TRIM(rt0.c0, rt0.c1)) FROM rt0, v0 WHERE (CASE WHEN (('௮')<(x'7d25')) THEN (0.2745151506149325 IN ('2071300714')) WHEN '' THEN x'' COLLATE BINARY WHEN ('-247379793' IN ('-1856719334')) THEN IFNULL(DISTINCT 1420126731, NULL) ELSE (- (0.9780093289006497)) END); -- 0ms;
SELECT DISTINCT (('-440024863') BETWEEN (GROUP_CONCAT(rt0.c0)) AND (((((NULL)OR(rt0.c0)))OR(v0.c0)))), ((v0.c0)>=(rt0.c0)) COLLATE BINARY, ((rt0.c1 COLLATE BINARY)+(((rt0.c0)-(rt0.c1)))) FROM v0, rt0 LIMIT 1818307329; -- 0ms;
SELECT DISTINCT ((json_array_length(v0.c0, rt0.c2)) NOT BETWEEN (((rt0.c0) IS FALSE)) AND (((rt0.c1)GLOB(rt0.c2)))), COUNT(((rt0.c2)IS(v0.c0))), (((((((((rt0.c2)AND(rt0.c2)))OR(rt0.c1)))OR('')))OR(rt0.c2)) IN (UPPER(NULL), ((rt0.c0) NOT BETWEEN (v0.c0) AND (rt0.c0)))) FROM rt0, v0 WHERE ((((((((('')OR(CAST('' AS TEXT))))AND(UPPER(DISTINCT ''))))AND(4.48279057E8)))AND((('') IS TRUE)))); -- 0ms;
SELECT DISTINCT NTH_VALUE(((((v0.c0) BETWEEN (x'') AND (1632284630)))<<(((rt0.c0)==(rt0.c1)))), CASE ((v0.c0) NOT BETWEEN (v0.c0) AND (rt0.c0))  WHEN DATE(rt0.c2, rt0.c2, rt0.c2) THEN ((rt0.c1) NOT BETWEEN ('-1482235436') AND (rt0.c2)) END) OVER () FROM rt0, v0;SELECT DISTINCT ((v0.c0) NOT BETWEEN (rt0.c2) AND (v0.c0)) COLLATE NOCASE FROM v0 WHERE (CASE x'' COLLATE BINARY  WHEN (~ ('')) THEN CAST(0.4649680608811848 AS NUMERIC) END) LIMIT 1295466109;SELECT DISTINCT GROUP_CONCAT(rt0.c0), ((CASE rt0.c0  WHEN rt0.c2 THEN rt0.c0 WHEN v0.c0 THEN rt0.c1 WHEN rt0.c2 THEN v0.c0 ELSE v0.c0 END)*(((rt0.c0)IS(rt0.c0)))), MIN(highlight('1388915813', rt0.c1, rt0.c2, rt0.c1), (((v0.c0))==((rt0.c1)))) FROM rt0, v0 NOT INDEXED;SELECT rt0.c0 FROM v0 FULL OUTER JOIN rt0 ON ((((((((((rt0.c1) IS TRUE))OR(CAST(v0.c0 AS INTEGER))))OR(((rt0.c0)<=(rt0.c1)))))OR(((rt0.c0) IS FALSE))))OR(((((v0.c0)OR('(A')))AND(v0.c0)))) LIMIT 597393220 OFFSET -361148747; -- 0ms;
SELECT DISTINCT (((rt0.c1 IN ())) NOT BETWEEN (CASE rt0.c1  WHEN rt0.c1 THEN v0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN rt0.c1 THEN v0.c0 ELSE rt0.c2 END) AND ((~ (rt0.c0)))) FROM v0, rt0 WHERE ((x'b7c0' IN ()) COLLATE RTRIM) LIMIT 378848519; -- 0ms;
SELECT DISTINCT ((CAST(rt0.c2 AS BLOB))GLOB(CASE WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c2 END)), COUNT(*), (('')|(rt0.c2)) COLLATE BINARY FROM v0, rt0 WHERE (((('-1000981181' IN ()))IS(((x'') NOT BETWEEN ('-1186447982') AND ('-2095604467'))))); -- 4ms;
SELECT DISTINCT rt0.c1, ((((rt0.c2 IN ())))>=((((rt0.c1)>=(x''))))), ROW_NUMBER() OVER (), ((((LOWER(DISTINCT rt0.c0))AND((~ (rt0.c1)))))AND(((v0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c1)))), (((TOTAL(v0.c0)))<((((rt0.c0) BETWEEN (v0.c0) AND (rt0.c0))))) FROM v0;SELECT (((rt0.c1, v0.c0, rt0.c0)) NOT BETWEEN (((+ (rt0.c1)), (+ (rt0.c1)), MIN(rt0.c2))) AND ((MIN(rt0.c2), ((((rt0.c2)AND(rt0.c1)))OR(9.97993704E8)), rt0.c0))) FROM v0 WHERE ((((NULL)) BETWEEN ((('.xaRG&iCh' IN ('2114839964', NULL)))) AND ((TYPEOF(NULL)))));SELECT DISTINCT TYPEOF(((((((((rt0.c0)AND(rt0.c2)))OR(v0.c0)))OR(v0.c0)))AND(rt0.c0))) FROM rt0 WHERE (((((((((((((NULL)AND((0.6662890969648742 IN ()))))OR(((((0xffffffffeac3fd41)OR(887182413)))AND(x'')))))AND(((0.45792438368217725) NOT BETWEEN (NULL) AND (NULL)))))OR((+ (NULL)))))OR((NULL IN ()))))OR((('-1612986628')OR(0.4867723928006531))))) GROUP BY '-1759656173';SELECT DISTINCT ((v0.c0) NOT BETWEEN ((rt0.c0 IN (rt0.c2))) AND (CASE rt0.c1  WHEN rt0.c1 THEN rt0.c0 ELSE v0.c0 END)) FROM v0 WHERE (((NULLIF('', 0.608027857639706)) NOT BETWEEN (HEX(DISTINCT '-^')) AND (0x60a4c0d6)));SELECT DISTINCT rt0.c0, CAST(json_array_length(rt0.c0, x'') AS REAL), AVG(((rt0.c0)>(rt0.c0))) OVER () FROM v0, rt0 GROUP BY (((v0.c0))!=((((('.Yh\G%D/붽', rt0.c0, rt0.c2))>=((rt0.c0, v0.c0, rt0.c1)))))), LTRIM(CASE WHEN v0.c0 THEN rt0.c2 END), ((((CAST(rt0.c2 AS NUMERIC))AND((NOT (rt0.c0)))))AND(((('7')) BETWEEN ((rt0.c1)) AND ((rt0.c2))))) HAVING (MAX(rt0.c1) IN ()); -- 1ms;
SELECT DISTINCT CASE x''  WHEN ((rt0.c2) ISNULL) THEN TIME(rt0.c2, rt0.c0, rt0.c0, rt0.c2, '613086324') ELSE CASE v0.c0  WHEN '' THEN rt0.c2 ELSE NULL END END FROM rt0;SELECT CASE (rt0.c0 IN ())  WHEN v0.c0 COLLATE RTRIM THEN CASE WHEN rt0.c1 THEN rt0.c2 ELSE rt0.c0 END WHEN rt0.c0 THEN (((rt0.c0)) NOT BETWEEN ((rt0.c2)) AND (('\n0g	UU4z('))) WHEN CAST(v0.c0 AS BLOB) THEN ((v0.c0) NOT BETWEEN (v0.c0) AND (rt0.c0)) ELSE CASE WHEN v0.c0 THEN rt0.c2 ELSE rt0.c0 END END FROM v0 CROSS JOIN rt0 ON (rt0.c1 IN (rt0.c0)) COLLATE RTRIM LIMIT -40895900; -- 0ms;
SELECT DISTINCT ((SUM(v0.c0)) IS TRUE) FROM v0, rt0; -- 0ms;
SELECT ALL AVG(UNLIKELY(DISTINCT rt0.c2)) FROM rt0 WHERE (((UNLIKELY('1597238696')) NOT BETWEEN (LIKELIHOOD(DISTINCT NULL, 0.4511377995976543)) AND ('<Zn+' COLLATE NOCASE))); -- 0ms;
SELECT ALL ((rtreenode(rt0.c0, rt0.c1))<>(((rt0.c2)OR(0.01090281389743153)))) FROM rt0, v0 WHERE (CASE WHEN 0.5527184034882684 THEN 'YvQx' ELSE x'33f2' END COLLATE RTRIM); -- 0ms;
SELECT DISTINCT CASE WHEN CASE rt0.c0  WHEN rt0.c0 THEN rt0.c0 END THEN (((NULL))=((rt0.c2))) WHEN ((rt0.c2)||(rt0.c0)) THEN SUM(v0.c0) WHEN ((rt0.c0) IS TRUE) THEN (- (rt0.c2)) ELSE (NOT (rt0.c0)) END FROM rt0, v0; -- 0ms;
SELECT DISTINCT CAST((((rt0.c2, rt0.c0, rt0.c0)) BETWEEN ((rt0.c2, rt0.c0, v0.c0)) AND ((rt0.c2, 0x7e0de59c, rt0.c0))) AS TEXT) FROM rt0, v0 WHERE (((((((((x'')OR('-1709070136')))OR(x'')))OR(x'ecc6' COLLATE RTRIM)))AND((((0Xfffffffff14148af))>(('Mz')))))); -- 0ms;
SELECT ((CAST(NULL AS NUMERIC)) NOT BETWEEN ((rt0.c1 IN ())) AND (CAST(rt0.c1 AS INTEGER))) FROM rt0, v0 WHERE ((((x'')>(NULL)) IN ())) ORDER BY ((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c1)) COLLATE NOCASE; -- 0ms;
SELECT ALL NULL, COUNT(((((rt0.c0)AND(rt0.c2)))AND(v0.c0))) OVER (), FIRST_VALUE((((v0.c0) BETWEEN (rt0.c1) AND (rt0.c2)) IN (((((rt0.c1)OR(NULL)))AND(v0.c0)), ((rt0.c0) NOTNULL)))) OVER ( GROUPS (((rt0.c1)) NOT BETWEEN ((((rt0.c2)*(v0.c0)))) AND ((((rt0.c1) ISNULL)))) PRECEDING), CAST(CAST(rt0.c0 AS REAL) AS INTEGER), ((TOTAL_CHANGES()) NOT BETWEEN (v0.c0) AND (CASE rt0.c2  WHEN rt0.c0 THEN rt0.c0 END)) FROM rt0, v0;SELECT DISTINCT v0.c0, v0.c0, (+ (json(v0.c0))) FROM v0; -- 0ms;
SELECT TOTAL(((rt0.c0) NOTNULL)), CAST(MIN(rt0.c1) AS TEXT), ROW_NUMBER() OVER () FROM v0, rt0 GROUP BY CASE CASE WHEN v0.c0 THEN rt0.c1 ELSE rt0.c2 END  WHEN ((v0.c0) NOT NULL) THEN CASE rt0.c0  WHEN 1871767681 THEN rt0.c0 END WHEN CAST(v0.c0 AS INTEGER) THEN (rt0.c0 IN ()) WHEN 1162291536 THEN (((v0.c0))>=((rt0.c1))) END HAVING COUNT(*); -- 0ms;
SELECT DISTINCT ((((rt0.c0)OR(v0.c0)))OR(rt0.c1)) COLLATE BINARY FROM rt0, v0; -- 0ms;
SELECT DISTINCT rt0.c0 FROM rt0; -- 0ms;
SELECT ALL ((CASE WHEN x'' THEN v0.c0 ELSE rt0.c2 END) NOT NULL) FROM v0;SELECT ALL CUME_DIST() OVER () FROM rt0; -- 0ms;
SELECT ALL highlight(((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c1)), ((rt0.c0)IS NOT(NULL)), ((rt0.c0) IS FALSE), CASE WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c2 THEN v0.c0 WHEN 0.8651531830414576 THEN rt0.c1 END) FROM v0 WHERE (((((x'd147') IS TRUE)) NOTNULL));SELECT MIN(NULLIF(rt0.c0, rt0.c1)) FROM rt0, v0; -- 0ms;
SELECT ((HEX(DISTINCT v0.c0))AND(CAST(v0.c0 AS REAL))) FROM rt0, v0; -- 0ms;
SELECT ((NULL) IS TRUE) FROM rt0 WHERE (CASE WHEN ((-1.076383916E9)LIKE(0.02911586942141664)) THEN NULL COLLATE NOCASE WHEN (('t>') NOT BETWEEN (NULL) AND ('795689959')) THEN (('-1806842174')*(0X3c960d8b)) WHEN (('!b')LIKE(0.06813033753436581)) THEN ((-2.082744198E9)&(NULL)) END); -- 0ms;
SELECT DISTINCT ((json_array_length(v0.c0, rt0.c0)) BETWEEN ((((rt0.c2))<=((rt0.c0)))) AND (TOTAL(v0.c0))), CASE ((rt0.c1) BETWEEN (rt0.c1) AND (v0.c0))  WHEN ((rt0.c2) NOTNULL) THEN ((rt0.c0)IS(x'')) ELSE CAST(rt0.c2 AS BLOB) END, COUNT(rt0.c1), (((rt0.c1, v0.c0, rt0.c1)) NOT BETWEEN ((NULL, CAST(rt0.c2 AS INTEGER), ((v0.c0)+(v0.c0)))) AND ((CAST(rt0.c0 AS REAL), CASE v0.c0  WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c2 END, ((((((((rt0.c2)AND(rt0.c0)))OR(NULL)))AND(rt0.c0)))AND(rt0.c0))))), PERCENT_RANK() OVER () FROM v0, rt0 NOT INDEXED WHERE ((- ('1732613567')) COLLATE BINARY) ORDER BY v0.c0 ASC;SELECT DISTINCT CAST(COUNT(*) AS BLOB), AVG(((rt0.c2) NOT BETWEEN (rt0.c1) AND (v0.c0))), (~ ((rt0.c2 IN ()))), '&*!E', ((v0.c0 COLLATE RTRIM)|(((v0.c0) BETWEEN (rt0.c2) AND ('-103668199')))) FROM rt0 WHERE (((((('Gz-e')) BETWEEN (('-1041972989')) AND ((x'e3af'))))*('')));SELECT DISTINCT 0.47020584448896086 FROM v0, rt0 WHERE ((((~ (0.08804920445796416)))IS(0.16321101085585432 COLLATE BINARY))); -- 0ms;
SELECT ((((((rt0.c1)AND(rt0.c0)))AND(rt0.c1))) BETWEEN (((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c2))) AND (((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c2)))) FROM rt0; -- 1ms;
SELECT CASE ((rt0.c2) NOT BETWEEN (rt0.c2) AND (v0.c0))  WHEN (+ (rt0.c0)) THEN NULLIF(DISTINCT rt0.c1, rt0.c0) ELSE COUNT(*) END, CAST(((rt0.c1)GLOB(rt0.c0)) AS INTEGER), ((GROUP_CONCAT(rt0.c0))=((((v0.c0, NULL, v0.c0)) BETWEEN ((v0.c0, NULL, v0.c0)) AND ((rt0.c2, rt0.c1, rt0.c2))))) FROM v0;SELECT ALL NULL FROM v0; -- 0ms;
SELECT (((rt0.c0)) NOT BETWEEN (((+ (v0.c0)))) AND ((rt0.c0 COLLATE RTRIM))), TOTAL(((rt0.c0) IS TRUE)), rt0.c2 FROM v0;SELECT DISTINCT GROUP_CONCAT((NOT (rt0.c0)) COLLATE NOCASE) OVER () FROM rt0; -- 0ms;
SELECT ALL LAG(json_type(((v0.c0)IS NOT(v0.c0))), ((((((v0.c0)OR(v0.c0)))OR(v0.c0)))LIKE(CAST(x'' AS INTEGER))), ((((v0.c0 IN ()), ((v0.c0)+(v0.c0)), ((0xffffffff88a2f6e1) IS TRUE)))>=((v0.c0, ((v0.c0)AND(v0.c0)), ((v0.c0) NOT NULL))))) OVER ( ORDER BY 0xffffffff90a50f53  NULLS FIRST) FROM v0 WHERE ((LIKELY(DISTINCT 'hd') IN (((0X799cd26a) NOT BETWEEN (0.4482135895687519) AND ('1690359616')), ((NULL) NOT NULL)))); -- 0ms;
SELECT GROUP_CONCAT(((v0.c0) ISNULL)) FROM v0 WHERE ((~ (((0.513122526207721) IS TRUE)))); -- 0ms;
SELECT DISTINCT ((COUNT(rt0.c2)) NOT BETWEEN ((('1396256920') NOT BETWEEN (v0.c0) AND (rt0.c1))) AND (MAX(v0.c0))) FROM rt0, v0 WHERE ((((((('')/(x'7f9c')))OR((((NULL)) BETWEEN ((NULL)) AND (('-482416366'))))))OR((((x'', NULL, x'')) NOT BETWEEN ((0.027527179470507757, 'aG攈	', '0.2754561797610833')) AND ((x'75be', 0.3779992491016454, '')))))); -- 0ms;
SELECT DISTINCT ((rt0.c1)IS NOT(rt0.c0)) COLLATE RTRIM FROM v0;SELECT DISTINCT v0.c0, (((((0.603267606516045) NOT BETWEEN (rt0.c2) AND (rt0.c2)), ((rt0.c0) NOT NULL), rt0.c1 COLLATE RTRIM))<((CAST(rt0.c0 AS INTEGER), 0.16800960763266604, x''))), (((('-90688984')IS(v0.c0)))IS(rt0.c0)) FROM rt0, v0 WHERE (CASE (('') NOT BETWEEN (x'') AND (0.31241731789107974))  WHEN (('-961795495') ISNULL) THEN ((0.3275444991148999)%(NULL)) END); -- 0ms;
SELECT NULL FROM v0 ORDER BY ((LENGTH(v0.c0)) IS TRUE) ASC  NULLS FIRST; -- 0ms;
SELECT ALL CASE COUNT(*)  WHEN ((NULL)<<(NULL)) THEN rt0.c1 COLLATE RTRIM END FROM v0 NOT INDEXED, rt0 WHERE (0.45181710276133824 COLLATE NOCASE) ORDER BY CAST(CASE v0.c0  WHEN v0.c0 THEN '1295466109' WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 END AS NUMERIC); -- 0ms;
SELECT ((((((rt0.c2)AND(rt0.c0)))OR(rt0.c2))) BETWEEN (((rt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c1))) AND (HEX(NULL))) FROM v0 LEFT OUTER JOIN rt0 ON ((CAST(v0.c0 AS BLOB))||(rt0.c2)) WHERE (((x'')>=('mYQ.')) COLLATE RTRIM) ORDER BY ((((rt0.c2)/(rt0.c0))) NOT NULL)  NULLS LAST, ((v0.c0 COLLATE NOCASE)<<((NOT (rt0.c0)))) DESC  NULLS LAST; -- 0ms;
SELECT DISTINCT (((json_remove(rt0.c1, rt0.c1)))<=((((rt0.c2)OR(rt0.c2))))), CASE WHEN ((rt0.c1) NOT BETWEEN (rt0.c1) AND (v0.c0)) THEN ((rt0.c0) BETWEEN (rt0.c2) AND (rt0.c1)) END, (((rt0.c1)) BETWEEN ((((rt0.c0)<>(NULL)))) AND ((((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c0))))) FROM v0, rt0 LIMIT -1262304248;SELECT ALL AVG(CAST(rt0.c2 AS NUMERIC)), ((((rt0.c1) IS TRUE))||(((rt0.c2)||(rt0.c0)))), CASE WHEN ((((((((rt0.c0)OR(v0.c0)))OR(rt0.c0)))OR('1954898965')))AND(rt0.c1)) THEN (((rt0.c1)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))) WHEN SUM(rt0.c1) THEN (v0.c0 IN ()) WHEN CASE WHEN rt0.c2 THEN v0.c0 ELSE rt0.c1 END THEN ((rt0.c2)GLOB(rt0.c0)) ELSE CAST(v0.c0 AS REAL) END FROM rt0 LIMIT -1178121816 OFFSET 1627797278;SELECT DISTINCT '-247379793' FROM v0, rt0 WHERE ((((((((((((((((x'72ef', '2072598266', '-393938561')) NOT BETWEEN ((0.005661299494571392, NULL, '0.09976982473451224')) AND (('E	', 0Xffffffffa1ea0bee, 0X473d9c07))))OR('b|')))AND(((0x7bda60ee)<('')))))AND(CAST(959999081 AS BLOB))))OR(((x'bb0f')IS NOT('')))))AND((((('0.8942763588968383')AND(x'1ee9')))AND(x'')))))OR(CASE WHEN 'dw?' THEN NULL ELSE NULL END))); -- 0ms;
SELECT ALL GROUP_CONCAT((v0.c0 IN ())) OVER (), ((COUNT(*))+((((v0.c0, v0.c0, rt0.c0))=((rt0.c1, v0.c0, rt0.c0))))), (((((((((NOT (rt0.c2)))AND(((((((((v0.c0)AND(rt0.c0)))OR(v0.c0)))AND('ꖐ6')))AND(v0.c0)))))OR((~ (rt0.c0)))))AND(((v0.c0) NOTNULL))))AND(CAST(v0.c0 AS REAL))) FROM rt0;SELECT NULL, NTH_VALUE(CASE WHEN rt0.c0 THEN v0.c0 ELSE NULL END COLLATE NOCASE, CAST(COALESCE(v0.c0, rt0.c1) AS REAL)) OVER ( PARTITION BY (((rt0.c0 IN ()))IS NOT(((v0.c0)<>(rt0.c1)))), ((((((rt0.c0, rt0.c2, rt0.c0))<=((rt0.c0, rt0.c2, rt0.c0))), TRIM(DISTINCT rt0.c0, rt0.c2), rt0.c0))!=((((rt0.c1) NOT BETWEEN (rt0.c1) AND (v0.c0)), json_array_length(rt0.c1), CAST(rt0.c1 AS TEXT)))), ((NULL)>(((((rt0.c1)OR(rt0.c2)))AND(rt0.c2)))), (((NULL) NOT NULL) IN ()), v0.c0, '772575529'), (((rt0.c0)) BETWEEN (((NOT (rt0.c2)))) AND ((CAST(rt0.c2 AS INTEGER)))) FROM v0, rt0 GROUP BY (+ (((rt0.c0)AND('300406422'))));SELECT DISTINCT (NOT (json_array_length(rt0.c0, rt0.c2))), rt0.c0, ((rt0.c1)>(((rt0.c0) BETWEEN (rt0.c1) AND (0.08082943368286022)))) FROM v0;SELECT DISTINCT v0.c0 FROM v0, rt0 WHERE (((CAST('Gz-e' AS TEXT))<(CASE 0Xfffffffff71de300  WHEN '岄0Am>' THEN NULL ELSE NULL END))); -- 0ms;
SELECT ALL TOTAL(((rt0.c1) IS FALSE)) OVER () FROM v0, rt0; -- 1ms;
SELECT ALL ((SUM(v0.c0))IS(TOTAL(v0.c0))) FROM v0, rt0 WHERE (CASE CAST(0.014991453291710255 AS INTEGER)  WHEN CASE WHEN 0.5278572026423087 THEN x'e09b' WHEN x'01f1' THEN '' WHEN '' THEN 2028743336 END THEN CAST(0.7634278792274929 AS BLOB) END); -- 0ms;
SELECT ALL HEX(((rt0.c1)IS(rt0.c2))), CAST(('891861201' IN ()) AS INTEGER), CAST(((rt0.c2) BETWEEN (rt0.c0) AND (x'')) AS BLOB) FROM v0, rt0; -- 0ms;
SELECT DISTINCT v0.c0, TOTAL_CHANGES(), rt0.c2, ((NULL) ISNULL), ((v0.c0 COLLATE RTRIM) IS FALSE) FROM v0, rt0; -- 0ms;
SELECT DISTINCT (((rt0.c1 IN ())) BETWEEN (QUOTE(rt0.c2)) AND (((rt0.c0)<(rt0.c0)))) FROM rt0 WHERE ((((- (0.25706505705230387))) NOT BETWEEN ((- (''))) AND (((('')) BETWEEN ((x'ad8194a8')) AND (('1143823893')))))); -- 0ms;
SELECT (~ (CASE WHEN rt0.c2 THEN rt0.c0 WHEN v0.c0 THEN rt0.c0 WHEN rt0.c2 THEN v0.c0 WHEN rt0.c0 THEN v0.c0 WHEN rt0.c1 THEN rt0.c1 END)) FROM rt0, v0; -- 0ms;
SELECT DISTINCT ((((v0.c0) BETWEEN (rt0.c0) AND (rt0.c1)))&((~ (rt0.c2)))) FROM rt0, v0 WHERE (((((NULL) NOTNULL)) IS FALSE)) GROUP BY ((((((((((((((v0.c0)OR(v0.c0)))OR(v0.c0)))OR(rt0.c1)))AND(x'')))OR(rt0.c2)))OR(v0.c0))) ISNULL), ((((rt0.c0) IS TRUE)) BETWEEN (((rt0.c2) BETWEEN (0.15846634989569464) AND (rt0.c0))) AND (rt0.c2)), (CASE WHEN rt0.c1 THEN NULL END IN ()) HAVING GROUP_CONCAT(((v0.c0) ISNULL)); -- 0ms;
SELECT ALL rt0.c1 FROM v0 WHERE (NULL);SELECT DISTINCT '' FROM v0 WHERE (x'') GROUP BY rt0.c2;SELECT rt0.c2 FROM rt0, v0 WHERE (((CASE NULL  WHEN 0.71405715423129 THEN 0.32176679039669653 END)IS NOT(CAST(0xffffffffbf040c00 AS REAL)))); -- 0ms;
SELECT (((NOT ('-259653892'))) NOTNULL), CASE WHEN ((rt0.c0)AND(rt0.c0)) THEN 0Xfffffffffd3ea1d4 END, (NOT (((rt0.c2) NOT BETWEEN (v0.c0) AND (rt0.c2)))) FROM rt0, v0; -- 0ms;
SELECT ROW_NUMBER() OVER () FROM v0 WHERE ((- (6.71829652E8)) COLLATE BINARY); -- 0ms;
SELECT UNLIKELY(DISTINCT ((rt0.c0)>=(rt0.c2))) FROM v0 WHERE (LENGTH(((((x'')OR(NULL)))OR(x'')))) LIMIT -876902320 OFFSET 1624968233;SELECT DISTINCT (('0.5775446045550073') IS FALSE), ((CASE WHEN rt0.c2 THEN rt0.c2 ELSE rt0.c2 END)LIKE((((x''))==((rt0.c1))))), CAST(((v0.c0)<(v0.c0)) AS REAL) FROM v0, rt0 WHERE (UNLIKELY(((0.666475532270011)*(NULL)))) LIMIT -1713125258 OFFSET 613086324; -- 0ms;
SELECT DISTINCT CAST(COUNT(*) AS BLOB) FROM v0, rt0; -- 0ms;
SELECT MAX(TOTAL_CHANGES() COLLATE NOCASE) FROM rt0 WHERE (((('474975087')OR(x'')) IN ())) GROUP BY CAST(CASE WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c0 END AS NUMERIC), CASE WHEN '553487731' THEN (v0.c0 IN ()) END, CAST(CAST(v0.c0 AS NUMERIC) AS BLOB);SELECT DISTINCT (NOT (v0.c0 COLLATE RTRIM)) FROM v0, rt0 LIMIT -2002585887; -- 4ms;
SELECT 'кX1' FROM rt0, v0 WHERE (NULL); -- 0ms;
SELECT DISTINCT ((1652029949) BETWEEN (((rt0.c0) BETWEEN (rt0.c0) AND (rt0.c2))) AND (TRIM(DISTINCT rt0.c2))) FROM v0 WHERE (((0.3137756861439639 COLLATE BINARY) IS FALSE));SELECT ALL (COUNT(rt0.c1) IN ((NOT (rt0.c2)))) FROM v0 WHERE (NULL);SELECT DISTINCT 0.03413263804326383, rt0.c1, AVG(((('M3cWw4g∠'))<=((NULL)))), ((((rt0.c2)<>(rt0.c0)))%(((v0.c0) NOTNULL))), (((MAX(rt0.c2)))>=(((~ ('-1186308669'))))) FROM rt0, v0; -- 0ms;
SELECT DISTINCT ((((((v0.c0)AND(rt0.c0)))OR(rt0.c0)))-(((v0.c0)/(rt0.c0)))), COUNT('|L'), (((((((rt0.c2)AND(-9.61795495E8)))OR(rt0.c0))))!=((CAST(v0.c0 AS INTEGER)))) FROM rt0 WHERE ((((0x14199f26)IS NOT('k')) IN ()));SELECT DISTINCT (~ (rt0.c0)) COLLATE RTRIM FROM rt0 WHERE ((((x'58d4')LIKE('1095731324')) IN ())) GROUP BY CAST(((v0.c0) BETWEEN (rt0.c0) AND (rt0.c2)) AS INTEGER) HAVING ((v0.c0 COLLATE BINARY)LIKE(DATETIME(rt0.c2, 'itja-l羚C', v0.c0, x'cbdb', rt0.c0)));SELECT DISTINCT ((rt0.c2) BETWEEN ((~ (rt0.c1))) AND (((((v0.c0)AND(v0.c0)))OR(rt0.c0)))), ((('k|X~q旞j+g'))>((UNLIKELY(x'440f')))), ((((rt0.c0) IS FALSE))!=(TOTAL(rt0.c1))) FROM v0, rt0; -- 0ms;
SELECT DISTINCT rt0.c2 FROM v0, rt0 WHERE ((+ (NULL COLLATE NOCASE))); -- 0ms;
SELECT ALL (((rt0.c0, 0.08790512921788818, rt0.c0, x'', v0.c0)) NOT BETWEEN ((json_remove(v0.c0, rt0.c2), ('1510367888' IN (rt0.c2)), ((v0.c0) NOT NULL), JULIANDAY('-774730885', rt0.c2, 0xffffffffb64a3cb8, v0.c0, v0.c0), v0.c0 COLLATE NOCASE)) AND ((SUM(v0.c0), (((rt0.c1, rt0.c0, v0.c0))>((0Xffffffffcc05022c, NULL, v0.c0))), CASE WHEN rt0.c0 THEN v0.c0 END, (((rt0.c0)) BETWEEN ((rt0.c2)) AND ((v0.c0))), MIN(v0.c0)))), LEAD(CASE WHEN ((rt0.c1)%(rt0.c2)) THEN ((rt0.c1)/(rt0.c1)) WHEN INSTR(rt0.c2, '1851877312') THEN CAST(rt0.c2 AS REAL) WHEN x'2a95' THEN CASE rt0.c2  WHEN rt0.c0 THEN NULL ELSE ']k' END END, ((((rt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c0)))<>(((((rt0.c2)OR(rt0.c1)))AND(rt0.c1)))), ((((rt0.c2)*(rt0.c1))) BETWEEN (rt0.c0 COLLATE RTRIM) AND (CASE rt0.c2  WHEN rt0.c2 THEN rt0.c1 END))) OVER ( ORDER BY CASE WHEN ((v0.c0) NOTNULL) THEN v0.c0 END ASC  NULLS FIRST), json_insert(v0.c0 COLLATE BINARY, NULL, rt0.c2 COLLATE BINARY) FROM rt0 ORDER BY (NOT ((rt0.c2 IN (rt0.c1)))) DESC, CASE CAST(rt0.c0 AS BLOB)  WHEN (((rt0.c0, rt0.c1, 0.2216963630056017, rt0.c1, rt0.c2))<>((rt0.c0, rt0.c0, '!B', rt0.c0, rt0.c0))) THEN CAST(v0.c0 AS REAL) END ASC;SELECT DISTINCT UPPER(DISTINCT ((rt0.c0)AND(rt0.c0))) FROM rt0 WHERE (((((x'')<>('-513550192')))+(((((NULL)AND(x'')))OR('t獙'))))); -- 0ms;
SELECT DISTINCT '', 951606470, GROUP_CONCAT(((((((((rt0.c2)AND(rt0.c0)))OR(rt0.c0)))AND(rt0.c2)))AND(rt0.c2))) OVER () FROM v0, rt0 WHERE (((((NOT (0X61e97a0d))))>=(((('*畛^')|(x'01559625')))))); -- 0ms;
SELECT CASE WHEN rt0.c2 COLLATE RTRIM THEN TYPEOF(DISTINCT rt0.c0) ELSE (rt0.c0 IN ()) END FROM v0, rt0 WHERE (CASE (((x'2409', NULL, 0.6346003720702675))<((x'', 1334161316, '2029724266')))  WHEN TYPEOF(NULL) THEN (((('-1439303802')OR(779668936)))AND(x'')) ELSE ('箸䮕x' IN ()) END); -- 0ms;
SELECT CASE WHEN ((v0.c0)GLOB(rt0.c1)) THEN MIN(rt0.c0) WHEN (((rt0.c0))<=((0.9845704478180123))) THEN UNLIKELY(rt0.c0) WHEN CASE WHEN rt0.c1 THEN v0.c0 ELSE v0.c0 END THEN COUNT(v0.c0) END FROM v0 LIMIT 1563439288 OFFSET 531824161;SELECT DISTINCT (((rt0.c2)) NOT BETWEEN (((+ (rt0.c2)))) AND ((CAST(v0.c0 AS INTEGER)))) FROM v0, rt0; -- 0ms;
SELECT rt0.c0 FROM rt0 WHERE ((DATETIME(NULL, '}bz\n', '') IN ())); -- 0ms;
SELECT DISTINCT SUM(LIKELIHOOD(rt0.c1, 0.5151909228825412)) OVER (), AVG(((rt0.c0)+(rt0.c2))) OVER (), LAST_VALUE(CAST((v0.c0 IN ()) AS NUMERIC)) OVER () FROM v0 WHERE (((((0Xa904c2b)IS NOT(x''))) BETWEEN (CASE 'aGb-78Z'  WHEN '0~[aG8' THEN '-155214100' ELSE 0x69116758 END) AND (0.7588656611150353)));