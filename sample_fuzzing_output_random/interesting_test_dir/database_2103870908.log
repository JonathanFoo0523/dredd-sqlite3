-- Time: 2024/06/07 09:27:02
-- Database: database8
-- Database version: 3.40.0
-- seed value: 2103870908
PRAGMA cache_size = 50000; -- 9ms;
PRAGMA temp_store=MEMORY; -- 0ms;
PRAGMA synchronous=off; -- 0ms;
CREATE TABLE IF NOT EXISTS t0 (c0 INT ); -- 0ms;
INSERT OR ROLLBACK INTO t0(c0) VALUES (1411702313); -- 0ms;
INSERT OR IGNORE INTO t0 VALUES (1.411702313E9); -- 0ms;
ANALYZE temp; -- 1ms;
INSERT OR ABORT INTO t0 VALUES (1.411702313E9); -- 0ms;
INSERT OR IGNORE INTO t0 VALUES (NULL); -- 0ms;
PRAGMA main.threads = 6250674823345857475; -- 0ms;
INSERT OR FAIL INTO t0 VALUES (NULL); -- 1ms;
PRAGMA temp.journal_mode; -- 0ms;
PRAGMA mmap_size; -- 0ms;
INSERT OR FAIL INTO t0(c0) VALUES (x'7f48'); -- 0ms;
PRAGMA cache_spill; -- 0ms;
INSERT OR FAIL INTO t0 VALUES (NULL); -- 0ms;
PRAGMA main.shrink_memory; -- 0ms;
PRAGMA shrink_memory; -- 0ms;
INSERT OR ABORT INTO t0 VALUES (NULL); -- 0ms;
ANALYZE temp; -- 0ms;
INSERT OR REPLACE INTO t0 VALUES (0.2195349075696692); -- 0ms;
END; -- 0ms;
INSERT OR IGNORE INTO t0(c0) VALUES (NULL), ('1411702313'), (NULL), (x''), (0.3404932072878716); -- 0ms;
PRAGMA temp.cache_size = 5447442361345939100; -- 0ms;
DELETE FROM t0; -- 1ms;
UPDATE OR IGNORE t0 SET c0=x'' WHERE t0.c0; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT OR FAIL INTO t0(c0) VALUES (0.3319174727227272), (x''), (x'1d902b31'); -- 0ms;
INSERT OR FAIL INTO t0(c0) VALUES (0x5424de29), (x'0eca'), (''); -- 0ms;
UPDATE OR IGNORE t0 SET (c0, c0)=(NULL, '1411702313') WHERE CAST(((t0.c0)<<(t0.c0)) AS NUMERIC); -- 0ms;
COMMIT TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO t0(c0) VALUES (0.2195349075696692), (NULL), (0.6298206639823256), (NULL), ('655053488'); -- 0ms;
INSERT OR IGNORE INTO t0(c0) VALUES (0.042422763715466494), (x''), ('655053488'); -- 1ms;
BEGIN EXCLUSIVE TRANSACTION; -- 1ms;
INSERT OR IGNORE INTO t0 VALUES (0.08828187798178488); -- 0ms;
UPDATE OR IGNORE t0 SET (c0)=(x'') WHERE (((t0.c0)==(t0.c0)) IN ()); -- 2ms;
INSERT OR ROLLBACK INTO t0(c0) VALUES ('') ON CONFLICT DO NOTHING; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
ANALYZE main; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
REINDEX; -- 0ms;
INSERT OR IGNORE INTO t0 VALUES (0X270b52b0), ('-28734425'), (x''); -- 0ms;
CREATE INDEX IF NOT EXISTS i20 ON t0((~ (((c0) BETWEEN (c0) AND (c0)))) COLLATE BINARY DESC) WHERE ((((((((c0)AND(c0)))OR(c0)))AND(((c0)IS NOT(c0)))))AND(TRIM(c0))); -- 1ms;
INSERT OR IGNORE INTO t0(c0) VALUES (0.1623577541937501); -- 0ms;
PRAGMA mmap_size; -- 0ms;
UPDATE t0 SET (c0)=(0.5584640073851973) WHERE (((+ ('''?<('))) NOT BETWEEN ((((t0.c0)) NOT BETWEEN ((t0.c0)) AND ((t0.c0)))) AND (0.2751021267730511)); -- 0ms;
INSERT OR IGNORE INTO t0(c0) VALUES (NULL); -- 1ms;
REINDEX; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
UPDATE OR IGNORE t0 SET (c0, c0, c0)=(x'e683', NULL, x'') WHERE t0.c0; -- 0ms;
INSERT OR FAIL INTO t0 VALUES (1411702313); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO t0(c0) VALUES (x'2451'); -- 0ms;
INSERT OR ROLLBACK INTO t0(c0) VALUES (0x5424de29); -- 0ms;
CREATE VIRTUAL TABLE rt64 USING rtree_i32(c0, c1, c2); -- 1ms;
INSERT OR IGNORE INTO rt64(c2, c0) VALUES (0.5218462020675558, x''), (NULL, x''), (x'dd09', ''); -- 0ms;
INSERT OR IGNORE INTO t0 VALUES (x''), (NULL), (NULL); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
ANALYZE t0; -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
UPDATE OR IGNORE rt64 SET c2=0.716679848380277, c1=x'83eb', c0=6.55053488E8; -- 0ms;
ROLLBACK TRANSACTION; -- 1ms;
ANALYZE; -- 0ms;
UPDATE OR IGNORE rt64 SET (c2)=(NULL); -- 0ms;
PRAGMA wal_autocheckpoint = 5410505026383697624; -- 0ms;
INSERT OR IGNORE INTO rt64(c2, c0) VALUES ('-1945314309', NULL), (NULL, 1.411702313E9), (0.1276794630664525, NULL); -- 0ms;
UPDATE OR IGNORE rt64 SET (c2)=(0.042422763715466494); -- 0ms;
CREATE TRIGGER IF NOT EXISTS tr2 BEFORE DELETE ON t0 FOR EACH ROW  WHEN CASE WHEN ((t0.c0) BETWEEN (t0.c0) AND (t0.c0)) THEN (+ (t0.c0)) END BEGIN UPDATE rt64 SET (c2)=(NULL);END; -- 0ms;
PRAGMA checkpoint_fullfsync = false; -- 0ms;
VACUUM temp; -- 0ms;
END; -- 0ms;
PRAGMA temp.checkpoint_fullfsync = true; -- 0ms;
INSERT OR REPLACE INTO t0(c0) VALUES (x''); -- 1ms;
INSERT OR IGNORE INTO rt64(c1, c2) VALUES (-2.8734425E7, x'8e92'), ('', ''), (x'', NULL); -- 0ms;
ANALYZE i20; -- 0ms;
INSERT OR IGNORE INTO rt64(c1) VALUES (NULL); -- 1ms;
COMMIT TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO t0(c0) VALUES ('-303372844'); -- 0ms;
PRAGMA recursive_triggers; -- 0ms;
COMMIT TRANSACTION; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
SELECT DISTINCT rt64.c0 FROM rt64, t0 LIMIT 1862666164; -- 0ms;
SELECT DISTINCT ((rt64.c0) BETWEEN (t0.c0) AND (rt64.c1)) COLLATE BINARY FROM rt64 GROUP BY ((((((rt64.c2) NOT BETWEEN (rt64.c1) AND (t0.c0)))AND(CASE t0.c0  WHEN t0.c0 THEN t0.c0 ELSE rt64.c1 END)))OR(rt64.c1 COLLATE BINARY)) HAVING ((MIN(rt64.c0))>=(((t0.c0)==(rt64.c2))));SELECT ALL ((((CASE WHEN rt64.c0 THEN rt64.c0 END)OR(CAST(rt64.c2 AS TEXT))))AND(CASE WHEN rt64.c0 THEN rt64.c1 END)) FROM t0, rt64 WHERE (((((((518006380) ISNULL))AND(((x'')<<('72')))))AND((('>6>')||(0.471020440401274))))); -- 0ms;
SELECT DISTINCT ((CASE rt64.c1  WHEN rt64.c2 THEN rt64.c2 END) BETWEEN (((rt64.c1)GLOB(rt64.c1))) AND ((rt64.c1 IN ()))), (((rt64.c2)GLOB('-303372844')) IN ()), rt64.c2 FROM t0, rt64; -- 0ms;
SELECT DISTINCT rt64.c2 FROM rt64, t0; -- 0ms;
SELECT DISTINCT ROW_NUMBER() OVER (), (+ (t0.c0 COLLATE BINARY)), CAST(rt64.c2 AS INTEGER) FROM rt64;SELECT DISTINCT ((((((x'') NOT BETWEEN (NULL) AND (t0.c0)))AND(CASE rt64.c0  WHEN rt64.c1 THEN rt64.c1 WHEN '' THEN rt64.c2 WHEN t0.c0 THEN x'' ELSE t0.c0 END)))OR(((t0.c0)!=(rt64.c0)))) FROM rt64, t0; -- 0ms;
SELECT ALL ((((((t0.c0)OR(rt64.c2)))AND(rt64.c2))) ISNULL) FROM t0 WHERE (UNLIKELY(DISTINCT (((0.13801233872789997, '1411702313', '-28734425')) BETWEEN ((0.31585034063903406, '|2', x'3257')) AND (('0.5584640073851973', NULL, 0.3339605219494802)))));SELECT DISTINCT ((- (rt64.c0)) IN ()) FROM rt64 WHERE (CASE WHEN '0.3339605219494802' THEN NULL ELSE '>6>' END COLLATE RTRIM); -- 0ms;
SELECT DISTINCT CASE ((NULL) BETWEEN ('_z') AND (rt64.c0))  WHEN t0.c0 COLLATE RTRIM THEN ((rt64.c2)LIKE(rt64.c1)) ELSE STRFTIME(t0.c0, 0.3061212240117639, rt64.c0) END, (((rt64.c0 IN ()))IS NOT(((x'133a')IS NOT(t0.c0)))), CAST(((t0.c0) ISNULL) AS NUMERIC) FROM t0;SELECT DISTINCT ((((((rt64.c0) NOT BETWEEN (rt64.c0) AND (rt64.c1)))AND(t0.c0 COLLATE BINARY)))AND(SUM(rt64.c2))), CASE WHEN ((rt64.c0)<<(rt64.c0)) THEN t0.c0 COLLATE NOCASE END, NULL FROM t0 WHERE ((((0.618422601779241) BETWEEN ('-1945314309') AND (x'41d5')) IN (((NULL) IS FALSE))));SELECT CASE WHEN t0.c0 THEN rt64.c1 WHEN rt64.c1 THEN rt64.c2 WHEN rt64.c1 THEN rt64.c2 WHEN rt64.c2 THEN rt64.c1 WHEN t0.c0 THEN rt64.c1 END COLLATE BINARY FROM t0 WHERE (CAST((((x''))<=((x''))) AS TEXT));SELECT ALL CASE WHEN ((rt64.c1) IS TRUE) THEN CAST(rt64.c1 AS BLOB) ELSE rt64.c2 COLLATE RTRIM END, LAG((((NULL)) BETWEEN ((TRIM(t0.c0, t0.c0))) AND ((((((t0.c0)AND(t0.c0)))AND(t0.c0))))), ((((t0.c0) ISNULL)) NOTNULL), CASE WHEN t0.c0 THEN 0.47613516864415484 ELSE ((t0.c0)/(t0.c0)) END) OVER (), ((((((((((rt64.c2)AND(t0.c0)))AND(rt64.c0)))AND(t0.c0)))OR(rt64.c1))) ISNULL) FROM t0 WHERE (LOWER(DISTINCT (((1000763220)) BETWEEN (('-64864826')) AND ((x''))))) GROUP BY (~ ((~ (rt64.c1)))) HAVING (((rt64.c2)) NOT BETWEEN (('')) AND (((- (rt64.c2)))));SELECT ALL ((rt64.c0 IN ()) IN ()) FROM t0 ORDER BY (((((((0.0332592374473516)) BETWEEN ((rt64.c2)) AND ((rt64.c2))))OR(rt64.c1 COLLATE RTRIM)))AND((((rt64.c1))>=((rt64.c1))))) ASC  NULLS LAST;SELECT ((t0.c0) IS FALSE) FROM t0, rt64 WHERE ((~ (x'')) COLLATE NOCASE) LIMIT -303372844 OFFSET 744256375; -- 1ms;
SELECT DISTINCT CAST(CASE 0.6601342306571056  WHEN rt64.c1 THEN NULL END AS TEXT) FROM t0, rt64 WHERE (((((('0.2195349075696692')>>(x'58c5f647'))))>((786381798)))); -- 0ms;
SELECT COUNT(*) FROM rt64 WHERE (((((NULL) BETWEEN (NULL) AND ('1000763220'))) ISNULL)); -- 0ms;
SELECT ((rt64.c0) BETWEEN ('1411702313') AND (t0.c0)) COLLATE NOCASE FROM rt64 WHERE ((+ ((((0.36835794398542343)) NOT BETWEEN (('}%wk')) AND ((x''))))));SELECT DISTINCT ((rt64.c1 COLLATE BINARY) NOT BETWEEN (((rt64.c1)<=(t0.c0))) AND (((rt64.c1)LIKE(rt64.c0)))) FROM t0, rt64; -- 0ms;
SELECT ALL (NOT (((((rt64.c0)AND(rt64.c2)))AND(t0.c0)))), AVG((((rt64.c2)) NOT BETWEEN ((rt64.c2)) AND ((rt64.c2)))), (~ (((rt64.c1) NOT BETWEEN (rt64.c2) AND (t0.c0)))) FROM rt64, t0; -- 0ms;
SELECT ALL MAX(((rt64.c1) BETWEEN (t0.c0) AND (NULL))) FROM rt64, t0 WHERE ((((((NULL) NOT BETWEEN ('362749729') AND (1.411702313E9))))>(((NOT ('-1945314309')))))); -- 0ms;
SELECT DISTINCT COUNT((((t0.c0, rt64.c2, rt64.c1, rt64.c1, t0.c0))<>((rt64.c0, rt64.c1, rt64.c1, rt64.c0, rt64.c1)))), ((GROUP_CONCAT(rt64.c2))*(((rt64.c1)<>(t0.c0)))), (((t0.c0, rt64.c0, rt64.c2)) NOT BETWEEN (((((t0.c0)) BETWEEN ((t0.c0)) AND ((rt64.c1))), SUM(rt64.c0), (+ (rt64.c2)))) AND ((((((((((rt64.c1)OR(rt64.c1)))AND(rt64.c1)))AND(rt64.c1)))OR(rt64.c1)), 0Xffffffff901fe2b0, ((((rt64.c0)OR(rt64.c0)))AND(t0.c0))))) FROM rt64, t0; -- 0ms;
SELECT ALL (NOT ((~ (rt64.c2)))) FROM t0 WHERE ((((((((((((NULL, 'ꄬu', '')) BETWEEN ((NULL, '870278262', 0.6601342306571056)) AND ((x'8ca4', '-2059430282', '59070821'))))OR('362749729' COLLATE RTRIM)))OR((x'' IN ()))))AND((('1862666164')>>(0.5222319203556162)))))OR((((0.05822813902127777)) NOT BETWEEN ((0.37534126179828653)) AND (('1309277983'))))));SELECT ((UPPER(rt64.c1))IS(((',') NOT BETWEEN (rt64.c1) AND (rt64.c0)))) FROM t0 ORDER BY (((NULL, NULL, ((((rt64.c0)AND(rt64.c2)))AND(t0.c0))))<((((t0.c0)&(rt64.c1)), NULL, (((t0.c0))>=((rt64.c0)))))) ASC;SELECT DISTINCT CASE WHEN rt64.c0 COLLATE RTRIM THEN ((rt64.c2) NOT BETWEEN (rt64.c1) AND (rt64.c0)) ELSE json_array_length(rt64.c1) END FROM rt64; -- 0ms;
SELECT DISTINCT ((((t0.c0) BETWEEN (rt64.c1) AND (t0.c0)))!=(IFNULL(rt64.c1, rt64.c2))) FROM rt64;SELECT DISTINCT PERCENT_RANK() OVER () FROM t0 WHERE ((+ (CAST(0.35713871337672776 AS NUMERIC)))) ORDER BY NULL  NULLS FIRST; -- 1ms;
SELECT ALL (((t0.c0) NOT NULL) IN (rt64.c1, (+ (rt64.c0)))), 0.006140161443988323, (((((((('ROq''Gh?')OR((+ (rt64.c2)))))OR(((rt64.c0)<(rt64.c2)))))OR((NOT (rt64.c0)))))OR(1950350056)) FROM rt64, t0 WHERE (CASE (('25u>')>(NULL))  WHEN CASE WHEN NULL THEN x'' END THEN ('M' IN ()) ELSE (~ (NULL)) END); -- 0ms;
SELECT ALL 0.27074906115365494 FROM rt64, t0 WHERE ((+ ((((x'')) NOT BETWEEN (('')) AND ((NULL)))))); -- 0ms;
SELECT DISTINCT ((((((((t0.c0)OR(t0.c0)))AND(rt64.c1)))OR(((rt64.c0) BETWEEN ('0.1276794630664525') AND (t0.c0)))))AND(((rt64.c0) BETWEEN (0.7458197999118864) AND (rt64.c0)))) FROM t0, rt64 GROUP BY '-28734425'; -- 0ms;
SELECT ((rt64.c1 COLLATE NOCASE) ISNULL) FROM rt64 WHERE ((((NULL) NOT NULL) IN ())) GROUP BY (((rt64.c2)) NOT BETWEEN (((rt64.c1 IN ()))) AND ((CAST(rt64.c2 AS NUMERIC)))) HAVING ((((NULL) NOT BETWEEN (rt64.c1) AND (rt64.c0))) NOT BETWEEN (COUNT(*)) AND ((rt64.c1 IN ()))); -- 0ms;
SELECT DISTINCT rt64.c0 FROM t0, rt64 WHERE (((((NULL)>=(NULL)))+(((NULL)=('113249806'))))); -- 0ms;
SELECT QUOTE(CAST(t0.c0 AS TEXT)) FROM t0; -- 0ms;
SELECT DISTINCT CASE WHEN ((((((((rt64.c2)OR(rt64.c2)))OR(t0.c0)))AND(rt64.c0)))AND(0.012753771920814172)) THEN x'' WHEN ((rt64.c0)GLOB(t0.c0)) THEN CAST(NULL AS BLOB) WHEN ((rt64.c1)*(rt64.c0)) THEN (((t0.c0))==((t0.c0))) WHEN CAST(rt64.c0 AS TEXT) THEN ((rt64.c1) ISNULL) WHEN '' THEN (~ (t0.c0)) ELSE CHAR(rt64.c1) END FROM rt64;SELECT ALL (((((rt64.c1)) NOT BETWEEN ((rt64.c1)) AND ((-1.7976931348623157E308)))) IS FALSE) FROM t0, rt64 WHERE (CAST(x'd038' AS BLOB)); -- 0ms;
SELECT DISTINCT (((rt64.c2)) BETWEEN ((LOWER(rt64.c2))) AND ((((t0.c0)|(rt64.c0))))), ((rt64.c0)>=(((rt64.c1) BETWEEN (rt64.c2) AND (rt64.c1)))), (((rt64.c1, rt64.c1, rt64.c1)) NOT BETWEEN (((rt64.c0 IN (0.7202083594191556, rt64.c2)), json_object(rt64.c1, rt64.c2), ((rt64.c2)IS(t0.c0)))) AND ((((t0.c0) NOT BETWEEN (t0.c0) AND (NULL)), rt64.c1 COLLATE NOCASE, ((((rt64.c0)OR(rt64.c2)))AND(rt64.c0))))) FROM rt64 NOT INDEXED WHERE ((((0xffffffffdaa7132a) NOTNULL) IN ())) GROUP BY LIKELY(((((rt64.c1)AND(rt64.c0)))AND(rt64.c2))), (((rt64.c2, rt64.c2, rt64.c0)) BETWEEN ((((((((((rt64.c2)AND(x'')))OR(rt64.c0)))AND(rt64.c0)))OR(rt64.c0)), ((rt64.c2) NOT NULL), HEX(DISTINCT t0.c0))) AND (((rt64.c0 IN (rt64.c2)), ((t0.c0) NOT BETWEEN (rt64.c2) AND (0.7315437376085555)), ((rt64.c1)&(t0.c0))))), CAST((- (rt64.c2)) AS TEXT);SELECT DISTINCT CASE WHEN ((t0.c0) NOT NULL) THEN 'u1J*i5Y' WHEN ((rt64.c1) ISNULL) THEN ((t0.c0) BETWEEN (rt64.c2) AND ('_Xjt#	<')) WHEN (('362749729')-(rt64.c2)) THEN NULL ELSE ((t0.c0)>(rt64.c0)) END, ((0Xfffffffff2c7e649)LIKE(((x'') NOT BETWEEN (rt64.c1) AND (rt64.c0)))), MIN((((t0.c0))!=((rt64.c0)))) FROM t0;SELECT ALL (((t0.c0)GLOB(rt64.c1)) IN ()) FROM rt64, t0 WHERE (('-1876958544' COLLATE BINARY IN (x'' COLLATE BINARY))); -- 0ms;
SELECT MAX(0.37534126179828653) FROM t0 WHERE (((((x'' COLLATE RTRIM)OR('P' COLLATE NOCASE)))OR(CASE 124626864  WHEN x'e2c7' THEN '' WHEN 0.01493295130511918 THEN NULL WHEN x'' THEN '' END))) ORDER BY CHAR(((rt64.c2) NOT NULL), rt64.c1 COLLATE RTRIM, ((rt64.c0)IS NOT(rt64.c0)))  NULLS FIRST;SELECT DISTINCT (+ ((((((((('-1876958544')OR(rt64.c1)))OR(rt64.c1)))AND(t0.c0)))OR(rt64.c2)))), ((((rt64.c2, rt64.c1, rt64.c1)) BETWEEN ((rt64.c1, t0.c0, rt64.c2)) AND ((t0.c0, x'237c', rt64.c2))) IN (CAST(rt64.c1 AS TEXT), GROUP_CONCAT(t0.c0))), TOTAL(((rt64.c2)<>(rt64.c2))) FROM t0 WHERE (CAST(x'' COLLATE RTRIM AS BLOB));SELECT DISTINCT CASE WHEN CAST(t0.c0 AS NUMERIC) THEN rt64.c2 COLLATE BINARY WHEN rt64.c0 THEN (('1411702313') IS TRUE) WHEN ((rt64.c0)<(rt64.c1)) THEN ((rt64.c2)>>(t0.c0)) END FROM t0 WHERE ((- ((('ꈃ')IS('2076330435'))))) GROUP BY ((((rt64.c2)AND(rt64.c0)))=(((rt64.c2) IS TRUE)));SELECT DISTINCT CASE WHEN ((rt64.c0) BETWEEN (rt64.c2) AND (rt64.c1)) THEN (~ (rt64.c2)) ELSE CASE rt64.c2  WHEN rt64.c2 THEN rt64.c1 END END, (((rt64.c1 IN ()))IS((((rt64.c2, rt64.c1, t0.c0))>=((t0.c0, t0.c0, rt64.c2))))), ((((((((rt64.c2 COLLATE BINARY)AND(((rt64.c1)>=(rt64.c1)))))OR((((rt64.c1)) BETWEEN ((rt64.c2)) AND ((t0.c0))))))AND(TOTAL(t0.c0))))OR(json_object(t0.c0, rt64.c0, rt64.c1, rt64.c2))) FROM t0, rt64 WHERE (((((((x'12d3')OR(NULL)))AND(x'')))OR(CAST('-1749761609' AS NUMERIC)))) GROUP BY LIKELY(t0.c0) COLLATE NOCASE;SELECT ALL CASE WHEN ((t0.c0)<<(rt64.c1)) THEN ((rt64.c2) BETWEEN (rt64.c2) AND (rt64.c2)) END, (((rt64.c1, t0.c0, t0.c0)) BETWEEN ((AVG(t0.c0), ((((((((rt64.c0)AND(rt64.c2)))OR(x'')))OR(rt64.c1)))OR(rt64.c0)), ((('J8U.懼'))>=((t0.c0))))) AND ((CASE t0.c0  WHEN rt64.c1 THEN rt64.c0 END, UPPER(rt64.c1), t0.c0 COLLATE RTRIM))), ((1.862666164E9) NOT BETWEEN (rt64.c0 COLLATE NOCASE) AND (GROUP_CONCAT(t0.c0))) FROM t0, rt64 WHERE ((NULL IN (0.618422601779241)) COLLATE NOCASE); -- 0ms;
SELECT DISTINCT AVG((((rt64.c1)) BETWEEN ((t0.c0)) AND (('-1749761609')))) OVER ( ORDER BY CASE rt64.c0  WHEN ((((rt64.c2)AND(rt64.c1)))AND(rt64.c2)) THEN (rt64.c1 IN (rt64.c2, rt64.c1)) WHEN rt64.c0 THEN ((((((((t0.c0)AND(rt64.c2)))AND(rt64.c2)))OR(rt64.c1)))OR(rt64.c0)) WHEN t0.c0 COLLATE NOCASE THEN -1.749761609E9 ELSE CASE rt64.c2  WHEN rt64.c2 THEN rt64.c1 ELSE rt64.c1 END END) FROM rt64, t0 WHERE ((CAST(NULL AS INTEGER) IN ((((0.022030883767807707, NULL, '>?勘|䙘u'))>=((x'b50d', 0.36835794398542343, x'')))))); -- 0ms;
SELECT DISTINCT LIKELIHOOD(GROUP_CONCAT(rt64.c0), 0.21093137294010345) FROM t0 WHERE ((- (CASE WHEN '-1486144833' THEN '' WHEN NULL THEN NULL WHEN '0迓{\n' THEN 0.006140161443988323 END))) LIMIT -679350808;SELECT DISTINCT '*?नa' FROM rt64 WHERE (CAST((NULL IN ()) AS TEXT)); -- 0ms;
SELECT DISTINCT RANK() OVER () FROM rt64, t0; -- 1ms;
SELECT (((rt64.c1, rt64.c2, rt64.c2)) NOT BETWEEN ((((rt64.c0) NOTNULL), DATETIME(rt64.c1, rt64.c0, rt64.c1, rt64.c0, rt64.c2), MIN(rt64.c1))) AND (((- (rt64.c0)), COALESCE(t0.c0, rt64.c2, t0.c0, 'v輭쾁UK<Y2'), (~ (rt64.c2))))) FROM rt64, t0 WHERE (((~ (0.9414291786603298)) IN (CASE 0.9731356727951043  WHEN 'o许' THEN 'NeQ' ELSE '628981165' END))); -- 0ms;
SELECT DISTINCT ((((rt64.c2)+(rt64.c0)))>>(CAST(t0.c0 AS NUMERIC))) FROM t0 FULL OUTER JOIN rt64 ON CAST(((rt64.c0) NOT BETWEEN ('៟V') AND (t0.c0)) AS NUMERIC); -- 0ms;
SELECT ALL (((json_extract(rt64.c2, rt64.c0, rt64.c1, rt64.c1)))==((0.009470443418479468))) FROM t0 WHERE ((((((0.5209192923351198, '.儁', NULL)) NOT BETWEEN (('%5eY', x'', x'')) AND (('', NULL, x'6719'))))>>(CASE WHEN 'Wz' THEN 0.11288706451455077 WHEN x'' THEN 0.2655166430313437 WHEN NULL THEN -1.876958544E9 END)));SELECT (- (LIKELIHOOD(DISTINCT rt64.c2, 0.5109005408377901))) FROM t0, rt64 WHERE (LOWER(DISTINCT ((((((((NULL)AND(0Xffffffffa0fa6ce4)))OR(0.022602395373816364)))OR(NULL)))OR(x'')))); -- 0ms;
SELECT ALL LEAD(rt64.c2, rt64.c0, t0.c0) OVER ( RANGE BETWEEN json_patch(((rt64.c1) NOT NULL), ((((rt64.c2)OR('')))OR(t0.c0))) FOLLOWING AND ((rt64.c2 COLLATE NOCASE) IS TRUE) PRECEDING), (+ ((((rt64.c0, rt64.c2, t0.c0, t0.c0, t0.c0)) BETWEEN ((rt64.c2, t0.c0, rt64.c0, rt64.c0, '-322809128')) AND ((t0.c0, rt64.c2, t0.c0, t0.c0, rt64.c0))))), ((CAST(rt64.c0 AS INTEGER)) NOT NULL) FROM t0, rt64 WHERE (((((-386869775) NOT BETWEEN ('-903252501') AND (NULL)))IS NOT(((('0.6298206639823256')) NOT BETWEEN ((0X5424de29)) AND ((0.026262917479118575))))));SELECT DISTINCT ((CASE t0.c0  WHEN rt64.c0 THEN rt64.c1 WHEN rt64.c2 THEN rt64.c0 WHEN NULL THEN '0.3061212240117639' ELSE rt64.c1 END) NOT NULL), SUM((rt64.c0 IN (rt64.c2, rt64.c0))) OVER (), (((rt64.c0, rt64.c0, rt64.c2)) BETWEEN ((TRIM(rt64.c0), (+ (x'59c93ee07408')), rt64.c0)) AND (((((rt64.c0))<>((rt64.c1))), ((((t0.c0)AND(rt64.c2)))AND(rt64.c0)), (((rt64.c2))>((rt64.c0)))))) FROM rt64, t0 WHERE (((('T{hT哘脩<I', CAST('T ' AS REAL), ((NULL)==('-221780407'))))<>((TRIM(DISTINCT '0.2655166430313437', 0.2768637503828646), LOWER(NULL), -9.62211967E8)))); -- 0ms;
SELECT DISTINCT ((((((((CASE rt64.c2  WHEN rt64.c0 THEN rt64.c1 WHEN rt64.c2 THEN rt64.c2 WHEN rt64.c0 THEN rt64.c0 END)AND((((t0.c0))>=((rt64.c1))))))OR(rt64.c2 COLLATE NOCASE)))AND((((rt64.c0)) BETWEEN ((rt64.c1)) AND ((t0.c0))))))AND(rt64.c0)) FROM rt64;SELECT MAX(((rt64.c2)OR('0.022030883767807707'))) FROM rt64, t0 WHERE (CAST(CAST(NULL AS BLOB) AS REAL)) ORDER BY CASE WHEN ((rt64.c1)GLOB(rt64.c0)) THEN ((((rt64.c2)AND(rt64.c0)))AND(rt64.c0)) WHEN (rt64.c0 IN ()) THEN LTRIM(-1.945314309E9, rt64.c2) WHEN ((t0.c0)*(t0.c0)) THEN CASE WHEN t0.c0 THEN rt64.c2 END WHEN t0.c0 COLLATE RTRIM THEN NULL WHEN (rt64.c1 IN ()) THEN ((rt64.c2) IS TRUE) END DESC, (t0.c0 IN (1585556440)) COLLATE NOCASE, CASE WHEN (rt64.c2 IN ()) THEN ((rt64.c1) NOTNULL) END DESC  NULLS FIRST; -- 1ms;
SELECT DISTINCT CAST(((rt64.c2) NOT BETWEEN (rt64.c2) AND (rt64.c2)) AS BLOB) FROM rt64; -- 0ms;
SELECT DISTINCT ((CAST(rt64.c2 AS NUMERIC)) NOT BETWEEN (((((((((t0.c0)AND(rt64.c0)))OR('')))AND(rt64.c0)))OR(rt64.c1))) AND ((t0.c0 IN ()))) FROM t0, rt64 WHERE (0.29916962378466405); -- 0ms;
SELECT rt64.c0 FROM rt64; -- 0ms;
SELECT ALL SUM(CAST(x'' AS INTEGER)) FROM t0 WHERE (((~ (0.9144857423058582)) IN ())) LIMIT -28734425; -- 0ms;
SELECT DISTINCT CASE (((rt64.c1)) NOT BETWEEN ((t0.c0)) AND ((rt64.c0)))  WHEN NULL THEN ((t0.c0) NOT BETWEEN (rt64.c0) AND (rt64.c1)) ELSE ((((x'')AND(t0.c0)))OR(rt64.c0)) END, x'', ((((((t0.c0) NOTNULL))AND(rt64.c0)))AND('S~獷')) FROM rt64, t0 WHERE (CAST((NOT (0.19030539365586996)) AS BLOB)); -- 0ms;
SELECT ALL MAX((- (rt64.c1))), rt64.c0, ((rt64.c0) NOTNULL) COLLATE BINARY FROM t0;SELECT DISTINCT ((GROUP_CONCAT(rt64.c1))||(NULLIF(rt64.c0, x''))) FROM t0, rt64; -- 0ms;
SELECT ALL (+ (((((((((rt64.c2)OR(rt64.c0)))OR(t0.c0)))AND(t0.c0)))AND(rt64.c2)))), ((rt64.c1) NOT NULL), rt64.c0 FROM rt64, t0; -- 0ms;
SELECT ALL (t0.c0 IN (rt64.c1)) COLLATE BINARY FROM t0 ORDER BY (((LIKELIHOOD(DISTINCT t0.c0, 0.9684844352683162), (((rt64.c2, rt64.c2, t0.c0))!=((rt64.c2, -1.334472749E9, rt64.c2))), CAST(rt64.c1 AS REAL)))>((((rt64.c1) NOT BETWEEN (rt64.c0) AND (0.4925665424819241)), ((rt64.c0) NOT BETWEEN (t0.c0) AND (rt64.c1)), (((rt64.c2)) BETWEEN ((rt64.c0)) AND ((rt64.c1))))))  NULLS FIRST;SELECT DISTINCT TOTAL((x'c80b' IN ())) FROM t0 LIMIT 1511795004; -- 0ms;
SELECT DISTINCT ((((rt64.c2)<<(rt64.c1)))-(((rt64.c0) NOTNULL))) FROM t0, rt64 NOT INDEXED WHERE (CASE WHEN ((-2.059430282E9) IS TRUE) THEN 0.6286576497361055 COLLATE BINARY WHEN ((x'8f74') BETWEEN ('kEz') AND (0.042422763715466494)) THEN LTRIM(2105883670, '') WHEN (((x'')) NOT BETWEEN ((NULL)) AND ((x''))) THEN (('825836127') BETWEEN (NULL) AND (x'')) END) GROUP BY ((((t0.c0)LIKE(NULL)))<=('<_u')) HAVING MAX((((rt64.c0))<((rt64.c1)))) ORDER BY ((((t0.c0 COLLATE BINARY)AND(((((((((rt64.c2)AND(rt64.c2)))AND(rt64.c0)))AND(t0.c0)))OR(rt64.c1)))))OR(((rt64.c0) NOT BETWEEN (rt64.c1) AND (t0.c0))))  NULLS LAST; -- 0ms;
SELECT ALL ((((rt64.c1) IS TRUE)) BETWEEN (((((rt64.c1)OR(rt64.c0)))AND(rt64.c1))) AND ((((t0.c0))=((t0.c0))))), GROUP_CONCAT(CAST(rt64.c1 AS INTEGER)) OVER (), CASE (((t0.c0))>((rt64.c0)))  WHEN CAST(t0.c0 AS TEXT) THEN x'' ELSE ((rt64.c1)&(t0.c0)) END FROM t0, rt64; -- 0ms;
SELECT DISTINCT MAX((+ (rt64.c2))), CAST((t0.c0 IN ()) AS INTEGER), (+ (x'')), ((CASE t0.c0  WHEN rt64.c2 THEN rt64.c2 ELSE rt64.c0 END) IS FALSE), ((((rt64.c0) BETWEEN (rt64.c0) AND (rt64.c2)))=((rt64.c0 IN (rt64.c0)))) FROM t0, rt64 LIMIT -1945314309 OFFSET -1225050126; -- 0ms;
SELECT DISTINCT ((GROUP_CONCAT(t0.c0)) BETWEEN (((t0.c0) NOTNULL)) AND ((t0.c0 IN ()))) FROM t0, rt64 WHERE (((((((((x'')OR(((-460445156)>(0.9468546091081294)))))OR(CASE x''  WHEN 369719087 THEN NULL END)))OR('' COLLATE BINARY)))AND((+ ('-1735358404'))))); -- 0ms;
SELECT DISTINCT (NOT ((rt64.c0 IN (rt64.c2)))) FROM t0 WHERE (((((x'') NOT NULL)) NOT BETWEEN ((+ ('1862666164'))) AND ((NULL IN ())))) LIMIT 80568688 OFFSET 655053488;SELECT CASE (t0.c0 IN ())  WHEN ((rt64.c0) ISNULL) THEN ((rt64.c1)<<(rt64.c0)) ELSE (~ (rt64.c2)) END FROM rt64 WHERE ((((('')+(0X5a1c293c)))AND(((((NULL)OR(NULL)))AND('lL\3l'))))) ORDER BY QUOTE(((((rt64.c1)AND(rt64.c1)))OR(t0.c0))) ASC  NULLS LAST;SELECT DISTINCT (AVG(rt64.c2) IN (CASE WHEN rt64.c0 THEN t0.c0 END)) FROM t0, rt64 ORDER BY (((rt64.c2)) BETWEEN ((LIKELIHOOD(rt64.c0, 0.9110602899966711))) AND ((0.4631047836386323))) ASC, (((((rt64.c1) NOT NULL)))<((((((rt64.c0)AND(rt64.c0)))AND(t0.c0))))), (NOT (CASE WHEN rt64.c2 THEN t0.c0 END)) DESC  NULLS LAST LIMIT 779479005 OFFSET 84156978; -- 0ms;
SELECT DISTINCT CASE CAST(rt64.c1 AS TEXT)  WHEN ((rt64.c0)<(rt64.c1)) THEN (rt64.c0 IN ()) WHEN ((((rt64.c1)AND(rt64.c0)))AND(7.79479005E8)) THEN t0.c0 COLLATE RTRIM WHEN t0.c0 THEN CAST(rt64.c2 AS INTEGER) ELSE ((rt64.c0) NOT BETWEEN (rt64.c0) AND (rt64.c1)) END FROM t0, rt64 WHERE (((((('fO', '䬆儁\n/u#D', x'a284'))>=(('', 0.759600473824617, NULL))))<<(CASE 'Z~ޒvEal*'  WHEN NULL THEN '262884571' END))) LIMIT 783062820; -- 0ms;
SELECT ALL CAST(NULLIF(rt64.c1, x'') AS INTEGER) FROM t0 GROUP BY (((((((((rt64.c0)OR(rt64.c2)))AND(t0.c0)))AND(rt64.c2)))AND(rt64.c1)) IN ());SELECT DISTINCT TRIM(CAST(rt64.c0 AS TEXT), (- (NULL))), ((((NULL)%(t0.c0))) NOT BETWEEN (GROUP_CONCAT(x'')) AND (CASE rt64.c1  WHEN rt64.c0 THEN rt64.c1 ELSE rt64.c1 END)), GROUP_CONCAT((NULL IN (rt64.c2))) FROM t0 WHERE ((((- (NULL))) NOT NULL)) ORDER BY ((rt64.c1) BETWEEN (rt64.c2) AND (rt64.c0)) COLLATE RTRIM;SELECT CAST(highlight(t0.c0, rt64.c0, 0.2655166430313437, t0.c0) AS TEXT) FROM rt64, t0 ORDER BY 80568688 DESC, CAST(CASE 0.4379137883435046  WHEN 0xffffffffd781ede8 THEN '680718623' WHEN t0.c0 THEN rt64.c1 WHEN rt64.c1 THEN rt64.c0 WHEN '-1749761609' THEN rt64.c0 WHEN rt64.c1 THEN rt64.c2 END AS REAL) ASC  NULLS LAST LIMIT -1334472749;SELECT DISTINCT ((((rt64.c2)LIKE(rt64.c0)))>=(((t0.c0) BETWEEN (rt64.c1) AND (rt64.c1)))), ((((t0.c0) IS FALSE)) NOT BETWEEN (CASE WHEN t0.c0 THEN rt64.c0 WHEN rt64.c1 THEN rt64.c0 WHEN 'lY''n0-O' THEN t0.c0 ELSE rt64.c0 END) AND ((((rt64.c1, x'', x'3da7'))<=((rt64.c0, rt64.c1, rt64.c1))))), ((load_extension(rt64.c0, rt64.c1))IS(rt64.c0 COLLATE NOCASE)) FROM t0 NOT INDEXED WHERE (((NULL)*(0.7998671704540271)) COLLATE RTRIM COLLATE NOCASE) LIMIT 1955017970 OFFSET -1749761609;SELECT DISTINCT AVG(((0X175f155c)IS(rt64.c0))), ((((rt64.c0) NOTNULL)) BETWEEN ((~ (rt64.c1))) AND (((rt64.c0)%(t0.c0)))), ((CASE NULL  WHEN rt64.c2 THEN rt64.c2 WHEN rt64.c1 THEN t0.c0 WHEN '(	ux]LI H' THEN rt64.c2 ELSE -1.469573153E9 END) BETWEEN (CAST(0X3c31842 AS REAL)) AND (CAST(-1.469573153E9 AS INTEGER))) FROM rt64;SELECT DISTINCT ((((rt64.c2) IS TRUE))>>(CASE t0.c0  WHEN rt64.c2 THEN rt64.c1 WHEN rt64.c1 THEN rt64.c0 WHEN rt64.c2 THEN NULL END)), NTH_VALUE(((NULL) BETWEEN (CAST(x'' AS TEXT)) AND ((rt64.c1 IN ()))), rt64.c0) OVER (), ((((((((((((((((((t0.c0)-(rt64.c2)))OR(NULL)))OR((((NULL))>=((rt64.c1))))))AND(GROUP_CONCAT(t0.c0))))AND(COUNT(*))))OR(((rt64.c1)IS NOT(x'')))))AND(((rt64.c1)<('')))))OR(((rt64.c0) BETWEEN (rt64.c0) AND (rt64.c2)))))OR(((((t0.c0)AND('-1544677889')))OR(rt64.c2)))) FROM rt64;SELECT DISTINCT (((rt64.c0)) NOT BETWEEN ((((t0.c0) IS FALSE))) AND (('427518362'))) FROM t0 WHERE (PRINTF(NULL) COLLATE BINARY);SELECT ALL (((CAST(rt64.c1 AS REAL)))=((CAST(t0.c0 AS INTEGER)))) FROM rt64, t0 WHERE (((CASE WHEN NULL THEN x'' END) NOTNULL)); -- 0ms;
SELECT CAST(rt64.c0 AS REAL) FROM rt64; -- 0ms;
SELECT ALL '0.3061212240117639' FROM t0, rt64 GROUP BY CASE WHEN CAST(rt64.c0 AS INTEGER) THEN rt64.c2 END; -- 0ms;
SELECT COUNT(((rt64.c1) IS TRUE)), (((rt64.c2)) NOT BETWEEN (((t0.c0 IN (rt64.c1)))) AND ((((((((((-681033484)OR(rt64.c2)))OR(t0.c0)))OR(t0.c0)))AND(rt64.c0))))), ((((t0.c0)AND(0.17202359318675664)))OR(rt64.c1)) COLLATE RTRIM FROM t0, rt64; -- 0ms;
SELECT ALL CASE ((rt64.c1)%(rt64.c2))  WHEN (x'' IN ()) THEN '262884571' END FROM t0, rt64 NOT INDEXED WHERE (0Xffffffffdfa7c5d6); -- 0ms;
SELECT ALL CAST(t0.c0 AS REAL) COLLATE BINARY FROM rt64 WHERE ((NOT ((+ (0.022030883767807707)))));SELECT DISTINCT CAST(((rt64.c0)||(rt64.c0)) AS REAL) FROM t0;SELECT ALL ((CASE rt64.c0  WHEN rt64.c1 THEN t0.c0 ELSE t0.c0 END) NOTNULL) FROM t0;SELECT ((((rt64.c0) NOTNULL))=('rVC5^j7\nV')) FROM rt64, t0 WHERE (NULL); -- 0ms;
SELECT (('t-0ﭤ!#F') NOT BETWEEN (((rt64.c0)OR(t0.c0))) AND (rt64.c0)) FROM rt64 WHERE (((x'') BETWEEN (x'') AND (x'76af')) COLLATE RTRIM);SELECT ALL COALESCE(DISTINCT t0.c0 COLLATE NOCASE, '2010905444', ((((t0.c0)OR(rt64.c0)))OR(t0.c0)), NULL), ((((t0.c0)%(rt64.c0)))<<((((rt64.c1, t0.c0, t0.c0))=((t0.c0, rt64.c1, rt64.c0))))), MIN(((((rt64.c1)AND(rt64.c0)))AND(t0.c0))) FROM rt64 WHERE (((((x'') IS FALSE)) BETWEEN ((((NULL)) BETWEEN ((x'')) AND ((0X3855965)))) AND (((NULL) IS TRUE))));SELECT DISTINCT rt64.c2 FROM rt64, t0 LIMIT 427518362 OFFSET 416475289; -- 0ms;
SELECT ALL ((UNICODE('8bDq!U')) NOTNULL), NULL, (((((t0.c0))<((rt64.c2)))) IS TRUE), ((((rt64.c1) IS TRUE))GLOB(rt64.c1)), t0.c0 COLLATE BINARY FROM t0, rt64; -- 0ms;
SELECT DISTINCT ((((((((IFNULL(rt64.c1, rt64.c0))AND(((((rt64.c0)OR(rt64.c0)))OR(rt64.c1)))))AND(((rt64.c1) IS TRUE))))OR(x'2db1')))AND(CAST('-1555588365' AS NUMERIC))) FROM t0, rt64; -- 0ms;
SELECT DISTINCT 8.71190785E8, ((((((((JULIANDAY(rt64.c1, t0.c0, t0.c0, rt64.c0, 0.5383410434453828))AND(t0.c0 COLLATE BINARY)))OR(rt64.c1 COLLATE RTRIM)))OR(CASE WHEN rt64.c0 THEN rt64.c1 ELSE rt64.c2 END)))AND(((rt64.c2) BETWEEN (rt64.c0) AND (rt64.c1)))), rt64.c2 FROM rt64, t0 WHERE (((((x'') IS FALSE)) BETWEEN ('-1118059429') AND (x'ca80' COLLATE RTRIM))); -- 0ms;
SELECT (NOT ('0.27074906115365494')) FROM rt64, t0 WHERE ((+ ((('0.35713871337672776')&(0X1609772f))))); -- 1ms;
SELECT ALL CASE (+ (t0.c0))  WHEN ((x'') BETWEEN (t0.c0) AND (t0.c0)) THEN ((rt64.c2)<=(744256375)) ELSE (rt64.c1 IN ()) END FROM rt64, t0 WHERE (((((('Y('))==((0.05822813902127777)))) NOT NULL)); -- 0ms;
SELECT DISTINCT (~ (MIN(1.24626864E8))), DATE(rt64.c1 COLLATE NOCASE, (((80568688, rt64.c1, t0.c0))>((t0.c0, rt64.c0, t0.c0))), ((((0.08828187798178488)AND(t0.c0)))OR(rt64.c2))), ((rt64.c0) NOT BETWEEN (CAST(t0.c0 AS NUMERIC)) AND (rt64.c1 COLLATE NOCASE)) FROM rt64;SELECT DISTINCT CASE (NOT (rt64.c2))  WHEN CASE t0.c0  WHEN t0.c0 THEN rt64.c1 END THEN (((rt64.c2)) NOT BETWEEN ((rt64.c0)) AND (('Y('))) END FROM t0 WHERE (((CASE x''  WHEN 1.58555644E9 THEN 0.2751021267730511 WHEN x'' THEN NULL WHEN '709236425' THEN '0.1276794630664525' ELSE -722774824 END)||((NULL IN ('{(\nC ')))));SELECT ALL CAST(((((rt64.c1)OR(rt64.c2)))AND(t0.c0)) AS NUMERIC) FROM rt64;SELECT ALL (~ (((rt64.c0) ISNULL))), (- (TYPEOF(DISTINCT rt64.c1))), (x'' IN (NULL)) FROM t0, rt64 WHERE ((((('-679350808' COLLATE NOCASE)AND((('dx''z''-5|旄')=(7.8306282E8)))))OR((0.6326653384619897 IN ())))) GROUP BY (((t0.c0 IN ())) BETWEEN (json_valid(rt64.c0)) AND ((((rt64.c1, t0.c0, rt64.c2, rt64.c0, rt64.c2)) NOT BETWEEN ((rt64.c1, rt64.c0, t0.c0, rt64.c1, t0.c0)) AND ((rt64.c0, rt64.c2, rt64.c1, 'ࢌ.', rt64.c1))))); -- 0ms;
SELECT DISTINCT rt64.c0 FROM t0;SELECT ALL NTH_VALUE(((((rt64.c0)<<(rt64.c0))) ISNULL), (((rt64.c0 IN ())) NOT NULL)) OVER (), x'', (((((((((((rt64.c0)) NOT BETWEEN ((rt64.c0)) AND ((rt64.c1))))OR((((rt64.c1))>((rt64.c0))))))AND(((rt64.c0) BETWEEN (rt64.c0) AND (rt64.c0)))))AND(CAST(NULL AS BLOB))))AND(((((((((rt64.c2)OR(rt64.c1)))OR(rt64.c0)))AND(rt64.c1)))AND(rt64.c2)))) FROM rt64, t0 WHERE (((((-7.22774824E8 COLLATE RTRIM)AND(((NULL) NOT BETWEEN (0.6601342306571056) AND ('-626584790')))))OR(((('-903252501')) BETWEEN ((0.8098250828109026)) AND ((x'1f09')))))); -- 0ms;
SELECT DISTINCT (((rt64.c2, rt64.c2, rt64.c2)) BETWEEN ((LIKELIHOOD(DISTINCT rt64.c2, 0.0889676401998366), ((((rt64.c0)AND(rt64.c1)))OR(0X1988d005)), CASE WHEN rt64.c1 THEN rt64.c2 WHEN t0.c0 THEN rt64.c0 WHEN rt64.c0 THEN rt64.c2 END)) AND (((t0.c0 IN ()), CASE WHEN t0.c0 THEN rt64.c0 WHEN t0.c0 THEN rt64.c0 WHEN rt64.c2 THEN t0.c0 WHEN 0.023147620334727392 THEN rt64.c2 WHEN rt64.c2 THEN rt64.c1 ELSE t0.c0 END, ((t0.c0) NOTNULL)))) FROM rt64;SELECT (((~ ('341681114'))) NOTNULL) FROM rt64 WHERE ((((((x'7e7f')LIKE(''))))<((TRIM(0.004942482617837363, 0.7998671704540271))))); -- 1ms;
SELECT DISTINCT '124626864' FROM rt64, t0; -- 0ms;
SELECT DISTINCT NULL COLLATE NOCASE FROM rt64, t0 WHERE ((((+ (0.4925665424819241)))/((NOT ('{戺r\nzL.'))))); -- 0ms;
SELECT '2g' COLLATE RTRIM, GROUP_CONCAT(((rt64.c0) NOT NULL)) OVER ( RANGE BETWEEN (((UPPER(DISTINCT rt64.c2), (((t0.c0))<=((t0.c0))), rt64.c0 COLLATE NOCASE, t0.c0 COLLATE NOCASE, ((rt64.c1) NOT BETWEEN (rt64.c1) AND (rt64.c0))))<=((LIKELIHOOD(t0.c0, 0.3601877369687303), (x'' IN ()), CASE WHEN rt64.c1 THEN rt64.c2 ELSE rt64.c2 END, CAST(t0.c0 AS TEXT), CASE rt64.c2  WHEN rt64.c0 THEN 0.5320975212936578 WHEN rt64.c1 THEN rt64.c2 WHEN t0.c0 THEN rt64.c1 ELSE rt64.c1 END))) FOLLOWING AND  CURRENT ROW EXCLUDE CURRENT ROW), ((((t0.c0)IS(rt64.c1))) ISNULL), ((CASE t0.c0  WHEN rt64.c2 THEN rt64.c0 ELSE rt64.c2 END)%(((((rt64.c0)AND(rt64.c1)))OR(rt64.c0)))), rt64.c0 FROM rt64 WHERE (UNLIKELY(DISTINCT ((((NULL)OR('^\')))AND(x'')))) LIMIT -1695303761 OFFSET 1273573104;SELECT DISTINCT (((rt64.c1 IN ()))<((- (t0.c0)))) FROM rt64, t0 WHERE (0.6063269724451341) GROUP BY CASE rt64.c2  WHEN ((rt64.c1) IS FALSE) THEN ((((rt64.c2)AND(rt64.c0)))AND(rt64.c2)) ELSE (((rt64.c0)) BETWEEN ((t0.c0)) AND ((rt64.c1))) END HAVING (((NOT (t0.c0)))<(CASE WHEN rt64.c0 THEN rt64.c1 END)); -- 1ms;
SELECT (('kO') NOTNULL) FROM rt64 WHERE ((((('-900069516')>=('2125715573'))) BETWEEN (HEX('')) AND (ABS(DISTINCT x'')))) LIMIT 1791061004; -- 0ms;
SELECT (((t0.c0) NOT NULL) IN ()), rt64.c1, NULLIF(DISTINCT (t0.c0 IN ()), CASE rt64.c1  WHEN t0.c0 THEN rt64.c2 END), (((t0.c0)) NOT BETWEEN ((rt64.c2)) AND ((rt64.c0))) COLLATE NOCASE, ((((LOWER(t0.c0))OR(0.8192027700602393)))AND(((rt64.c2)-(t0.c0)))), ((((((t0.c0)AND(t0.c0)))AND(t0.c0)))-(SUM('Ay{R'))), ((GLOB(rt64.c1, rt64.c1))|(CAST(t0.c0 AS INTEGER))) FROM rt64 WHERE (((NULL COLLATE BINARY) BETWEEN (0.020532649519572344 COLLATE BINARY) AND ((((x'', x'59fb', NULL))>=((NULL, 0.2127215352487949, NULL))))));SELECT DISTINCT (((((rt64.c0, 0.32789088481330675, rt64.c2)) NOT BETWEEN ((t0.c0, t0.c0, t0.c0)) AND ((t0.c0, rt64.c2, rt64.c1)))) NOT BETWEEN ((t0.c0 IN ())) AND (((rt64.c2)>>(rt64.c2)))) FROM rt64;SELECT DISTINCT ((CAST(rt64.c1 AS INTEGER))||(rt64.c0)) FROM rt64; -- 0ms;
SELECT DISTINCT ((((NULL) NOT NULL)) NOTNULL) FROM rt64, t0 WHERE (CASE ((0.6830025369947628) NOT BETWEEN (NULL) AND (''))  WHEN ((((80568688)AND(x'')))AND(NULL)) THEN 0.5630862203132745 WHEN x'' THEN ((x'')>(x'')) WHEN LTRIM('eEBcp*', 0.2064156268451356) THEN (0.35713871337672776 IN (NULL, 0X56f70ed0)) END); -- 0ms;
SELECT 'X&]7pdrP' FROM t0 WHERE ('779479005'); -- 0ms;
SELECT DISTINCT 0.9067265964770341 FROM rt64, t0; -- 0ms;
SELECT DISTINCT (((((rt64.c2))!=((rt64.c1)))) NOT BETWEEN (((((x'17ac')OR(rt64.c0)))AND(rt64.c2))) AND (CAST(rt64.c2 AS TEXT))) FROM rt64, t0 GROUP BY NULL, (- (CASE WHEN rt64.c0 THEN rt64.c2 WHEN NULL THEN t0.c0 WHEN t0.c0 THEN NULL ELSE rt64.c1 END)), ((((((rt64.c1)OR(NULL)))AND(rt64.c0)))+(CASE WHEN t0.c0 THEN rt64.c1 WHEN rt64.c0 THEN rt64.c2 WHEN t0.c0 THEN x'959d' END)) HAVING (((rt64.c0)) BETWEEN ((((rt64.c0) NOT BETWEEN (rt64.c1) AND (rt64.c1)))) AND ((-922373563))); -- 0ms;
SELECT ((((0.6063269724451341)AND((((x'', rt64.c1, x'df8e')) BETWEEN ((t0.c0, rt64.c2, rt64.c2)) AND ((rt64.c2, '-710728420', rt64.c0))))))AND(CAST(t0.c0 AS BLOB))) FROM rt64 WHERE (NULL) ORDER BY (((rt64.c1 IN ()))-(CASE rt64.c2  WHEN t0.c0 THEN rt64.c1 END)) DESC, (- (CASE rt64.c2  WHEN rt64.c1 THEN NULL WHEN t0.c0 THEN t0.c0 WHEN rt64.c1 THEN t0.c0 ELSE rt64.c1 END)), ((rt64.c1 IN (rt64.c2)) IN (((((((((rt64.c1)OR(rt64.c2)))OR(rt64.c0)))OR(rt64.c2)))OR(rt64.c1))))  NULLS LAST;SELECT AVG(CAST(t0.c0 AS NUMERIC)) FROM rt64, t0 LIMIT 444156997; -- 0ms;
SELECT DISTINCT COUNT(((rt64.c0)<>(t0.c0))) OVER ( RANGE ' ' PRECEDING EXCLUDE CURRENT ROW), LAG(((((((t0.c0)%(rt64.c0)))OR(LIKELY(rt64.c0))))AND((0.44392201504639317 IN ()))), ((((((((CAST(t0.c0 AS BLOB))OR(((rt64.c2)+(rt64.c0)))))AND(CASE rt64.c0  WHEN rt64.c1 THEN rt64.c1 ELSE t0.c0 END)))AND((rt64.c0 IN ()))))OR(x'5ec6')), (((((t0.c0)OR(rt64.c2)))OR(t0.c0)) IN (CASE WHEN 'y谧' THEN t0.c0 WHEN rt64.c0 THEN -513711607 WHEN t0.c0 THEN rt64.c1 ELSE rt64.c1 END))) OVER (), rt64.c0, SUM(((rt64.c1)OR(t0.c0))), ((t0.c0) NOT BETWEEN ((((rt64.c1, t0.c0, 0.804245586463079)) BETWEEN ((t0.c0, rt64.c2, rt64.c2)) AND ((rt64.c2, rt64.c2, '369719087')))) AND ('O]{n3xM')) FROM rt64, t0;SELECT DISTINCT CASE x''  WHEN TRIM(rt64.c0) THEN (((rt64.c1))>=((rt64.c2))) END FROM rt64, t0 GROUP BY ((((((t0.c0) ISNULL))OR(((rt64.c1) BETWEEN (rt64.c1) AND (NULL)))))AND(CAST(t0.c0 AS INTEGER))); -- 0ms;
SELECT DISTINCT MIN(0.8339326019991764) FROM t0, rt64; -- 0ms;
SELECT ALL ((((((t0.c0) NOTNULL))AND((((rt64.c2))!=((t0.c0))))))AND(rt64.c0 COLLATE BINARY)) FROM t0, rt64; -- 0ms;
SELECT NULL COLLATE BINARY, ((rt64.c1) ISNULL) COLLATE RTRIM, ((CASE WHEN rt64.c2 THEN rt64.c2 WHEN t0.c0 THEN rt64.c1 WHEN rt64.c1 THEN rt64.c1 END) BETWEEN (MIN(t0.c0)) AND ((NOT (-922373563)))) FROM rt64;SELECT CASE WHEN ((t0.c0)<=(rt64.c1)) THEN rt64.c2 WHEN TYPEOF(rt64.c1) THEN t0.c0 COLLATE RTRIM WHEN rt64.c0 COLLATE RTRIM THEN x'' ELSE (rt64.c2 IN ()) END FROM rt64, t0 WHERE ((((((4.16475289E8))<((0.01518327833972688)))) BETWEEN ((('')IS NOT(NULL))) AND ((('') NOTNULL)))) GROUP BY (json_object(t0.c0, rt64.c1, t0.c0, rt64.c1, rt64.c2, t0.c0) IN (((x'') NOT BETWEEN (rt64.c0) AND (t0.c0)))), CHANGES(), CAST(((rt64.c2)*(t0.c0)) AS TEXT) HAVING ((rt64.c0) BETWEEN (((rt64.c1) NOT NULL)) AND ((rt64.c1 IN ()))) ORDER BY rt64.c2 DESC; -- 0ms;
SELECT ALL ((CASE t0.c0  WHEN t0.c0 THEN t0.c0 END)/(((((rt64.c1)OR(rt64.c2)))AND(rt64.c2)))) FROM rt64, t0 WHERE (((NULL) NOT BETWEEN ('	h') AND (0.7434261840421349)) COLLATE RTRIM) LIMIT -1627863202; -- 0ms;
SELECT DISTINCT CASE WHEN TOTAL(rt64.c2) THEN ((rt64.c1)-(t0.c0)) ELSE (+ (rt64.c0)) END FROM rt64 WHERE (CAST((('-823344449') NOT BETWEEN (0.20135935571341468) AND (x'')) AS NUMERIC)) LIMIT 628981165;SELECT DISTINCT NTILE('o许') OVER () FROM rt64, t0 NOT INDEXED WHERE ((((((((((NULL IN ()))OR(CAST(0xffffffff9bdc319d AS TEXT))))AND((((0.7588217603133848)) BETWEEN ((x'')) AND ((484032718))))))OR(((x'9483') ISNULL))))AND(0Xffffffff90f0ff21 COLLATE RTRIM))); -- 0ms;
SELECT DISTINCT (((rt64.c0 IN (x''))) BETWEEN (CAST(rt64.c0 AS TEXT)) AND (0x1ee0266c)) FROM t0, rt64 GROUP BY '-303372844', ((((((rt64.c0)OR(rt64.c0)))AND(t0.c0))) BETWEEN (((t0.c0) ISNULL)) AND (CASE rt64.c2  WHEN rt64.c2 THEN x'' ELSE t0.c0 END)), CAST((+ (rt64.c1)) AS NUMERIC) HAVING ((((CASE rt64.c2  WHEN t0.c0 THEN rt64.c2 WHEN t0.c0 THEN rt64.c1 WHEN rt64.c2 THEN rt64.c0 WHEN rt64.c1 THEN rt64.c2 WHEN rt64.c2 THEN '1%\rr' END)AND(CASE rt64.c1  WHEN rt64.c2 THEN rt64.c2 ELSE rt64.c1 END)))OR(((rt64.c1)+(rt64.c1)))); -- 1ms;
SELECT ALL (- (((rt64.c0) IS FALSE))) FROM rt64; -- 0ms;
SELECT DISTINCT 0.950795249091425 FROM t0; -- 0ms;
SELECT DISTINCT TOTAL(0Xffffffffb300599a), rt64.c2, COUNT(((rt64.c1) NOT BETWEEN ('	h') AND (rt64.c0))) OVER () FROM t0, rt64; -- 0ms;
SELECT ALL ((rt64.c0) BETWEEN (((rt64.c0)OR(rt64.c2))) AND (LIKELY(rt64.c2))), (x'' IN ()), ((((((((((((-2090427150)AND(t0.c0)))AND(t0.c0)))AND(((rt64.c2)-(rt64.c2)))))AND((~ (rt64.c2)))))OR(((('*V', t0.c0, t0.c0)) BETWEEN ((rt64.c2, rt64.c1, rt64.c2)) AND ((t0.c0, t0.c0, rt64.c0))))))AND(json_array(rt64.c0, rt64.c0))) FROM t0 WHERE (((((('S/h\w')<<('3*an'))))=((HEX(0xffffffffe48e2a1c)))));SELECT '-724998970', (((rt64.c0)) BETWEEN ((rt64.c0 COLLATE BINARY)) AND (((NOT (rt64.c0))))), ((t0.c0) NOT NULL) FROM t0;SELECT ALL ((CASE WHEN t0.c0 THEN t0.c0 ELSE rt64.c1 END)||((((t0.c0)) BETWEEN ((t0.c0)) AND ((t0.c0))))) FROM rt64, t0 WHERE (CAST(CAST(0.9306320063460765 AS NUMERIC) AS NUMERIC)); -- 0ms;
SELECT ALL ((((((rt64.c1)LIKE(rt64.c2)))AND(0.2454536143046856)))OR(((rt64.c1)||(rt64.c1)))) FROM rt64, t0; -- 0ms;
SELECT DISTINCT ((((((((((((((rt64.c2)OR(rt64.c1)))AND(t0.c0)))OR(rt64.c2)))AND(t0.c0)))AND(rt64.c0)))OR(rt64.c1)))>((((rt64.c1))==((rt64.c2))))), ((((rt64.c1) NOT BETWEEN (rt64.c2) AND (rt64.c1)))LIKE(json_remove(NULL, rt64.c1))), ((LOWER(DISTINCT rt64.c2)) ISNULL) FROM rt64, t0; -- 0ms;
SELECT (- (((t0.c0) NOT BETWEEN (rt64.c2) AND (0Xffffffff81358886)))) FROM rt64 WHERE (((-2.09042715E9 COLLATE BINARY) NOT BETWEEN ((x'' IN ())) AND (UPPER(2101617870))));SELECT DISTINCT rt64.c1 FROM rt64 WHERE (((((0.4215183548300525 COLLATE BINARY)OR(((NULL)GLOB(NULL)))))AND(CHAR('-1225050126')))); -- 0ms;
SELECT (((rt64.c1)) NOT BETWEEN ((UNICODE(rt64.c0))) AND (((+ (rt64.c0))))) FROM rt64, t0 WHERE (((779010994) IS FALSE)); -- 0ms;
SELECT DISTINCT COUNT(UNLIKELY(DISTINCT t0.c0)) FROM rt64 WHERE (NULL COLLATE BINARY);SELECT DISTINCT rt64.c1, ROW_NUMBER() OVER (), ((((rt64.c2) NOTNULL))>=((rt64.c1 IN ()))) FROM rt64; -- 0ms;
SELECT DISTINCT SUM(((t0.c0) NOT NULL)) FILTER(WHERE (~ (((rt64.c2) NOT BETWEEN (-823344449) AND (t0.c0))))) OVER (), ((((rt64.c0)>=(rt64.c2)))OR(CAST(t0.c0 AS BLOB))), CAST('\Kb2' AS TEXT) FROM rt64 WHERE ((~ ('whᷝ')));SELECT DISTINCT json_extract(t0.c0, NULL) FROM t0, rt64 LIMIT 1791061004 OFFSET -2073693694;SELECT TOTAL((rt64.c0 IN (t0.c0, t0.c0))) OVER () FROM t0 WHERE (((CASE WHEN 0.1623577541937501 THEN '-151489106' END)==((('451968537') IS FALSE)))) GROUP BY ((((rt64.c1)IS NOT(rt64.c1))) NOT BETWEEN ((NOT (t0.c0))) AND (((t0.c0)-(t0.c0))));SELECT ALL ((NOT ('-1735358404')) IN ()) FROM rt64 WHERE ((+ (((NULL)|(x''))))); -- 0ms;
SELECT DISTINCT PERCENT_RANK() OVER (), CAST(((0.24525261294485334) IS TRUE) AS NUMERIC), COUNT(((rt64.c1) ISNULL) COLLATE NOCASE) OVER () FROM t0, rt64 WHERE (LAST_INSERT_ROWID() COLLATE RTRIM); -- 1ms;
SELECT ALL ((rt64.c1) BETWEEN (rt64.c0) AND (rt64.c0)) COLLATE RTRIM FROM t0, rt64; -- 0ms;
SELECT DISTINCT (CAST(t0.c0 AS NUMERIC) IN (NULL)) FROM rt64, t0; -- 0ms;
SELECT DISTINCT ((((rt64.c2) IS FALSE)) IS TRUE) FROM t0 WHERE ((+ ((NULL IN ())))) GROUP BY rt64.c0;SELECT DISTINCT ((TRIM(DISTINCT t0.c0, rt64.c0))|((t0.c0 IN ()))) FROM rt64, t0 WHERE ((((LIKELY(DISTINCT NULL)))<=((CASE WHEN x'db81' THEN 1.45903176E9 WHEN 0.004289960130133608 THEN '-1539852358' WHEN x'' THEN NULL ELSE 'P' END)))) GROUP BY CASE (+ (x''))  WHEN CAST(rt64.c1 AS REAL) THEN ((rt64.c2) NOTNULL) END HAVING (((+ (t0.c0))) NOT NULL); -- 0ms;
SELECT ALL ((((((((JULIANDAY(t0.c0, rt64.c1, rt64.c1))AND(COUNT(rt64.c1))))AND(((rt64.c1)/(rt64.c1)))))OR(JULIANDAY(t0.c0, rt64.c0, x'b5f5'))))OR(((((NULL)AND(t0.c0)))OR(rt64.c1)))), (((NOT (NULL)))*((t0.c0 IN (x'', rt64.c2)))), ((t0.c0) NOT BETWEEN (t0.c0) AND (CASE WHEN rt64.c0 THEN rt64.c2 ELSE rt64.c0 END)), (rt64.c2 IN (LIKELY(DISTINCT rt64.c1))), (rt64.c0 IN ()) FROM t0;SELECT DISTINCT t0.c0 FROM t0; -- 0ms;
SELECT ALL PERCENT_RANK() OVER (), GROUP_CONCAT(((rt64.c1) NOTNULL)), CASE (- (t0.c0))  WHEN rt64.c1 THEN ((rt64.c1)IS(t0.c0)) WHEN CASE rt64.c0  WHEN rt64.c2 THEN -1.118059429E9 END THEN COUNT(*) WHEN CAST(rt64.c2 AS TEXT) THEN ((t0.c0) IS FALSE) END FROM t0 WHERE ((((- (''))) IS FALSE));SELECT ALL (+ (TOTAL(rt64.c1))) FROM t0, rt64 LIMIT 1836725652; -- 0ms;
SELECT MIN(CASE WHEN t0.c0 THEN t0.c0 ELSE t0.c0 END) FROM rt64, t0 WHERE (LOWER(((((((((0.3677707350545627)AND(x'b4670717')))AND(0.681180553314214)))OR('428396549')))AND(x'')))) GROUP BY ((((((((CAST(t0.c0 AS NUMERIC))AND(CASE rt64.c2  WHEN rt64.c0 THEN t0.c0 ELSE rt64.c0 END)))AND(0.9956737481358737)))OR('448277340')))AND(rt64.c0 COLLATE RTRIM)) HAVING AVG(((rt64.c1) NOT NULL)); -- 0ms;
SELECT DISTINCT CASE GROUP_CONCAT(t0.c0)  WHEN UNLIKELY(rt64.c0) THEN ((rt64.c0)%(x'')) WHEN load_extension(t0.c0) THEN (rt64.c2 IN (rt64.c1, rt64.c0)) WHEN ((t0.c0)&(rt64.c2)) THEN ((((rt64.c0)OR(t0.c0)))AND(rt64.c0)) WHEN (rt64.c1 IN ()) THEN ((t0.c0)>(rt64.c0)) WHEN rt64.c0 COLLATE RTRIM THEN (+ (t0.c0)) END, CASE (NOT (rt64.c0))  WHEN CASE ''  WHEN rt64.c1 THEN rt64.c0 END THEN ((t0.c0) NOTNULL) WHEN (~ (rt64.c2)) THEN ((rt64.c0)GLOB(t0.c0)) WHEN (~ (rt64.c0)) THEN ((rt64.c1) IS TRUE) END, ((((((t0.c0)) NOT BETWEEN ((rt64.c1)) AND ((rt64.c0)))))>=((CASE WHEN rt64.c2 THEN rt64.c2 END))) FROM t0, rt64 WHERE ((CASE WHEN 'Y*/HM顦u' THEN '1467684585' END IN ()));SELECT CASE WHEN ((rt64.c1) BETWEEN (t0.c0) AND (rt64.c2)) THEN ((rt64.c1) IS TRUE) END FROM rt64, t0; -- 0ms;
SELECT AVG(ABS(rt64.c0)) OVER () FROM t0;SELECT ALL ((((((rt64.c0) NOT BETWEEN (rt64.c0) AND (rt64.c2)))AND(((t0.c0)>(rt64.c0)))))AND(TOTAL(rt64.c0))) FROM t0, rt64; -- 0ms;
SELECT DISTINCT LAST_VALUE(LIKELY(CAST(t0.c0 AS TEXT))) OVER () FROM t0; -- 0ms;
SELECT ((((rt64.c2) BETWEEN (x'') AND (rt64.c0))) IS FALSE) FROM t0;SELECT DISTINCT SUM(CAST(rt64.c2 AS INTEGER)) FROM t0, rt64 GROUP BY LTRIM(0x2c5c7377, ((t0.c0) NOT BETWEEN (rt64.c2) AND (0x4cd6170))) HAVING CASE ((rt64.c0)/(rt64.c1))  WHEN rt64.c0 COLLATE NOCASE THEN LIKELIHOOD(rt64.c2, 0.04740691494104532) ELSE ((t0.c0)|(rt64.c1)) END ORDER BY (((x'495e3116')) NOT BETWEEN ((((((rt64.c1)AND(rt64.c1)))AND(t0.c0)))) AND (((+ (rt64.c1))))) ASC  NULLS FIRST LIMIT -141939414; -- 0ms;
SELECT DISTINCT (NOT (json_array_length(rt64.c0))) FROM rt64, t0; -- 1ms;
SELECT DISTINCT rt64.c1 FROM rt64 LIMIT -1959701739 OFFSET -679350808; -- 0ms;
SELECT (((t0.c0) NOT BETWEEN (rt64.c1) AND (rt64.c1)) IN ()), NULL, ((+ (rt64.c1)) IN ()), ((MIN(t0.c0)) NOT NULL), IFNULL(DISTINCT rt64.c0, CAST(rt64.c1 AS BLOB)) FROM rt64, t0; -- 0ms;
SELECT MAX(IFNULL(DISTINCT rt64.c1, rt64.c2)) FROM t0;SELECT DISTINCT NULL, DENSE_RANK() OVER (), (((((rt64.c1))>=((rt64.c1))))*(CASE 0X5fedb9f6  WHEN rt64.c1 THEN rt64.c0 WHEN t0.c0 THEN '-1507715943' WHEN rt64.c0 THEN t0.c0 ELSE rt64.c1 END)) FROM t0 WHERE (((CHAR('-921571007', '{b', x'614185b6')) ISNULL));SELECT DISTINCT 0.7007360846920295, ((((((((((((((rt64.c1)AND(rt64.c1)))AND(-1.945314309E9)))OR(rt64.c2)))OR(t0.c0)))AND(rt64.c2)))OR(rt64.c1))) NOT BETWEEN (((t0.c0) NOT BETWEEN (rt64.c2) AND (NULL))) AND ((rt64.c1 IN ()))), NULL FROM t0;SELECT ALL MIN(((rt64.c1) NOTNULL)) FROM t0, rt64 WHERE (CASE (('') NOT NULL)  WHEN ((((0.5170091207026127)OR(0.7925525779525698)))OR('0.35713871337672776')) THEN ((x'')LIKE('0.4379137883435046')) ELSE (x'f78f' IN ()) END); -- 0ms;
SELECT x'' FROM t0, rt64 GROUP BY IFNULL(((rt64.c1)|(rt64.c2)), (rt64.c2 IN ())); -- 4ms;
SELECT ((((t0.c0 IN ()), ((((t0.c0)AND(x'')))OR(rt64.c2)), (((rt64.c2, t0.c0, t0.c0)) BETWEEN ((rt64.c0, rt64.c2, t0.c0)) AND ((rt64.c0, t0.c0, rt64.c0)))))<>((rt64.c2, ((t0.c0)-(rt64.c0)), GROUP_CONCAT(t0.c0)))), SUM(((rt64.c2)IS(rt64.c0))), ((rt64.c1) NOTNULL) FROM rt64, t0; -- 0ms;
SELECT '-1555588365', ((((rt64.c1)OR(rt64.c0)))||(CAST(NULL AS REAL))), (CASE WHEN rt64.c1 THEN rt64.c1 END IN (NULL)) FROM rt64, t0 WHERE (((((('')<<(x'f32c'))))>=((((-1876958544)<<(x'b5cb')))))) GROUP BY NULL; -- 0ms;
SELECT DISTINCT CASE WHEN MIN(t0.c0) THEN rt64.c2 COLLATE BINARY END FROM t0, rt64 LIMIT 428396549; -- 0ms;
SELECT ALL (((t0.c0 IN ())) NOT BETWEEN (CASE rt64.c2  WHEN rt64.c2 THEN rt64.c1 ELSE rt64.c0 END) AND (CAST(t0.c0 AS INTEGER))) FROM rt64 WHERE (HEX(DISTINCT CASE 0.69645119597438  WHEN 0.20715805928542863 THEN 0.888283563588923 WHEN x'5775' THEN 3.41681114E8 WHEN x'' THEN 0.08505244950288415 END)) ORDER BY ((t0.c0)>>(CAST(rt64.c1 AS NUMERIC)))  NULLS FIRST, rt64.c2 DESC  NULLS FIRST, (~ ((t0.c0 IN ()))) DESC LIMIT -1159002327;SELECT DISTINCT CASE (rt64.c1 IN ())  WHEN (- (rt64.c1)) THEN ((((((((rt64.c1)OR(t0.c0)))OR(rt64.c1)))AND(rt64.c2)))OR('M')) END FROM rt64 WHERE ((('1068281384') BETWEEN (0Xffffffffa2930e0e) AND ('1720682090')) COLLATE RTRIM) ORDER BY (NOT (((rt64.c2)<>(rt64.c2)))) DESC, ((((rt64.c0)/(rt64.c1))) NOT BETWEEN ((NOT (t0.c0))) AND (((rt64.c0) IS TRUE))) DESC;SELECT ((NOT (t0.c0)) IN (((x'')LIKE(rt64.c0)), ((rt64.c1) NOTNULL))) FROM t0, rt64 WHERE (((((((((0.9973819525062534)OR(NULL)))AND('d7')))AND(0.4734710257952133)))OR('-1334419847')) COLLATE NOCASE); -- 0ms;
SELECT ALL (((CASE WHEN t0.c0 THEN rt64.c2 WHEN rt64.c1 THEN rt64.c1 WHEN rt64.c1 THEN rt64.c2 ELSE NULL END, MAX(rt64.c0), ((((rt64.c2)OR(t0.c0)))OR(rt64.c1))))>=((CASE WHEN rt64.c2 THEN x'' ELSE 0.5222319203556162 END, CASE rt64.c0  WHEN rt64.c1 THEN rt64.c2 ELSE rt64.c2 END, rt64.c2 COLLATE BINARY))), ((((t0.c0) BETWEEN (rt64.c1) AND (rt64.c1))) IS TRUE), (+ (((((rt64.c0)OR(t0.c0)))AND(rt64.c1)))) FROM t0, rt64 WHERE ((((((((((((((('-1115672530')<>(NULL)))AND(x'')))AND(NULLIF(x'', 5.1800638E8))))AND('0.5630862203132745' COLLATE NOCASE)))OR(x'' COLLATE NOCASE)))OR(((NULL)IS(0.3374800926040846)))))OR(((1075318510)<<(x''))))); -- 0ms;
SELECT DISTINCT AVG(CAST(t0.c0 AS NUMERIC)) FROM t0; -- 0ms;
SELECT DISTINCT '' FROM t0, rt64; -- 0ms;
SELECT ALL CASE (rt64.c0 IN ())  WHEN ((rt64.c0) NOT NULL) THEN ((((rt64.c2)AND(t0.c0)))OR(0.43140998172822664)) ELSE ((rt64.c1)IS NOT(t0.c0)) END FROM rt64, t0 ORDER BY (+ (((rt64.c0) IS TRUE))) ASC  NULLS LAST, (((rt64.c0 IN ()))||(((t0.c0) ISNULL))) ASC  NULLS FIRST; -- 0ms;
SELECT DISTINCT ((((rt64.c2)/(rt64.c1))) NOT NULL) FROM rt64, t0 WHERE ((CASE 0.6063269724451341  WHEN '549680409' THEN '\Y' END IN ())); -- 0ms;
SELECT DISTINCT (- (((rt64.c0) NOT NULL))) FROM t0 NOT INDEXED;SELECT DISTINCT 'ANbgB', ((rt64.c0 COLLATE BINARY)<<(((t0.c0) BETWEEN (rt64.c1) AND (t0.c0)))), (x'' IN ()) FROM t0, rt64 WHERE (((0.5881317240066755)IS NOT(NULL)) COLLATE RTRIM) ORDER BY ((rt64.c0 IN (rt64.c2, t0.c0)) IN ())  NULLS LAST; -- 1ms;
SELECT DISTINCT ((t0.c0 COLLATE NOCASE)/(rt64.c2)) FROM t0;SELECT DISTINCT LAST_VALUE(((((((((((t0.c0) NOTNULL))AND(((t0.c0) BETWEEN (rt64.c2) AND (rt64.c1)))))AND(((rt64.c1)<=(rt64.c0)))))OR(1357971532 COLLATE BINARY)))AND((NOT (t0.c0))))) OVER ( ORDER BY ((((((((((((CASE WHEN rt64.c0 THEN rt64.c0 END)AND(rt64.c0)))AND(((rt64.c0) IS FALSE))))AND(((rt64.c0) NOT BETWEEN (t0.c0) AND (t0.c0)))))OR((rt64.c2 IN (rt64.c2)))))OR(((rt64.c0) NOT BETWEEN (rt64.c1) AND (rt64.c2)))))AND(((rt64.c0)|(x'')))) ASC  NULLS LAST), ((rt64.c0)-((((rt64.c2, 0.4785108654059046, rt64.c2)) BETWEEN ((rt64.c1, rt64.c0, t0.c0)) AND ((rt64.c2, rt64.c2, t0.c0))))), (NOT (rt64.c2 COLLATE BINARY)) FROM rt64, t0 WHERE (((((-1.695303761E9)AND((+ (0.7042530083644932)))))AND(((0.12580014455048305) BETWEEN (NULL) AND (''))))); -- 0ms;
SELECT DISTINCT ((CASE t0.c0  WHEN rt64.c0 THEN rt64.c2 WHEN NULL THEN rt64.c0 WHEN rt64.c0 THEN '-1749761609' ELSE rt64.c1 END) NOT BETWEEN (((t0.c0)IS NOT(rt64.c1))) AND ((((t0.c0, rt64.c0, t0.c0))<>((t0.c0, rt64.c2, rt64.c1))))) FROM rt64, t0 WHERE ((~ (CAST(0xffffffffd76840f4 AS TEXT)))) GROUP BY CAST(0.01518327833972688 AS BLOB) HAVING (CAST(t0.c0 AS TEXT) IN ()) ORDER BY ((((x'daea')AND(((t0.c0)&(rt64.c1)))))AND(((rt64.c1)OR(rt64.c0)))); -- 0ms;
SELECT ALL (((rt64.c0)>>('G')) IN ()) FROM rt64, t0 WHERE (CAST(0.40249640537398734 COLLATE RTRIM AS REAL)); -- 0ms;
SELECT DISTINCT (((((rt64.c1)) BETWEEN ((rt64.c1)) AND ((rt64.c2)))) IS TRUE) FROM rt64, t0 WHERE (((((((((((((((0.6171540635004303)LIKE(-9.21571007E8)))AND((-9223372036854775808 IN ()))))AND(CASE WHEN '1016463316' THEN x'' ELSE -2145965926 END)))AND(((0xfffffffffe498c27) IS TRUE))))OR(CASE ''  WHEN -1.339776509E9 THEN '1170838305' ELSE 0.828042207256461 END)))AND(CASE WHEN 105145569 THEN '80568688' END)))AND(((2049810732)GLOB(-2050879342))))) LIMIT 215156761 OFFSET -468423926; -- 0ms;
SELECT DISTINCT ((t0.c0)<<(((0.7220454319108869)*(rt64.c1)))) FROM rt64, t0; -- 0ms;
SELECT (((((rt64.c1)) NOT BETWEEN ((rt64.c0)) AND ((rt64.c1)))) IS FALSE) FROM rt64 WHERE ('{b勘oM]P'); -- 0ms;
SELECT ALL ((((((0.19390189674919533)AND(rt64.c0)))OR('362749729')))AND(((t0.c0)!=(rt64.c2)))) FROM t0, rt64 WHERE ((((NOT ('-542652970')))<<((+ (0.012193815439329181))))); -- 0ms;
SELECT DISTINCT CAST(((rt64.c0)<<(t0.c0)) AS INTEGER), CAST(rt64.c2 AS TEXT), (((((rt64.c2)GLOB(rt64.c0))))<=((((((rt64.c1)OR(t0.c0)))AND(rt64.c1))))) FROM t0, rt64; -- 0ms;
SELECT DISTINCT ROW_NUMBER() OVER () FROM t0; -- 0ms;
SELECT ((CAST(t0.c0 AS TEXT))+(((rt64.c0)IS(rt64.c1)))) FROM t0, rt64; -- 0ms;
SELECT DISTINCT (((t0.c0, t0.c0, rt64.c1, rt64.c1, rt64.c2)) BETWEEN ((CASE t0.c0  WHEN rt64.c0 THEN rt64.c0 ELSE t0.c0 END, rt64.c2 COLLATE BINARY, (((rt64.c2))>=((t0.c0))), (+ (rt64.c1)), CAST(rt64.c0 AS BLOB))) AND (('' COLLATE RTRIM, ((t0.c0)LIKE(t0.c0)), 0x17bae622, (~ (rt64.c1)), CAST('>6>' AS BLOB)))) FROM rt64;SELECT DISTINCT (~ (CAST(x'' AS TEXT))) FROM t0 WHERE ((((QUOTE('2105883670'), x'8218', HEX(x'')))=((((x'') IS TRUE), CAST(NULL AS INTEGER), x'' COLLATE BINARY)))); -- 0ms;
SELECT ((((0x788a030d))>=((rt64.c0))) IN ()), CAST(((rt64.c1)==(t0.c0)) AS REAL), 0X6457f182 FROM rt64, t0 WHERE (CAST(((('c'))==((x'0794'))) AS TEXT)); -- 0ms;
SELECT ((CASE 0x2ca39e92  WHEN t0.c0 THEN 0.0637589922614421 ELSE rt64.c2 END) NOT BETWEEN (rt64.c1 COLLATE BINARY) AND (0Xffffffffa54a0cdc)) FROM t0;SELECT ALL (NOT (CASE WHEN rt64.c1 THEN rt64.c1 ELSE t0.c0 END)), (+ (((rt64.c2)+('')))), ((rt64.c2 COLLATE RTRIM) NOTNULL), ((rt64.c1) IS FALSE) COLLATE BINARY, CAST(t0.c0 AS TEXT) FROM rt64;SELECT (NOT (json_array(t0.c0, rt64.c0, rt64.c0, rt64.c0))), (((rt64.c2 IN ()))=(CASE WHEN rt64.c0 THEN rt64.c2 WHEN rt64.c2 THEN rt64.c0 WHEN 'KN鬰.j<mu' THEN rt64.c2 ELSE rt64.c2 END)), 0.8178001157203583, (((+ ('O许'))) IS TRUE), (((rt64.c1)) NOT BETWEEN (((t0.c0 IN ()))) AND ((rt64.c1))) FROM rt64, t0;SELECT NULL FROM t0, rt64 WHERE (((((NULL)-('')))||(UPPER(NULL)))) LIMIT 1230471806 OFFSET 1459031760; -- 0ms;
SELECT ((((rt64.c1, rt64.c0, t0.c0))=((rt64.c0, rt64.c1, t0.c0))) IN (NULL COLLATE RTRIM)), MAX(((t0.c0) BETWEEN (rt64.c1) AND (rt64.c1))), rt64.c0 FROM t0 WHERE ((((NOT (x'26be'))) IS TRUE)) LIMIT 542388531;SELECT DISTINCT SUM(((rt64.c1)AND(rt64.c1))) OVER (), ((CASE t0.c0  WHEN t0.c0 THEN rt64.c0 WHEN rt64.c1 THEN rt64.c0 WHEN NULL THEN t0.c0 END)%(rt64.c2 COLLATE NOCASE)), CAST(((rt64.c0) ISNULL) AS BLOB) FROM rt64 WHERE ((NOT (CAST(x'cc37' AS INTEGER))));SELECT AVG((rt64.c0 IN ())) FROM rt64, t0 WHERE (((('2133416550')) NOT BETWEEN ((NULL)) AND ((NULL))) COLLATE BINARY COLLATE BINARY); -- 0ms;
SELECT CASE WHEN TOTAL(0.6541513363431075) THEN CAST(rt64.c2 AS NUMERIC) ELSE ((t0.c0)>>(t0.c0)) END FROM t0;SELECT DISTINCT (+ ((rt64.c2 IN (rt64.c0)))), (t0.c0 IN ()) COLLATE RTRIM, NTH_VALUE(((((t0.c0)==(rt64.c1))) NOT BETWEEN ('d7' COLLATE RTRIM) AND (t0.c0)), CASE WHEN (rt64.c2 IN (rt64.c0, t0.c0)) THEN ((t0.c0)AND(rt64.c2)) END) OVER () FROM rt64, t0 ORDER BY ((((rt64.c1)AND((((NULL)) NOT BETWEEN ((rt64.c2)) AND ((t0.c0))))))AND(((rt64.c0)<>(t0.c0)))) DESC;SELECT DISTINCT 80568688 COLLATE BINARY COLLATE NOCASE COLLATE BINARY FROM t0, rt64; -- 0ms;
SELECT DISTINCT -679350808 COLLATE NOCASE FROM rt64 NATURAL JOIN t0; -- 0ms;
SELECT ALL (+ ((rt64.c1 IN (rt64.c1, t0.c0)))) FROM t0 WHERE (((ROUND('{(\nC ', '0.9468546091081294'))-(((NULL)<('124881848')))));SELECT json((rt64.c2 IN (t0.c0))) FROM t0 INNER JOIN rt64 ON CASE WHEN ((rt64.c1)<<(rt64.c1)) THEN rt64.c2 ELSE CASE rt64.c0  WHEN rt64.c0 THEN t0.c0 WHEN rt64.c0 THEN rt64.c1 WHEN rt64.c1 THEN t0.c0 END END WHERE (CAST(((('7)#*\nmT', 0.6072865244963129, '-681033484')) BETWEEN ((x'', 0.8256329602434117, NULL)) AND ((x'', '-1879193643', 'lY''n0-O'))) AS REAL)) ORDER BY (((t0.c0 IN ())) NOT BETWEEN (LIKELIHOOD(t0.c0, 0.4895627628342687)) AND (((rt64.c2)IS NOT(rt64.c0)))) DESC, (t0.c0 IN (NULL)) ASC, CASE WHEN (NOT (x'98af')) THEN UPPER(DISTINCT 'k(5&u]踊빠Ʞ)') WHEN ((rt64.c1)&(rt64.c1)) THEN (((rt64.c0, rt64.c0, t0.c0))<=((rt64.c1, rt64.c0, NULL))) WHEN (rt64.c1 IN (rt64.c0, rt64.c0)) THEN ((t0.c0) ISNULL) END ASC  NULLS FIRST; -- 1ms;
SELECT DISTINCT ((((rt64.c2)OR(rt64.c0))) IS FALSE) FROM t0, rt64 ORDER BY t0.c0 DESC, ((0.3339605219494802)<((NOT (rt64.c2)))), rt64.c2; -- 0ms;
SELECT ALL MAX((+ (rt64.c1)), ((rt64.c1) BETWEEN (rt64.c1) AND (rt64.c0))) FROM rt64, t0 WHERE (735453248) GROUP BY CASE (rt64.c0 IN ())  WHEN ((rt64.c2)LIKE(t0.c0)) THEN (((t0.c0)) BETWEEN ((rt64.c0)) AND ((rt64.c1))) END ORDER BY ((~ (rt64.c1)) IN (((((rt64.c2)OR(rt64.c2)))OR(rt64.c2))))  NULLS LAST, '-2127198074'; -- 0ms;
SELECT ALL CAST(CASE WHEN rt64.c0 THEN '-903252501' WHEN x'' THEN rt64.c1 WHEN rt64.c2 THEN rt64.c2 END AS INTEGER) FROM t0, rt64; -- 0ms;
SELECT DISTINCT '-28734425' FROM rt64 WHERE (('382051735' IN (CAST(0.17511504614191065 AS REAL)))); -- 1ms;
SELECT DISTINCT (((t0.c0 IN (rt64.c2))) NOTNULL) FROM rt64 WHERE (CAST(((0.9648345693980344)GLOB(NULL)) AS BLOB));SELECT DISTINCT COUNT(*) FROM rt64 WHERE (('^Jab[Rg梢' COLLATE BINARY IN ((NOT (0.34955647542370893)), CASE WHEN x'31431620' THEN 0.5900866030381586 END))) GROUP BY (+ (0.0711167003331925)) HAVING (~ (((rt64.c2)|(t0.c0))));SELECT (((t0.c0 IN (1389292967))) IS TRUE) FROM rt64, t0 WHERE (((((TRIM(DISTINCT 0.3571677430972905))OR('-398848445' COLLATE NOCASE)))AND(((((((((x'e0627338')OR('AK*')))AND(NULL)))OR('!u')))OR('{b'))))); -- 0ms;
SELECT DISTINCT rt64.c1, (~ (((t0.c0) NOT BETWEEN (rt64.c2) AND (rt64.c0)))), DENSE_RANK() OVER (), (+ (CAST('' AS BLOB))), SQLITE_SOURCE_ID() FROM rt64, t0 WHERE ((((CAST(x'' AS BLOB)))<=((((x'a4c87ae2') IS TRUE))))) GROUP BY (+ (CAST(t0.c0 AS BLOB))), ((rt64.c0 IN ()) IN ()), ((CASE rt64.c1  WHEN rt64.c2 THEN NULL ELSE t0.c0 END)AND(CAST(rt64.c2 AS TEXT))) HAVING (t0.c0 IN ()) COLLATE RTRIM; -- 1ms;
SELECT DISTINCT (NOT (0.7192640403874123)) COLLATE NOCASE, (- (((rt64.c0)GLOB('-2140539390')))), ((MIN(rt64.c2)) IS FALSE) FROM rt64, t0; -- 0ms;
SELECT ALL CASE WHEN (- (rt64.c2)) THEN (((x''))<((t0.c0))) WHEN ((rt64.c2)+(rt64.c0)) THEN 1926533508 WHEN t0.c0 COLLATE NOCASE THEN t0.c0 ELSE (((rt64.c1))=((rt64.c2))) END FROM t0;SELECT DISTINCT ((((((rt64.c1)OR(rt64.c1)))OR(rt64.c0))) NOT BETWEEN (((rt64.c2) NOT BETWEEN (t0.c0) AND (rt64.c0))) AND (((t0.c0) IS TRUE))) FROM rt64, t0 WHERE (((((x'')>=(x'')))<>(((((0Xffffffff9dca5129)AND('i-๾')))OR(2.62884571E8))))); -- 0ms;
SELECT DISTINCT ((rt64.c2)/(CAST(t0.c0 AS BLOB))) FROM t0, rt64 WHERE (CAST((+ (188354614)) AS TEXT)); -- 0ms;
SELECT (((((rt64.c0) NOT BETWEEN (t0.c0) AND (t0.c0)), ((((rt64.c0)OR(rt64.c2)))AND(rt64.c0)), CASE rt64.c0  WHEN rt64.c1 THEN rt64.c0 WHEN rt64.c0 THEN rt64.c2 WHEN t0.c0 THEN t0.c0 WHEN t0.c0 THEN x'' WHEN NULL THEN t0.c0 ELSE rt64.c2 END))!=(('-697333095', CAST(rt64.c0 AS NUMERIC), (- (rt64.c2))))) FROM rt64, t0; -- 0ms;
SELECT DISTINCT ((((((((rt64.c1)AND(t0.c0)))AND(rt64.c2)))AND(rt64.c1 COLLATE RTRIM)))OR(CAST(t0.c0 AS BLOB))), CASE ((rt64.c0) IS TRUE)  WHEN (((rt64.c1)) NOT BETWEEN ((rt64.c1)) AND ((rt64.c1))) THEN ((t0.c0)+(rt64.c2)) END, (((0.5630862203132745))<=((json(rt64.c2)))), ((0.41366307574886885)>=(rt64.c2)), (((rt64.c2) IS FALSE) IN ()) FROM t0, rt64; -- 0ms;
SELECT ALL CAST(rt64.c2 AS BLOB) COLLATE NOCASE FROM rt64 WHERE ((- (('-404298935' IN ())))); -- 0ms;
SELECT GROUP_CONCAT(((rt64.c0) NOT BETWEEN (rt64.c0) AND (t0.c0))) OVER ( ORDER BY (((((((((~ (rt64.c2)))OR(rt64.c0 COLLATE RTRIM)))AND(rt64.c1 COLLATE NOCASE)))AND((('84156978')>(t0.c0)))))OR(((rt64.c0) IS FALSE)))  NULLS FIRST), DATETIME((rt64.c1 IN ()), (rt64.c0 IN ()), CAST(rt64.c2 AS BLOB)), 0.597194951951208 FROM t0, rt64 WHERE (((((0.35713871337672776)>=('0.888283563588923'))) BETWEEN (((x'')IS NOT(-2.8734425E7))) AND (CAST('B' AS REAL)))); -- 0ms;
SELECT DISTINCT (((rt64.c2) BETWEEN (rt64.c1) AND (t0.c0)) IN ()) FROM rt64, t0 WHERE (((TRIM(x'', ''))=(x'' COLLATE RTRIM))); -- 0ms;
SELECT ALL (((rt64.c1)) BETWEEN (((rt64.c0 IN (rt64.c1)))) AND ((AVG(t0.c0)))), ((COUNT(*))&((rt64.c1 IN (t0.c0)))), ((NULL)>>(x'301e')) COLLATE NOCASE FROM t0, rt64 WHERE (((((0xffffffffa9a54ba2) IS FALSE)) NOT NULL)); -- 1ms;
SELECT DISTINCT SUM(UPPER(t0.c0)) OVER (), (- (rt64.c0)), COUNT(*) FROM t0, rt64 GROUP BY CAST('1448608874' AS TEXT); -- 0ms;
SELECT DISTINCT COUNT(((rt64.c0)<<('1459031760'))) OVER () FROM t0 WHERE (x'') GROUP BY ((((rt64.c2) NOTNULL)) IS FALSE);SELECT DISTINCT ((rt64.c1 COLLATE RTRIM) IS TRUE) FROM t0, rt64 WHERE ((((('-221780407') IS FALSE)) ISNULL)) ORDER BY NULLIF(rt64.c1, rt64.c0) ASC  NULLS LAST; -- 0ms;
SELECT DISTINCT CASE WHEN '857747949' THEN rt64.c0 ELSE rt64.c0 END COLLATE RTRIM FROM rt64; -- 0ms;
SELECT (((CAST(t0.c0 AS INTEGER)))>((COUNT(rt64.c2)))) FROM t0;SELECT ((~ ('B荩OU!')) IN ()), (((rt64.c0 IN (t0.c0)))+(COUNT(*))), (- ((((x''))==((rt64.c2))))) FROM t0, rt64 ORDER BY 0.8188534588296903; -- 1ms;
SELECT DISTINCT x'' FROM rt64, t0 WHERE (((((((NULL)AND(NULL)))OR(0.9777113203154537))) IS FALSE)); -- 0ms;
SELECT GROUP_CONCAT((~ (rt64.c2))) OVER ( RANGE rt64.c0 PRECEDING EXCLUDE TIES) FROM rt64 WHERE ((((((((((NULL IN ()))AND('341681114' COLLATE BINARY)))OR(IFNULL(DISTINCT 'h y', NULL))))AND(((NULL)OR(0.9236199079215369)))))AND((0.03044516662111152 IN ())))) GROUP BY CASE rt64.c0 COLLATE RTRIM  WHEN CASE rt64.c1  WHEN t0.c0 THEN rt64.c1 WHEN rt64.c2 THEN 0Xffffffff968bd28a WHEN rt64.c1 THEN rt64.c0 ELSE t0.c0 END THEN (- (rt64.c2)) END;SELECT FIRST_VALUE(CAST((~ (rt64.c0)) AS TEXT)) OVER () FROM rt64; -- 0ms;
SELECT DISTINCT (t0.c0 IN ()) FROM rt64, t0; -- 0ms;
SELECT ALL ((((CAST(NULL AS TEXT))OR(0.6418937384788512)))OR(((rt64.c1)LIKE(rt64.c0)))) FROM t0;SELECT DISTINCT (+ (((((((((rt64.c1)OR(0.7842035273768092)))AND(rt64.c0)))AND(rt64.c0)))AND(rt64.c1)))) FROM rt64; -- 0ms;
SELECT ALL ((((rt64.c2) BETWEEN (rt64.c0) AND (t0.c0)))IS(UNLIKELY(DISTINCT rt64.c2))) FROM t0, rt64 WHERE (CAST(((0.004289960130133608)<=('')) AS REAL)); -- 1ms;
SELECT DISTINCT GROUP_CONCAT('-2134549316') FROM t0; -- 0ms;
SELECT ALL (((((rt64.c2) NOT BETWEEN (rt64.c0) AND (NULL)), CAST(rt64.c0 AS INTEGER), NULL))>((((((((((rt64.c2)OR(rt64.c2)))OR(t0.c0)))AND(t0.c0)))AND(rt64.c2)), rt64.c1 COLLATE NOCASE, rt64.c2))), CASE rt64.c0  WHEN rt64.c1 THEN rt64.c0 ELSE t0.c0 END COLLATE RTRIM, LAG(rt64.c0, (((rt64.c0)) NOT BETWEEN ((rt64.c1)) AND (((NOT (rt64.c1))))), ((((((t0.c0)OR(rt64.c0)))AND(rt64.c0))) BETWEEN ((rt64.c0 IN ())) AND (CAST(x'' AS TEXT)))) OVER (), '', NULL FROM t0, rt64 WHERE ((((NULL) IS FALSE) IN ((('416475289')IS(x''))))); -- 0ms;
SELECT DISTINCT rt64.c0 FROM rt64 LEFT OUTER JOIN t0 ON ABS(DISTINCT ((t0.c0)OR(t0.c0))) WHERE (''); -- 0ms;
SELECT ALL CAST(t0.c0 AS REAL), ((((rt64.c1)IS(rt64.c1)))/(CASE rt64.c1  WHEN rt64.c0 THEN t0.c0 WHEN rt64.c1 THEN NULL WHEN t0.c0 THEN rt64.c1 END)), ((((t0.c0)<>(rt64.c0)))<(rt64.c1)) FROM t0, rt64 WHERE ((- (((((NULL)OR(0.03993184340217981)))OR(x''))))); -- 0ms;
SELECT (+ (UNLIKELY(DISTINCT rt64.c2))) FROM t0, rt64 GROUP BY ((((rt64.c2) NOT BETWEEN (rt64.c1) AND (rt64.c2)))GLOB(CASE WHEN t0.c0 THEN t0.c0 WHEN rt64.c2 THEN t0.c0 WHEN rt64.c0 THEN 'y(' END)) HAVING ((MIN(rt64.c1))>(SUM(rt64.c2))); -- 1ms;
SELECT CAST('113249806' AS BLOB) COLLATE BINARY FROM t0, rt64; -- 0ms;
SELECT DISTINCT x'b7f1' FROM rt64, t0 WHERE ((((('䬆儁\n/u#d')GLOB(0X1d007161)))&(('1J' IN ('428396549', '', NULL))))); -- 0ms;
SELECT DISTINCT ((((rt64.c0) BETWEEN (t0.c0) AND (rt64.c2))) IS FALSE), GROUP_CONCAT((NOT (rt64.c0))) OVER (), (((((t0.c0) IS FALSE)))>=((((t0.c0)>(x''))))) FROM rt64, t0 INDEXED BY i20 WHERE (((CASE WHEN x'' THEN '^)x50' ELSE x'' END)/(('481135920' IN ()))));SELECT DISTINCT ((((rt64.c0) NOTNULL)) NOT NULL) FROM rt64; -- 0ms;
SELECT ALL CASE WHEN ((rt64.c1)LIKE(rt64.c2)) THEN (((rt64.c0, rt64.c1, x'')) NOT BETWEEN ((rt64.c0, t0.c0, t0.c0)) AND ((rt64.c1, t0.c0, rt64.c0))) WHEN ((rt64.c1)AND('_?z_* 0')) THEN CASE WHEN NULL THEN rt64.c0 WHEN rt64.c1 THEN t0.c0 WHEN rt64.c1 THEN 0.9384245073361832 ELSE rt64.c1 END WHEN TRIM(rt64.c1, rt64.c2) THEN t0.c0 COLLATE NOCASE WHEN ((rt64.c2)|(rt64.c0)) THEN (((rt64.c1))<((rt64.c1))) WHEN rt64.c2 THEN CASE rt64.c1  WHEN rt64.c1 THEN rt64.c0 ELSE rt64.c1 END ELSE ((rt64.c2)LIKE(t0.c0)) END FROM rt64;SELECT DISTINCT NTH_VALUE(t0.c0, t0.c0) OVER () FROM t0;SELECT ALL TOTAL(HEX(DISTINCT rt64.c1)) OVER (), CASE WHEN t0.c0 COLLATE NOCASE THEN ((rt64.c0)IS(rt64.c1)) WHEN AVG(rt64.c0) THEN ((((rt64.c1)OR('cVp	?,')))AND(rt64.c0)) WHEN CASE rt64.c2  WHEN rt64.c0 THEN rt64.c2 ELSE rt64.c0 END THEN (rt64.c1 IN ()) ELSE ((t0.c0) ISNULL) END, (((((rt64.c0)OR(rt64.c2)))AND(rt64.c1)) IN ()) FROM t0, rt64 WHERE (((((((((((0x2892f11f)GLOB('z~ޒveal*')))OR(CAST('1819742040' AS TEXT))))AND(0.004942482617837363)))AND(CASE WHEN NULL THEN x'' WHEN 0X2a4616c9 THEN '0.2195349075696692' WHEN 'F-z鵫' THEN NULL ELSE x'' END)))OR(((('ko', '', x'e91a', -1594195671, '-2059430282'))!=((0.030086114870453873, x'', x'57289963', x'', '262884571')))))) GROUP BY CASE rt64.c1  WHEN 0.41849612321606844 THEN rt64.c2 WHEN ((rt64.c2) BETWEEN (rt64.c0) AND (rt64.c2)) THEN json(rt64.c2) WHEN (rt64.c0 IN ()) THEN CAST(rt64.c0 AS INTEGER) END HAVING t0.c0; -- 0ms;
SELECT DISTINCT (((((((rt64.c1))<((0.2799921480424368))))OR((((('779479005')OR(rt64.c1)))OR(rt64.c1)))))OR((('vG7\r.X汾S4')>(t0.c0)))), (rt64.c1 COLLATE RTRIM IN ()), ABS(DISTINCT ((rt64.c1)OR(rt64.c0))), ((rt64.c0 COLLATE RTRIM) NOT NULL), COUNT((((t0.c0))>=((rt64.c0)))) FILTER(WHERE 0.4223576095610505) OVER (), ((rt64.c2) BETWEEN ((rt64.c0 IN ())) AND (SUM(rt64.c1))), (~ ('jI')) FROM t0;SELECT UPPER(rt64.c1) COLLATE BINARY FROM rt64; -- 0ms;
SELECT CASE WHEN rt64.c1 THEN CAST(rt64.c2 AS BLOB) ELSE CASE rt64.c0  WHEN rt64.c1 THEN rt64.c2 END END FROM rt64; -- 0ms;
SELECT DISTINCT (~ (t0.c0)) COLLATE BINARY, ((rt64.c0)!=((rt64.c1 IN ()))), (- (CAST(rt64.c0 AS BLOB))) FROM rt64 WHERE (IFNULL(DISTINCT '' COLLATE NOCASE, UPPER(x'')));SELECT CASE WHEN CASE WHEN rt64.c2 THEN rt64.c1 WHEN rt64.c0 THEN rt64.c1 WHEN t0.c0 THEN t0.c0 END THEN (+ (rt64.c2)) ELSE rt64.c2 COLLATE BINARY END, AVG(NULLIF(DISTINCT rt64.c2, rt64.c0) COLLATE BINARY) OVER (), ((COUNT(*)) ISNULL) FROM t0, rt64 WHERE ((((x'', ((NULL) BETWEEN ('') AND ('b[]')), (('蕀_')IS NOT(NULL)), ((((0X5e81abd8)AND(NULL)))AND(0.2426547807560936)), ((x'')==('1103372750'))))<(((('-710728420') ISNULL), (- ('1100979023')), CASE '80568688'  WHEN NULL THEN x'' ELSE NULL END, (((('-441959197')OR('')))AND(NULL)), ((('-969975688'))<((NULL))))))); -- 1ms;
SELECT DISTINCT (- (((rt64.c2) NOT BETWEEN (rt64.c2) AND (rt64.c1)))) FROM t0 WHERE (((((NULL)OR(((0.8340565461148957) BETWEEN (6.80718623E8) AND (NULL)))))OR(CASE WHEN 0.7623558931924678 THEN x'af8d' WHEN 130612418 THEN 0.7461820654685021 WHEN NULL THEN NULL END)));SELECT ALL NULL FROM rt64, t0 WHERE ((~ (((1000763220) IS TRUE)))); -- 0ms;
SELECT GROUP_CONCAT((((t0.c0, rt64.c2, rt64.c2)) NOT BETWEEN ((t0.c0, 0.03435733200598212, rt64.c0)) AND ((rt64.c2, rt64.c0, t0.c0)))) FROM t0 WHERE (((((NULL)AND(x'4c79')))OR(CASE x''  WHEN 'B[]' THEN -1.225050126E9 END)));SELECT DISTINCT (((rt64.c2)) NOT BETWEEN ((((rt64.c1)OR(rt64.c2)))) AND ((((rt64.c0) IS TRUE)))), rt64.c0, COUNT((~ (rt64.c1))) COLLATE RTRIM FROM rt64, t0; -- 0ms;
SELECT DISTINCT rt64.c2, (((rt64.c0)<(rt64.c1)) IN ()), HEX((('{}r[') NOT BETWEEN (rt64.c1) AND (rt64.c2))) FROM rt64 WHERE (((json_array_length('C')) BETWEEN (((((0.7281364509899134)AND(0.840233344275277)))OR(NULL))) AND (0.7434261840421349))) ORDER BY RTRIM(((((((((((((rt64.c1)OR(rt64.c0)))OR(rt64.c0)))OR(0.6972950109333028)))OR(rt64.c2)))AND(rt64.c0)))AND(rt64.c0))) ASC LIMIT -1270662378 OFFSET 734801363;SELECT TOTAL(((NULL)<=(rt64.c0))) OVER () FROM rt64 WHERE ((((~ (']*U	3G[)f'))) NOTNULL)); -- 0ms;
SELECT DISTINCT (((rt64.c1) ISNULL) IN ()) FROM t0, rt64 WHERE (6.3117378E7) LIMIT -1245912328; -- 0ms;
SELECT TOTAL(CASE rt64.c0  WHEN t0.c0 THEN rt64.c2 END) OVER (), (((x'')) BETWEEN ((((t0.c0)<(rt64.c2)))) AND ((CAST(rt64.c1 AS NUMERIC)))), TOTAL(rt64.c1) COLLATE BINARY COLLATE NOCASE FROM t0, rt64 WHERE (((CASE WHEN x'271e' THEN 0.8858193265574832 WHEN x'' THEN 0.4982478789718314 WHEN 0.03235248737388263 THEN -1.118059429E9 END) NOT BETWEEN (DATE(0.554267162509222, '', x'')) AND (CASE '\nsS	mft>c'  WHEN '-1339776509' THEN NULL END))); -- 0ms;
SELECT ALL ((((NOT (rt64.c0))))==((NULL))) FROM rt64 WHERE (((((LIKELY(NULL))AND(((0.9414291786603298)>>(-514546881)))))AND((0.23608282761377786 IN ())))) ORDER BY 0.05822813902127777  NULLS LAST; -- 0ms;
SELECT CAST(((rt64.c0) NOTNULL) AS INTEGER) FROM rt64, t0 WHERE ((((('ePᠿ(-8tz軻') IS FALSE)) NOTNULL)) GROUP BY ((((rt64.c2)) NOT BETWEEN ((rt64.c1)) AND ((rt64.c1))) IN ()); -- 1ms;
SELECT MAX((rt64.c2 IN ())) FROM rt64 WHERE ((((0.7281834954214793) NOT BETWEEN (NULL) AND (0.6200755118620446)) IN ())) ORDER BY (((t0.c0, t0.c0, rt64.c1, rt64.c2, rt64.c1)) NOT BETWEEN ((CAST(t0.c0 AS INTEGER), ((rt64.c0)GLOB(rt64.c0)), ((rt64.c2)/(t0.c0)), ABS(rt64.c0), ((rt64.c0)+(t0.c0)))) AND ((((t0.c0)=(rt64.c1)), ((t0.c0)IS NOT(t0.c0)), rt64.c1, (+ (rt64.c1)), rt64.c1)))  NULLS LAST, ((((t0.c0) IS FALSE)) BETWEEN ((rt64.c2 IN ())) AND (((t0.c0) NOT NULL)))  NULLS FIRST;SELECT FIRST_VALUE(TRIM(CAST(t0.c0 AS NUMERIC), CASE t0.c0  WHEN t0.c0 THEN t0.c0 END)) OVER (), (((rt64.c1)) BETWEEN ((((rt64.c2) IS TRUE))) AND ((((rt64.c1) NOT BETWEEN (rt64.c1) AND (rt64.c1))))), ROW_NUMBER() OVER () FROM t0 WHERE ((+ ((NOT ('85')))));SELECT DISTINCT ((((t0.c0) NOT BETWEEN (rt64.c0) AND (rt64.c1))) NOTNULL) FROM t0 WHERE ((~ (((x'')IS NOT('J8U.懼')))));SELECT ((((((((((((t0.c0)OR(t0.c0)))OR(t0.c0)))AND((((('-221780407')OR(rt64.c1)))OR(rt64.c1)))))OR(((((rt64.c1)AND(t0.c0)))AND(rt64.c0)))))OR(((rt64.c0) ISNULL))))AND(TRIM(DISTINCT t0.c0, rt64.c2))) FROM rt64, t0 GROUP BY CASE WHEN ((rt64.c2)!=(rt64.c2)) THEN ((t0.c0) BETWEEN (rt64.c0) AND (rt64.c1)) WHEN (((rt64.c0, t0.c0, rt64.c0))>=((rt64.c1, NULL, rt64.c1))) THEN (((((((('1955017970')AND(rt64.c2)))AND(0X1988d005)))OR(rt64.c2)))AND(t0.c0)) WHEN ((((rt64.c0)AND(rt64.c1)))OR(rt64.c0)) THEN ((rt64.c2)>=(rt64.c1)) END HAVING UNLIKELY((t0.c0 IN ())); -- 0ms;
SELECT ((((t0.c0) NOTNULL))GLOB((rt64.c1 IN (rt64.c1)))), ((((((rt64.c0)AND(rt64.c0)))AND(rt64.c0))) NOTNULL), ((((rt64.c2) NOTNULL)) NOTNULL) FROM t0, rt64 GROUP BY (+ (((((((((t0.c0)AND(t0.c0)))AND(rt64.c0)))OR(rt64.c0)))AND(rt64.c0)))); -- 1ms;
SELECT DISTINCT (((rt64.c1)IS(rt64.c2)) IN ((~ (rt64.c2)))) FROM t0 WHERE (((((((NULL)AND(x'')))OR(x''))) NOT BETWEEN (((((0.4215183548300525)AND(x'')))AND(x''))) AND (0.8259814968870254 COLLATE NOCASE)));SELECT DISTINCT COUNT(*) OVER () FROM rt64, t0; -- 0ms;
SELECT DISTINCT GROUP_CONCAT(GROUP_CONCAT(((rt64.c2) NOTNULL))), (rt64.c2 IN ()) COLLATE NOCASE, (((t0.c0 IN ())) IS TRUE) FROM rt64 ORDER BY (~ ((t0.c0 IN (rt64.c1)))) DESC;SELECT DISTINCT TRIM(DISTINCT ((t0.c0)-(rt64.c2))) FROM t0 ORDER BY ((UPPER(DISTINCT t0.c0))>>(CAST(rt64.c1 AS REAL))) ASC  NULLS FIRST;SELECT DISTINCT rt64.c1, ((((((t0.c0)AND(t0.c0)))AND(rt64.c2)))<>(((((rt64.c1)AND(rt64.c1)))AND(rt64.c0)))), ((((rt64.c1)IS(t0.c0)))OR(x'')), (MAX(rt64.c0) IN ()), ((((NULL)) NOT BETWEEN ((t0.c0)) AND ((rt64.c2))) IN ()) FROM t0, rt64; -- 0ms;
SELECT DISTINCT (GROUP_CONCAT(rt64.c0) IN (0.9870463163846358)) FROM t0;SELECT TRIM(((((rt64.c2)OR(t0.c0)))AND(t0.c0)), ((t0.c0)-(rt64.c2))), (rt64.c2 IN (CASE WHEN rt64.c0 THEN t0.c0 ELSE x'' END, json(rt64.c1))), NTILE((NOT ((((rt64.c1, rt64.c0, 0.8677217353369029, rt64.c0, '0.27074906115365494'))>=((rt64.c1, t0.c0, t0.c0, rt64.c2, rt64.c0)))))) OVER () FROM t0, rt64 WHERE ((~ (CAST(x'c787' AS REAL)))); -- 0ms;
SELECT ALL 0.5948529279681111 FROM t0 GROUP BY (((t0.c0 IN ()))/('1%\rR')), rt64.c1, rt64.c2;SELECT DISTINCT TRIM(DISTINCT (rt64.c2 IN ())) FROM t0, rt64 WHERE (((x'')-(0.20715805928542863)) COLLATE NOCASE); -- 0ms;
SELECT CASE ((((rt64.c1)OR(rt64.c1)))OR(0Xffffffffdc98c99a))  WHEN ((rt64.c0) BETWEEN (rt64.c0) AND (rt64.c2)) THEN CASE rt64.c1  WHEN x'' THEN rt64.c0 ELSE rt64.c2 END END FROM t0, rt64 WHERE (((((((NULL)) NOT BETWEEN ((x'')) AND (('')))))<(('M' COLLATE NOCASE)))); -- 0ms;
SELECT ALL (- (CASE WHEN rt64.c0 THEN rt64.c0 END)) FROM t0, rt64 WHERE ((((+ (''))) ISNULL)); -- 0ms;
SELECT DISTINCT (((0.8578428182701724)) BETWEEN ((t0.c0 COLLATE BINARY)) AND (('5%%.L[b'))) FROM rt64 WHERE ((((((((((((((('')AND(0.1616839897962118)))OR(-3.22809128E8)))AND('neq')))AND(NULL)))OR(0.9922719705016873)))AND(0.5623976878833613)))<<(CASE '#BY'  WHEN NULL THEN '1393463929' ELSE NULL END)));SELECT ALL ((CAST(rt64.c2 AS INTEGER))%((((rt64.c0))==((rt64.c1))))), (((((((rt64.c1, rt64.c1, rt64.c2))<((t0.c0, rt64.c1, rt64.c1))))AND(((((((((rt64.c0)AND(rt64.c1)))OR(t0.c0)))AND(rt64.c2)))OR(rt64.c1)))))AND(((rt64.c2) IS FALSE))), x'' FROM rt64, t0; -- 0ms;
SELECT DISTINCT CAST((- (rt64.c1)) AS NUMERIC) FROM rt64 WHERE ('-1735358404'); -- 0ms;
SELECT DISTINCT '' FROM t0, rt64; -- 0ms;
SELECT ALL rt64.c1 FROM rt64 WHERE (CASE (('-74462624')<>(84156978))  WHEN (((NULL, 0.7897309168881516, 0.27034978945290344))>=((NULL, NULL, 'Infinity'))) THEN 0.2195349075696692 COLLATE RTRIM ELSE ((NULL)==('-4')) END); -- 1ms;
SELECT DISTINCT (t0.c0 IN ()) COLLATE BINARY FROM t0 WHERE ((UNLIKELY(DISTINCT '-1945314309') IN ())); -- 0ms;
SELECT DISTINCT CASE rt64.c0  WHEN rt64.c0 THEN rt64.c2 WHEN rt64.c2 THEN t0.c0 WHEN rt64.c2 THEN rt64.c1 END COLLATE NOCASE FROM rt64, t0 WHERE (((((NULL)GLOB(NULL))) NOT BETWEEN ((0.6714063973716659 IN ())) AND (TYPEOF(DISTINCT 0.6229168650739938)))) GROUP BY ((((rt64.c1) IS FALSE))/(CAST(t0.c0 AS REAL))); -- 0ms;
SELECT COUNT(CASE WHEN t0.c0 THEN rt64.c2 ELSE rt64.c1 END) FROM t0, rt64; -- 0ms;
SELECT DISTINCT ((((((((((t0.c0)OR(rt64.c2)))OR(rt64.c1)))AND(rt64.c1)))AND(rt64.c1))) NOT NULL), (((t0.c0, rt64.c2, rt64.c1)) BETWEEN ((((rt64.c2)<=(rt64.c2)), (rt64.c2 IN ()), ((rt64.c0)>=(t0.c0)))) AND (((((4.44156997E8, rt64.c1, rt64.c1))>=((rt64.c2, rt64.c1, t0.c0))), rt64.c2, (- (rt64.c2))))), CASE LIKELIHOOD(DISTINCT rt64.c0, 0.6109325454741753)  WHEN ((x'') BETWEEN (rt64.c0) AND (rt64.c0)) THEN rt64.c1 COLLATE RTRIM WHEN MAX(rt64.c1) THEN (NOT (rt64.c2)) WHEN MIN(t0.c0) THEN AVG(rt64.c0) ELSE (('搜0h')LIKE(rt64.c0)) END FROM t0, rt64 WHERE ((((CAST(x'' AS INTEGER)))==(((('1226884470') ISNULL))))) GROUP BY TRIM(((rt64.c2)<(t0.c0)), ((rt64.c0) IS FALSE)), ((CAST(rt64.c2 AS NUMERIC)) IS TRUE), ((t0.c0 COLLATE BINARY) BETWEEN ((NOT (rt64.c2))) AND (((((((((t0.c0)AND(rt64.c0)))AND(rt64.c0)))AND(rt64.c2)))AND(rt64.c2)))); -- 1ms;
SELECT DISTINCT ((((rt64.c2) ISNULL))/((+ (t0.c0)))) FROM rt64 WHERE (CASE HEX(DISTINCT NULL)  WHEN (('0.6326653384619897') BETWEEN (x'') AND (NULL)) THEN ((((0.36178737964721897)OR(0X457b4092)))OR(x'ce2b')) END) LIMIT 10906476;SELECT DISTINCT (~ (((t0.c0)<>(t0.c0)))), rt64.c1, DENSE_RANK() OVER (), CAST(((t0.c0) NOT NULL) AS NUMERIC), ((t0.c0 COLLATE NOCASE) ISNULL) FROM rt64 ORDER BY CAST(rt64.c2 AS TEXT)  NULLS LAST;SELECT DISTINCT rt64.c2 FROM t0, rt64 WHERE (CAST(CAST(0.543859379892631 AS NUMERIC) AS REAL)); -- 0ms;
SELECT DISTINCT (- (TOTAL(t0.c0))), ((((COALESCE(rt64.c2, rt64.c0, t0.c0, rt64.c1))AND((((x''))=((rt64.c0))))))AND(((rt64.c1) ISNULL))), LAST_VALUE(CASE WHEN CASE t0.c0  WHEN 0.9216123414870256 THEN t0.c0 END THEN (t0.c0 IN ()) WHEN ((((t0.c0)OR(t0.c0)))AND(t0.c0)) THEN ((t0.c0) NOT BETWEEN (t0.c0) AND ('-1034197564')) WHEN x'c20a' THEN ((t0.c0) BETWEEN (t0.c0) AND (t0.c0)) ELSE CASE WHEN '-794787803' THEN t0.c0 WHEN t0.c0 THEN t0.c0 WHEN t0.c0 THEN t0.c0 ELSE t0.c0 END END) OVER () FROM t0 WHERE (((CAST('341681114' AS REAL)) ISNULL));SELECT ALL '', CASE (((rt64.c0, rt64.c1, rt64.c2)) NOT BETWEEN ((rt64.c2, t0.c0, rt64.c0)) AND ((rt64.c1, rt64.c0, t0.c0)))  WHEN ((rt64.c1) ISNULL) THEN ((rt64.c0) IS TRUE) END, AVG(0.01617012148445962) FROM rt64, t0 ORDER BY ((((((rt64.c1)AND(rt64.c1)))AND(t0.c0))) BETWEEN ((rt64.c2 IN ())) AND (((rt64.c1)OR(rt64.c0)))) DESC, CAST(MIN(rt64.c0, rt64.c2, t0.c0, rt64.c0) AS REAL); -- 0ms;
SELECT ALL CAST(rt64.c1 AS BLOB) FROM t0, rt64 NOT INDEXED WHERE ((- (((x'') IS FALSE)))) LIMIT -303372844; -- 0ms;
SELECT COUNT(CAST(t0.c0 AS BLOB)) OVER () FROM rt64 WHERE (CAST(((1377224481) ISNULL) AS NUMERIC));SELECT ALL (((t0.c0 IN ())) BETWEEN (t0.c0) AND (CASE WHEN t0.c0 THEN rt64.c2 WHEN '-1177269498' THEN rt64.c2 WHEN rt64.c1 THEN rt64.c2 ELSE rt64.c0 END)) FROM rt64, t0; -- 0ms;
SELECT DISTINCT CASE ((rt64.c1)AND(rt64.c0))  WHEN ((rt64.c1)+(rt64.c1)) THEN (((rt64.c0))<((t0.c0))) END FROM rt64, t0; -- 0ms;
SELECT SUM(((rt64.c2)>>(rt64.c1))) FROM rt64, t0 WHERE (CASE TYPEOF(DISTINCT '')  WHEN NULL COLLATE NOCASE THEN ((NULL) BETWEEN (1507298910) AND (x'')) END) GROUP BY ((((t0.c0)%(rt64.c0)))|(((rt64.c1)<(rt64.c1)))); -- 0ms;
SELECT ALL ((((rt64.c1) IS FALSE)) NOT NULL) FROM t0 WHERE (CAST((((NULL)) BETWEEN ((0.30341325427289856)) AND ((NULL))) AS INTEGER));SELECT DISTINCT LAG(((ABS(rt64.c2))AND(0.020532649519572344)), (((rt64.c1, rt64.c0, t0.c0)) BETWEEN (((- (rt64.c2)), rt64.c2 COLLATE RTRIM, ((t0.c0)/(rt64.c1)))) AND ((LIKELY(DISTINCT rt64.c0), (('392107356')>>(t0.c0)), rt64.c0 COLLATE NOCASE))), ((rt64.c0 COLLATE RTRIM) IS TRUE)) OVER () FROM t0, rt64; -- 0ms;
SELECT CAST(((rt64.c2) BETWEEN (t0.c0) AND (rt64.c0)) AS INTEGER) FROM t0, rt64; -- 0ms;
SELECT DISTINCT (((t0.c0) BETWEEN (t0.c0) AND (t0.c0)) IN ()) FROM rt64, t0 WHERE (((((x'')*('959238166')))-((NOT ('-1e500'))))); -- 1ms;
SELECT ALL (('1959463208' COLLATE BINARY)+(AVG(t0.c0))) FROM t0 WHERE (CASE WHEN CAST(0.08697734562816006 AS INTEGER) THEN 0.6304431691642989 END) GROUP BY CASE ((t0.c0) NOT BETWEEN (rt64.c0) AND (rt64.c2))  WHEN CAST(t0.c0 AS REAL) THEN (- (rt64.c1)) ELSE ((((rt64.c2)OR(rt64.c2)))OR(rt64.c2)) END HAVING UPPER(DISTINCT ((0.17748872248683956)GLOB(x''))) LIMIT 124626864;SELECT DISTINCT ((COALESCE(DISTINCT t0.c0, rt64.c2, rt64.c2, rt64.c2)) IS FALSE) FROM t0, rt64 WHERE (CAST(((0.5787680131194038)>=(NULL)) AS TEXT)); -- 0ms;
SELECT CASE HEX(DISTINCT rt64.c1)  WHEN AVG(rt64.c2) THEN CASE rt64.c2  WHEN rt64.c1 THEN rt64.c2 END WHEN (t0.c0 IN ()) THEN CASE WHEN t0.c0 THEN rt64.c1 END WHEN CASE WHEN rt64.c1 THEN t0.c0 END THEN ((t0.c0)<(rt64.c2)) END FROM t0;SELECT ALL 0.17953777583349229 FROM t0 WHERE (x''); -- 0ms;
SELECT DISTINCT ((rt64.c2)AND(((rt64.c2) NOT BETWEEN (rt64.c2) AND (rt64.c2)))) FROM rt64 WHERE ((('/>_hkwSw!') NOT NULL) COLLATE RTRIM); -- 0ms;
SELECT ALL GROUP_CONCAT(t0.c0) OVER () FROM t0, rt64 WHERE ((((((((((('')OR(0.5299117577986725)))AND('pq')))OR(0.11193204732477913)))AND('1959463208'))) NOT BETWEEN (('0.012753771920814172' IN ())) AND (0.4110965032820608 COLLATE BINARY))); -- 1ms;
SELECT ALL ((((((((COUNT(rt64.c2))AND(rt64.c2 COLLATE BINARY)))OR((((t0.c0)) NOT BETWEEN ((rt64.c1)) AND ((t0.c0))))))AND(CASE rt64.c1  WHEN rt64.c2 THEN rt64.c2 END)))OR(((t0.c0) IS TRUE))), (('') BETWEEN (rt64.c0 COLLATE RTRIM) AND ((((rt64.c1, rt64.c0, t0.c0)) NOT BETWEEN ((-303372844, t0.c0, rt64.c2)) AND ((t0.c0, t0.c0, rt64.c2))))), ((((t0.c0 COLLATE RTRIM)OR(rt64.c0)))AND(ABS(DISTINCT rt64.c0))) FROM rt64, t0 GROUP BY rt64.c0 HAVING (NULL IN ((rt64.c1 IN ()))); -- 0ms;
SELECT ALL ROW_NUMBER() OVER () FROM t0 WHERE (CASE WHEN ((NULL) NOT BETWEEN (0.7820823549742425) AND (0xffffffffe3a00b1e)) THEN ((NULL) ISNULL) END); -- 0ms;
SELECT DISTINCT NTILE(((IFNULL(DISTINCT rt64.c2, t0.c0)) NOT NULL)) OVER () FROM rt64, t0 GROUP BY (t0.c0 COLLATE NOCASE IN ()), (- (((t0.c0)||(rt64.c2)))), (((NOT (t0.c0)))<<(x'' COLLATE NOCASE)); -- 1ms;
SELECT ALL ((((NULL)OR(COUNT(*))))AND(((rt64.c2)+(rt64.c2)))), rt64.c1, (((t0.c0 IN ())) ISNULL) FROM t0 WHERE (((((NULL)>=(0.9306320063460765)))-(SUBSTR(x'0f401e08', 0.011429421583100563))));SELECT (- (rt64.c0)) FROM t0, rt64; -- 0ms;
SELECT ALL COUNT(((((t0.c0)AND(rt64.c2)))OR(rt64.c0))) OVER () FROM t0, rt64 WHERE (CASE WHEN (('783062820') NOT BETWEEN (0.026262917479118575) AND (NULL)) THEN (((x'', 2084691285, ' '))>=((NULL, NULL, '84156978'))) WHEN (((0x5577965b))=(('dx''z''-5|旄'))) THEN ((NULL) BETWEEN (-412610283) AND (')xs5')) WHEN 'F<)u%N' COLLATE NOCASE THEN ((x'') NOT NULL) END); -- 0ms;
SELECT DISTINCT ((((GROUP_CONCAT(t0.c0))OR((- (rt64.c0)))))OR(CAST(rt64.c1 AS TEXT))) FROM t0, rt64; -- 0ms;
SELECT ALL rt64.c2, rt64.c2, rt64.c1, NULL, 'ᡂ+谧vdnbb' FROM rt64 WHERE ((((0x2e6ec3b2)/('wTޒ뼋O')) IN (NULL COLLATE BINARY, CASE WHEN '' THEN x'' WHEN '|' THEN NULL WHEN x'' THEN 0.0204675399408093 ELSE NULL END))) LIMIT -108491558 OFFSET -622786420; -- 0ms;
SELECT DISTINCT COUNT(*) FROM t0; -- 0ms;
SELECT ALL ((('1411702313' COLLATE NOCASE))>(((((t0.c0, rt64.c0, t0.c0))<((t0.c0, rt64.c0, rt64.c0)))))), (NOT (((rt64.c1) NOT NULL))), ((((((rt64.c2)AND(rt64.c1)))AND(rt64.c2)))<>(((rt64.c1) BETWEEN (rt64.c2) AND (t0.c0)))) FROM t0 WHERE ((((+ ('0.3677707350545627'))) NOT BETWEEN (TIME('-322809128', x'bd3f', x'475c', 'y	oU댗 \r}', x'')) AND (ABS(x'')))) LIMIT 1057070042 OFFSET 1831604568;SELECT DISTINCT (((rt64.c2 IN ())) BETWEEN (((rt64.c2)<(rt64.c0))) AND (((rt64.c2)AND(rt64.c0)))), LIKELY(((rt64.c1)-(rt64.c0))), CAST(CASE rt64.c1  WHEN t0.c0 THEN rt64.c1 ELSE rt64.c1 END AS TEXT) FROM t0, rt64 WHERE ((((x'a5f6' IN ()))<=((0.24583175511544353 IN ())))); -- 0ms;
SELECT ALL (((t0.c0)) BETWEEN ((((((((((((((t0.c0)OR(t0.c0)))OR(rt64.c2)))AND(rt64.c1)))AND(t0.c0)))AND(rt64.c1)))AND(rt64.c0)))) AND ((DATETIME(rt64.c0, t0.c0, rt64.c2)))), LEAD(CAST(t0.c0 AS TEXT), (((t0.c0)) BETWEEN ((t0.c0)) AND ((t0.c0))) COLLATE RTRIM, t0.c0 COLLATE NOCASE) OVER (), GROUP_CONCAT(((rt64.c0)&(NULL))) FROM t0 GROUP BY (((rt64.c0)) BETWEEN ((((t0.c0)<<(0.716679848380277)))) AND ((((rt64.c0)!=(rt64.c2))))), CAST(t0.c0 AS NUMERIC) COLLATE NOCASE, TRIM((((t0.c0))!=((t0.c0)))) ORDER BY ((((rt64.c0 COLLATE NOCASE)AND(CAST(t0.c0 AS BLOB))))OR(ABS(rt64.c2)))  NULLS FIRST, CAST(((rt64.c2) IS TRUE) AS NUMERIC) DESC  NULLS LAST, ((((((rt64.c1)OR(rt64.c2)))OR(rt64.c1))) BETWEEN (((t0.c0)<<('d|'))) AND (((t0.c0) BETWEEN ('0.32789088481330675') AND (rt64.c0)))) ASC;SELECT DISTINCT ((CASE rt64.c1  WHEN rt64.c0 THEN rt64.c0 WHEN t0.c0 THEN rt64.c0 WHEN t0.c0 THEN rt64.c2 END)IS NOT(((rt64.c1)LIKE(rt64.c1)))) FROM t0, rt64 LIMIT 80568688; -- 0ms;
SELECT DISTINCT ((((((((((((((((t0.c0)OR(rt64.c1)))AND(rt64.c0)))AND(CAST(rt64.c2 AS REAL))))AND(CAST(rt64.c1 AS TEXT))))OR((+ ('3G	J')))))OR(((rt64.c0) BETWEEN (rt64.c2) AND (rt64.c2)))))OR(((rt64.c1)<<(t0.c0)))))OR(((rt64.c1)>>(t0.c0)))), rt64.c2, ((rt64.c2)<<((~ (t0.c0)))) FROM rt64, t0; -- 0ms;
SELECT DISTINCT ((((((((((((TOTAL(t0.c0))OR(((rt64.c0)<=(rt64.c0)))))AND(0.4918041059554564)))AND(((rt64.c1)<>(rt64.c1)))))AND(CAST(rt64.c0 AS TEXT))))AND((((rt64.c2, t0.c0, rt64.c2))<((rt64.c2, t0.c0, rt64.c0))))))OR(CASE rt64.c2  WHEN rt64.c1 THEN rt64.c0 END)) FROM t0;SELECT GROUP_CONCAT(MIN(rt64.c0 COLLATE NOCASE)) FROM t0, rt64 WHERE (CASE 'J' COLLATE BINARY  WHEN CASE 0.12394258675394065  WHEN '2008099299' THEN x'1987' END THEN ((x'ad1d')AND(0Xffffffff8d3bbf6b)) END);SELECT DISTINCT HEX(DISTINCT PRINTF(t0.c0, rt64.c2, rt64.c2)) FROM rt64 GROUP BY (- (x'd19d'));SELECT DISTINCT (rt64.c1 COLLATE BINARY IN ()) FROM t0; -- 0ms;
SELECT DISTINCT t0.c0 COLLATE RTRIM, ((CASE WHEN rt64.c2 THEN t0.c0 WHEN rt64.c2 THEN rt64.c2 WHEN rt64.c0 THEN rt64.c1 ELSE rt64.c0 END) NOTNULL), '-1543829965' FROM rt64 WHERE ((('V' COLLATE BINARY)OR(('-1034197564' IN ())))) ORDER BY (- (load_extension(rt64.c1, rt64.c0))) ASC;SELECT DISTINCT ((((CAST(x'' AS NUMERIC))OR(((rt64.c2) BETWEEN (t0.c0) AND (rt64.c2)))))AND(x'6e6e')) FROM rt64, t0; -- 0ms;
SELECT DISTINCT COUNT((((rt64.c2))>((1950350056)))) OVER (), ((((((((((((t0.c0)AND(rt64.c1)))OR(0.7315437376085555)))OR(rt64.c1)))OR(rt64.c0)))OR(rt64.c1)))OR(rt64.c1)) COLLATE RTRIM, (((t0.c0, '', rt64.c0)) BETWEEN (((((('1784985381')AND(t0.c0)))OR(rt64.c1)), ((((t0.c0)AND('1757313308')))AND(rt64.c1)), CAST(rt64.c2 AS NUMERIC))) AND (((rt64.c2 IN ()), rt64.c1, CASE WHEN rt64.c2 THEN rt64.c0 ELSE rt64.c1 END))) FROM rt64 WHERE ((((~ (NULL)))>>((783062820 IN ())))) ORDER BY ((rt64.c2)>(('0.01518327833972688' IN ()))) DESC  NULLS FIRST;SELECT DISTINCT AVG((rt64.c1 IN ())) OVER () FROM rt64 WHERE ((- (((NULL) NOT BETWEEN (NULL) AND (0Xffffffffce0f6df3))))) GROUP BY ((((t0.c0)-(rt64.c2)))%(NULLIF(DISTINCT t0.c0, rt64.c2))), ((t0.c0 COLLATE BINARY) BETWEEN (((rt64.c0)=(0.5685864040638531))) AND (((((t0.c0)OR(rt64.c0)))OR(rt64.c2)))), CASE WHEN rt64.c1 THEN rt64.c1 ELSE NULL END COLLATE RTRIM HAVING CASE (NOT (rt64.c0))  WHEN CAST(rt64.c0 AS INTEGER) THEN ((rt64.c0)*(rt64.c0)) END;SELECT (NOT (rt64.c1)) COLLATE NOCASE FROM rt64, t0; -- 0ms;
SELECT rt64.c0 FROM rt64, t0; -- 0ms;
SELECT DISTINCT COUNT(((rt64.c2)<(t0.c0)) COLLATE RTRIM), ((((rt64.c2) BETWEEN (t0.c0) AND (rt64.c0))) IS TRUE), ((load_extension(rt64.c2, rt64.c0))<=(0.6552268963315477)) FROM t0;SELECT DISTINCT ((((rt64.c1 COLLATE BINARY)AND(STRFTIME(rt64.c0, rt64.c2, t0.c0))))OR(IFNULL(DISTINCT t0.c0, rt64.c1))) FROM t0, rt64; -- 0ms;
SELECT x'f7fc', ((((rt64.c2 COLLATE NOCASE)AND(((t0.c0) NOT NULL))))OR(((t0.c0)%(rt64.c2)))), '' FROM rt64, t0; -- 0ms;
SELECT DISTINCT ((rt64.c1)|(rt64.c2 COLLATE NOCASE)) FROM rt64, t0 WHERE ((+ (CASE WHEN '' THEN x'' END))); -- 0ms;
SELECT DISTINCT LIKELIHOOD(DISTINCT CAST(0.5700986159465389 AS INTEGER), 0.5824785903843779) FROM rt64 WHERE ((((NULL COLLATE BINARY))>=((x'8e51')))); -- 0ms;
SELECT DISTINCT CASE CAST(rt64.c2 AS INTEGER)  WHEN CASE rt64.c1  WHEN rt64.c0 THEN 0xffffffffdd2c0f9c ELSE rt64.c2 END THEN ((rt64.c0)!=(rt64.c1)) END FROM t0, rt64; -- 0ms;
SELECT DISTINCT ((rt64.c1)%(rt64.c2)) COLLATE BINARY FROM t0, rt64 WHERE ((((- (0.7768517635426172)))>((('709236425') IS FALSE)))) GROUP BY ((CAST(rt64.c2 AS NUMERIC)) IS FALSE), ((((((rt64.c2)-(0.022483375376748493)))AND(((rt64.c2) BETWEEN ('0.042422763715466494') AND (t0.c0)))))AND(((rt64.c1) IS FALSE))), (- (CAST(rt64.c1 AS INTEGER))) HAVING (((~ (t0.c0)))+(HEX(t0.c0))); -- 0ms;
SELECT ALL ((((NULL)AND(CAST(rt64.c2 AS NUMERIC))))OR((((x'6dda')) NOT BETWEEN ((rt64.c0)) AND ((t0.c0))))) FROM t0 WHERE (UPPER(((0X2ddb0a4) NOT NULL)));SELECT ALL t0.c0, CASE WHEN rt64.c2 THEN (rt64.c0 IN ()) WHEN ((rt64.c2)==(rt64.c1)) THEN (NOT (rt64.c0)) WHEN CAST(rt64.c2 AS INTEGER) THEN CAST(rt64.c2 AS TEXT) END, DENSE_RANK() OVER ( PARTITION BY (CASE rt64.c0  WHEN rt64.c0 THEN rt64.c0 ELSE t0.c0 END IN ()), CAST(SQLITE_COMPILEOPTION_GET(rt64.c2) AS TEXT)) FROM rt64, t0; -- 0ms;
SELECT DISTINCT CAST((rt64.c2 IN (t0.c0, rt64.c0)) AS REAL) FROM t0 WHERE ((('-722774824') NOT BETWEEN (5.9070821E7) AND ('')) COLLATE RTRIM);SELECT UNLIKELY('0.004942482617837363'), (((~ (rt64.c2)))GLOB((+ (rt64.c2)))), COUNT(*), (((rt64.c1) IS TRUE) IN (t0.c0 COLLATE BINARY)), (((rt64.c2) ISNULL) IN ()) FROM rt64 WHERE ((((x'')) NOT BETWEEN (((NULL IN (NULL, NULL)))) AND (((((('-681033484')OR(NULL)))AND(NULL)))))) GROUP BY (- (rt64.c2)), x'' COLLATE NOCASE, (CAST(t0.c0 AS REAL) IN ()) HAVING ((t0.c0 COLLATE NOCASE) NOTNULL);SELECT DISTINCT ((TOTAL(t0.c0)) BETWEEN (((((rt64.c0)OR(rt64.c1)))OR(rt64.c2))) AND (NULL)) FROM t0, rt64 ORDER BY (((((((((x'af27')AND(rt64.c1)))AND(t0.c0)))AND(rt64.c2)))AND(rt64.c2)) IN (((rt64.c2) NOTNULL))) DESC  NULLS LAST; -- 0ms;
SELECT ((((t0.c0)LIKE(rt64.c1))) IS TRUE) FROM t0, rt64 WHERE (''); -- 0ms;
SELECT DISTINCT (((t0.c0 IN ())) NOTNULL) FROM t0; -- 0ms;
SELECT (((rt64.c2)) BETWEEN ((rt64.c2)) AND ((((rt64.c1) NOT BETWEEN (t0.c0) AND (0.8002779293163795))))) FROM t0, rt64; -- 0ms;
SELECT DISTINCT (- (CASE rt64.c0  WHEN rt64.c0 THEN rt64.c1 WHEN -4.60445156E8 THEN t0.c0 WHEN rt64.c1 THEN rt64.c2 ELSE rt64.c2 END)) FROM rt64, t0 WHERE ((((NULL)) NOT BETWEEN (((('') NOT NULL))) AND ((((NULL)%(x'')))))); -- 0ms;
SELECT DISTINCT (((x'', ((t0.c0)AND(rt64.c1)), (rt64.c0 IN ())))<((ROUND(rt64.c1, t0.c0), (t0.c0 IN ()), rt64.c2))) FROM t0 WHERE (((('')) NOT BETWEEN ((779479005)) AND ((x''))) COLLATE NOCASE) GROUP BY CAST((NOT (rt64.c1)) AS REAL) HAVING TOTAL(((t0.c0) ISNULL));SELECT ALL SQLITE_SOURCE_ID() COLLATE RTRIM, COALESCE(DISTINCT (rt64.c1 IN ()), ((rt64.c1)!=(rt64.c2))), (((((rt64.c1))<=((rt64.c2)))) ISNULL) FROM t0, rt64 WHERE (((CASE WHEN '-28734425' THEN x'' WHEN x'' THEN NULL WHEN '-1118059429' THEN '32747887' ELSE 'rk' END)/(CAST(0.45462982403868557 AS TEXT)))) GROUP BY (((((rt64.c2))<>((t0.c0)))) BETWEEN (rt64.c1) AND (((x'')-(t0.c0)))), (rt64.c0 COLLATE RTRIM IN ()), ((CASE t0.c0  WHEN rt64.c1 THEN x'' WHEN t0.c0 THEN rt64.c2 WHEN '2144828255' THEN rt64.c2 ELSE rt64.c2 END)!=(((rt64.c1)<(rt64.c2)))) HAVING ((((t0.c0)AND(rt64.c2)))|(rt64.c1 COLLATE NOCASE)) ORDER BY (+ (((rt64.c0) IS FALSE))) ASC, (((rt64.c1)|(t0.c0)) IN ()) ASC; -- 0ms;
SELECT DISTINCT (('q0') IS FALSE) FROM rt64, t0; -- 0ms;
SELECT ALL TOTAL(((rt64.c1) IS FALSE)) FROM t0, rt64 WHERE (((CASE x''  WHEN x'' THEN NULL END)IS((('aR0')GLOB(NULL))))); -- 0ms;
SELECT ALL (((((rt64.c1))<((t0.c0)))) NOT BETWEEN ((('744256375') NOT BETWEEN (rt64.c0) AND (rt64.c2))) AND (((rt64.c2) IS TRUE))) FROM rt64;SELECT DISTINCT ((rt64.c2) NOT NULL) COLLATE BINARY FROM t0 LIMIT 1302519596 OFFSET 1950350056;SELECT ALL (~ (((((t0.c0)OR(rt64.c0)))OR(t0.c0)))) FROM t0 WHERE (NULL COLLATE NOCASE);SELECT GROUP_CONCAT(NULL COLLATE RTRIM) OVER (), ((CAST(rt64.c0 AS TEXT))GLOB(((rt64.c2) NOT BETWEEN (rt64.c2) AND (rt64.c2)))), SUM(CASE t0.c0  WHEN rt64.c2 THEN rt64.c1 ELSE rt64.c1 END) OVER (), SUM(CASE WHEN rt64.c1 THEN rt64.c2 END) OVER (), ((((rt64.c2) NOT NULL)) IS TRUE) FROM rt64, t0 WHERE (LIKE(((0x245f37c3) IS TRUE), ((0.888283563588923)<>(']*U	3G[)f')))) LIMIT -3015916 OFFSET -1943821914; -- 0ms;
SELECT TOTAL(SUBSTR(t0.c0, rt64.c2)) OVER () FROM t0, rt64; -- 0ms;
SELECT ALL ((((((rt64.c0) ISNULL))OR(CAST(rt64.c2 AS BLOB))))OR(CASE rt64.c2  WHEN 'Os' THEN t0.c0 ELSE rt64.c2 END)), TRIM(DISTINCT x'') COLLATE BINARY, MIN(((((((((t0.c0)OR(rt64.c0)))OR(t0.c0)))OR(t0.c0)))OR(rt64.c0))), CAST(((rt64.c1) NOTNULL) AS INTEGER), CAST(CASE rt64.c0  WHEN rt64.c1 THEN t0.c0 END AS TEXT) FROM rt64, t0 GROUP BY (((('Ok') ISNULL))IS NOT(((((NULL)OR(rt64.c2)))OR(rt64.c1)))); -- 0ms;
SELECT ALL (((t0.c0) NOT BETWEEN (t0.c0) AND (rt64.c1)) IN ()) FROM rt64 LIMIT 870278262; -- 0ms;
SELECT ALL (((t0.c0 IN ()))=((((rt64.c0)) BETWEEN ((rt64.c0)) AND ((rt64.c1))))), LOWER(DISTINCT (- (rt64.c0))), ((rt64.c1 COLLATE BINARY) BETWEEN (rt64.c2 COLLATE NOCASE) AND (t0.c0)), ((TOTAL(NULL))&(t0.c0)), ((((rt64.c0)=(rt64.c1))) NOT BETWEEN (((rt64.c2)GLOB(rt64.c1))) AND (((t0.c0) IS FALSE))) FROM rt64, t0 WHERE ((NOT (((x'') NOT BETWEEN (x'') AND (x'3b15'))))); -- 0ms;
SELECT ((t0.c0 COLLATE RTRIM)-(((rt64.c0) NOT BETWEEN (rt64.c1) AND (t0.c0)))) FROM t0;SELECT DISTINCT COUNT(((t0.c0) NOT NULL)) OVER () FROM t0, rt64 WHERE (CASE WHEN ((x'')AND(0xffffffffbf5f15a6)) THEN CAST(NULL AS REAL) ELSE (('-2059430282') IS FALSE) END); -- 0ms;
SELECT t0.c0 FROM rt64, t0 WHERE (((CASE WHEN 0X60e837a8 THEN '886570169' WHEN '炥h|8%' THEN '-788119233' WHEN 1.862666164E9 THEN 0.1276794630664525 END) NOTNULL)); -- 0ms;
SELECT ALL (rt64.c1 IN ()), COUNT((rt64.c2 IN ())) OVER (), (((NOT (rt64.c2))) NOT BETWEEN ((((rt64.c0))<=((rt64.c2)))) AND (CAST(rt64.c1 AS NUMERIC))) FROM rt64 WHERE ((((0.10343697454869683, '{b勘oM]P', NULL)) BETWEEN ((CASE WHEN 1338581733 THEN NULL ELSE NULL END, ('-1e500' IN ()), NULL)) AND ((-1291822694, ((0.038915072371917714)||(0.716679848380277)), ((NULL)AND(x'')))))); -- 0ms;
SELECT ALL 0.3412011765790042 FROM rt64, t0; -- 0ms;
SELECT DISTINCT CAST(((rt64.c1) IS FALSE) AS NUMERIC), (- (LOWER(rt64.c0))), LAST_VALUE(((x'')%(((NULL) NOT BETWEEN (rt64.c2) AND ('5Mq0'))))) OVER ( PARTITION BY (((rt64.c2)) NOT BETWEEN ((CAST(rt64.c1 AS INTEGER))) AND (((t0.c0 IN ())))), QUOTE((((rt64.c1)) NOT BETWEEN ((rt64.c1)) AND ((rt64.c0)))), 1.45903176E9, (((- (t0.c0)))<=(ABS(DISTINCT rt64.c1)))), ((rt64.c2) ISNULL), ((NULL) BETWEEN (((((rt64.c1)OR(rt64.c1)))AND(''))) AND (CAST(t0.c0 AS BLOB))) FROM rt64, t0; -- 1ms;
SELECT (((((rt64.c0) NOT NULL)))<>((((((((((rt64.c2)AND(rt64.c2)))OR(rt64.c1)))AND(rt64.c1)))OR(rt64.c0))))) FROM rt64, t0; -- 0ms;
SELECT ALL UNLIKELY(GROUP_CONCAT(rt64.c1)), (NOT ((NOT (NULL)))), CASE LOWER(DISTINCT t0.c0)  WHEN (+ (t0.c0)) THEN CAST(rt64.c2 AS BLOB) END FROM t0, rt64 ORDER BY ((CHANGES()) NOT NULL) DESC  NULLS FIRST; -- 0ms;
SELECT DISTINCT '-1982824867' FROM rt64, t0 WHERE (NULLIF(DISTINCT ((x'') IS FALSE), ((x'')%('6Rcni7?N')))); -- 0ms;
SELECT ALL (((((((((((((rt64.c1 IN ()))OR(rt64.c1 COLLATE RTRIM)))AND(((rt64.c2) NOT BETWEEN (rt64.c2) AND (rt64.c0)))))AND(((rt64.c1) NOTNULL))))OR((rt64.c0 IN ()))))OR(((rt64.c0)<(rt64.c2)))))OR(((rt64.c1)<=(rt64.c0)))), SUM((rt64.c1 IN ())) OVER ( ORDER BY (~ ((('897751872')!=(rt64.c1))))), TOTAL((rt64.c2 IN (rt64.c0))) COLLATE RTRIM, x'', (+ (((rt64.c0)>=(rt64.c2)))), (+ ((rt64.c2 IN ()))), UPPER(DISTINCT ((rt64.c1) ISNULL)) FROM rt64, t0; -- 0ms;
SELECT DISTINCT ((rt64.c2 COLLATE BINARY) IS TRUE) FROM rt64; -- 0ms;
SELECT DISTINCT (('')LIKE(CASE WHEN t0.c0 THEN t0.c0 END)) FROM t0, rt64 WHERE (CASE WHEN (0.30726608326700255 IN ()) THEN (0.13822285122452982 IN ()) ELSE 'h y' END) ORDER BY ((((((((((rt64.c2)LIKE(rt64.c2)))AND(rt64.c2)))AND(((t0.c0) NOTNULL))))AND((((rt64.c2)) BETWEEN ((rt64.c0)) AND ((rt64.c2))))))AND((- (rt64.c1)))); -- 0ms;
SELECT ((rt64.c0) IS TRUE) COLLATE RTRIM, (((((((((((rt64.c2)OR(rt64.c2)))AND(rt64.c2)))OR(rt64.c0)))AND(t0.c0))))>(('-1695303761' COLLATE NOCASE))), SUM(((((((((rt64.c2)AND(rt64.c0)))OR(0xffffffffccc757a5)))OR(rt64.c0)))AND(rt64.c1))) OVER () FROM rt64 WHERE (((('[]', 0.32334723919354824, '-622786420', '1714030215', 6.6621229E7)) BETWEEN (('1585556440', '-823344449' COLLATE RTRIM, ((0.7792841643934648)IS('''+N')), 0.8728602342347974, (~ ('-969696670')))) AND ((LIKELY(NULL), (+ ('1955017970')), ((x'')GLOB(-1517142415)), NULL, NULL))));SELECT DISTINCT (- ((((rt64.c1, rt64.c0, t0.c0)) BETWEEN ((rt64.c1, rt64.c2, rt64.c2)) AND ((t0.c0, rt64.c0, rt64.c0))))) FROM rt64 WHERE ((~ (('J)' IN ())))) ORDER BY x'a885'  NULLS LAST;SELECT DISTINCT NULLIF(DISTINCT rt64.c0, ((t0.c0) IS FALSE)), ((('', rt64.c0, rt64.c2)) BETWEEN ((CAST(rt64.c1 AS INTEGER), (NOT (t0.c0)), ((rt64.c0) NOT BETWEEN (rt64.c1) AND (rt64.c1)))) AND ((IFNULL(DISTINCT rt64.c0, t0.c0), t0.c0 COLLATE BINARY, ((rt64.c0) BETWEEN (x'') AND (rt64.c2))))), rt64.c0 FROM t0 INDEXED BY i20 GROUP BY rt64.c0;SELECT DISTINCT (~ ('%;' COLLATE BINARY)) FROM t0, rt64 WHERE (((('1069364826')) BETWEEN ((CAST(0xffffffffd6f45399 AS REAL))) AND ((((0.7157081964846252)>(0.9773928331318166)))))) GROUP BY ((((((((((((((((((((rt64.c0)AND(t0.c0)))OR(rt64.c2)))OR(t0.c0)))OR(rt64.c2)))AND(NULLIF(rt64.c1, t0.c0))))OR(((((rt64.c2)OR(rt64.c1)))AND(t0.c0)))))AND(0xffffffffc6a5cf81)))OR(((rt64.c1) IS TRUE))))AND(((rt64.c1)|(rt64.c2)))))AND(HEX(rt64.c2))); -- 0ms;
SELECT DISTINCT COALESCE(((rt64.c1) NOTNULL), ((rt64.c2)IS(rt64.c0))) FROM rt64 WHERE (((((NULL)&(0.6761815240870004)))IS NOT(((NULL) NOT BETWEEN (0.6333592175725246) AND (-1.225050126E9))))); -- 0ms;
SELECT ALL ABS(CAST(rt64.c0 AS NUMERIC)), TOTAL_CHANGES(), (((rt64.c1)) NOT BETWEEN ((0.6896617031177577 COLLATE BINARY)) AND ((TOTAL(rt64.c2)))) FROM rt64, t0 WHERE ((((('-681033484')OR(NULL)))AND(((0Xffffffffff080ff2)||(0.6977247622818871))))); -- 0ms;
SELECT DISTINCT COUNT(*) OVER () FROM rt64, t0; -- 0ms;
SELECT CAST((rt64.c0 IN (t0.c0)) AS TEXT) FROM t0;SELECT ALL COUNT(*) OVER () FROM rt64 WHERE ((((json(x'')))<=((((NULL) BETWEEN (NULL) AND (''))))));SELECT ALL (((((((((((rt64.c1))>=((0.6019422505957914))))OR(((rt64.c1) NOTNULL))))AND(CAST(rt64.c0 AS REAL))))OR(((((rt64.c1)OR(t0.c0)))OR(rt64.c1)))))AND(TOTAL(rt64.c1))) FROM rt64 ORDER BY (((t0.c0) IS FALSE) IN ())  NULLS LAST, HEX(''), (((rt64.c0)) BETWEEN (((((rt64.c2)) BETWEEN ((rt64.c2)) AND ((rt64.c2))))) AND ((((((rt64.c2)AND(rt64.c0)))AND(rt64.c2)))));SELECT ALL ((rt64.c1 COLLATE NOCASE) NOT BETWEEN (((((rt64.c0)AND(t0.c0)))AND(rt64.c0))) AND (COUNT(*))), SUM((rt64.c0 IN (rt64.c2, 0.5218462020675558))) OVER ( ORDER BY (+ (((((rt64.c1)OR(t0.c0)))OR(rt64.c2)))) ASC  NULLS FIRST), (((- (rt64.c1)))||(((t0.c0)LIKE(rt64.c0)))) FROM t0 WHERE (((+ ('2089989181')) IN ()));SELECT ALL ((t0.c0)<>(rt64.c2)) COLLATE RTRIM, ((t0.c0) NOT BETWEEN (rt64.c1) AND (rt64.c0)) COLLATE RTRIM, UNLIKELY(rt64.c1 COLLATE NOCASE) FROM t0, rt64 WHERE (CASE CAST('' AS INTEGER)  WHEN ((((x'11ee')OR(x'8bf6')))OR('-28734425')) THEN CASE WHEN '{}r[' THEN x'f1cb' ELSE 0.04719076149312751 END ELSE '/>_hkwSw!' END); -- 0ms;
SELECT ((((rt64.c1)GLOB(rt64.c2))) NOT BETWEEN (CASE 1651054455  WHEN rt64.c2 THEN t0.c0 END) AND (((('-1735358404'))!=((t0.c0))))), (((GROUP_CONCAT(rt64.c1)))=(((rt64.c1 IN ())))), (NULL IN ()), AVG(((rt64.c1)=(t0.c0)) COLLATE RTRIM), ((((t0.c0)>(t0.c0))) BETWEEN (((rt64.c2)<>(rt64.c1))) AND (((((rt64.c2)AND(rt64.c0)))OR(t0.c0)))) FROM t0;SELECT ALL IFNULL(DISTINCT (rt64.c2 IN (t0.c0, rt64.c0)), rt64.c1 COLLATE RTRIM) FROM t0, rt64 LIMIT -127144472 INTERSECT SELECT ALL (- (((('', rt64.c2, t0.c0))<((rt64.c1, x'b1c4', rt64.c1))))) FROM rt64, t0;SELECT CAST(CAST(rt64.c2 AS NUMERIC) AS NUMERIC) FROM rt64, t0; -- 0ms;
SELECT (((((rt64.c2) IS FALSE)))=((CASE '518006380'  WHEN rt64.c1 THEN t0.c0 WHEN rt64.c2 THEN rt64.c2 WHEN t0.c0 THEN rt64.c1 ELSE rt64.c0 END))) FROM t0 WHERE (NULL);SELECT DISTINCT (+ (CASE WHEN rt64.c2 THEN t0.c0 ELSE rt64.c1 END)) FROM rt64;SELECT DISTINCT CASE ((rt64.c2) NOT BETWEEN (t0.c0) AND (rt64.c2))  WHEN ((rt64.c1)!=(rt64.c1)) THEN (((rt64.c0, rt64.c1, t0.c0)) NOT BETWEEN (('KN', t0.c0, rt64.c0)) AND ((rt64.c0, rt64.c0, rt64.c2))) WHEN (((rt64.c1, rt64.c1, rt64.c2))<((rt64.c0, t0.c0, rt64.c1))) THEN ((((((((rt64.c0)AND(t0.c0)))OR(rt64.c0)))AND(rt64.c1)))OR(rt64.c0)) WHEN ((rt64.c2) NOT BETWEEN (t0.c0) AND (rt64.c0)) THEN t0.c0 COLLATE BINARY END FROM t0, rt64; -- 0ms;
SELECT ((((((rt64.c2)OR(rt64.c2)))AND(x'')))<<(MAX(rt64.c2))), CASE rt64.c2 COLLATE NOCASE  WHEN ((((rt64.c1)AND(rt64.c2)))OR(4.16475289E8)) THEN (~ (t0.c0)) ELSE CAST(rt64.c0 AS TEXT) END, (((rt64.c0)) BETWEEN ((rt64.c2 COLLATE RTRIM)) AND ((NULL))) FROM rt64;SELECT DISTINCT (((t0.c0, rt64.c0, rt64.c1, t0.c0, t0.c0)) NOT BETWEEN ((rt64.c1, TYPEOF(rt64.c0), ((rt64.c0) NOT BETWEEN (rt64.c2) AND (rt64.c2)), COUNT(rt64.c1), NULL)) AND (((rt64.c0 IN (rt64.c1, rt64.c1)), ((rt64.c2) NOT BETWEEN (rt64.c2) AND (rt64.c0)), CASE t0.c0  WHEN t0.c0 THEN rt64.c1 END, ((rt64.c1)GLOB(rt64.c0)), IFNULL(DISTINCT 0.7165684514055688, rt64.c2)))) FROM t0;SELECT DISTINCT (((COALESCE(rt64.c0, t0.c0)))>((QUOTE(rt64.c1)))) FROM rt64, t0 WHERE (((((+ (0.4364624333532693)), CAST(NULL AS INTEGER), ((('', x'', 0xffffffffd4efecf0))>((x'', '805919512', 0.20247760260996583)))))<=((TRIM(NULL), NULL, json_insert(-1.594195671E9, '-1594195671', x'', '-1876958544', NULL))))); -- 0ms;
SELECT (('341681114')<<(((rt64.c1)||(rt64.c1)))), SUM(CASE rt64.c2  WHEN t0.c0 THEN rt64.c2 END), CASE WHEN CASE rt64.c1  WHEN rt64.c0 THEN rt64.c2 ELSE t0.c0 END THEN ((rt64.c2) NOTNULL) ELSE ((((rt64.c1)OR(rt64.c2)))AND(rt64.c0)) END FROM t0, rt64 WHERE (((('139799534') NOT BETWEEN (0.12231374381966653) AND (NULL)) IN ())); -- 0ms;
SELECT ALL PERCENT_RANK() OVER () FROM t0, rt64 WHERE (CAST((('-2128272643') IS FALSE) AS BLOB)) LIMIT -1412612384; -- 0ms;
SELECT ALL ((((rt64.c1) NOT BETWEEN (rt64.c2) AND (t0.c0)))|(((rt64.c1)!=(rt64.c1)))) FROM rt64;SELECT ALL (('!')&((((rt64.c0, rt64.c0, rt64.c1)) BETWEEN ((x'', t0.c0, 0xffffffffeb78d7c6)) AND ((rt64.c0, rt64.c0, t0.c0))))) FROM rt64, t0 WHERE ((((((NOT (x'ef45')))AND(((NULL)<>(0.5800028592284562)))))AND((~ (0x24638596))))) ORDER BY CAST(CAST(t0.c0 AS BLOB) AS TEXT)  NULLS LAST; -- 0ms;
SELECT DISTINCT ((((((((((((x'b0a9')OR(rt64.c2 COLLATE RTRIM)))OR(((rt64.c0) NOT BETWEEN (rt64.c0) AND (rt64.c2)))))AND(AVG(x''))))AND(CAST(t0.c0 AS REAL))))OR(((t0.c0) BETWEEN (rt64.c1) AND (rt64.c2)))))OR(((t0.c0)%(rt64.c2)))), COUNT(*), ((COUNT(*)) NOT BETWEEN (((t0.c0) BETWEEN (rt64.c0) AND (rt64.c2))) AND (LIKELIHOOD(DISTINCT rt64.c0, 0.5255830780280923))) FROM t0 WHERE (CASE WHEN '' COLLATE RTRIM THEN ((NULL)-(x'db24')) END);SELECT LAG((((((rt64.c2, t0.c0, x'90c8')) NOT BETWEEN (('6_', rt64.c0, rt64.c1)) AND ((rt64.c1, rt64.c2, rt64.c0)))) ISNULL), ((rt64.c1) NOTNULL), (((((((((((rt64.c1, rt64.c0, rt64.c0))>=((rt64.c1, rt64.c1, rt64.c0))))AND((rt64.c0 IN (rt64.c1, rt64.c1)))))AND(t0.c0 COLLATE RTRIM)))OR(((((rt64.c2)OR(rt64.c2)))AND('-922373563')))))AND(((0.27305021598849866) NOT BETWEEN (0.5630862203132745) AND (rt64.c1))))) OVER () FROM t0, rt64 WHERE (x'') ORDER BY '-1555588365' LIMIT 1787144300 OFFSET -823344449; -- 0ms;
SELECT DISTINCT (((((rt64.c1, t0.c0, rt64.c2)) BETWEEN ((rt64.c2, rt64.c2, rt64.c2)) AND ((t0.c0, rt64.c1, rt64.c2))))>=(((rt64.c1) IS TRUE))), SUM(((rt64.c0) IS FALSE)) OVER (), '^Jab[Rg梢' FROM rt64;SELECT DISTINCT COUNT((((rt64.c1))<((rt64.c2)))) FROM t0 WHERE (((((NULL) ISNULL))&((((('0.6601342306571056')OR(0.27388279276258365)))AND(0.217327228926543))))) UNION ALL SELECT ((rt64.c2 COLLATE BINARY) NOT NULL) FROM rt64, t0 WHERE (CAST(x'' COLLATE NOCASE AS TEXT));SELECT NTILE(CASE WHEN CASE rt64.c2  WHEN rt64.c2 THEN rt64.c2 WHEN rt64.c1 THEN rt64.c0 WHEN rt64.c2 THEN rt64.c1 END THEN (- (rt64.c1)) WHEN ((((rt64.c2)OR(rt64.c1)))OR(rt64.c0)) THEN ((rt64.c0) IS FALSE) WHEN rt64.c2 THEN CAST(rt64.c1 AS TEXT) ELSE ((rt64.c1) BETWEEN (NULL) AND (rt64.c0)) END) OVER () FROM rt64;SELECT '&k^4]', CASE CASE rt64.c0  WHEN rt64.c2 THEN NULL END  WHEN GROUP_CONCAT(rt64.c2) THEN ((rt64.c0)LIKE(rt64.c0)) END, GROUP_CONCAT((((rt64.c0)) NOT BETWEEN ((rt64.c2)) AND ((t0.c0)))) OVER () FROM t0, rt64; -- 0ms;
SELECT (((rt64.c0 IN ())) NOT BETWEEN ((- (t0.c0))) AND (((rt64.c2) NOT BETWEEN (t0.c0) AND (rt64.c2)))) FROM t0 LIMIT -920470578 OFFSET -1155729152;SELECT DISTINCT DENSE_RANK() OVER () FROM t0; -- 0ms;
SELECT CASE WHEN rt64.c2 THEN rt64.c0 ELSE rt64.c1 END COLLATE BINARY, (NOT (((t0.c0)LIKE(rt64.c0)))), ((((rt64.c2)+(t0.c0)))AND(((((rt64.c0)AND(t0.c0)))OR(t0.c0)))) FROM rt64, t0 LIMIT 1047910590; -- 0ms;
SELECT DISTINCT UNLIKELY(DISTINCT rt64.c1 COLLATE RTRIM) FROM t0, rt64 WHERE (NULL); -- 0ms;
SELECT ALL (NULL IN ()), (((rt64.c1, t0.c0, x'')) BETWEEN ((((0Xffffffffcb5c325e) NOTNULL), CASE rt64.c2  WHEN rt64.c1 THEN t0.c0 ELSE rt64.c1 END, (((t0.c0))==((rt64.c1))))) AND (((('0.7042530083644932') NOT BETWEEN (rt64.c0) AND (rt64.c2)), (~ (rt64.c1)), (rt64.c1 IN ())))), CASE WHEN ((rt64.c2)<<(rt64.c0)) THEN (+ (rt64.c2)) WHEN '-1863547272' THEN NULL WHEN ((rt64.c0)&(t0.c0)) THEN (- (rt64.c2)) WHEN (rt64.c0 IN ()) THEN COUNT(*) WHEN (- (rt64.c0)) THEN ((rt64.c0)%(NULL)) ELSE rt64.c2 END, (((t0.c0)) BETWEEN ((UNLIKELY(-2.8734425E7))) AND ((((((rt64.c2)OR(rt64.c0)))OR(rt64.c1))))), ((CASE WHEN rt64.c2 THEN rt64.c1 WHEN t0.c0 THEN rt64.c0 WHEN t0.c0 THEN t0.c0 END)/(rt64.c1)) FROM rt64, t0 WHERE ((((((('1511795004')OR('245013412')))OR(x''))) IS FALSE)); -- 0ms;
SELECT DISTINCT ((((rt64.c2)/(rt64.c2)))GLOB(t0.c0)), ((((rt64.c1) BETWEEN (rt64.c2) AND (t0.c0))) NOTNULL), 'm(7' FROM rt64;SELECT DISTINCT (((((t0.c0)) NOT BETWEEN ((rt64.c0)) AND ((t0.c0))))IS(((((t0.c0)OR(rt64.c2)))OR(rt64.c0)))) FROM t0, rt64; -- 0ms;
SELECT ALL MIN(((rt64.c2) NOTNULL)) FROM t0 WHERE ((- ('筅Z')) COLLATE RTRIM);SELECT ALL ((rt64.c2 COLLATE RTRIM) NOT BETWEEN (CAST(t0.c0 AS TEXT)) AND (t0.c0)), (((rt64.c0, rt64.c1, rt64.c2)) BETWEEN ((rt64.c1, t0.c0 COLLATE BINARY, GROUP_CONCAT(rt64.c2))) AND (('-1176643995', COALESCE(rt64.c0, rt64.c0), (rt64.c1 IN ())))), ((LOWER(DISTINCT NULL))|((((rt64.c0, rt64.c1, NULL))>=((rt64.c0, rt64.c1, rt64.c1))))) FROM rt64, t0; -- 0ms;
SELECT CASE WHEN ((rt64.c0)*(rt64.c1)) THEN 0.8134060152584618 WHEN CAST(t0.c0 AS BLOB) THEN COUNT(rt64.c1) WHEN MIN(t0.c0) THEN rt64.c2 END FROM t0, rt64; -- 0ms;
SELECT ALL COUNT(((rt64.c1)-(t0.c0))) FROM rt64;SELECT ALL CAST(t0.c0 AS INTEGER) COLLATE BINARY FROM t0, rt64 WHERE (((((((((0.8539335509786598 COLLATE RTRIM)AND(((x'07ff') NOT NULL))))OR(((NULL)GLOB(0X7eb3d875)))))OR((((('媦H')AND('')))OR(0.8311415351256309)))))AND((((('484032718')OR('581513565')))OR(x'372d'))))); -- 0ms;
SELECT (((((((t0.c0)) NOT BETWEEN ((NULL)) AND ((t0.c0))))OR(CASE WHEN rt64.c1 THEN rt64.c0 WHEN rt64.c2 THEN rt64.c1 WHEN rt64.c0 THEN t0.c0 END)))OR(rt64.c0 COLLATE NOCASE)) FROM rt64, t0 WHERE ((((~ (NULL)))<=(((-1833347223)*(x'e787'))))); -- 1ms;
SELECT DISTINCT GROUP_CONCAT(((((rt64.c1)AND(rt64.c1)))OR(rt64.c1))) OVER (), 'G*s&?', CAST(((rt64.c2) BETWEEN (rt64.c1) AND (rt64.c1)) AS TEXT) FROM rt64 WHERE (((((0x7718bb8)&(x''))) BETWEEN ('W' COLLATE NOCASE) AND ((((x'')) NOT BETWEEN ((NULL)) AND ((2101617870)))))); -- 0ms;
SELECT ALL ((+ (t0.c0)) IN ()), COUNT(*), (((+ (rt64.c2))) NOT BETWEEN (((rt64.c0) NOT BETWEEN (rt64.c0) AND (rt64.c2))) AND ((((rt64.c2))<((t0.c0))))) FROM t0, rt64 GROUP BY t0.c0, CAST(((t0.c0)/(rt64.c2)) AS BLOB), rt64.c2; -- 0ms;
SELECT DISTINCT ((((rt64.c2 IN (rt64.c1))))>=((((rt64.c1)IS(rt64.c1))))) FROM rt64, t0; -- 0ms;
SELECT ((CAST(rt64.c2 AS TEXT)) NOTNULL) FROM t0;SELECT DISTINCT NTILE(CASE 0.4502616454488457  WHEN ((t0.c0)/(x'')) THEN (+ (t0.c0)) WHEN x'' THEN ((t0.c0) NOT NULL) WHEN ((t0.c0)GLOB(t0.c0)) THEN CASE t0.c0  WHEN t0.c0 THEN t0.c0 WHEN t0.c0 THEN '0.759600473824617' WHEN t0.c0 THEN t0.c0 END ELSE ((NULL)GLOB(t0.c0)) END) OVER (), CASE (rt64.c0 IN ())  WHEN ((rt64.c2) BETWEEN (rt64.c2) AND (rt64.c2)) THEN x'' END, (+ (((6.80718623E8) ISNULL))) FROM t0;SELECT TYPEOF(COUNT(rt64.c2)) FROM rt64 ORDER BY CASE WHEN rt64.c0 COLLATE RTRIM THEN ((rt64.c1)&(rt64.c0)) END  NULLS LAST; -- 0ms;
SELECT DISTINCT t0.c0, MIN(rt64.c0), SUM(((rt64.c0)+(t0.c0))), ((TYPEOF(t0.c0)) ISNULL), ((((((((((((t0.c0)AND(rt64.c0)))OR(rt64.c0)))AND(rt64.c1)))OR(rt64.c2)))AND(((rt64.c0) BETWEEN (rt64.c2) AND (rt64.c1)))))OR(((((t0.c0)AND(rt64.c2)))OR(rt64.c0)))) FROM rt64, t0; -- 0ms;
SELECT ALL (x'' IN ()), x'', (NULLIF(DISTINCT rt64.c2, t0.c0) IN ()) FROM t0 WHERE (CASE WHEN 0.9451458663684884 THEN (((NULL, 'D.1摶WV', 'u谧'))<>((0xffffffffd7d1bb63, 0.1276794630664525, 0.7577247077950303))) ELSE ((((x'')OR('䃴#0It*')))AND('')) END); -- 0ms;
SELECT DISTINCT (((- (rt64.c1)))GLOB(CAST(t0.c0 AS NUMERIC))) FROM rt64, t0 WHERE (MIN(CASE WHEN '1346503370' THEN '[]|f︲fM)' ELSE '' END, CAST('1000763220' AS BLOB), (('읞hn]') NOTNULL), (((NULL, x'b192', -1.118059429E9))<=((NULL, x'', 0xffffffffa007b46c))))) ORDER BY MAX(rt64.c1, ((((((((t0.c0)OR(t0.c0)))AND(0x18d2e899)))OR(t0.c0)))OR(rt64.c0))) LIMIT -2102847823 OFFSET 744256375; -- 1ms;
SELECT ((t0.c0 COLLATE RTRIM)<(t0.c0 COLLATE NOCASE)) FROM rt64, t0 WHERE ((((0Xfffffffffca246a9)) BETWEEN ((CAST(x'' AS REAL))) AND ((((x'')-('f>''tZ')))))) ORDER BY ((t0.c0 COLLATE BINARY)||(CAST(rt64.c1 AS REAL)))  NULLS LAST; -- 0ms;
SELECT ALL ((CAST(t0.c0 AS REAL)) IS TRUE), ((((t0.c0)>>(rt64.c2)))=(CAST(t0.c0 AS NUMERIC))), x'', STRFTIME((- (rt64.c2)), IFNULL(0.7247396855112935, NULL), ((rt64.c0) NOT NULL)), 0.37951296814872615 FROM t0, rt64; -- 0ms;
SELECT COUNT(*) FROM rt64; -- 0ms;
SELECT '', ((((CASE rt64.c1  WHEN t0.c0 THEN t0.c0 ELSE t0.c0 END)AND(rt64.c2)))OR(((((rt64.c1)AND(rt64.c2)))OR(rt64.c0)))), ((rt64.c0)AND(CAST(rt64.c1 AS REAL))) FROM rt64, t0; -- 0ms;
SELECT ((rt64.c2 COLLATE NOCASE)AND(AVG(rt64.c0))) FROM t0 WHERE (CAST(0.9936992512780521 AS NUMERIC) COLLATE NOCASE COLLATE BINARY);SELECT ALL CAST(TOTAL(rt64.c0) AS REAL) FROM t0, rt64 WHERE (((CASE WHEN x'' THEN 0.5170091207026127 WHEN NULL THEN 0.6465669376627168 WHEN x'4685' THEN '1716261093' WHEN NULL THEN 0Xffffffffe5ee45aa WHEN NULL THEN -9.22373563E8 ELSE 'ﰹ蚫儁oeV\' END) BETWEEN (((x'b33a5fdd') NOT NULL)) AND (((1626710463)LIKE('0.47613516864415484'))))); -- 1ms;
SELECT DISTINCT (((t0.c0, rt64.c2, rt64.c2, rt64.c1, t0.c0)) BETWEEN ((SUM(rt64.c0), json_insert(rt64.c0, rt64.c1, rt64.c2), ((rt64.c2) NOT NULL), x'', rt64.c0 COLLATE RTRIM)) AND ((CASE rt64.c0  WHEN rt64.c0 THEN rt64.c2 END, '', ((((((((rt64.c2)OR(t0.c0)))OR(rt64.c2)))OR(rt64.c1)))AND('')), CASE WHEN t0.c0 THEN NULL END, NULL))) FROM t0, rt64 WHERE ((('-542652970') IS FALSE)); -- 0ms;
SELECT DISTINCT (('[<NoGd8ꄬ')<((~ (t0.c0)))) FROM t0; -- 0ms;
SELECT DISTINCT LEAD(CASE ((rt64.c0)/(rt64.c2))  WHEN ((rt64.c1) ISNULL) THEN CAST(rt64.c1 AS NUMERIC) WHEN (((rt64.c1))>=((rt64.c0))) THEN ((((rt64.c2)OR(rt64.c2)))AND(rt64.c0)) WHEN (((rt64.c0)) BETWEEN ((rt64.c1)) AND ((rt64.c0))) THEN ((((rt64.c0)AND(rt64.c0)))OR(NULL)) ELSE ((rt64.c1) NOT BETWEEN (x'') AND (rt64.c2)) END, CASE ((rt64.c1)/(rt64.c0))  WHEN ((((rt64.c1)AND(rt64.c1)))AND(rt64.c0)) THEN rt64.c1 COLLATE BINARY WHEN CASE WHEN rt64.c0 THEN rt64.c0 ELSE '59070821' END THEN COALESCE(rt64.c0, rt64.c0, rt64.c0, NULL) WHEN rt64.c1 COLLATE BINARY THEN (+ (rt64.c0)) ELSE ((rt64.c0) IS TRUE) END, CAST(rt64.c2 AS INTEGER) COLLATE NOCASE) OVER () FROM rt64 WHERE (HEX(DISTINCT CASE x''  WHEN '' THEN x'7290' END)); -- 0ms;
SELECT ALL rt64.c1 COLLATE BINARY, NULL, CASE ((rt64.c2) NOT NULL)  WHEN rt64.c0 COLLATE NOCASE THEN SUM(rt64.c2) END FROM rt64, t0 ORDER BY json_type((rt64.c1 IN (NULL))) DESC; -- 0ms;
SELECT ALL (+ (json_valid(rt64.c0))), UPPER(((rt64.c1)AND(t0.c0))), COUNT(*) FROM rt64;SELECT DISTINCT '' FROM rt64 WHERE (COALESCE(DISTINCT CASE 0.2751021267730511  WHEN 0xffffffffd397b4d1 THEN '圌n' END, TRIM(-1594195671))); -- 0ms;
SELECT ALL (((x'')) BETWEEN ((((rt64.c1)<=(rt64.c0)))) AND ((((rt64.c1)>(rt64.c0))))) FROM rt64 WHERE ((((~ (x'feec'))) IS TRUE)); -- 0ms;
SELECT (((((rt64.c1))<((rt64.c2))))-(rt64.c2 COLLATE RTRIM)) FROM t0;SELECT DISTINCT NULL FROM t0 WHERE (((0Xffffffff97b4c1b7)<>(CAST('-1486144833' AS NUMERIC)))); -- 0ms;
SELECT DISTINCT ((t0.c0 COLLATE BINARY) BETWEEN (0.4631047836386323) AND (CAST(x'ef59' AS NUMERIC))) FROM rt64, t0 WHERE (('h%Wl' COLLATE BINARY IN ())); -- 0ms;
SELECT DISTINCT (CAST(rt64.c1 AS REAL) IN ()), SUM(((rt64.c1) NOTNULL)), COUNT(*) OVER () FROM rt64 WHERE (((((((((((('s~獷')AND(0.7478051456080211)))AND('u<')))OR(NULL)))AND(5.9070821E7))))<((((x'')!=(NULL)))))) ORDER BY CASE 0xffffffffc25b65c4  WHEN ((rt64.c1) NOT BETWEEN (t0.c0) AND (rt64.c1)) THEN rt64.c2 COLLATE RTRIM ELSE ((NULL) ISNULL) END ASC  NULLS FIRST;SELECT ((((MIN(rt64.c2))OR(rt64.c2 COLLATE BINARY)))AND(CAST(rt64.c1 AS NUMERIC))) FROM rt64; -- 0ms;
SELECT DISTINCT CASE rt64.c2  WHEN rt64.c0 THEN rt64.c1 ELSE t0.c0 END COLLATE NOCASE FROM t0, rt64 WHERE ((('-613588768') NOT BETWEEN (x'') AND (NULL)) COLLATE NOCASE); -- 0ms;
SELECT DISTINCT TOTAL(((rt64.c0)IS(rt64.c1))) FROM t0, rt64; -- 2ms;
SELECT ALL CASE WHEN CAST(t0.c0 AS INTEGER) THEN (((t0.c0)) BETWEEN ((rt64.c2)) AND ((rt64.c2))) ELSE CASE WHEN rt64.c2 THEN rt64.c0 END END FROM t0 WHERE (x'91cb') ORDER BY CASE ((rt64.c0)>=(rt64.c0))  WHEN rt64.c2 THEN CASE WHEN rt64.c0 THEN rt64.c0 END WHEN ((rt64.c1) NOT NULL) THEN ((rt64.c0)-(t0.c0)) WHEN (((rt64.c2)) NOT BETWEEN ((t0.c0)) AND ((t0.c0))) THEN ((t0.c0)>>(rt64.c0)) WHEN ((rt64.c2) IS TRUE) THEN ((t0.c0) BETWEEN (rt64.c1) AND (t0.c0)) WHEN CAST(rt64.c2 AS REAL) THEN (((rt64.c1)) BETWEEN ((rt64.c2)) AND ((t0.c0))) WHEN CAST(rt64.c1 AS BLOB) THEN ((t0.c0)*(rt64.c2)) WHEN (rt64.c1 IN (t0.c0, rt64.c1)) THEN (((rt64.c2))<=((0.8909988556458289))) END ASC  NULLS FIRST, (((~ ('-552266833'))) NOT BETWEEN (((rt64.c1) NOT BETWEEN (x'') AND (rt64.c1))) AND (((rt64.c2) IS TRUE)))  NULLS LAST;SELECT ALL rt64.c0, TOTAL(CAST(rt64.c2 AS BLOB)) FILTER(WHERE ((rt64.c2)>(0xfffffffffcfe81a3)) COLLATE NOCASE COLLATE BINARY) OVER (), (((rt64.c1 IN ())) IS FALSE) FROM t0;SELECT ALL ((((rt64.c2)<=(t0.c0))) NOTNULL) FROM rt64, t0 GROUP BY ((t0.c0 COLLATE BINARY)==(CASE WHEN rt64.c2 THEN rt64.c0 WHEN rt64.c0 THEN rt64.c2 WHEN rt64.c0 THEN t0.c0 ELSE 341681114 END)), (rt64.c2 COLLATE BINARY IN ((rt64.c1 IN ()))), IFNULL((- (rt64.c1)), ((rt64.c2) IS FALSE)) LIMIT 1156436368 OFFSET -401377266; -- 1ms;
SELECT COUNT(*) FROM t0, rt64 WHERE (((CAST('-1469573153' AS REAL)) BETWEEN (((x'')IS NOT(-367405752))) AND (((x'') NOT BETWEEN ('') AND ('-1810211598'))))) GROUP BY CASE rt64.c0  WHEN ((rt64.c2) NOT NULL) THEN rt64.c0 WHEN ((rt64.c1)|(rt64.c0)) THEN (rt64.c0 IN ()) WHEN rt64.c0 COLLATE RTRIM THEN (rt64.c0 IN ()) ELSE '-1406605279' COLLATE BINARY END, CASE ((((rt64.c1)OR(rt64.c2)))AND(rt64.c0))  WHEN x'' THEN rt64.c1 END, ((SQLITE_COMPILEOPTION_GET(NULL)) NOT BETWEEN (CAST(rt64.c2 AS NUMERIC)) AND (rt64.c0 COLLATE RTRIM)); -- 0ms;
SELECT (~ (CAST(t0.c0 AS BLOB))) FROM t0; -- 0ms;
SELECT ALL (- (((t0.c0)%(rt64.c2)))) FROM t0, rt64 WHERE (CASE 0.3502215569848982  WHEN (NOT (x'')) THEN ((x'') NOT BETWEEN (' x+') AND ('q1')) END) GROUP BY rt64.c1 COLLATE RTRIM; -- 0ms;
SELECT DISTINCT GROUP_CONCAT((((0.9318052490665587))>=((rt64.c1)))) OVER () FROM t0, rt64; -- 0ms;
SELECT DISTINCT (((CAST(rt64.c1 AS REAL), ((t0.c0)OR(NULL)), (NULL IN (rt64.c0)), ((rt64.c0)||(rt64.c1)), MIN(rt64.c0)))>((((rt64.c2) NOT BETWEEN (rt64.c1) AND (t0.c0)), ((rt64.c2)*(NULL)), ((rt64.c1)AND(rt64.c0)), MIN(rt64.c1), t0.c0 COLLATE NOCASE))), ABS((t0.c0 IN ())), (((~ (rt64.c0)))LIKE((+ (rt64.c2)))) FROM rt64 GROUP BY (rt64.c2 IN ()), (((rt64.c1, rt64.c1, rt64.c0)) NOT BETWEEN (((((x'', rt64.c0, t0.c0)) BETWEEN ((t0.c0, t0.c0, rt64.c2)) AND ((rt64.c1, rt64.c0, t0.c0))), ((rt64.c2) NOT NULL), rt64.c0)) AND ((CASE rt64.c0  WHEN rt64.c1 THEN rt64.c2 END, NULLIF(t0.c0, t0.c0), (- (t0.c0))))), ((rt64.c1)>(((((rt64.c0)AND(rt64.c2)))OR(t0.c0))));SELECT (((((((((rt64.c2)OR(rt64.c0)))AND(rt64.c1)))OR(t0.c0)))OR(rt64.c1)) IN ()) FROM rt64 WHERE (CASE WHEN (~ (0Xfffffffff11b29a3)) THEN (('52687827')/(1681308955)) WHEN ((NULL) NOT BETWEEN (NULL) AND (x'')) THEN (- (0Xffffffffd4eb54d8)) WHEN LOWER(NULL) THEN ((NULL) BETWEEN ('910884020') AND ('㓲*\-rKgC')) END) ORDER BY (('z''<(i啟')LIKE(((rt64.c2) NOT BETWEEN (rt64.c1) AND (rt64.c1)))) DESC; -- 0ms;
SELECT DISTINCT ((load_extension(t0.c0))>(rt64.c2 COLLATE BINARY)) FROM t0, rt64 WHERE (((CAST(NULL AS REAL))<<(('1485970712' IN ())))); -- 0ms;
SELECT DISTINCT (((rt64.c1)<<(rt64.c1)) IN (MAX(t0.c0))), LEAD(LIKELIHOOD(NULL, 0.6919833733834642), ((((t0.c0)>=('784181878'))) NOT BETWEEN (CASE WHEN t0.c0 THEN t0.c0 ELSE t0.c0 END) AND ((((0X7f294740))>((t0.c0))))), (((((t0.c0)LIKE(t0.c0)), ((((((((t0.c0)AND(x'')))OR(t0.c0)))OR(t0.c0)))OR(t0.c0)), (((0.5168403152280492, t0.c0, t0.c0)) NOT BETWEEN (('0.9414291786603298', t0.c0, t0.c0)) AND ((t0.c0, t0.c0, t0.c0)))))>(('lVUᡂm', TRIM(DISTINCT t0.c0), (t0.c0 IN (t0.c0)))))) OVER (), (- (CASE WHEN t0.c0 THEN rt64.c2 ELSE '113249806' END)) FROM t0 WHERE ((~ (((NULL) NOTNULL)))) ORDER BY CAST(CAST(rt64.c2 AS TEXT) AS NUMERIC)  NULLS LAST;SELECT DISTINCT (('j疟') NOT BETWEEN (((((rt64.c2)OR(t0.c0)))AND('1423913360'))) AND (x'4156')) FROM rt64 WHERE ('0.1276794630664525' COLLATE NOCASE);SELECT (((rt64.c0) IS TRUE) IN ()), (TOTAL(rt64.c1) IN ()), CASE WHEN '-1211140514' THEN TRIM(DISTINCT rt64.c2, t0.c0) END FROM rt64 WHERE ((((392675968)>>('2121456978')) IN (((0.40365141121831694) BETWEEN (x'') AND (0xffffffffc209ed6c)))));SELECT DISTINCT 0x6f6bee7a FROM rt64 INDEXED BY i20, t0 ORDER BY ((('1401431503')<<(rt64.c0)) IN ())  NULLS FIRST, rt64.c1  NULLS LAST, (((rt64.c1 IN ()))%(((rt64.c2)||(rt64.c2)))) DESC;SELECT ALL (- (rt64.c1)), ((((rt64.c0) NOT BETWEEN (rt64.c2) AND (rt64.c2)))-(CASE t0.c0  WHEN t0.c0 THEN t0.c0 ELSE t0.c0 END)), (+ (((((rt64.c0)OR(rt64.c1)))AND(rt64.c0)))) FROM rt64, t0 WHERE (CASE WHEN (('') NOT BETWEEN (NULL) AND (0.05822813902127777)) THEN ((((0.47062479668880464)OR(-1.749761609E9)))OR('898799927')) WHEN ((NULL)&('0.2195349075696692')) THEN (((('^%3d/')AND(NULL)))AND(0.11601173873994886)) WHEN CASE 0xffffffffedf3e4c1  WHEN NULL THEN '444156997' WHEN NULL THEN NULL WHEN '-1695303761' THEN '' ELSE NULL END THEN (('␋X') NOT BETWEEN ('Sg') AND ('UE]zV7M_r')) ELSE 'B%I\E' COLLATE RTRIM END) GROUP BY TRIM(NULL), CAST(((t0.c0) NOT BETWEEN (rt64.c0) AND (rt64.c1)) AS INTEGER), ((rt64.c2)<=(((rt64.c0)IS NOT(t0.c0)))) HAVING (((((rt64.c0)>=(rt64.c1))))>=((((rt64.c1) NOT BETWEEN (rt64.c2) AND (t0.c0))))); -- 0ms;
SELECT CAST((((rt64.c0)) NOT BETWEEN ((t0.c0)) AND ((rt64.c0))) AS INTEGER), NULL, ((TRIM(DISTINCT t0.c0, rt64.c2))&((+ (t0.c0)))) FROM t0, rt64 WHERE ((((('B')IS(NULL))) BETWEEN (('' IN ())) AND (((('CZjy*泤D'))>((-1.735358404E9)))))); -- 0ms;
SELECT ((rt64.c2 COLLATE RTRIM)%(GROUP_CONCAT(0.7823371842319788))), ((((rt64.c0, rt64.c2, rt64.c1)) BETWEEN ((rt64.c2, t0.c0, rt64.c2)) AND ((t0.c0, rt64.c2, rt64.c1))) IN (CASE rt64.c0  WHEN rt64.c2 THEN rt64.c0 END)), (((rt64.c2 IN ()))GLOB((((rt64.c0))!=((rt64.c0))))) FROM rt64;SELECT ALL NULL, (((t0.c0 IN (t0.c0))) NOT BETWEEN (x'') AND (((t0.c0) ISNULL))), (((rt64.c0)) BETWEEN (((rt64.c1 IN ()))) AND ((((rt64.c1)GLOB(t0.c0))))) FROM t0 LIMIT 198122752;SELECT ALL CASE WHEN ((rt64.c2)==(rt64.c1)) THEN t0.c0 COLLATE NOCASE ELSE ((t0.c0)+(t0.c0)) END FROM rt64, t0; -- 0ms;
SELECT DISTINCT CAST((t0.c0 IN ()) AS BLOB) FROM t0, rt64; -- 0ms;
SELECT DISTINCT MIN((~ (rt64.c0))) FROM rt64, t0 LIMIT -1118059429; -- 1ms;
SELECT DISTINCT ((((CAST(rt64.c0 AS NUMERIC))AND(0x1988d005)))OR(((rt64.c1)AND(0.39605355116843766)))), COUNT(CAST(rt64.c2 AS INTEGER)), '' FROM rt64; -- 0ms;
SELECT (((NOT (rt64.c2))) NOT BETWEEN (TOTAL(t0.c0)) AND ((- (rt64.c1)))) FROM t0, rt64 WHERE ((((x'', '242366309', x'')) BETWEEN ((CASE WHEN x'4d6c' THEN 0x5097619 ELSE '0.3677707350545627' END, ((((2132403487)AND(x'')))OR(0.4714935931350762)), CASE -1.695303761E9  WHEN '-1135522595' THEN NULL END)) AND ((((-202693777) NOT BETWEEN (x'') AND (0.006140161443988323)), '-601985408' COLLATE BINARY, '-2118592669')))) UNION ALL SELECT DISTINCT (((t0.c0 IN ())) BETWEEN (((rt64.c1)+(rt64.c1))) AND (rt64.c2)) FROM t0 WHERE ((('766404243') IS FALSE)) ORDER BY ((((rt64.c2)|(rt64.c2)))AND(((rt64.c0) NOT BETWEEN (t0.c0) AND (rt64.c1)))) ASC;SELECT ALL SUM(CASE rt64.c2  WHEN 0X57f1e6b4 THEN rt64.c2 END) OVER () FROM rt64; -- 0ms;
SELECT DISTINCT CAST(((rt64.c2) IS FALSE) AS TEXT) FROM rt64, t0 INDEXED BY i20 ORDER BY ((((rt64.c0) IS FALSE))>>(((rt64.c2)+(rt64.c0)))) DESC  NULLS FIRST;SELECT ALL (CASE rt64.c0  WHEN 0.05822813902127777 THEN rt64.c0 END IN ()) FROM t0; -- 0ms;
SELECT DISTINCT 0x257d7dad, (((((t0.c0 IN (x'8a11')))OR(((rt64.c0) BETWEEN (rt64.c0) AND (rt64.c1)))))AND((((rt64.c0)) BETWEEN ((rt64.c0)) AND ((-64864826))))), (((((0.47429423177830854, rt64.c1, rt64.c0)) NOT BETWEEN ((rt64.c0, rt64.c1, rt64.c0)) AND ((rt64.c0, rt64.c2, rt64.c2))))<=(((t0.c0)GLOB(t0.c0)))) FROM t0, rt64 GROUP BY ((((((rt64.c0)OR(rt64.c1)))OR('-127654142'))) BETWEEN (json_array(t0.c0, t0.c0)) AND (((rt64.c1) NOT BETWEEN (t0.c0) AND (rt64.c0)))), (NOT (((rt64.c1) IS TRUE))), ((((t0.c0)&('ga')))GLOB(((((t0.c0)AND(rt64.c0)))OR(NULL)))) HAVING '15';SELECT CASE rt64.c1  WHEN rt64.c1 THEN NULL WHEN ((((rt64.c1)AND(rt64.c1)))OR(rt64.c0)) THEN ((NULL) BETWEEN (rt64.c1) AND (rt64.c1)) WHEN ((x'')-(rt64.c0)) THEN (- (t0.c0)) END FROM rt64 WHERE (CAST(('36' IN ()) AS REAL));SELECT DISTINCT (((((((((+ (NULL)))AND(((rt64.c2) NOT BETWEEN (rt64.c2) AND (rt64.c0)))))AND(((((rt64.c2)OR(rt64.c1)))OR(rt64.c1)))))OR(IFNULL(DISTINCT t0.c0, t0.c0))))OR(rt64.c1)) FROM t0, rt64; -- 1ms;
SELECT FIRST_VALUE(((CAST(t0.c0 AS BLOB))GLOB(((t0.c0) IS FALSE)))) OVER ( ORDER BY NULL COLLATE BINARY, (((rt64.c2)=(rt64.c2)) IN ()) DESC), rt64.c1, ((CAST('208178129' AS INTEGER))AND(CASE rt64.c1  WHEN rt64.c0 THEN rt64.c2 WHEN t0.c0 THEN rt64.c2 WHEN rt64.c1 THEN t0.c0 ELSE rt64.c2 END)) FROM t0 WHERE (((((((x'')OR('-1762811313')))OR((~ ('')))))AND(0.4215183548300525 COLLATE NOCASE)));SELECT ALL ((((rt64.c1)%(t0.c0))) NOT BETWEEN (((rt64.c1)&(t0.c0))) AND ((((rt64.c1, t0.c0, rt64.c0))<=((rt64.c1, rt64.c0, rt64.c0))))) FROM t0;SELECT DISTINCT (((TRIM(DISTINCT rt64.c2, rt64.c2)))<=(((((t0.c0, rt64.c1, rt64.c2)) NOT BETWEEN (('-2101566047', t0.c0, rt64.c0)) AND ((rt64.c1, rt64.c0, rt64.c0)))))) FROM rt64 WHERE (((('0.19030539365586996')IS(NULL)) IN ()));SELECT ALL (((((rt64.c2, t0.c0, 0.9540256150815132, rt64.c1, t0.c0)) BETWEEN ((rt64.c1, rt64.c2, t0.c0, rt64.c1, rt64.c1)) AND ((t0.c0, 0.04749089389489647, rt64.c1, rt64.c1, rt64.c1)))) BETWEEN ((- (rt64.c0))) AND (((rt64.c2)<<(t0.c0)))) FROM t0, rt64 WHERE (rtreenode(CAST(NULL AS TEXT), (((NULL, '-1177269498', 0.00486041853821928)) BETWEEN ((x'9298dc70', NULL, NULL)) AND (('-542652970', x'', 'c^>w#p'))))); -- 1ms;
SELECT DISTINCT ((rt64.c1) NOT BETWEEN (rt64.c0) AND (rt64.c1)) COLLATE NOCASE FROM t0, rt64; -- 3ms;
SELECT DISTINCT ((('427518362')) NOT BETWEEN ((COUNT(*))) AND ((((t0.c0)>(rt64.c0))))), (rt64.c2 IN ((rt64.c1 IN (rt64.c2, x'')))), (('-1225050126')+(CASE rt64.c1  WHEN rt64.c1 THEN t0.c0 ELSE rt64.c0 END)) FROM t0;SELECT ALL ((0.18214554762758317)/('m.Y4T딅lnu')) FROM t0, rt64; -- 0ms;
SELECT ALL CASE ((rt64.c2)<=(rt64.c2))  WHEN (rt64.c1 IN ()) THEN CAST(0xffffffff8dfb0282 AS NUMERIC) ELSE (rt64.c2 IN (rt64.c1)) END FROM t0 WHERE (((((0.8568913239821122) IS TRUE))*(((('2076330435'))=((0.502936901011495))))));SELECT ((((t0.c0) IS TRUE)) BETWEEN ((rt64.c1 IN (rt64.c0))) AND (CAST(rt64.c0 AS NUMERIC))) FROM rt64, t0 ORDER BY x'' COLLATE NOCASE; -- 0ms;
SELECT DISTINCT COUNT(*) OVER (), (~ (LIKELY(rt64.c0))), UNLIKELY(rt64.c2 COLLATE BINARY) FROM t0, rt64 WHERE (CAST(((x'') ISNULL) AS NUMERIC)); -- 0ms;
SELECT ((t0.c0)AND(((((((((rt64.c2)AND(rt64.c0)))OR(rt64.c1)))OR(t0.c0)))AND(x'')))), GROUP_CONCAT((NOT (NULL))), ((rt64.c0 COLLATE RTRIM)||(TOTAL(rt64.c0))) FROM rt64, t0; -- 0ms;
SELECT DISTINCT CAST(((t0.c0)<<(t0.c0)) AS TEXT) FROM rt64 WHERE ((((((((((((((x'')AND(0.5259148429628183)))AND(NULL)))AND(0.21875896049150367)))OR(x'')))AND(0.3284619171510049)))OR(x'')) IN ())) LIMIT 1172877606;SELECT (t0.c0 IN ()) COLLATE RTRIM, '', NULL FROM rt64, t0; -- 0ms;
SELECT DISTINCT LAST_VALUE((~ (0.6189866834073433))) OVER ( ORDER BY CAST(((((rt64.c1)AND(t0.c0)))AND(rt64.c0)) AS INTEGER) DESC) FROM t0 NOT INDEXED, rt64 WHERE (((('X*qAg?')) NOT BETWEEN (((('-1863254239') IS FALSE))) AND ((((0.414909436993821) IS TRUE))))); -- 0ms;
SELECT DISTINCT ((t0.c0) NOT BETWEEN (t0.c0) AND (rt64.c0)) COLLATE BINARY FROM rt64 WHERE ((0Xffffffffc4e8e47c COLLATE RTRIM IN ())) GROUP BY UPPER(DISTINCT rt64.c0) HAVING ((((t0.c0) BETWEEN (rt64.c1) AND (rt64.c2))) BETWEEN (((rt64.c1)>=(t0.c0))) AND (CASE t0.c0  WHEN rt64.c2 THEN rt64.c0 END));SELECT DISTINCT CAST(LIKELIHOOD(rt64.c1, 0.058999948674862246) AS REAL) FROM rt64 WHERE (0.46816334046212005); -- 0ms;
SELECT DISTINCT ((GLOB(rt64.c2, rt64.c0)) IS FALSE) FROM rt64; -- 0ms;
SELECT DISTINCT ((((COUNT(rt64.c2))AND(((t0.c0)*(rt64.c1)))))OR(((t0.c0) ISNULL))), CAST(t0.c0 AS REAL) COLLATE NOCASE, ((1.273573104E9) NOTNULL) FROM rt64, t0 WHERE ((~ ((NOT (x''))))); -- 0ms;
SELECT DISTINCT CAST(((t0.c0)AND(rt64.c0)) AS NUMERIC), CAST(((t0.c0) NOT BETWEEN (t0.c0) AND ('QU')) AS TEXT), GROUP_CONCAT((((rt64.c0))=((rt64.c1)))), COUNT(*), (NOT (((rt64.c0)OR(rt64.c2)))) FROM rt64 RIGHT OUTER JOIN t0 ON 0.32866132996413744 COLLATE NOCASE WHERE ((((x'd09a')) NOT BETWEEN ((((0.2753549466468952)>(x'')))) AND (('-1369211486' COLLATE NOCASE)))); -- 0ms;
SELECT DISTINCT ((((t0.c0, t0.c0, rt64.c2)) BETWEEN ((rt64.c0, '779479005', rt64.c0)) AND ((rt64.c1, rt64.c0, rt64.c0))) IN (((rt64.c2)>>(rt64.c1)))) FROM t0 WHERE (TRIM(NULL, 0.8145465670996079) COLLATE RTRIM);