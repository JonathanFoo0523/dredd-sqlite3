-- Time: 2024/06/06 01:36:59
-- Database: database56
-- Database version: 3.40.0
-- seed value: 947930356
PRAGMA cache_size = 50000; -- 0ms;
PRAGMA temp_store=MEMORY; -- 0ms;
PRAGMA synchronous=off; -- 0ms;
CREATE TEMP TABLE t0 (c0 TEXT , c1 INT NOT NULL ON CONFLICT FAIL , c2 INT ); -- 0ms;
CREATE VIRTUAL TABLE vt1 USING fts4(c0 UNINDEXED, c1, order=DESC, prefix=516); -- 2ms;
END TRANSACTION; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
ANALYZE; -- 0ms;
ANALYZE sqlite_master; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
COMMIT TRANSACTION; -- 0ms;
INSERT OR ABORT INTO t0(c2, c0) VALUES ('-1085135293', NULL); -- 0ms;
INSERT OR FAIL INTO vt1(c0) VALUES (0.5681867464037982); -- 0ms;
COMMIT TRANSACTION; -- 0ms;
UPDATE OR IGNORE vt1 SET (c0)=(-1048917236); -- 1ms;
INSERT INTO vt1(vt1) VALUES('integrity-check'); -- 0ms;
ALTER TABLE t0 RENAME COLUMN c1 TO c53; -- 0ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 1ms;
INSERT OR IGNORE INTO t0 VALUES (NULL, -218665512, 0xfffffffff2f76dd8), ('-1085135293', 0.6204873668678844, x''), (0x1d04c174, -1.085135293E9, 0.5438619140750516); -- 0ms;
INSERT INTO vt1(vt1) VALUES('merge=486850932,7');\n; -- 0ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 0ms;
REINDEX; -- 0ms;
DROP TABLE t0; -- 1ms;
INSERT INTO vt1(vt1) VALUES('optimize'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('automerge', 0); -- 0ms;
INSERT INTO vt1(vt1) VALUES('merge=628836995,11');\n; -- 0ms;
INSERT OR ROLLBACK INTO vt1(c0) VALUES ('1783862539'); -- 1ms;
REINDEX; -- 0ms;
INSERT INTO vt1(vt1) VALUES('integrity-check'); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '18107'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('usermerge', 12); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('merge', 1783862539);\n; -- 0ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '36965'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '55885'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('optimize'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('optimize'); -- 0ms;
INSERT OR IGNORE INTO vt1(c0) VALUES (-551124702); -- 0ms;
REINDEX RTRIM; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '14522'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 0ms;
END TRANSACTION; -- 0ms;
UPDATE OR FAIL vt1 SET c0=NULL WHERE ((((((vt1.c1)OR(vt1.c1)))OR(vt1.c0)))%((~ (0.1826396431510221)))); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', '2 noskipscan'); -- 0ms;
PRAGMA auto_vacuum = FULL; -- 0ms;
CREATE TEMPORARY VIEW v0(c0, c1, c2) AS SELECT DISTINCT (('-1085135293')GLOB(CAST(vt1.c0 AS TEXT))), COUNT(*) OVER (), LAST_VALUE(CASE WHEN ((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1)) THEN ((vt1.c1) NOT NULL) END) OVER () FROM vt1 LIMIT -1 OFFSET -218665512; -- 0ms;
REINDEX; -- 2ms;
INSERT INTO vt1(vt1, rank) VALUES('automerge', 14); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '34956'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 0ms;
ANALYZE temp; -- 0ms;
INSERT OR IGNORE INTO vt1 VALUES (NULL, 0.19929703572099422); -- 1ms;
ANALYZE; -- 1ms;
INSERT INTO vt1(vt1) VALUES('optimize'); -- 0ms;
REINDEX; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('crisismerge', 848386110); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('automerge', 8); -- 0ms;
INSERT INTO vt1(vt1) VALUES('integrity-check'); -- 0ms;
INSERT OR IGNORE INTO vt1 VALUES (x'', NULL), (0.586372279066966, '\{'), ('', 0.4086685951671595); -- 0ms;
END; -- 0ms;
BEGIN IMMEDIATE TRANSACTION; -- 0ms;
BEGIN IMMEDIATE TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO vt1(c0) VALUES (281864091), (x''), ('-502218188'); -- 0ms;
COMMIT TRANSACTION; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '56741'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('automerge=8'); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
COMMIT; -- 0ms;
INSERT OR IGNORE INTO vt1(c1) VALUES (x''); -- 1ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt1', 'sqlite_autoindex_vt1_segdir_1', ' sz=1452929656 noskipscan'); -- 0ms;
ANALYZE temp; -- 0ms;
INSERT OR ROLLBACK INTO vt1(c0) VALUES (-1.085135293E9); -- 0ms;
REINDEX; -- 1ms;
INSERT INTO vt1(vt1, rank) VALUES('usermerge', 5); -- 0ms;
INSERT INTO vt1(vt1) VALUES('integrity-check'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('optimize'); -- 0ms;
PRAGMA main.threads; -- 0ms;
REINDEX RTRIM; -- 0ms;
INSERT OR IGNORE INTO vt1(c0) VALUES ('/t6ku)x'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('merge=-1085135293,15');\n; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('usermerge', 4); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '18963'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('usermerge', 13); -- 1ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '44279'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('optimize'); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
PRAGMA auto_vacuum; -- 0ms;
BEGIN DEFERRED TRANSACTION; -- 0ms;
INSERT INTO vt1(vt1) VALUES('optimize'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('optimize'); -- 0ms;
INSERT OR IGNORE INTO vt1(c1) VALUES (x'9c42de81'); -- 0ms;
END; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('usermerge', 10); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 1ms;
INSERT INTO vt1(vt1, rank) VALUES('automerge', 15); -- 0ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('automerge=8'); -- 0ms;
END; -- 0ms;
INSERT INTO vt1(vt1) VALUES('integrity-check'); -- 0ms;
INSERT OR REPLACE INTO vt1(c0) VALUES (x''); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 1ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '60080'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('crisismerge', 421559311); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('usermerge', 9); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '64009'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('crisismerge', 1081293725); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('merge=-2117037023,4');\n; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '13555'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '27141'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('merge=1452929656,13');\n; -- 0ms;
INSERT OR IGNORE INTO vt1(c1) VALUES ('628836995'), (x'7a1f'), (x''), ('AC'), (0X5699f278); -- 1ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 0ms;
PRAGMA temp.foreign_keys; -- 0ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 0ms;
INSERT OR FAIL INTO vt1(c1) VALUES (628836995); -- 1ms;
ANALYZE; -- 0ms;
INSERT OR IGNORE INTO vt1(c1, c0) VALUES (NULL, -1048917236); -- 0ms;
PRAGMA temp.optimize; -- 0ms;
INSERT OR IGNORE INTO vt1(c1, c0) VALUES (x'9fa7', x'f7d2'), (NULL, 'YQv* KLp'), (628836995, NULL); -- 0ms;
INSERT OR IGNORE INTO vt1(c0) VALUES (0.42430879513183195); -- 0ms;
VACUUM temp; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('v0', 'sqlite_autoindex_vt1_segdir_1', '0 unordered'); -- 0ms;
INSERT OR IGNORE INTO vt1 VALUES ('i4)c	oc', x''); -- 0ms;
ANALYZE sqlite_master; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('crisismerge', 1408699674); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('usermerge', 15); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('merge', 628836995);\n; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('crisismerge', 1512772524); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('merge', -2117037023);\n; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '30725'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('merge', -1101817298);\n; -- 1ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 0ms;
INSERT OR IGNORE INTO vt1(c0) VALUES (0.23490796330162012); -- 0ms;
REINDEX  vt1; -- 0ms;
INSERT INTO vt1(vt1) VALUES('automerge=0'); -- 1ms;
UPDATE OR ABORT vt1 SET (c1)=(0X1d04c174) WHERE (((((NOT (vt1.c0)))AND(((vt1.c1)<(vt1.c0)))))OR(((vt1.c0)OR(vt1.c0)))); -- 0ms;
VACUUM temp; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
ANALYZE; -- 0ms;
END TRANSACTION; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
SELECT ALL vt1.c1 FROM v0, vt1; -- 0ms;
SELECT DISTINCT COUNT(*) COLLATE RTRIM COLLATE NOCASE FROM v0; -- 0ms;
SELECT ALL ((((CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 WHEN vt1.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN vt1.c0 ELSE v0.c2 END)OR((((vt1.c0))>((vt1.c1))))))OR(0Xb17f312)), SUM(((((((((v0.c2)OR(vt1.c1)))OR(v0.c2)))OR(vt1.c0)))OR(v0.c0))) OVER ( ORDER BY CASE (~ (vt1.c1))  WHEN CAST(v0.c1 AS TEXT) THEN v0.c1 WHEN vt1.c0 COLLATE NOCASE THEN CASE WHEN v0.c1 THEN vt1.c0 END WHEN ((vt1.c0)-(vt1.c1)) THEN ((v0.c1) NOT NULL) ELSE v0.c0 END ASC  NULLS LAST), MAX((v0.c1 IN ())) FROM vt1, v0; -- 1ms;
SELECT ((((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c0)))+(TRIM(x''))) FROM vt1; -- 0ms;
SELECT DISTINCT IFNULL(vt1.c0, x'bd455932') COLLATE BINARY FROM vt1 WHERE (((0.19624402594762347 COLLATE RTRIM)<<(0.7172556895523449 COLLATE RTRIM))); -- 0ms;
SELECT DISTINCT CAST(((v0.c0)<<(v0.c1)) AS NUMERIC) FROM vt1, v0; -- 0ms;
SELECT -1692023748 COLLATE RTRIM, ((((v0.c2, v0.c0, 0.9118069998468331)) NOT BETWEEN ((vt1.c0, vt1.c0, v0.c1)) AND ((v0.c0, v0.c1, vt1.c1))) IN ()), GROUP_CONCAT((((v0.c2)) NOT BETWEEN ((vt1.c0)) AND ((v0.c2)))) COLLATE NOCASE, CAST(((v0.c0)>=(-1.101817298E9)) AS BLOB), (((CASE 0.9215795530224842  WHEN vt1.c1 THEN vt1.c1 ELSE v0.c0 END))<=((CASE vt1.c0  WHEN v0.c1 THEN 0X6cb60b91 ELSE vt1.c1 END))) FROM vt1;SELECT DISTINCT (((((v0.c1)) BETWEEN ((v0.c2)) AND ((v0.c2))))>(CASE WHEN v0.c0 THEN vt1.c1 ELSE v0.c1 END)), CAST(v0.c1 AS INTEGER), ABS(DISTINCT CAST(vt1.c1 AS TEXT)) FROM vt1 WHERE ((((((('')OR('-502218188')))OR(1.8611893E8)))IS((('338667316')*(x'')))));SELECT DISTINCT ((((v0.c2) ISNULL)) BETWEEN (((((((((v0.c1)OR(vt1.c0)))OR(v0.c2)))AND(v0.c1)))AND(v0.c0))) AND (HEX(v0.c2))) FROM v0, vt1 WHERE (CAST((((x''))!=((NULL))) AS TEXT)); -- 0ms;
SELECT DISTINCT CASE ((((v0.c2)OR(vt1.c0)))OR(v0.c0))  WHEN vt1.c1 THEN CAST(vt1.c0 AS NUMERIC) WHEN v0.c0 COLLATE NOCASE THEN ((v0.c0) NOT BETWEEN (vt1.c0) AND (v0.c2)) WHEN CASE v0.c2  WHEN v0.c1 THEN vt1.c0 ELSE v0.c0 END THEN vt1.c1 WHEN MIN(v0.c2) THEN ((vt1.c1) IS TRUE) WHEN (- (vt1.c1)) THEN CASE v0.c1  WHEN vt1.c0 THEN v0.c0 WHEN 0x257b4a83 THEN v0.c2 WHEN v0.c1 THEN vt1.c0 END ELSE MAX(vt1.c0) END, (('T8#ecI') ISNULL), CASE ((v0.c1) BETWEEN (v0.c1) AND (vt1.c0))  WHEN ((v0.c2)-(0.4086685951671595)) THEN (((vt1.c0, vt1.c0, vt1.c0, vt1.c0, vt1.c1))<=(('-310561215', -676869267, v0.c2, v0.c1, v0.c0))) WHEN v0.c1 COLLATE RTRIM THEN (- (vt1.c1)) WHEN (- (vt1.c0)) THEN v0.c2 COLLATE NOCASE ELSE CASE WHEN NULL THEN v0.c1 END END FROM v0 INNER JOIN vt1 ON (((vt1.c1 IN ()))=(TYPEOF(v0.c0))) WHERE (((((((NULL)) NOT BETWEEN ((3.38667316E8)) AND ((NULL)))))<(((((NULL))=(('-370576036'))))))) LIMIT -2000147385; -- 0ms;
SELECT ALL ((COUNT(*)) ISNULL), (v0.c0 COLLATE BINARY IN ()), NTH_VALUE((((((v0.c2)) NOT BETWEEN ((v0.c2)) AND ((v0.c0))))>=((- (v0.c1)))), CASE WHEN ((v0.c1)AND(',B')) THEN ((((((((x'')AND(v0.c2)))OR(NULL)))AND(v0.c2)))OR(v0.c0)) ELSE ((v0.c2) NOT BETWEEN (NULL) AND (v0.c0)) END) OVER () FROM v0; -- 0ms;
SELECT DISTINCT CAST(CAST(vt1.c1 AS NUMERIC) AS BLOB) FROM v0;SELECT DISTINCT (((((v0.c2)||(v0.c0)), CASE v0.c0  WHEN vt1.c1 THEN v0.c0 WHEN 'saUj' THEN v0.c1 WHEN vt1.c0 THEN v0.c1 END, (NOT (v0.c2))))<>((COUNT(*), ((((v0.c0)AND(vt1.c0)))AND(0xffffffffa1a8a582)), (('0.42430879513183195') IS FALSE)))), (((+ (v0.c2))) NOTNULL), (((v0.c1 IN ())) NOT BETWEEN ((((v0.c2))>=((v0.c2)))) AND ('-1085135293')), 338667316, CASE ((v0.c1) NOT BETWEEN (vt1.c0) AND (v0.c2))  WHEN (vt1.c1 IN (vt1.c0)) THEN -2035360272 ELSE ((((((((vt1.c1)OR(v0.c2)))AND(v0.c2)))AND(v0.c0)))OR(v0.c0)) END FROM v0;SELECT ALL ((+ (v0.c2)) IN (MIN(vt1.c1))), ((vt1.c0) IS TRUE) COLLATE BINARY, (((v0.c0)) NOT BETWEEN ((GROUP_CONCAT(vt1.c0))) AND ((IFNULL(DISTINCT v0.c1, vt1.c0)))) FROM v0;SELECT ALL CASE ((v0.c1)&(v0.c2))  WHEN NULL THEN ((v0.c2) IS FALSE) END FROM v0 ORDER BY (- (v0.c1)) COLLATE RTRIM; -- 0ms;
SELECT DISTINCT ((v0.c1)GLOB(v0.c2)) COLLATE BINARY FROM vt1, v0; -- 0ms;
SELECT DISTINCT ((((vt1.c0) ISNULL)) NOT BETWEEN (CAST(v0.c2 AS BLOB)) AND ((~ (v0.c0)))) FROM vt1, v0; -- 0ms;
SELECT DISTINCT ((TYPEOF(vt1.c0)) BETWEEN (MIN(v0.c0)) AND ((v0.c1 IN ()))), (SUM(v0.c2) IN (COUNT(vt1.c0))), (DATE(v0.c2, vt1.c1, x'', vt1.c1, v0.c0) IN ()), TOTAL(0.9692707912268617), (+ (vt1.c1)) COLLATE NOCASE FROM vt1;SELECT DISTINCT ((((((v0.c0)AND(vt1.c0)))OR(vt1.c0))) NOT BETWEEN (((vt1.c0) IS FALSE)) AND (vt1.c1)) FROM v0 WHERE ((+ (-75224669)));SELECT DISTINCT ((((((((CAST(v0.c0 AS TEXT))OR(x'' COLLATE RTRIM)))OR(TYPEOF(v0.c0))))OR(UNLIKELY(DISTINCT v0.c1))))OR(UPPER(v0.c2))), TIME(((' /') NOT BETWEEN (vt1.c1) AND (vt1.c1)), v0.c1 COLLATE BINARY, ((vt1.c0)<(v0.c1))), CASE WHEN UPPER(DISTINCT vt1.c1) THEN CASE NULL  WHEN vt1.c0 THEN vt1.c0 END WHEN ((vt1.c0) NOT BETWEEN (v0.c0) AND (v0.c1)) THEN ((vt1.c1)||(v0.c2)) WHEN GROUP_CONCAT(v0.c1) THEN ((v0.c1) NOTNULL) END FROM v0, vt1; -- 0ms;
SELECT ALL ((v0.c0)GLOB((v0.c1 IN ()))) FROM vt1 WHERE (CASE ''  WHEN '' COLLATE RTRIM THEN CASE x''  WHEN NULL THEN '' WHEN x'560a994c' THEN '' WHEN NULL THEN 0.6213655434831065 ELSE x'' END END);SELECT ALL CASE ((v0.c2) ISNULL)  WHEN ((((((((vt1.c1)OR(v0.c1)))OR(0xe9153ac)))AND(vt1.c1)))AND(vt1.c0)) THEN v0.c0 END FROM vt1 WHERE ((((('-551124702')) BETWEEN ((x'')) AND ((0Xfffffffffb8429a3))) IN ())) GROUP BY ((((v0.c0)%(vt1.c1))) BETWEEN ((NOT (vt1.c0))) AND (((((v0.c2)OR(NULL)))AND(vt1.c1))));SELECT ALL ((((((((((((v0.c1)AND(vt1.c0)))AND(vt1.c1)))AND(vt1.c1)))OR(vt1.c1)))OR((NOT ('0.9118069998468331')))))OR((((v0.c1, v0.c0, NULL)) BETWEEN ((vt1.c0, vt1.c1, v0.c1)) AND ((vt1.c1, v0.c0, v0.c2))))), NULL, CASE WHEN ((vt1.c0)AND(v0.c0)) THEN vt1.c1 ELSE CAST(v0.c2 AS INTEGER) END FROM vt1, v0; -- 1ms;
SELECT DISTINCT CAST((vt1.c1 IN ()) AS BLOB), SUM((vt1.c0 IN (v0.c0))), x'' FROM vt1, v0 WHERE (((('1363425523')) NOT BETWEEN ((json_patch(0x514438f3, 0.8811463972604572))) AND (((0x41a3ed64 IN ()))))) LIMIT 1472627507 OFFSET 1823869841; -- 0ms;
SELECT ALL vt1.c1, ((((v0.c2)<=(vt1.c1))) IS FALSE), (((((vt1.c1 IN (vt1.c1)))AND('')))AND(IFNULL(vt1.c0, v0.c1))) FROM v0, vt1 WHERE ((((((x'' IN ('J<1mq')))OR(LIKELY(DISTINCT NULL))))AND(((0xffffffff81d09421) NOT BETWEEN ('eg\淘<1鑹0') AND ('*QBGGO'))))) GROUP BY ((((vt1.c0))>=((vt1.c0))) IN ()); -- 0ms;
SELECT ALL (((((((v0.c0))>((v0.c0))))AND(CASE vt1.c1  WHEN vt1.c1 THEN vt1.c1 END)))OR(vt1.c1)), (((AVG(v0.c2)))!=((UPPER(v0.c2)))), AVG(((v0.c1)/(vt1.c0))) OVER () FROM vt1 WHERE (((- ('-579954312')) IN ()));SELECT ALL CAST(COUNT(v0.c0) AS NUMERIC) FROM v0 NOT INDEXED, vt1; -- 1ms;
SELECT ALL (+ ((~ (v0.c1)))) FROM v0, vt1 WHERE ((LOWER('-1825186678') IN ())); -- 0ms;
SELECT ALL ((- (vt1.c1)) IN (CASE WHEN vt1.c0 THEN vt1.c1 WHEN v0.c1 THEN v0.c0 WHEN vt1.c0 THEN v0.c2 ELSE v0.c2 END)) FROM vt1, v0; -- 1ms;
SELECT ALL (((v0.c1)) NOT BETWEEN ((((vt1.c1)>=(v0.c0)))) AND ((((((vt1.c1)OR(NULL)))AND(v0.c1))))) FROM v0, vt1 WHERE ((((NOT ('.||'))) BETWEEN ((- (x'ac29'))) AND (((((((((0.22130415435647421)OR(NULL)))OR('yqv* klp')))AND(0.9118069998468331)))AND('YA'))))); -- 1ms;
SELECT DISTINCT (vt1.c0 IN (v0.c2)) COLLATE BINARY, CASE WHEN vt1.c1 COLLATE BINARY THEN (NOT (v0.c0)) ELSE x'9f82' END, MAX(GLOB(v0.c2, v0.c2)), -868293064 COLLATE RTRIM, NTILE(((((0.19624402594762347)AND((((v0.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c1))))))OR((NOT (v0.c0))))) OVER () FROM v0, vt1; -- 0ms;
SELECT (((((v0.c1 IN ()))AND(0.3789888270416929)))AND(v0.c1)) FROM vt1; -- 0ms;
SELECT CAST(((vt1.c0) NOTNULL) AS NUMERIC) FROM v0;SELECT DISTINCT ((((vt1.c0)*(v0.c0)))%(((v0.c2)<<(v0.c2)))), AVG(CASE vt1.c0  WHEN v0.c2 THEN vt1.c0 END), (((('-1184964616') IS TRUE))|((((0.03130851118245648))>=((v0.c2))))) FROM vt1, v0; -- 0ms;
SELECT ALL (COUNT(0.013338447749045246) IN ()), ((((v0.c2)<=(v0.c2)))||((((v0.c2))>((0Xffffffffbfa40483))))), ((((vt1.c0)<<(v0.c1)))+(((vt1.c0) NOTNULL))), ((((v0.c1)<<(vt1.c1)))+(CAST('' AS TEXT))), (((v0.c1)>>(v0.c0)) IN ()), SUM(((v0.c1) NOTNULL)) OVER (), (((vt1.c1))>=((v0.c0))) COLLATE BINARY FROM vt1 WHERE (x'') ORDER BY ((v0.c1)|(vt1.c1)) COLLATE NOCASE  NULLS LAST, CASE ((v0.c2)<(vt1.c1))  WHEN CAST(vt1.c1 AS INTEGER) THEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1)) END;SELECT ALL ((vt1.c0 COLLATE RTRIM) ISNULL) FROM v0 LIMIT 711635976 OFFSET -370576036;SELECT DISTINCT RANK() OVER ( ORDER BY ((NULLIF(DISTINCT v0.c1, v0.c2))&(((vt1.c0)IS NOT(v0.c2)))) ASC), CAST(LTRIM(v0.c2, v0.c2) AS INTEGER), ((((((((((0.3726841015649133)AND(v0.c1)))OR(v0.c1)))OR(v0.c1)))OR(vt1.c1)))-((((v0.c2)) NOT BETWEEN ((v0.c2)) AND ((vt1.c1))))), CASE WHEN ((vt1.c0) BETWEEN (v0.c1) AND (v0.c0)) THEN COUNT(vt1.c1) END, ((vt1.c1 COLLATE RTRIM) IS FALSE) FROM vt1 NOT INDEXED ORDER BY (NOT (((v0.c2)>>(vt1.c1))))  NULLS FIRST;SELECT DISTINCT SUM(((v0.c1)IS(v0.c2))) FROM v0, vt1 WHERE ((CAST('1452929656' AS REAL) IN (x'2562' COLLATE BINARY))); -- 0ms;
SELECT DISTINCT ((((v0.c1) IS TRUE))/((((vt1.c1))<((v0.c0))))) FROM vt1 WHERE ((NOT (CAST('0.7172556895523449' AS NUMERIC))));SELECT ALL ((v0.c2)+(vt1.c1)) COLLATE RTRIM FROM v0;SELECT DISTINCT UPPER(vt1.c0) FROM v0, vt1 WHERE (((('1363425523'))>((x'')))) GROUP BY (+ (CASE WHEN v0.c1 THEN -507251721 ELSE v0.c2 END)), ((vt1.c0) NOT NULL) COLLATE NOCASE, (- (vt1.c0)) HAVING ((ABS(v0.c2)) IS FALSE) ORDER BY ((((((((CAST(vt1.c0 AS INTEGER))OR(((((0.8100088998752879)OR(vt1.c1)))OR(v0.c0)))))OR(((v0.c2)IS NOT(v0.c2)))))OR(v0.c0)))OR((- (vt1.c0))))  NULLS LAST; -- 0ms;
SELECT ALL TOTAL(CASE v0.c0  WHEN 'XWIjl『VK' THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 WHEN vt1.c1 THEN v0.c2 ELSE v0.c1 END) OVER () FROM v0, vt1 GROUP BY (NOT ('1273808820')) ORDER BY ((((((vt1.c0)%(v0.c1)))OR(CAST(v0.c0 AS TEXT))))AND(((v0.c1)IS NOT(v0.c0)))) DESC, CASE ((((vt1.c1)OR(vt1.c0)))AND(vt1.c1))  WHEN (((vt1.c1))==((v0.c0))) THEN vt1.c1 COLLATE BINARY END  NULLS LAST, (('505308621' COLLATE NOCASE)==('1]/'))  NULLS FIRST; -- 0ms;
SELECT DISTINCT CAST(((v0.c2) BETWEEN (v0.c1) AND (v0.c1)) AS INTEGER), ((NULL) BETWEEN (vt1.c1) AND (GROUP_CONCAT(vt1.c1))), TRIM(CASE WHEN v0.c0 THEN -1.825186678E9 END) FROM vt1 WHERE ((CAST(0x6eb6a0af AS NUMERIC) IN (((0.9711886233233764)<(x'')), '-237647035')));SELECT DISTINCT SUM((vt1.c1 IN (v0.c0, vt1.c1))) OVER (), (CASE vt1.c0  WHEN 0.1540737738476815 THEN v0.c2 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 ELSE v0.c2 END IN ()), v0.c2 FROM v0;SELECT DISTINCT 0.7172556895523449 FROM vt1 WHERE ((((('bp෭ErꓻKi') BETWEEN (0.9501087882105917) AND (NULL))) IS TRUE)); -- 0ms;
SELECT DISTINCT ((((vt1.c0) ISNULL))>(NULL)) FROM vt1; -- 0ms;
SELECT ALL CUME_DIST() OVER (), (((v0.c1)) NOT BETWEEN (((- (vt1.c0)))) AND ((UNLIKELY(v0.c1)))), (((NULL IN (vt1.c0))) IS FALSE) FROM v0 WHERE (('281864091' COLLATE BINARY IN ()));SELECT DISTINCT (CASE WHEN v0.c2 THEN v0.c2 END IN ()) FROM vt1 WHERE ((((((NULL) NOT BETWEEN (2129276484) AND ('} t')), 0.34309562395333526 COLLATE RTRIM, (((0.44357788320781344))>=(('486850932')))))=((((((0.762323908749817)AND(x'4d67')))AND(NULL)), (('qO>,')GLOB('265030969')), (((0.7455059237237737)) BETWEEN (('-180809292')) AND ((x''))))))); -- 0ms;
SELECT DISTINCT COUNT(((v0.c0) BETWEEN (v0.c0) AND (v0.c0))) OVER ( ORDER BY (('-289740647')LIKE((- (vt1.c1)))) DESC  NULLS LAST, vt1.c0 ASC), CAST(((v0.c0)/(vt1.c1)) AS NUMERIC), vt1.c0, UPPER(COUNT(vt1.c0)), ((((vt1.c0) NOT NULL)) ISNULL) FROM v0 WHERE ((((CASE WHEN NULL THEN NULL WHEN x'd65e' THEN NULL WHEN NULL THEN '-1280833896' ELSE NULL END))!=((((-1394076471) IS TRUE)))));SELECT DISTINCT (((((vt1.c0)LIKE(v0.c2))))>((((vt1.c0)|(v0.c2))))), v0.c0, MIN((((vt1.c0, vt1.c1, v0.c2))<=((vt1.c1, v0.c0, v0.c0)))) FROM vt1;SELECT DISTINCT (NOT (CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 WHEN v0.c2 THEN vt1.c1 WHEN v0.c0 THEN vt1.c1 END)) FROM vt1 WHERE (((x'')==('-676869267')) COLLATE BINARY);SELECT ((((v0.c2) NOT BETWEEN (v0.c2) AND (v0.c0))) BETWEEN (MAX(vt1.c1)) AND ((v0.c0 IN ()))), (((v0.c2))>(((x'' IN (vt1.c0, v0.c2))))), ((CAST(v0.c2 AS TEXT)) NOTNULL) FROM vt1, v0; -- 0ms;
SELECT DISTINCT ((((v0.c0)+(v0.c0))) NOTNULL), (((((vt1.c1, v0.c1, x'', v0.c1, v0.c2))<((v0.c0, v0.c2, v0.c1, v0.c0, vt1.c0)))) BETWEEN (LIKE(NULL, v0.c2, '0')) AND (((v0.c0)OR(vt1.c0)))), MIN((vt1.c0 IN ())) FROM vt1, v0; -- 1ms;
SELECT DISTINCT MAX((vt1.c0 IN ())) FROM v0 WHERE (((((CAST(x'b05d' AS TEXT))AND((((0.6097520644666293)) BETWEEN ((1.857462447E9)) AND ((0.4497253981979915))))))OR(((NULL) NOT BETWEEN (NULL) AND (x'1a90'))))); -- 0ms;
SELECT DISTINCT COUNT(((v0.c2)>>(v0.c2))) OVER () FROM vt1, v0 ORDER BY ((((v0.c2) ISNULL)) BETWEEN (((v0.c2) BETWEEN (v0.c2) AND (v0.c0))) AND (((((v0.c0)OR(v0.c0)))AND(v0.c1)))), ((CAST(vt1.c0 AS NUMERIC)) IS FALSE) ASC  NULLS LAST; -- 0ms;
SELECT ALL MIN(CAST(vt1.c0 AS TEXT)), CAST((((vt1.c0))<>((NULL))) AS REAL), ((((vt1.c0) IS TRUE))-(((v0.c2) BETWEEN (v0.c2) AND (vt1.c0)))), (('-2117037023')<<(SUM(vt1.c1))), ((((v0.c1) BETWEEN (v0.c1) AND (vt1.c0))) NOT NULL) FROM vt1 NOT INDEXED;SELECT ((v0.c1)<>(vt1.c0)) COLLATE BINARY FROM vt1, v0 WHERE (json_array_length((- ('-876084280')))) LIMIT 1857462447; -- 0ms;
SELECT DISTINCT (((((vt1.c1)>=(v0.c2))))=((((((((((v0.c0)OR(v0.c2)))OR(-2065813845)))AND(v0.c0)))AND(v0.c2))))) FROM v0, vt1 WHERE ((UNLIKELY(-2065813845) IN ())); -- 0ms;
SELECT DISTINCT ((vt1.c0 COLLATE BINARY)&(COUNT(vt1.c0))), ((((NULL)AND(((((((((vt1.c0)OR(vt1.c0)))AND(NULL)))OR(v0.c0)))OR(vt1.c0)))))OR(CAST(vt1.c1 AS TEXT))), (~ (((vt1.c1) NOT BETWEEN ('I1') AND (vt1.c0)))) FROM v0;SELECT DISTINCT NULL FROM v0, vt1 LIMIT 755101974 OFFSET -972509751; -- 0ms;
SELECT DISTINCT COUNT(CAST(x'' AS INTEGER)) COLLATE NOCASE FROM vt1 WHERE ((((((((((('-180809292')OR(0.9181357995217306)))AND(-7.5224669E7)))OR(0.30674388936699604)))AND(x'4c53'))) IS FALSE)) LIMIT 1822320798 OFFSET -829804530; -- 0ms;
SELECT DISTINCT ((628836995)+(CAST(v0.c1 AS NUMERIC))) FROM vt1;SELECT ALL (((((((((v0.c2 IN ()))OR(((v0.c0) ISNULL))))OR((((v0.c1))<>((vt1.c1))))))OR(((v0.c0)AND(vt1.c0)))))OR(v0.c1 COLLATE NOCASE)), ((COUNT(*))+(((vt1.c1) BETWEEN (v0.c2) AND (v0.c2)))), ((((CASE v0.c2  WHEN vt1.c0 THEN vt1.c1 END)OR(vt1.c1)))OR((((v0.c1, v0.c1, vt1.c0)) BETWEEN ((v0.c1, vt1.c1, '쿃')) AND ((vt1.c0, vt1.c0, vt1.c1))))) FROM vt1 ORDER BY ((((v0.c1)GLOB(v0.c2)))AND(v0.c2 COLLATE RTRIM)) ASC  NULLS LAST;SELECT ALL (((((v0.c0, v0.c1, v0.c2))==((v0.c0, vt1.c1, vt1.c0))))+((+ (vt1.c0)))) FROM v0, vt1 ORDER BY ((v0.c0 COLLATE NOCASE) NOT BETWEEN ((((v0.c1))==((vt1.c1)))) AND (((v0.c2)-(v0.c1))))  NULLS FIRST, CAST(v0.c0 AS BLOB) COLLATE NOCASE  NULLS LAST; -- 1ms;
SELECT ALL ((((vt1.c0, 0xffffffffe1c3f3f7, vt1.c0)) NOT BETWEEN ((v0.c0, v0.c0, vt1.c0)) AND ((NULL, v0.c2, v0.c0))) IN ()), 1783862539, (((vt1.c1) BETWEEN (vt1.c1) AND (vt1.c1)) IN (x'', GROUP_CONCAT(vt1.c1))) FROM vt1 ORDER BY v0.c2;SELECT DISTINCT TYPEOF(((v0.c0)GLOB('-2035360272'))) FROM vt1, v0; -- 0ms;
SELECT DISTINCT x'54aada74', ((CASE WHEN v0.c0 THEN v0.c0 WHEN v0.c2 THEN vt1.c0 WHEN v0.c2 THEN v0.c2 END)OR(x'51c8')), json_valid(((v0.c0) NOT NULL)), CAST(((v0.c1)AND(v0.c1)) AS REAL), (((NOT (v0.c1))) BETWEEN (((vt1.c1)||(vt1.c1))) AND (vt1.c1)) FROM v0 WHERE (((((NULL)IS NOT(0.7871073796953495))) NOT BETWEEN (0.7871073796953495) AND (CAST(x'' AS NUMERIC))));SELECT ALL vt1.c0 FROM vt1, v0; -- 0ms;
SELECT DISTINCT ((v0.c1)==(vt1.c1)) COLLATE RTRIM FROM vt1, v0; -- 1ms;
SELECT DISTINCT v0.c2 FROM v0, vt1; -- 3ms;
SELECT DISTINCT v0.c0 FROM vt1, v0 WHERE (((((NULL) NOTNULL))|(-2117037023))) GROUP BY ((CAST(v0.c0 AS TEXT)) BETWEEN ((((v0.c2, vt1.c0, v0.c0, v0.c2, vt1.c0))==((v0.c2, v0.c1, v0.c0, 'Az6*<~.ഹ', v0.c2)))) AND (((v0.c1) IS TRUE))) HAVING ((CASE vt1.c1  WHEN vt1.c0 THEN vt1.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END)<>(COUNT(*))); -- 1ms;
SELECT DISTINCT (((((v0.c0))<((v0.c0))))IS NOT(((v0.c2) IS TRUE))) FROM vt1, v0 LIMIT -487582519 OFFSET 711635976; -- 0ms;
SELECT DISTINCT (((CASE WHEN vt1.c1 THEN v0.c0 WHEN vt1.c1 THEN vt1.c1 WHEN v0.c1 THEN vt1.c1 END))<>((CAST(v0.c2 AS NUMERIC)))) FROM v0 WHERE (((NULL) NOT NULL) COLLATE RTRIM);SELECT DISTINCT CAST(vt1.c1 COLLATE BINARY AS INTEGER) FROM v0, vt1; -- 0ms;
SELECT ((LIKELIHOOD(vt1.c0, 0.6147158332577257)) BETWEEN (GROUP_CONCAT('')) AND (((v0.c2) NOT NULL))) FROM vt1 WHERE ((((NOT ('2051340651'))) BETWEEN (((NULL)==(NULL))) AND ((+ (0.8626343461828205)))));SELECT DISTINCT ((LTRIM(v0.c2)) NOT BETWEEN (LOWER(DISTINCT vt1.c0)) AND (((vt1.c1) BETWEEN (vt1.c0) AND (v0.c2)))) FROM v0, vt1 LIMIT -1295280969 OFFSET -273186264; -- 1ms;
SELECT DISTINCT (v0.c0 IN ()) FROM v0, vt1 ORDER BY ((vt1.c1) BETWEEN (v0.c2) AND (vt1.c1)) COLLATE BINARY, (- (CAST(v0.c0 AS BLOB))), IFNULL(CASE vt1.c0  WHEN vt1.c1 THEN v0.c0 END, ((((((((0.9181357995217306)OR(v0.c0)))AND(v0.c0)))AND(vt1.c0)))OR(vt1.c1)))  NULLS FIRST, vt1.c1; -- 0ms;
SELECT ALL COUNT((NOT (v0.c1))), v0.c2, CASE vt1.c1  WHEN ((v0.c0) NOT NULL) THEN CASE WHEN vt1.c1 THEN vt1.c1 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN vt1.c0 ELSE vt1.c1 END WHEN (((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c0))) THEN ((v0.c2) ISNULL) WHEN ((v0.c2) IS TRUE) THEN HEX(v0.c0) WHEN ((v0.c1) NOTNULL) THEN COUNT(*) WHEN ((((((((v0.c2)OR(v0.c0)))OR(vt1.c1)))OR(v0.c2)))OR(0.3496431474085645)) THEN ((v0.c1) ISNULL) ELSE SUM(v0.c2) END FROM vt1, v0 WHERE (((x'df39')<<(TRIM(x'')))); -- 0ms;
SELECT DISTINCT 0.23014013359839547 FROM v0 WHERE (CAST(NULLIF(0.22130415435647421, 0.41126887878056084) AS NUMERIC)); -- 0ms;
SELECT DISTINCT (v0.c1 COLLATE BINARY IN (CASE 0.9215728634507488  WHEN v0.c0 THEN v0.c1 ELSE v0.c1 END)) FROM v0 WHERE ((((NOT ('1532225094'))) BETWEEN ((('') NOT BETWEEN (0.3556086196885492) AND (NULL))) AND ((~ (0.662824950034262))))); -- 1ms;
SELECT ((((vt1.c1 COLLATE RTRIM)OR(json_type(vt1.c1))))AND((((v0.c1, v0.c0, v0.c0))<=((v0.c1, v0.c1, v0.c1))))), ((vt1.c1 COLLATE BINARY) IS FALSE), AVG((~ (vt1.c1))) FROM v0, vt1 WHERE (CAST(HEX(0.9503832121196852) AS INTEGER)); -- 0ms;
SELECT ALL ((((vt1.c1)IS(v0.c1))) NOT BETWEEN (MAX(vt1.c1)) AND (((v0.c2) NOT BETWEEN (vt1.c0) AND (v0.c2)))) FROM v0, vt1; -- 3ms;
SELECT DISTINCT CASE WHEN (((v0.c2)) NOT BETWEEN ((v0.c0)) AND ((v0.c1))) THEN 'NYyears/' WHEN ((2.129276484E9)<>(v0.c2)) THEN (((v0.c1, v0.c0, v0.c0))>=((vt1.c1, v0.c1, v0.c2))) WHEN (+ ('')) THEN ((NULL) BETWEEN (v0.c1) AND (v0.c2)) ELSE ((v0.c0)OR(v0.c2)) END, (NOT (v0.c1)), v0.c0 FROM v0 WHERE (((('-77644383' IN ()))=('' COLLATE RTRIM))) LIMIT 1716475202 OFFSET 822309976;SELECT DISTINCT MAX(CAST(vt1.c0 AS REAL)) FROM v0, vt1; -- 0ms;
SELECT CAST((('\U')<<(v0.c0)) AS REAL), ((vt1.c1) NOT BETWEEN (v0.c2) AND (v0.c1)) COLLATE NOCASE COLLATE BINARY, ((((SUM(vt1.c1))OR('')))OR(((vt1.c0)*(vt1.c0)))) FROM v0, vt1; -- 0ms;
SELECT DISTINCT v0.c0 FROM v0, vt1 WHERE ((((('0.4086685951671595')IS(x'')))/((('')IS NOT('1363425523'))))); -- 0ms;
SELECT DISTINCT (+ (((vt1.c0)IS NOT(NULL)))) FROM vt1, v0 WHERE (LIKELIHOOD(((0.5863107118574221)&(NULL)), 0.8150510081742168)) GROUP BY ((v0.c1 IN ()) IN ()) ORDER BY ((((((((((NULL) NOT BETWEEN (v0.c2) AND (v0.c2)))AND(((vt1.c1)<(v0.c0)))))OR(IFNULL(DISTINCT vt1.c0, v0.c0))))AND(NULLIF(vt1.c0, v0.c2))))OR(json_object(v0.c1, vt1.c1))) DESC  NULLS FIRST LIMIT 990848671; -- 1ms;
SELECT ((SUM(vt1.c0)) BETWEEN (NULL) AND ((((((((('\{')OR(vt1.c1)))OR(vt1.c0)))AND(vt1.c0)))OR(921667562)))) FROM v0, vt1; -- 0ms;
SELECT DISTINCT v0.c1 FROM v0 NOT INDEXED WHERE ((~ (TRIM(DISTINCT '1032256755', NULL)))); -- 0ms;
SELECT (((vt1.c0)) BETWEEN (((((v0.c1)) BETWEEN ((v0.c0)) AND ((v0.c0))))) AND ((((((v0.c2)AND(vt1.c1)))OR(v0.c2))))) FROM vt1;SELECT DISTINCT ((((((v0.c2)AND(v0.c2)))AND(v0.c1)))>>(((v0.c1) NOT BETWEEN (vt1.c0) AND (v0.c2)))), ((((((((((((vt1.c1)AND(v0.c0)))OR(v0.c2)))AND('-502218188')))OR(v0.c2)))OR(v0.c2)))AND(v0.c2)) COLLATE RTRIM COLLATE NOCASE, TOTAL(((v0.c2)|(v0.c1))) OVER () FROM v0;SELECT DISTINCT ((((v0.c0)||(vt1.c0))) BETWEEN (CASE vt1.c1  WHEN x'' THEN vt1.c0 ELSE v0.c0 END) AND ((vt1.c0 IN (vt1.c1)))), ((((NOT (v0.c1))))<>((((vt1.c1)LIKE(v0.c2))))), (((((0.43257688967427277)LIKE(vt1.c1))))!=(((NOT (vt1.c0))))) FROM v0, vt1 WHERE (((((LOWER(x''))AND(GLOB(x'4d83', '448072188'))))AND(CAST('-273186264' AS TEXT)))); -- 0ms;
SELECT ALL v0.c1 FROM v0, vt1 WHERE ('0.9501087882105917'); -- 1ms;
SELECT CUME_DIST() OVER () FROM vt1; -- 0ms;
SELECT DISTINCT ((x'') NOTNULL), MAX(((vt1.c0)&(v0.c2))), ((((((((((vt1.c0)AND(vt1.c0)))OR(v0.c0)))OR(vt1.c1)))AND(vt1.c1)))<=(((v0.c0)<=(v0.c0)))) FROM vt1 ORDER BY -303994575 DESC  NULLS FIRST;SELECT ALL (((vt1.c0 IN ()))>>(CAST(v0.c1 AS REAL))) FROM v0, vt1 GROUP BY (CASE v0.c2  WHEN v0.c1 THEN v0.c2 WHEN v0.c0 THEN v0.c0 WHEN vt1.c1 THEN vt1.c1 ELSE v0.c2 END IN ()); -- 0ms;
SELECT DISTINCT (((v0.c1)|(v0.c1)) IN ()), CASE WHEN TYPEOF(DISTINCT v0.c0) THEN ((vt1.c0)+(vt1.c0)) END, (((((v0.c1)AND(v0.c2)))AND('540390627')) IN ((- (v0.c1)))), json_type(v0.c2), IFNULL(((vt1.c1) NOT BETWEEN (v0.c2) AND (v0.c0)), CAST(vt1.c0 AS INTEGER)) FROM vt1 WHERE (load_extension((((x''))!=((0.564021977213809))))) LIMIT -231712136 OFFSET -442248365;SELECT -1101817298 FROM v0, vt1; -- 0ms;
SELECT ALL ((COUNT(*))>=('8\p\')), CASE v0.c1 COLLATE NOCASE  WHEN ((v0.c0)-(v0.c2)) THEN ((v0.c0)<(vt1.c0)) ELSE CAST(vt1.c0 AS NUMERIC) END, ((((v0.c2) IS FALSE))AND(((((v0.c1)OR(v0.c2)))AND(vt1.c0)))) FROM vt1 WHERE ((x'' COLLATE BINARY IN ()));SELECT ALL ((CASE WHEN v0.c1 THEN vt1.c1 END)AND((vt1.c1 IN ()))) FROM vt1, v0 NOT INDEXED; -- 0ms;
SELECT DISTINCT ((((- (vt1.c0)), (('/D') NOTNULL), 0.9711886233233764))<>((((v0.c1)/(vt1.c1)), -2069342395, CAST(v0.c0 AS REAL)))) FROM vt1 WHERE (((((((((x'bc4e')OR(0.39985543772092846)))OR(NULL)))AND(CASE NULL  WHEN NULL THEN 0.548325408102662 END)))OR(((NULL)IS(1119367343))))) ORDER BY ((((vt1.c1)GLOB(v0.c2))) NOT BETWEEN (x'') AND (vt1.c1))  NULLS LAST, (((v0.c1, vt1.c0, v0.c2)) BETWEEN ((CAST(v0.c2 AS REAL), ((NULL)!=(0.5616441696437676)), v0.c2)) AND ((vt1.c1, vt1.c0, ((vt1.c1) NOT BETWEEN (v0.c2) AND (v0.c0)))))  NULLS FIRST, ((((((v0.c1)>(vt1.c0)))AND((vt1.c1 IN ()))))OR(((v0.c2) NOTNULL)));SELECT DISTINCT v0.c1 FROM vt1 WHERE (((((((((((NULL) BETWEEN (0.5816876492885311) AND ('')))OR(0.7295246767428469)))OR((((0.24969526357336558, '1e500', 0.3869308737117555)) NOT BETWEEN ((x'', NULL, x'')) AND ((227784447, -2.069342395E9, '-972509751'))))))AND(((((x'73ed')OR('-1984172910')))AND(NULL)))))OR('675992795')));SELECT DISTINCT v0.c1 FROM vt1;SELECT DISTINCT CASE WHEN (v0.c0 IN (v0.c1)) THEN ((v0.c0)|(v0.c2)) END, (((((vt1.c1)-(v0.c1))))!=((CAST(v0.c1 AS INTEGER)))), GROUP_CONCAT(((v0.c0) IS TRUE) COLLATE RTRIM) OVER () FROM v0, vt1 WHERE ((((('T8#ecI') IS TRUE))&((((((((('')AND('-1394076471')))AND(NULL)))AND(0.16836194796734516)))AND(x'774db539'))))); -- 1ms;
SELECT ALL CAST(v0.c0 AS TEXT), ((CAST(vt1.c1 AS INTEGER))/(((((vt1.c1)AND(v0.c2)))AND(vt1.c1)))), ((NOT (vt1.c0)) IN ()) FROM vt1, v0; -- 0ms;
SELECT DISTINCT AVG((vt1.c0 IN (v0.c2))) FROM vt1;SELECT DISTINCT (((((921667562)GLOB(v0.c1)), v0.c2, v0.c2))==(((- (v0.c0)), (vt1.c1 IN ()), ((v0.c2)%(v0.c0))))), (((vt1.c0, ((vt1.c0) BETWEEN (v0.c0) AND (v0.c2)), ((v0.c1)>>(v0.c2))))<=((MAX(v0.c1), (((v0.c0, v0.c2, v0.c2))>=((v0.c1, v0.c0, v0.c0))), v0.c0))), ((x'') BETWEEN ((~ (vt1.c0))) AND ((- (v0.c2)))) FROM vt1 WHERE ((((((((((((('/')AND('')))AND('i-')))AND((((((((((((('3WP퐘*Q4--')AND(NULL)))OR(x'')))AND(0.1540737738476815)))AND('0.3869308737117555')))OR(0.7056183635562213)))AND('338667316')))))AND((~ (0.8733482850683401)))))OR('628836995')))AND(('m	' IN ()))));SELECT ALL ((CASE WHEN v0.c1 THEN vt1.c1 WHEN v0.c0 THEN v0.c1 WHEN v0.c2 THEN v0.c1 END)<=(v0.c2)) FROM vt1 WHERE ((((json_patch(NULL, x'975a6936')))>=((NULL COLLATE RTRIM))));SELECT DISTINCT CAST(CASE WHEN v0.c2 THEN vt1.c1 WHEN v0.c2 THEN vt1.c0 WHEN vt1.c0 THEN v0.c1 ELSE vt1.c1 END AS NUMERIC) FROM v0 WHERE ((((((0.39606044592747636)) NOT BETWEEN (('')) AND ((0.25760953954229715))))/(((NULL) BETWEEN ('-1793520034') AND (0.4800487179865577))))) LIMIT -1605055720 OFFSET 2051340651;SELECT ((((vt1.c1)||(vt1.c0))) IS TRUE) FROM vt1 WHERE ((((CAST(x'' AS REAL)))>=((((NULL) IS FALSE))))); -- 0ms;
SELECT DISTINCT SUM((- (NULL))) FROM vt1 WHERE ((((x'') NOTNULL) IN ())); -- 1ms;
SELECT ((v0.c0 COLLATE BINARY) ISNULL) FROM v0, vt1; -- 0ms;
SELECT CASE v0.c1  WHEN v0.c1 THEN 0.23014013359839547 ELSE vt1.c1 END COLLATE NOCASE FROM v0 FULL OUTER JOIN vt1 ON ((CAST(v0.c1 AS NUMERIC)) IS FALSE) WHERE ((((('0.7172556895523449') IS TRUE)) BETWEEN (COALESCE(DISTINCT 'Pr{D', 0.17971128196286035)) AND (CASE 0.8091748559072944  WHEN 0.3558497614130577 THEN x'' END))); -- 0ms;
SELECT DISTINCT ((((v0.c0)<<(v0.c1)))IS NOT(((v0.c1) BETWEEN (vt1.c1) AND (0.41384001595436115)))) FROM vt1;SELECT CAST(((vt1.c0)OR(v0.c0)) AS NUMERIC) FROM vt1 WHERE (CASE UPPER(DISTINCT '2051340651')  WHEN ('680045361' IN ()) THEN x'2c8e' WHEN NULL COLLATE RTRIM THEN ((NULL) NOT BETWEEN ('-2035360272') AND (NULL)) WHEN ((((NULL)AND(x'60f1')))AND(x'')) THEN -2.000147385E9 COLLATE RTRIM ELSE (('') IS TRUE) END) LIMIT -2042360452;SELECT DISTINCT (~ (COUNT(v0.c1))) FROM v0 WHERE (CAST((('-972509751') BETWEEN ('-1793520034') AND (-2042360452)) AS BLOB)); -- 0ms;
SELECT ((~ (vt1.c0)) IN ()) FROM v0 WHERE (((((x'bbacad99')<<(856310124)))%('-1644004606'))); -- 0ms;
SELECT ALL ((CAST(NULL AS NUMERIC))&(COUNT(*))) FROM v0 ORDER BY ((((v0.c1) BETWEEN (v0.c0) AND (v0.c0)))!=(((((v0.c2)AND(v0.c1)))AND(vt1.c0)))) ASC  NULLS LAST, ((CAST(v0.c1 AS BLOB)) ISNULL) DESC;SELECT DISTINCT UNLIKELY(DISTINCT (((v0.c0, vt1.c1, v0.c2)) BETWEEN ((vt1.c0, v0.c0, vt1.c1)) AND ((vt1.c0, v0.c2, vt1.c0)))) FROM vt1, v0 WHERE ('633139640'); -- 0ms;
SELECT ALL CUME_DIST() OVER (), ((TOTAL(vt1.c1)) BETWEEN (((vt1.c0)AND(v0.c1))) AND (((vt1.c1)%(vt1.c1)))), (- (((((vt1.c0)AND(v0.c2)))OR(vt1.c0)))) FROM v0, vt1 WHERE (CASE WHEN '0.17971128196286035' COLLATE BINARY THEN (-1394076471 IN ()) WHEN ((((((((x'8ce8')AND('-2013218976')))AND(NULL)))AND('Y汴u6m9%')))AND('')) THEN x'' COLLATE NOCASE WHEN highlight(669958482, x'6b2a', 0.8811463972604572, NULL) THEN (('BU')>=('0Dd重n7p')) END) GROUP BY v0.c1; -- 0ms;
SELECT ALL ((AVG(x''))>(CASE v0.c1  WHEN vt1.c1 THEN v0.c1 WHEN v0.c2 THEN vt1.c1 WHEN v0.c1 THEN 'y3' ELSE vt1.c1 END)), CUME_DIST() OVER (), CAST(((v0.c2) BETWEEN (v0.c2) AND (v0.c2)) AS BLOB), CASE CAST(v0.c0 AS INTEGER)  WHEN ((((vt1.c1)AND(vt1.c0)))OR(v0.c0)) THEN (((v0.c1, vt1.c1, v0.c2)) NOT BETWEEN ((vt1.c1, vt1.c1, 0.8827592438338501)) AND ((vt1.c1, v0.c2, vt1.c0))) WHEN v0.c2 COLLATE RTRIM THEN (((v0.c0, v0.c0, NULL)) BETWEEN ((vt1.c1, v0.c0, v0.c0)) AND ((vt1.c1, vt1.c0, v0.c1))) WHEN ((((vt1.c0)OR(vt1.c0)))OR(vt1.c0)) THEN ((((((((vt1.c1)OR(v0.c2)))OR(v0.c1)))OR(vt1.c1)))AND(v0.c1)) WHEN ((vt1.c1)>>(vt1.c1)) THEN (((v0.c2)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1))) WHEN ((v0.c1) ISNULL) THEN ((v0.c0)>=(v0.c0)) END, v0.c2 FROM v0, vt1; -- 1ms;
SELECT ALL x'' FROM vt1 WHERE (((CASE WHEN '' THEN '-2060498629' WHEN '755101974' THEN '-1280833896' WHEN 0.5307438434347945 THEN NULL END) IS TRUE)); -- 0ms;
SELECT v0.c0 FROM v0 GROUP BY -608621210;SELECT DISTINCT GROUP_CONCAT(QUOTE(vt1.c1)) FROM vt1; -- 0ms;
SELECT DISTINCT (+ (INSTR(vt1.c0, v0.c2))) FROM vt1 LIMIT 990848671;SELECT ALL CASE CASE vt1.c1  WHEN v0.c0 THEN vt1.c1 END  WHEN MIN(x'') THEN MIN(v0.c2) ELSE TOTAL(v0.c1) END FROM vt1, v0 WHERE (x''); -- 0ms;
SELECT DISTINCT (((v0.c1)) NOT BETWEEN ((CAST(v0.c1 AS BLOB))) AND ((x''))) FROM v0, vt1 GROUP BY ((vt1.c0) NOT BETWEEN (CAST(v0.c1 AS INTEGER)) AND (CASE WHEN vt1.c1 THEN v0.c2 END)); -- 1ms;
SELECT DISTINCT ((v0.c1 COLLATE BINARY)-(0.9760916600674716)) FROM vt1 WHERE (NULL) GROUP BY ((v0.c0 COLLATE NOCASE) NOT NULL) HAVING ((((((((((vt1.c0)|(vt1.c1)))AND(vt1.c1 COLLATE BINARY)))AND(((((v0.c1)AND(v0.c0)))OR(v0.c2)))))OR(CASE WHEN v0.c1 THEN vt1.c1 END)))AND(LIKELY(DISTINCT vt1.c0))) LIMIT 1126622381;SELECT DISTINCT CASE WHEN ((v0.c0) NOTNULL) THEN vt1.c0 ELSE ((v0.c0)GLOB(v0.c1)) END FROM vt1 WHERE ((((((0.013557565405401761))>=((0X1d04c174))))>=(NULL)));SELECT DISTINCT ((((vt1.c1) BETWEEN (vt1.c1) AND (v0.c2))) NOTNULL), (((((((((((v0.c2)AND(v0.c1)))OR(v0.c0)))AND(vt1.c1)))AND(v0.c0))))>(((v0.c2 IN ())))), RANK() OVER () FROM v0 GROUP BY TYPEOF(((((vt1.c1)AND(vt1.c0)))OR(v0.c0))) HAVING ((((v0.c0)-(v0.c0))) IS TRUE);SELECT ALL ((((((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)))OR(x'')))AND(CASE WHEN v0.c0 THEN '-2013218976' ELSE vt1.c0 END)))OR((((vt1.c1, v0.c0, v0.c2)) BETWEEN ((vt1.c0, vt1.c0, v0.c2)) AND ((v0.c0, v0.c0, vt1.c1))))))OR(LIKELIHOOD(vt1.c0, 0.26488527108312565))) FROM vt1 WHERE (((CASE '633139640'  WHEN -2013749696 THEN '' END) NOT NULL));SELECT DISTINCT ((((((((v0.c1)OR(v0.c1)))AND(vt1.c1)))AND(((vt1.c0) NOTNULL))))OR((v0.c2 IN ()))), SUM(CASE v0.c1  WHEN v0.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c0 WHEN v0.c1 THEN v0.c2 END COLLATE BINARY) OVER (), LEAD(vt1.c1, ABS(TIME('564036066', 0.7455059237237737, vt1.c0)), ((((vt1.c1)<<(vt1.c1))) BETWEEN ((('') IS FALSE)) AND ((- (1783862539))))) OVER () FROM vt1 WHERE (((((CASE NULL  WHEN x'' THEN x'fd0a' ELSE '~	' END)OR((NULL IN ()))))AND(((0.9882277965153226) BETWEEN (x'') AND ('-1295280969'))))) LIMIT -1589616332;SELECT ALL SUM(LIKELY(DISTINCT vt1.c0)) FILTER(WHERE (((v0.c2) BETWEEN (v0.c2) AND (NULL)) IN (json_valid(vt1.c0)))) OVER (), x'', (((v0.c1) NOT NULL) IN ()) FROM v0, vt1 WHERE ((- ('-730447715'))); -- 1ms;
SELECT ALL (((((v0.c0 IN ()))OR(CAST(v0.c2 AS TEXT))))AND(CASE WHEN vt1.c0 THEN v0.c2 END)), COUNT(TRIM(DISTINCT NULL)), MAX((NOT (vt1.c0))) FROM vt1 WHERE (CAST((((x'')) NOT BETWEEN ((NULL)) AND ((-1569906394))) AS BLOB));SELECT ALL COUNT(PRINTF(v0.c1)) OVER () FROM vt1, v0; -- 0ms;
SELECT DISTINCT 6.3313964E8 FROM v0, vt1 ORDER BY CAST((~ (v0.c2)) AS NUMERIC) ASC; -- 0ms;
SELECT DISTINCT COUNT(*) OVER () FROM vt1, v0 LIMIT 997012027; -- 1ms;
SELECT ALL ((CAST(v0.c0 AS TEXT)) IS TRUE) FROM vt1 WHERE ((((('-218665512') NOT BETWEEN (0.1540737738476815) AND (x''))) NOTNULL)) LIMIT 993864382 OFFSET -846143658;SELECT ALL CAST(CASE WHEN vt1.c1 THEN NULL WHEN vt1.c1 THEN v0.c1 WHEN v0.c1 THEN vt1.c0 ELSE vt1.c1 END AS NUMERIC) FROM v0;SELECT DISTINCT DATETIME(v0.c0 COLLATE RTRIM, CASE v0.c2  WHEN vt1.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c0 WHEN 0.9495319786258264 THEN vt1.c0 WHEN '-868293064' THEN vt1.c0 WHEN v0.c1 THEN v0.c0 END, v0.c1 COLLATE BINARY) FROM v0 WHERE (((((x'')>(NULL))) NOT BETWEEN (((('-730447715', '}IBo', 0.41126887878056084))<((0.9692707912268617, x'', 0.06789994030155222)))) AND (((('', x'', 0.9328708959093209)) BETWEEN ((x'', -8.7608428E8, 0xfffffffff9f32388)) AND ((NULL, '1126622381', '⚟n('))))));SELECT DISTINCT ((TOTAL_CHANGES())>>(((vt1.c1) BETWEEN (2018538303) AND (v0.c0)))) FROM v0 WHERE (((((NULL) IS TRUE))IS NOT((NOT (NULL))))) LIMIT 331932945 OFFSET 338667316;SELECT ALL (((vt1.c0 COLLATE BINARY))<>((TYPEOF(v0.c2)))), vt1.c0, json_patch((+ (NULL)), CASE WHEN v0.c0 THEN vt1.c0 END) FROM vt1, v0 WHERE (SQLITE_SOURCE_ID()) LIMIT 1505278341 OFFSET 1859733824; -- 0ms;
SELECT DISTINCT (((+ (vt1.c0))) NOT NULL), ((vt1.c1 COLLATE RTRIM) NOTNULL), ((v0.c1 COLLATE RTRIM) NOT NULL) FROM v0, vt1 WHERE (CAST('9{ৼfi+*' AS TEXT) COLLATE RTRIM) GROUP BY (((((vt1.c1)) BETWEEN (('sE\rOzJ_')) AND ((vt1.c1))))||(((x'') NOT BETWEEN (v0.c1) AND (x'')))); -- 1ms;
SELECT ALL CAST((v0.c1 IN ()) AS BLOB) FROM vt1 WHERE (CASE WHEN ((x'5280')OR(NULL)) THEN CAST(0.13450326647205624 AS REAL) WHEN GLOB(x'750f', '448072188') THEN (((x'1acd'))!=(('\rP'))) WHEN CAST('1381268578' AS REAL) THEN 'EyxXz)d%锋' END); -- 0ms;
SELECT ALL ((((NULL)LIKE(NULL)))-((v0.c0 IN ()))), ((((v0.c0)AND(COUNT(*))))AND(((vt1.c0)GLOB(v0.c0)))), ((((vt1.c1)>(v0.c1))) IS FALSE) FROM vt1 WHERE (((0.5380897513752523 COLLATE BINARY)!=(('绿)' IN ()))));SELECT DISTINCT CASE WHEN CASE v0.c0  WHEN '' THEN vt1.c0 END THEN (((vt1.c0, v0.c0, v0.c2))=((v0.c0, vt1.c1, v0.c1))) END FROM v0, vt1 WHERE ((((x'')) NOT BETWEEN ((NULL COLLATE RTRIM)) AND (((0x1e4b8e00 IN ()))))); -- 0ms;
SELECT ALL ((('1383273841', CAST(v0.c1 AS TEXT), NULL))>((((((((((v0.c1)AND(vt1.c0)))AND(vt1.c0)))OR(v0.c1)))OR(v0.c2)), vt1.c1 COLLATE RTRIM, (NOT (vt1.c1))))) FROM vt1 LEFT OUTER JOIN v0 ON x'' WHERE ((((- (9.90848671E8))) IS TRUE)); -- 0ms;
SELECT ALL CAST((vt1.c0 IN ()) AS NUMERIC), (+ (LIKELIHOOD(v0.c2, 0.29511282574911035))), v0.c0 FROM v0, vt1; -- 0ms;
SELECT DISTINCT vt1.c1 FROM v0, vt1; -- 0ms;
SELECT ALL (((v0.c0) NOT BETWEEN (v0.c0) AND (vt1.c1)) IN ()), (((- (v0.c1)))GLOB(((((v0.c0)OR(v0.c0)))AND(vt1.c0)))), (((vt1.c1) IS FALSE) IN ()) FROM vt1 WHERE (CAST(NULL AS TEXT));SELECT DISTINCT json_array((vt1.c1 IN (vt1.c1)), (- (v0.c0))) FROM vt1 WHERE (CAST('0.6097520644666293' AS BLOB) COLLATE RTRIM) GROUP BY (NOT (COALESCE(DISTINCT 625846015, v0.c2)));SELECT DISTINCT ((v0.c2 COLLATE BINARY) NOTNULL) FROM vt1, v0 WHERE (CASE WHEN NULL THEN -450978833 COLLATE NOCASE END); -- 0ms;
SELECT ALL ((CASE WHEN v0.c1 THEN v0.c2 ELSE vt1.c0 END) NOT NULL) FROM vt1, v0 LIMIT 227784447 OFFSET -2096498864; -- 0ms;
SELECT LIKE((((v0.c1))<=((v0.c0))), ((((vt1.c0)AND(v0.c0)))OR(v0.c0))) FROM vt1 WHERE (((0.7614177619033224 COLLATE NOCASE) NOT BETWEEN ((- ('993864382'))) AND ((0X1ee35570 IN ()))));SELECT DISTINCT COUNT(*) OVER () FROM vt1 GROUP BY ((v0.c0 IN ()) IN ()), x'f7df', CAST(CAST(vt1.c0 AS INTEGER) AS TEXT); -- 0ms;
SELECT '0.1540737738476815' FROM vt1, v0 WHERE (CAST(((NULL)||('Fq')) AS INTEGER)); -- 0ms;
SELECT DISTINCT CAST(CAST(vt1.c1 AS BLOB) AS INTEGER) FROM vt1 LEFT OUTER JOIN v0 ON load_extension(((v0.c1)/(vt1.c1)), (((v0.c1, v0.c0, v0.c2, v0.c2, v0.c1))>((v0.c0, vt1.c1, v0.c1, v0.c0, vt1.c0)))) WHERE (TRIM(TYPEOF(DISTINCT x''), SQLITE_COMPILEOPTION_USED('Pr{D'))); -- 0ms;
SELECT DISTINCT ((vt1.c1) NOT NULL) COLLATE BINARY, FIRST_VALUE(((CASE v0.c1  WHEN vt1.c1 THEN v0.c0 WHEN NULL THEN vt1.c1 WHEN v0.c2 THEN v0.c0 ELSE v0.c2 END)IS NOT(((v0.c0) IS TRUE)))) OVER ( GROUPS BETWEEN  CURRENT ROW AND  UNBOUNDED FOLLOWING), LAST_INSERT_ROWID(), (((v0.c2)) NOT BETWEEN ((0.8750248227412768 COLLATE RTRIM)) AND ((((v0.c0)AND(v0.c1))))), (~ (((vt1.c1)IS NOT(x'fabf')))) FROM v0, vt1; -- 0ms;
SELECT DISTINCT AVG(((v0.c2)/(v0.c1))) FROM vt1;SELECT ALL CASE v0.c2 COLLATE RTRIM  WHEN ((v0.c1) NOT BETWEEN (vt1.c0) AND (v0.c2)) THEN ((vt1.c1) BETWEEN (vt1.c0) AND (v0.c0)) ELSE ((v0.c2)==('186118930')) END FROM v0;SELECT DISTINCT COUNT(*) OVER () FROM v0; -- 0ms;
SELECT DISTINCT TOTAL(COUNT(*)), ((CASE WHEN v0.c0 THEN vt1.c1 ELSE vt1.c1 END)>(NULLIF(DISTINCT vt1.c0, vt1.c1))), (NOT (((((((((vt1.c0)AND(v0.c0)))AND(v0.c1)))OR(v0.c2)))OR(v0.c2)))), CASE vt1.c1 COLLATE BINARY  WHEN (((v0.c2))>=((vt1.c1))) THEN vt1.c0 COLLATE BINARY WHEN ((0.39139678104659825) NOT BETWEEN (v0.c1) AND (v0.c0)) THEN ((v0.c1) IS FALSE) WHEN vt1.c0 THEN AVG(vt1.c0) ELSE COUNT(vt1.c0) END, (NOT (0.2625454569815572)) FROM vt1, v0;SELECT DISTINCT CASE ((v0.c1)OR(vt1.c0))  WHEN '-868592692' THEN MIN(v0.c2) ELSE vt1.c1 END FROM vt1 WHERE ((NOT ((NULL IN ()))));SELECT ((((((((CAST(vt1.c0 AS TEXT))AND(((((((((vt1.c0)OR(v0.c1)))OR(vt1.c0)))OR(v0.c1)))AND(v0.c0)))))OR(SUM(v0.c1))))AND(HEX(v0.c2))))OR(((vt1.c1)>>(NULL)))), ((v0.c0) NOT BETWEEN (v0.c0) AND (vt1.c0)) COLLATE BINARY, NTILE(x'') OVER ( PARTITION BY ((((((v0.c2)OR(v0.c0)))AND(NULL)))+(((v0.c1)!=(v0.c1)))), -1634180768) FROM vt1, v0 GROUP BY CASE vt1.c1  WHEN UNLIKELY(DISTINCT v0.c1) THEN ((v0.c2)/(vt1.c0)) END, ((((((NULL) ISNULL))OR(vt1.c1 COLLATE NOCASE)))AND(((vt1.c1) BETWEEN (vt1.c0) AND (v0.c2)))), (((v0.c0)) BETWEEN ((((((v0.c2)OR(v0.c0)))AND(v0.c0)))) AND ((NULL))) ORDER BY ((x'') IS FALSE) ASC, ((CASE 838937694  WHEN v0.c1 THEN v0.c0 ELSE v0.c2 END)||(((v0.c2) BETWEEN (v0.c0) AND ('0.41384001595436115'))));SELECT DISTINCT x'5afe3b06' FROM vt1 WHERE (((((NULL) ISNULL)) ISNULL)); -- 0ms;
SELECT ((vt1.c0)||(CAST(v0.c1 AS REAL))), (((((v0.c2)||(v0.c2)), '1452929656', ((v0.c2)AND(v0.c2))))==((vt1.c0 COLLATE NOCASE, ((((((((v0.c2)AND('')))AND(x'')))AND(v0.c0)))AND(vt1.c1)), ((v0.c1) BETWEEN (vt1.c1) AND (vt1.c0))))), IFNULL(CAST(v0.c0 AS INTEGER), ((('-0.0', v0.c2, vt1.c0)) BETWEEN (('\g', v0.c1, v0.c0)) AND ((vt1.c1, vt1.c0, v0.c0)))) FROM vt1, v0 ORDER BY vt1.c0 ASC  NULLS FIRST; -- 0ms;
SELECT ALL CAST(x'' AS NUMERIC) FROM vt1 FULL OUTER JOIN v0 ON (((CAST(0.867498553326062 AS REAL)))<((vt1.c0))) WHERE (('-273186264' IN (NULL COLLATE NOCASE))) GROUP BY v0.c2; -- 0ms;
SELECT DISTINCT ((((v0.c2) BETWEEN (v0.c0) AND (v0.c1))) NOTNULL) FROM vt1 ORDER BY CAST(CASE WHEN vt1.c1 THEN vt1.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN vt1.c1 ELSE vt1.c1 END AS NUMERIC) ASC  NULLS LAST;SELECT ALL (LIKELIHOOD(vt1.c1, 0.46189201574924676) IN ()), COUNT(*) OVER (), (- (CASE vt1.c1  WHEN v0.c1 THEN vt1.c0 ELSE 0Xffffffff9b25c43c END)) FROM vt1, v0 WHERE ((((('\rp')) NOT BETWEEN ((0.08767751460219797)) AND (('1309860169'))) IN ())); -- 0ms;
SELECT CAST(((((NULL)AND(v0.c2)))AND(vt1.c1)) AS BLOB) FROM v0 WHERE (((((((((CAST(x'201e' AS INTEGER))OR('YA' COLLATE BINARY)))AND(CASE '0.19624402594762347'  WHEN x'' THEN x'' ELSE 0Xffffffff84a85745 END)))AND(NULL COLLATE NOCASE)))OR(((2.81864091E8)IS(NULL)))));SELECT ALL NULL FROM v0 WHERE (CASE TIME(0.46652252511385994, NULL, 0.5620696311206779)  WHEN (((NULL, 0.6097520644666293, NULL)) BETWEEN ((NULL, 0.3726841015649133, '-1295280969')) AND ((NULL, '0.7056183635562213', NULL))) THEN CAST(x'' AS INTEGER) END) GROUP BY ((v0.c0 COLLATE RTRIM)IS NOT((('-1003294853')OR(v0.c1)))), ((((v0.c0)<<(v0.c0))) BETWEEN (CAST(vt1.c1 AS REAL)) AND (CASE WHEN v0.c0 THEN '!p\' ELSE v0.c2 END)), CASE WHEN STRFTIME(0.9946214409157769, v0.c1, vt1.c1) THEN ((((((((v0.c1)AND(vt1.c0)))AND(vt1.c1)))OR(x'')))OR(vt1.c0)) ELSE '' END;SELECT DISTINCT NTILE(CASE CAST(v0.c1 AS INTEGER)  WHEN (((0.25817921498312113)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))) THEN ((v0.c2)>(v0.c1)) END) OVER () FROM v0;SELECT DISTINCT (((x'', '-829804530', vt1.c0)) NOT BETWEEN ((CAST(vt1.c1 AS INTEGER), ((vt1.c0) NOT BETWEEN (v0.c0) AND (vt1.c0)), vt1.c1)) AND ((CAST(v0.c1 AS NUMERIC), vt1.c1 COLLATE BINARY, (vt1.c1 IN ())))), AVG(GROUP_CONCAT(((v0.c1)>(v0.c2)))), NULL, (((v0.c2 IN ())) IS TRUE), CAST(((vt1.c0)=(vt1.c1)) AS BLOB) FROM vt1, v0;SELECT DISTINCT v0.c1 FROM v0, vt1; -- 1ms;
SELECT DISTINCT (((v0.c0 IN (v0.c1, v0.c0))) NOT BETWEEN ((vt1.c1 IN ())) AND ('')), CASE WHEN CASE WHEN vt1.c1 THEN v0.c0 ELSE vt1.c0 END THEN vt1.c1 ELSE ((v0.c2)IS NOT(vt1.c0)) END, CAST(IFNULL(DISTINCT v0.c2, v0.c0) AS INTEGER) FROM vt1 WHERE ((- (((x'') IS FALSE))));SELECT DISTINCT (('vIOS8w<[')>=(((v0.c2)==(v0.c0)))), (((((((((((v0.c1))>=((v0.c2))))OR(((((NULL)AND(v0.c0)))OR(v0.c2)))))OR(((1478836619) NOTNULL))))OR(vt1.c1)))OR(((vt1.c0) NOT BETWEEN (v0.c2) AND (vt1.c1)))), (((NULL)) BETWEEN ((0.9031286662153142)) AND (((+ (vt1.c1))))) FROM vt1, v0 GROUP BY CASE CASE WHEN vt1.c0 THEN vt1.c1 END  WHEN (NULL IN (vt1.c1)) THEN ((((((((((((v0.c2)OR(vt1.c1)))AND(vt1.c1)))AND(v0.c0)))AND(vt1.c0)))OR(vt1.c1)))AND(v0.c0)) WHEN INSTR(vt1.c0, NULL) THEN ((((((((vt1.c0)AND(v0.c2)))AND(0.24026245522791834)))AND(v0.c0)))AND(v0.c1)) WHEN ((vt1.c1)AND(vt1.c0)) THEN (~ (v0.c1)) END; -- 0ms;
SELECT ALL COUNT(((v0.c0) BETWEEN (x'efd4') AND (v0.c0))) OVER () FROM v0, vt1 WHERE (CAST(((NULL)<(NULL)) AS BLOB)); -- 0ms;
SELECT DISTINCT SUM(((v0.c1)IS NOT(vt1.c0))) OVER ( ORDER BY TRIM(((vt1.c0) NOTNULL)) DESC  NULLS LAST, (((v0.c2) NOT BETWEEN (vt1.c0) AND (v0.c2)) IN ())), TOTAL(((v0.c0)!=(v0.c0))), ((v0.c0 COLLATE BINARY)<<((+ (vt1.c0)))) FROM vt1;SELECT LAST_VALUE(CASE WHEN CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 END THEN TRIM(DISTINCT vt1.c0) END) OVER () FROM vt1 WHERE ((NULL IN (((-1149615298) NOT BETWEEN (x'') AND ('-950005150'))))); -- 0ms;
SELECT ALL (((TYPEOF(v0.c0), (~ (v0.c0)), ((v0.c1)>(vt1.c0))))!=(((((vt1.c0))>=((vt1.c0))), (+ (vt1.c1)), x'96b1' COLLATE NOCASE))) FROM vt1, v0 WHERE (((((CASE WHEN x'9fd0' THEN x'0abad120' END)AND((0.5616441696437676 IN ()))))OR((+ ('509206222'))))) LIMIT -502218188 OFFSET 1857462447; -- 0ms;
SELECT DISTINCT ((v0.c2)LIKE(v0.c1)) COLLATE NOCASE FROM vt1 WHERE (((- ('J')) IN ())) ORDER BY ((((vt1.c0)>=(v0.c2)))GLOB(((((((((v0.c0)AND(v0.c1)))OR(0X7f0411fb)))AND(v0.c0)))AND(v0.c1)))) DESC LIMIT 1037870331;SELECT DISTINCT ((CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c2 END) NOT BETWEEN (((vt1.c1) BETWEEN (v0.c2) AND (v0.c1))) AND (((vt1.c1)<(v0.c1)))) FROM vt1 WHERE (((NULL) BETWEEN (0.2931060308796828) AND (0.37729997052799713)) COLLATE RTRIM);SELECT DISTINCT (- ((vt1.c1 IN ()))) FROM v0; -- 0ms;
SELECT DISTINCT ((((CASE ''  WHEN vt1.c0 THEN vt1.c0 END)OR(((((v0.c0)OR(v0.c2)))AND(vt1.c1)))))AND((((0.1857841227955247, v0.c0, v0.c0)) NOT BETWEEN ((vt1.c1, x'', v0.c0)) AND ((vt1.c1, vt1.c0, v0.c2))))), ((((((((((vt1.c1) ISNULL))AND(658327580)))OR(MIN('3'))))OR(((vt1.c0) NOT BETWEEN (v0.c0) AND (vt1.c0)))))OR(((x'')<<(vt1.c1)))), (((((vt1.c0, '(lHbi''9T', vt1.c0)) NOT BETWEEN ((v0.c0, v0.c0, vt1.c0)) AND ((v0.c0, v0.c2, v0.c1)))) NOTNULL) FROM v0, vt1 LIMIT 1 OFFSET 505308621; -- 1ms;
SELECT ALL NULL FROM v0; -- 0ms;
SELECT (((((vt1.c0, v0.c1, vt1.c1))!=((vt1.c1, NULL, v0.c0)))) IS TRUE), (json_object(v0.c0, vt1.c0) IN ()), ((((vt1.c0)>>(vt1.c1)))/((((v0.c2))>((vt1.c1))))) FROM vt1, v0; -- 0ms;
SELECT (- (((vt1.c1) NOTNULL))), ROW_NUMBER() OVER (), vt1.c1 FROM vt1, v0 WHERE (CASE WHEN (NULL IN (NULL)) THEN ((((x'd13e4fa6')AND(NULL)))OR(NULL)) ELSE (x'' IN ()) END); -- 0ms;
SELECT ALL GROUP_CONCAT(CASE WHEN v0.c2 THEN v0.c1 ELSE '-1605055720' END) OVER ( RANGE  UNBOUNDED PRECEDING EXCLUDE NO OTHERS), LAG(0.4179885172462853, (- (v0.c1 COLLATE NOCASE)), CASE WHEN (v0.c2 IN ()) THEN CAST(v0.c1 AS NUMERIC) ELSE ((v0.c1)IS NOT(v0.c0)) END) OVER (), (((vt1.c0) IS FALSE) IN (SQLITE_COMPILEOPTION_USED(vt1.c0))) FROM v0;SELECT DISTINCT NTILE(vt1.c1) OVER () FROM vt1 GROUP BY ((((((vt1.c1) BETWEEN (v0.c2) AND (v0.c1)))AND(((vt1.c1)OR(vt1.c1)))))OR(vt1.c0)) HAVING (NULL IN ((((v0.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c1)))));SELECT DISTINCT ((((v0.c0)IS(vt1.c0)))>>(CASE WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c0 WHEN vt1.c0 THEN v0.c1 END)) FROM vt1, v0 WHERE (((((((NULL, '1857462447', '1032256755'))!=(('rX', 0xffffffff9becc8ea, 0.1540737738476815)))))<=((SQLITE_COMPILEOPTION_USED(-2.060498629E9))))) ORDER BY (((vt1.c1)>(v0.c0)) IN ()) DESC  NULLS FIRST; -- 0ms;
SELECT SUM((vt1.c1 IN ()) COLLATE NOCASE) FROM v0 ORDER BY ((v0.c0) NOTNULL)  NULLS LAST; -- 0ms;
SELECT DISTINCT ((CAST(vt1.c1 AS BLOB)) ISNULL) FROM v0;SELECT ALL (((((v0.c0)<<(v0.c2)), v0.c2, (x'' IN ())))<((((vt1.c1)>(vt1.c1)), 0.03655341355496333, ((v0.c1)<=(vt1.c0))))) FROM vt1;SELECT DISTINCT AVG(v0.c2), (((v0.c2, vt1.c0, v0.c1)) NOT BETWEEN ((vt1.c1 COLLATE NOCASE, ((((((((((((0.8813721128940587)AND(vt1.c1)))AND(vt1.c1)))AND(v0.c0)))AND(v0.c2)))OR(v0.c2)))OR(v0.c2)), ((v0.c2) ISNULL))) AND ((((vt1.c0) NOTNULL), v0.c2 COLLATE RTRIM, ((v0.c1)%(vt1.c1))))), vt1.c1 FROM v0;SELECT ALL (((~ (vt1.c1))) NOT NULL) FROM v0 WHERE (TRIM(0.8223980147741449 COLLATE BINARY));SELECT DISTINCT (+ (((v0.c2) NOT NULL))) FROM v0 WHERE (((((~ ('-759183936'))))<>(((NOT ('')))))); -- 0ms;
SELECT ALL (((v0.c1)) BETWEEN ((((vt1.c0) NOT BETWEEN (v0.c0) AND (NULL)))) AND ((''))), (((v0.c1)|(vt1.c1)) IN (vt1.c1)), (- (v0.c0)) FROM vt1 GROUP BY ((((((v0.c0)%(vt1.c1)))OR(v0.c2 COLLATE NOCASE)))AND((vt1.c0 IN (vt1.c1)))), (((((v0.c1) NOT NULL)))>((vt1.c0 COLLATE BINARY))), (((vt1.c0, v0.c1, vt1.c0)) NOT BETWEEN (((('![LPz b')|(v0.c0)), UNLIKELY(vt1.c1), (vt1.c0 IN ()))) AND ((((vt1.c1)-(vt1.c0)), v0.c0 COLLATE RTRIM, CASE v0.c1  WHEN v0.c2 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c1 THEN vt1.c1 END))), ((TRIM(v0.c0))GLOB(((((((((v0.c1)AND(v0.c2)))AND('Bow䨥')))OR(v0.c0)))AND(vt1.c1)))), IFNULL(((vt1.c0) IS TRUE), (('sauj') ISNULL));SELECT ALL FIRST_VALUE((NOT (((v0.c0) NOT BETWEEN (vt1.c1) AND (v0.c0))))) OVER () FROM vt1, v0; -- 0ms;
SELECT (((((vt1.c1))!=((v0.c1))))GLOB(CASE WHEN 0.7476408059731999 THEN v0.c2 ELSE v0.c1 END)) FROM v0, vt1 LIMIT -868293064; -- 1ms;
SELECT DISTINCT ((((vt1.c0)||(v0.c0)))OR(v0.c1)) FROM vt1, v0 GROUP BY ((((((((CASE v0.c0  WHEN vt1.c0 THEN x'4b2c' END)AND(x'')))OR('0.13450326647205624')))OR(((v0.c0)<<(v0.c0)))))AND(0X284ad4db)); -- 0ms;
SELECT DISTINCT LAG(((((v0.c2)%(vt1.c0)))LIKE(0.784888522022143 COLLATE NOCASE)), CAST(v0.c1 AS NUMERIC) COLLATE NOCASE, UNLIKELY(CAST(vt1.c1 AS TEXT))) OVER () FROM vt1, v0 WHERE (((CASE WHEN '343784641' THEN 5.40390627E8 WHEN x'' THEN 0.7886629296106367 WHEN 0.7029040859610378 THEN -8208405 ELSE '' END) NOT BETWEEN (((x'')<<(''))) AND (TRIM(DISTINCT x'', 0xffffffffeebae899)))) ORDER BY CASE IFNULL(DISTINCT v0.c0, v0.c2)  WHEN ((vt1.c0)<<(vt1.c1)) THEN CAST(v0.c1 AS NUMERIC) WHEN (v0.c0 IN ()) THEN (vt1.c0 IN (v0.c0, vt1.c0)) WHEN ((((v0.c0)AND(NULL)))AND(v0.c1)) THEN (v0.c0 IN (v0.c1)) ELSE CASE vt1.c1  WHEN v0.c0 THEN vt1.c0 ELSE v0.c0 END END ASC, CAST(((v0.c2)&(v0.c0)) AS TEXT) ASC; -- 0ms;
SELECT CAST(v0.c0 AS REAL) COLLATE BINARY, CAST(vt1.c0 AS BLOB) COLLATE NOCASE, CAST(CAST(vt1.c1 AS TEXT) AS TEXT) FROM vt1, v0 LIMIT 537741182; -- 1ms;
SELECT DISTINCT ((x'' COLLATE NOCASE)<(json_array_length(v0.c0, vt1.c1))), (((('755101974' COLLATE NOCASE)AND(((v0.c0)!=(vt1.c0)))))OR((v0.c0 IN (vt1.c1)))), ((((vt1.c1) NOT BETWEEN (v0.c0) AND (vt1.c1))) IS TRUE) FROM vt1 WHERE (((UNICODE(x''))<<((+ ('')))));SELECT ALL ((((((vt1.c1)IS(v0.c1)))AND(COUNT(v0.c2))))OR(v0.c0 COLLATE RTRIM)) FROM v0, vt1 INTERSECT SELECT ALL (((v0.c2 IN (v0.c2, v0.c0))) BETWEEN ((((v0.c0))<=((v0.c0)))) AND (((x'')<=(v0.c0)))) FROM vt1 WHERE (NULL);SELECT DISTINCT CASE WHEN v0.c0 THEN CAST(v0.c1 AS INTEGER) ELSE '-876084280' END FROM v0 GROUP BY NULL; -- 0ms;
SELECT DISTINCT (((((((((((vt1.c1, v0.c2, vt1.c0))==((v0.c2, vt1.c0, v0.c1))))OR('1292366303')))AND(((v0.c2)AND(v0.c0)))))OR(((v0.c1)!=(vt1.c1)))))OR(((((vt1.c1)OR(vt1.c0)))OR(v0.c0)))) FROM v0 WHERE (LOWER(TRIM(NULL)));SELECT ALL ((CASE v0.c1  WHEN v0.c2 THEN vt1.c0 END)LIKE(RTRIM(v0.c1))) FROM v0, vt1; -- 0ms;
SELECT ((vt1.c1)LIKE(v0.c1)) COLLATE BINARY FROM v0, vt1 ORDER BY NULL DESC LIMIT -1398354269 OFFSET -551124702; -- 1ms;
SELECT ALL (((((v0.c2)) BETWEEN ((vt1.c1)) AND ((v0.c1)))) NOT BETWEEN (vt1.c0) AND (((v0.c2) NOT BETWEEN (vt1.c1) AND (vt1.c0)))), QUOTE((vt1.c1 IN (v0.c1, v0.c0))), SUM(vt1.c0 COLLATE NOCASE COLLATE NOCASE) OVER ( PARTITION BY ((IFNULL(vt1.c0, v0.c1))LIKE(v0.c1 COLLATE BINARY)), ((LIKELIHOOD(DISTINCT v0.c0, 0.32786740650109547))AND(((((((((((((v0.c2)OR(v0.c1)))AND(vt1.c1)))OR(v0.c1)))OR(v0.c1)))OR(v0.c2)))AND(v0.c0))))) FROM v0, vt1 WHERE (CASE '-21776493'  WHEN CASE WHEN 0.26414931078184645 THEN 0.061980230195577524 END THEN CASE WHEN 0.7116920741409731 THEN 'W⚟' WHEN 'v)' THEN x'' WHEN NULL THEN 0.8685150531942302 END ELSE (NULL IN ()) END); -- 0ms;
SELECT DISTINCT (((vt1.c0)) NOT BETWEEN (((+ (v0.c2)))) AND ((((vt1.c0)<<(v0.c1))))) FROM v0, vt1 WHERE (json_array_length(x'3681') COLLATE NOCASE);SELECT DISTINCT 0.5010519107106333 FROM v0, vt1 WHERE ((x'' IN ()) COLLATE RTRIM); -- 0ms;
SELECT '\g' FROM vt1, v0 WHERE (((((((x'')AND('I퍓Q퐘c<')))OR(NULL)))==((('-829804530')-(x'2d27'))))) ORDER BY highlight((((v0.c0)) BETWEEN ((v0.c2)) AND ((v0.c0))), ((((v0.c2)AND(v0.c2)))OR(vt1.c0)), (((v0.c1, vt1.c0, v0.c0)) BETWEEN ((v0.c0, vt1.c1, v0.c0)) AND ((vt1.c0, NULL, vt1.c1))), (- (vt1.c1))) ASC  NULLS FIRST, vt1.c1 COLLATE BINARY; -- 0ms;
SELECT DISTINCT LAST_VALUE(((v0.c2) NOT NULL)) OVER ( PARTITION BY (- (CASE WHEN v0.c0 THEN 505308621 WHEN vt1.c0 THEN '' WHEN v0.c0 THEN vt1.c1 ELSE vt1.c1 END)), NULL COLLATE NOCASE), ROW_NUMBER() OVER (), GLOB(311228839, (v0.c1 IN ())) FROM v0;SELECT DISTINCT PERCENT_RANK() OVER () FROM v0; -- 0ms;
SELECT DISTINCT ((AVG(v0.c0)) BETWEEN (LIKELY(DISTINCT NULL)) AND (((((((((vt1.c0)OR(v0.c1)))AND(v0.c2)))OR(vt1.c0)))OR(vt1.c1)))) FROM vt1, v0; -- 0ms;
SELECT DISTINCT ((CAST(vt1.c0 AS NUMERIC))/(MAX(v0.c1))), ((LIKELY(DISTINCT v0.c0)) ISNULL), v0.c2 FROM vt1 LIMIT -730447715;SELECT DISTINCT (x'' IN ()) FROM vt1 WHERE (((('1746718176') IS TRUE) IN ())); -- 0ms;
SELECT ALL (CASE v0.c1  WHEN vt1.c1 THEN vt1.c1 ELSE vt1.c0 END IN (((v0.c2) IS TRUE), (NOT (v0.c2)), v0.c0)), ((((((((((v0.c2)OR(v0.c0)))OR(vt1.c0)))AND(vt1.c0)))AND(v0.c1))) ISNULL), CASE ((((vt1.c0)OR(v0.c2)))AND(vt1.c1))  WHEN ((((v0.c0)AND(v0.c1)))AND(v0.c0)) THEN ((((v0.c1)AND(vt1.c0)))AND(vt1.c1)) WHEN ((v0.c2)||(v0.c0)) THEN (((v0.c2)) BETWEEN ((v0.c2)) AND ((v0.c0))) WHEN ((v0.c2)|(vt1.c1)) THEN TRIM(DISTINCT v0.c1) END FROM v0 NOT INDEXED;SELECT DISTINCT (- (((vt1.c1)<=(vt1.c1)))), UPPER(((v0.c1)/(vt1.c0))), ((((((((NULL)OR(x'6e74')))OR(v0.c2 COLLATE BINARY)))OR(CASE WHEN v0.c1 THEN vt1.c1 WHEN v0.c0 THEN v0.c2 WHEN v0.c2 THEN v0.c2 END)))AND((NOT (vt1.c1)))) FROM v0, vt1; -- 0ms;
SELECT ALL ((json_insert(vt1.c0, vt1.c1, vt1.c1))&(((((((((vt1.c0)AND(vt1.c0)))OR(vt1.c1)))OR(v0.c2)))OR(v0.c1)))), ((((v0.c0)GLOB(x''))) ISNULL), MIN(((((x'')AND('1539744462')))AND(v0.c1))), CASE (((vt1.c1))>((v0.c1)))  WHEN TOTAL(vt1.c1) THEN CAST(x'0e3e' AS BLOB) END, (((NOT (v0.c2)))&((((v0.c1))>=((v0.c1))))) FROM vt1 WHERE (((0x8c0b579)&(CAST(x'' AS REAL)))) LIMIT -720833210;SELECT ALL COUNT((((vt1.c1, v0.c2, v0.c1)) BETWEEN ((v0.c2, -1.7976931348623157E308, vt1.c1)) AND ((vt1.c0, v0.c0, v0.c1)))) OVER () FROM vt1, v0; -- 1ms;
SELECT (((((((v0.c2))<((vt1.c0))))AND(((vt1.c1) BETWEEN (vt1.c0) AND (v0.c0)))))OR(((vt1.c0) NOT NULL))) FROM vt1;SELECT ((vt1.c1)>=(((((((((v0.c0)AND(v0.c2)))OR(v0.c0)))AND(v0.c0)))OR(v0.c0)))), LEAD(NULL, ((((v0.c0 IN (v0.c0, v0.c1)), v0.c0 COLLATE BINARY, LIKE(v0.c1, v0.c0)))<=((CAST(v0.c2 AS NUMERIC), ((v0.c0) NOTNULL), ((((v0.c2)AND(v0.c2)))AND(v0.c2))))), CASE v0.c2 COLLATE RTRIM  WHEN ((v0.c2)IS NOT(v0.c0)) THEN json_type(v0.c1) ELSE (((v0.c1, v0.c0, v0.c2))<>((v0.c0, v0.c2, v0.c0))) END) OVER (), ((((vt1.c1) NOTNULL)) ISNULL) FROM v0 WHERE (((((CASE '㥹mv(L'  WHEN '12309528' THEN '1372145016' WHEN NULL THEN NULL WHEN '-1798126827' THEN -811637170 END)OR(CAST('>' AS NUMERIC))))AND(((((x'')AND(x'')))AND(x'a4c6')))));SELECT DISTINCT ROW_NUMBER() OVER () FROM v0, vt1 WHERE ((((x'')||(x'')) IN ())); -- 0ms;
SELECT ((((((((((v0.c2) NOTNULL))OR(((vt1.c1)>=(x'fd3c')))))AND(x'')))OR((~ (vt1.c0)))))AND((((v0.c0))>=((v0.c0))))) FROM v0;SELECT DISTINCT (+ (v0.c1)) COLLATE NOCASE COLLATE BINARY FROM vt1, v0 WHERE (CAST((((((((('i-')OR(x'')))OR('256924448')))OR(NULL)))OR(x'76ef')) AS NUMERIC)); -- 0ms;
SELECT MIN(v0.c1), ((v0.c2)>(v0.c1)) COLLATE NOCASE, (((- (vt1.c1))) NOTNULL) FROM vt1, v0; -- 1ms;
SELECT DISTINCT 0.3496431474085645 FROM v0; -- 0ms;
SELECT ALL ((v0.c1)OR(v0.c2)) COLLATE RTRIM FROM v0 NOT INDEXED, vt1 WHERE ((((('-1430398751') NOTNULL)) IS TRUE)); -- 0ms;
SELECT (CASE WHEN v0.c1 THEN vt1.c1 ELSE vt1.c1 END IN ()) FROM v0 WHERE ((('') NOT NULL) COLLATE RTRIM); -- 0ms;
SELECT ALL (((vt1.c0)*(vt1.c1)) IN ()), LAG((load_extension(vt1.c1) IN ((+ (vt1.c1)))), CAST(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c1 ELSE vt1.c1 END AS INTEGER), ((vt1.c0)IS NOT(vt1.c1)) COLLATE BINARY) OVER (), ((-4.42248365E8) NOT BETWEEN (MIN(vt1.c0)) AND (((vt1.c0)-(vt1.c1)))) FROM vt1 WHERE ((((((((('')AND(1358476547)))AND(0.44825460997125044)))OR((NOT ('p	H3!\nC>(')))))AND(((NULL)<=('')))));SELECT ALL ((((CAST(v0.c0 AS NUMERIC))OR(x'')))OR(0xffffffffe2f014c9)), FIRST_VALUE(CASE WHEN TYPEOF(v0.c2) THEN (~ (v0.c2)) WHEN (((v0.c2))<=((v0.c0))) THEN ((v0.c0)/(0.39085133840920006)) WHEN ((v0.c1) IS FALSE) THEN v0.c0 WHEN 0.6899673549837281 THEN ((v0.c0) IS FALSE) WHEN CASE WHEN v0.c2 THEN v0.c0 END THEN x'' END) OVER ( RANGE v0.c2 PRECEDING), (((vt1.c1)AND(v0.c0)) IN ()) FROM v0 WHERE ((('') IS TRUE) COLLATE NOCASE);SELECT DISTINCT LIKELY(DISTINCT v0.c2) FROM vt1;SELECT DISTINCT GROUP_CONCAT(COUNT(*)) FROM v0 WHERE ((NOT ('YA)rYJᕳma')));SELECT 0.18695966194455438 FROM vt1, v0 WHERE (((((((x'') IS FALSE))OR(CASE NULL  WHEN NULL THEN '-2013749696' ELSE 6.80045361E8 END)))OR(0x6a53950b COLLATE BINARY))); -- 0ms;
SELECT ((((v0.c1)>=(vt1.c1)))||(((vt1.c0) NOT NULL))) FROM vt1, v0 WHERE ((('1716475202') NOT BETWEEN ('') AND ('][')) COLLATE NOCASE); -- 0ms;
SELECT CAST(vt1.c1 AS BLOB) COLLATE BINARY FROM v0, vt1 WHERE (LIKE(highlight('x.~#', -1622468204, '쿃', NULL), (((NULL)) BETWEEN (('1006377068')) AND ((0.8868485012609401)))));SELECT DISTINCT (((v0.c2, v0.c0, v0.c2)) BETWEEN (((+ (v0.c1)), (v0.c0 IN ()), LIKELIHOOD(DISTINCT vt1.c0, 0.3209538862391934))) AND ((((v0.c1)/(vt1.c0)), LOWER(DISTINCT vt1.c0), ((v0.c2) ISNULL)))) FROM vt1 WHERE (CASE (('-1732621230') IS FALSE)  WHEN 'chGt,1.' THEN ((NULL)!=(NULL)) WHEN (x'' IN ()) THEN ((x'')IS('-1280833896')) WHEN (('378242382')AND(0x3d7a6ecf)) THEN CASE WHEN 0.16060638087382084 THEN NULL WHEN x'' THEN x'' WHEN x'4444' THEN -2045614811 ELSE '-890721399' END ELSE (('')<(NULL)) END) LIMIT 1823869841;SELECT ((((((vt1.c1)AND(vt1.c0)))AND(v0.c1)))IS(NULL)), SUM(CASE vt1.c0  WHEN v0.c1 THEN vt1.c0 ELSE vt1.c0 END) OVER (), CASE ((vt1.c0) NOT BETWEEN (v0.c2) AND (vt1.c0))  WHEN CASE v0.c1  WHEN v0.c1 THEN ',!Iu4i' WHEN vt1.c1 THEN v0.c1 WHEN vt1.c0 THEN vt1.c0 ELSE 0.10320532338508392 END THEN 0.3556086196885492 WHEN ((vt1.c1) NOT NULL) THEN ((vt1.c0)<<(vt1.c0)) WHEN ((v0.c1) NOT NULL) THEN (0.3054081170709443 IN ()) ELSE ((((((((vt1.c0)AND(v0.c2)))AND(v0.c1)))AND(v0.c1)))AND(v0.c0)) END, NULLIF(((v0.c1)LIKE(v0.c2)), ((v0.c2) BETWEEN (v0.c2) AND (v0.c1))), x'' FROM vt1 WHERE ((((NOT (x''))) NOT BETWEEN ((((x'afe7', x'', -1.7976931348623157E308))>(('xW', '-1048917236', '-1316537942')))) AND ('985098149')));SELECT ALL COUNT(*), vt1.c0, (- (CAST(v0.c2 AS REAL))) FROM vt1, v0 WHERE ((NULL IN ('MH', 0x39a43f55)) COLLATE RTRIM) ORDER BY ((((v0.c1 COLLATE RTRIM)AND((('-551124702')<<(v0.c1)))))OR(((vt1.c0) NOT BETWEEN (v0.c2) AND (v0.c0))))  NULLS FIRST LIMIT -575902240; -- 0ms;
SELECT (((((-1.644004606E9)AND(vt1.c1)))AND(vt1.c0)) IN ()), '921667562', ((((((vt1.c1)OR(6.28836995E8)))AND(v0.c0))) BETWEEN ((((('M<0.PmRk')AND(vt1.c0)))OR(v0.c0))) AND (((vt1.c0)|(vt1.c1)))) FROM vt1 WHERE ((('-442248365' IN ()) IN (((NULL)<>('/')))));SELECT DISTINCT (((((+ (NULL)))OR(((v0.c2)LIKE(v0.c1)))))OR(((((vt1.c1)AND(v0.c0)))AND(v0.c0)))), CASE WHEN 0x46a41558 THEN v0.c0 WHEN v0.c1 THEN v0.c0 WHEN NULL THEN vt1.c1 END COLLATE RTRIM, (((v0.c0)>=(vt1.c1)) IN ()) FROM vt1, v0 ORDER BY (v0.c1 COLLATE NOCASE IN ((+ (v0.c1)), v0.c1)); -- 1ms;
SELECT ((((v0.c2) IS TRUE)) NOT BETWEEN (json_valid(0.39219657973175237)) AND ((v0.c0 IN ()))) FROM v0, vt1 GROUP BY ((((v0.c2) IS TRUE))>>((+ (v0.c2)))), (((vt1.c1) NOTNULL) IN ()), CASE WHEN ((((v0.c2)AND(v0.c1)))OR(vt1.c0)) THEN CASE v0.c1  WHEN 0.3279396990321237 THEN v0.c2 ELSE vt1.c1 END ELSE x'' END ORDER BY CASE WHEN vt1.c0 COLLATE RTRIM THEN ((NULL) BETWEEN (v0.c2) AND (vt1.c0)) ELSE CASE v0.c0  WHEN vt1.c1 THEN vt1.c1 END END ASC  NULLS FIRST, CASE WHEN (('2080395053')||(vt1.c1)) THEN 0X2f24d606 WHEN NULL THEN ((((v0.c1)OR(vt1.c1)))OR(vt1.c1)) WHEN CASE vt1.c1  WHEN v0.c2 THEN v0.c1 END THEN ((vt1.c0) NOTNULL) ELSE ((v0.c0)OR(vt1.c0)) END, '0.7886629296106367' DESC; -- 1ms;
SELECT DISTINCT NULL, CASE 0.5373014628419276  WHEN (((x'')) NOT BETWEEN ((v0.c0)) AND ((vt1.c1))) THEN NULL COLLATE BINARY END, (vt1.c1 IN ()) COLLATE BINARY COLLATE RTRIM FROM vt1, v0 WHERE (((-1184964616)<(((((x'c5d1')OR(-1790666661)))OR(''))))); -- 0ms;
SELECT COUNT(*) FROM v0 ORDER BY json_array(((((((((((((vt1.c1)OR(vt1.c1)))OR(vt1.c1)))AND(v0.c0)))AND(v0.c0)))AND(vt1.c0)))OR(v0.c1)), load_extension(vt1.c1, v0.c2)), IFNULL(v0.c1 COLLATE NOCASE, '-899555545') ASC;SELECT ALL ((((((v0.c0)<>(vt1.c1)))OR(((v0.c1) NOT BETWEEN (vt1.c1) AND (v0.c1)))))AND(NULL)), SUM(v0.c2), MAX(((v0.c2) NOT NULL)) FROM v0;SELECT ((x'')<<(LTRIM(v0.c2))), ((CAST(vt1.c1 AS NUMERIC)) NOT BETWEEN (MIN(vt1.c1)) AND ((vt1.c0 IN ()))), TOTAL(((vt1.c1)>>(v0.c1))) FROM v0, vt1 WHERE ((((NOT (NULL))) IS FALSE)); -- 0ms;
SELECT ALL vt1.c1, x'', ('8\p\' IN (CAST(v0.c0 AS BLOB), ((vt1.c1)&(vt1.c0)))) FROM vt1;SELECT DISTINCT vt1.c1, v0.c1, SUM(MAX(TRIM(DISTINCT vt1.c0, x''))) FROM v0;SELECT ALL 0.9884400115642785 FROM v0 WHERE (JULIANDAY(((x'') BETWEEN (NULL) AND (0.06171203486019594)), (('0.6213655434831065') NOTNULL), (0.13713188109048235 IN ()))); -- 0ms;
SELECT (((vt1.c1) NOT NULL) IN ()) FROM v0; -- 0ms;
SELECT DISTINCT ((((0.9015885591511308)*(vt1.c0)))LIKE(((v0.c2) BETWEEN (NULL) AND (v0.c0)))), CASE WHEN vt1.c1 COLLATE BINARY THEN (38990191 IN (v0.c2)) END, (load_extension(vt1.c1, vt1.c0) IN ()) FROM v0;SELECT CASE ((((((((vt1.c1)AND(vt1.c0)))OR(vt1.c0)))OR(v0.c1)))OR(v0.c1))  WHEN ((v0.c2) IS TRUE) THEN (NOT (v0.c2)) ELSE ',' END FROM vt1 WHERE (((((NULL)AND(NULL)))AND(0xffffffffa6a9f7b4)) COLLATE BINARY);SELECT ROW_NUMBER() OVER ( ROWS  CURRENT ROW EXCLUDE GROUP), CAST(((((v0.c0)OR(vt1.c1)))OR(vt1.c1)) AS INTEGER), (((((v0.c1))<=((v0.c0)))) NOT BETWEEN (((vt1.c1) IS TRUE)) AND ((v0.c1 IN ('MI')))) FROM vt1, v0; -- 0ms;
SELECT DISTINCT (((v0.c1, v0.c2, v0.c1)) BETWEEN (((((0.5438619140750516))>((v0.c0))), (NOT (v0.c1)), CASE WHEN v0.c2 THEN v0.c1 END)) AND ((UNLIKELY(DISTINCT v0.c1), (v0.c1 IN ()), MIN(vt1.c0, v0.c0)))), 0.4404059384827589, CAST(COUNT(vt1.c1) AS REAL) FROM vt1, v0 WHERE ((((NULL) NOT BETWEEN (0.037624233081011815) AND ('')) IN ())); -- 1ms;
SELECT DISTINCT ((((v0.c1)*(v0.c1)))IS NOT(MAX(v0.c0))), LAG((x'c3fa' COLLATE NOCASE IN (((vt1.c0)*(vt1.c0)), CAST(v0.c1 AS NUMERIC))), ((CAST(vt1.c0 AS NUMERIC))IS(((v0.c2)OR(v0.c1)))), ((((896308406)<<(vt1.c1)))>(((((v0.c2)AND(v0.c0)))AND(vt1.c0))))) OVER (), (NOT (((((vt1.c0)AND(v0.c0)))OR(vt1.c0)))) FROM v0, vt1 WHERE (((((((0X6cb60b91)OR(0x6eb6a0af)))OR(NULL))) IS TRUE)); -- 0ms;
SELECT DISTINCT ((((CASE WHEN v0.c2 THEN v0.c2 END)OR(COUNT(*))))AND((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN ((v0.c0, v0.c2, v0.c2)) AND ((v0.c2, 0.49248073049385543, v0.c2))))) FROM vt1, v0 WHERE (((((((x'674a12dae120')AND(x'')))OR(NULL)))LIKE(NULL))); -- 0ms;
SELECT DISTINCT CAST((vt1.c1 IN (v0.c0)) AS NUMERIC) FROM v0;SELECT DISTINCT AVG(v0.c1) FROM vt1;SELECT (~ ((((vt1.c1))<=((vt1.c0))))) FROM v0;SELECT ALL ((TIME(v0.c1, vt1.c0, v0.c0)) ISNULL) FROM vt1;SELECT DISTINCT (- (MAX(v0.c0))), ((v0.c1)>=(vt1.c0)) COLLATE RTRIM, ((((vt1.c1) NOTNULL)) IS FALSE) FROM vt1, v0 WHERE (((0Xffffffff894cada2) NOTNULL)); -- 0ms;
SELECT ALL ((((vt1.c0) NOT NULL)) IS TRUE), SUM(PRINTF(v0.c1, x'', vt1.c1)), '욖t_', CAST(x'' AS BLOB), v0.c1 FROM v0 GROUP BY (+ (((vt1.c1) NOTNULL))) LIMIT 675992795 OFFSET 2095182533;SELECT (((CASE vt1.c1  WHEN vt1.c0 THEN '' ELSE vt1.c0 END))>=((MAX(v0.c0)))), ((CAST(vt1.c1 AS INTEGER)) BETWEEN (CAST(v0.c0 AS REAL)) AND (v0.c1)), CAST((v0.c2 IN ()) AS REAL) FROM v0, vt1 WHERE (((INSTR(0xffffffff83c07826, '1857462447'))<>(((0.9134806453349651)<=(x''))))); -- 0ms;
SELECT DISTINCT (- (CAST(vt1.c1 AS INTEGER))), json_object(((0.7476408059731999) IS TRUE), ((((((((v0.c1)OR(v0.c2)))OR(vt1.c1)))AND(vt1.c0)))OR(v0.c1))), (((v0.c2 COLLATE RTRIM))=((NULL))) FROM vt1, v0 WHERE (((CASE WHEN '' THEN NULL END)OR(((0.2347436589867944) IS TRUE))));SELECT DISTINCT AVG(((v0.c2) BETWEEN (vt1.c1) AND (v0.c0))) OVER ( ORDER BY IFNULL(CAST(vt1.c1 AS TEXT), v0.c1) DESC) FROM vt1 WHERE (((TYPEOF('0.5307438434347945')) NOT BETWEEN (((NULL)>>(x''))) AND (((x'')=(x'')))));SELECT DISTINCT v0.c1 FROM v0 WHERE (CAST(((0.7699146746241828)>>(NULL)) AS NUMERIC)); -- 0ms;
SELECT DISTINCT GROUP_CONCAT(0x5b53e646) FROM v0, vt1 LIMIT -1569906394; -- 0ms;
SELECT DISTINCT v0.c1 FROM v0, vt1 WHERE ((((((((('-894264498')AND(0.9104653052339731)))OR('?By/rA')))AND(x'')))OR(0X4ce47d35)) COLLATE NOCASE); -- 0ms;
SELECT DISTINCT (((v0.c0, vt1.c0, v0.c0)) NOT BETWEEN ((json_array_length(v0.c2), CAST(vt1.c0 AS REAL), ((0.8626343461828205)*(vt1.c1)))) AND ((DATE(vt1.c0, vt1.c1, v0.c1), ((v0.c0)IS(v0.c0)), v0.c2))) FROM v0, vt1 WHERE (CAST(((0.01598998500772031) NOTNULL) AS BLOB)); -- 0ms;
SELECT CASE UPPER(v0.c2)  WHEN v0.c1 THEN MAX(v0.c0) ELSE TOTAL(vt1.c0) END, (NOT ((((vt1.c0)) NOT BETWEEN ((v0.c0)) AND ((vt1.c0))))), (((((vt1.c1))<=((vt1.c1))))GLOB((((v0.c2, '-363510434', v0.c2)) NOT BETWEEN ((v0.c2, vt1.c1, vt1.c1)) AND ((v0.c1, vt1.c0, NULL))))) FROM vt1, v0 WHERE (((((x'f2bc') NOTNULL))>>(((-1.011117619E9) NOT BETWEEN ('EG<nN{,') AND ('^!'))))) LIMIT 659228072 OFFSET -609707020; -- 0ms;
SELECT DISTINCT LENGTH(((v0.c2) NOTNULL)) FROM v0 NOT INDEXED WHERE (x''); -- 0ms;
SELECT DISTINCT AVG(((x'')%(v0.c2))) OVER () FROM v0; -- 0ms;
SELECT '271412340' FROM v0, vt1 WHERE (((CAST('1273808820' AS INTEGER))%(NULL COLLATE NOCASE))); -- 0ms;
SELECT DISTINCT ((((0.37729997052799713)==(v0.c2)))LIKE(((((((((v0.c0)AND(v0.c0)))AND(vt1.c1)))AND(v0.c0)))AND(x'0369')))) FROM vt1, v0; -- 0ms;
SELECT UPPER(((vt1.c1) NOT BETWEEN (0.5276294255265328) AND (vt1.c1))), (NOT (x'')), UPPER(DISTINCT (v0.c1 IN (vt1.c1))) FROM v0, vt1; -- 1ms;
SELECT DISTINCT (((vt1.c1 IN ())) NOTNULL) FROM v0, vt1; -- 0ms;
SELECT x'b789' FROM v0 WHERE ((((((((((((('')OR('-876897878')))AND(NULL)))OR(x'')))OR(2.81864091E8)))AND(CASE WHEN NULL THEN '474202767' END)))OR(CASE NULL  WHEN '186118930' THEN x'' ELSE x'' END))) GROUP BY (~ (((v0.c0) NOT BETWEEN (-855144381) AND (v0.c0)))), ((((vt1.c1)AND(v0.c0)))OR(v0.c1)) COLLATE BINARY, (+ (json_valid(vt1.c1)));SELECT ((vt1.c1 COLLATE NOCASE)&((NOT (v0.c0)))), ((NULLIF(v0.c2, v0.c0))<=((((v0.c1)) BETWEEN ((vt1.c1)) AND ((vt1.c0))))), CAST(CASE v0.c2  WHEN v0.c1 THEN vt1.c1 ELSE vt1.c0 END AS NUMERIC) FROM vt1 ORDER BY CASE WHEN ((vt1.c0) NOT BETWEEN (vt1.c1) AND (vt1.c0)) THEN ((v0.c0) BETWEEN (vt1.c1) AND (x'')) WHEN ((v0.c0)!=(vt1.c0)) THEN 'y' WHEN (((0.8690892667973038)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c0))) THEN CASE NULL  WHEN v0.c0 THEN v0.c2 END ELSE ((v0.c2) NOT NULL) END ASC  NULLS LAST, (- (((vt1.c0) NOT NULL))) ASC;SELECT 0.3234682374596193 FROM vt1; -- 0ms;
SELECT DISTINCT (CASE WHEN v0.c1 THEN v0.c2 END IN ()), v0.c1, CAST(((((v0.c0)OR(v0.c2)))OR(v0.c0)) AS TEXT) FROM v0 WHERE (NULLIF((('')!=(NULL)), LIKELIHOOD(DISTINCT '-234091027', 0.3538630613470318))) LIMIT -237647035 OFFSET -1376186737; -- 0ms;
SELECT DISTINCT (((v0.c2, v0.c1, vt1.c0)) NOT BETWEEN ((CAST(v0.c2 AS NUMERIC), CASE WHEN vt1.c1 THEN v0.c1 ELSE vt1.c1 END, v0.c0 COLLATE BINARY)) AND ((json_patch('351101514', NULL), MAX(vt1.c1, v0.c2, v0.c2, v0.c0), ((v0.c1) IS FALSE)))), CASE WHEN 0.5863107118574221 THEN ((vt1.c1) IS FALSE) WHEN CASE WHEN v0.c0 THEN v0.c2 END THEN ((v0.c1) NOT BETWEEN (v0.c1) AND (v0.c2)) WHEN ((vt1.c1) BETWEEN (v0.c1) AND (v0.c2)) THEN ((((((((vt1.c0)AND(0Xffffffffca679479)))AND(vt1.c0)))AND(v0.c1)))OR(v0.c2)) END, COUNT(*) FROM v0;SELECT AVG(((v0.c2)OR(vt1.c1))) OVER () FROM v0 WHERE ((+ ((((-1220186022))>=(('1822320798')))))) GROUP BY CASE WHEN x'' THEN v0.c2 COLLATE NOCASE WHEN (((v0.c2)) NOT BETWEEN ((x'')) AND ((vt1.c1))) THEN ((v0.c0) BETWEEN (v0.c2) AND (v0.c0)) WHEN ((0.013338447749045246) BETWEEN (vt1.c1) AND (v0.c0)) THEN TYPEOF(vt1.c0) WHEN CAST(vt1.c1 AS INTEGER) THEN v0.c2 WHEN (((v0.c2))=((v0.c0))) THEN CASE WHEN v0.c1 THEN v0.c1 WHEN v0.c0 THEN 0.11059992711232258 WHEN v0.c0 THEN vt1.c0 END END;SELECT DISTINCT (((('҃xiM%7')AND(0Xffffffffc955103a COLLATE BINARY)))OR(ABS(v0.c2))) FROM vt1, v0 WHERE ((((- ('-1184964616')))AND(CAST('#SL' AS NUMERIC)))); -- 0ms;
SELECT DISTINCT (((((+ (vt1.c0)))AND(((vt1.c0) IS FALSE))))OR(((v0.c1)>=(v0.c2)))), (((CASE vt1.c1  WHEN v0.c2 THEN v0.c0 END, (((vt1.c1))<((v0.c2))), (vt1.c1 IN ())))<=(((((v0.c0)) NOT BETWEEN ((vt1.c0)) AND ((v0.c0))), COUNT(vt1.c1), (v0.c1 IN ())))), (((v0.c1)) BETWEEN ((((x'5727')%(v0.c2)))) AND ((((v0.c1)*(v0.c0))))) FROM v0, vt1; -- 0ms;
SELECT PERCENT_RANK() OVER (), (CAST(vt1.c0 AS NUMERIC) IN ((v0.c0 IN ()))), (((vt1.c0, v0.c2, v0.c2, v0.c0, v0.c0)) NOT BETWEEN ((((x'')<(v0.c2)), (((v0.c2, vt1.c1, vt1.c0, v0.c0, v0.c0))=((v0.c1, v0.c2, vt1.c1, v0.c0, ''))), ((vt1.c1)>>(v0.c2)), ((v0.c0)<=(vt1.c0)), v0.c0 COLLATE RTRIM)) AND (((v0.c1 IN ()), ((((v0.c2)AND(vt1.c0)))AND(v0.c2)), CAST(vt1.c0 AS TEXT), ((NULL) IS FALSE), CAST(vt1.c1 AS TEXT)))) FROM v0, vt1 WHERE ((((((((((0X6a53950b IN ()))AND(((NULL)>(0.07384615895162283)))))OR(('-2101644574' IN ()))))OR(CAST(0.014605210751045705 AS INTEGER))))OR(CASE WHEN x'5aeb' THEN NULL ELSE '' END))) GROUP BY ((CAST(v0.c0 AS TEXT)) NOTNULL) HAVING CASE WHEN ((v0.c1)/(v0.c1)) THEN TRIM(DISTINCT v0.c1, vt1.c1) END; -- 1ms;
SELECT ((CASE WHEN vt1.c0 THEN vt1.c0 ELSE v0.c0 END)<=((- (vt1.c1)))) FROM v0 WHERE ((((((x'', NULL, NULL))>=(('505308621', 0Xfffffffff2f76dd8, 899825273))))>=((((NULL, 0.7782358922105644, 0Xffffffffa1406134)) BETWEEN ((x'', NULL, '2129276484')) AND ((-579954312, 0Xfffffffff3bb7079, x'2fc4'))))));SELECT DISTINCT ((((v0.c1) BETWEEN (7.55101974E8) AND (vt1.c0))) ISNULL) FROM v0;SELECT ALL (((NOT (0.9328708959093209)))>=(((v0.c0) NOT BETWEEN (vt1.c0) AND (vt1.c1)))) FROM vt1, v0 LIMIT 609028770 OFFSET 1292366303; -- 0ms;
SELECT ((((vt1.c0) BETWEEN (vt1.c0) AND (v0.c1))) IS FALSE), ((COUNT(*)) BETWEEN (((v0.c2)==(v0.c0))) AND ((vt1.c0 IN (v0.c2, v0.c2)))), ((((((((json_array(v0.c2, v0.c1, vt1.c0, v0.c2))OR(COUNT(vt1.c1))))OR(v0.c2 COLLATE NOCASE)))OR(((vt1.c0) BETWEEN (v0.c1) AND (vt1.c1)))))OR(CAST(v0.c0 AS REAL))) FROM vt1, v0 GROUP BY ((((((vt1.c0) ISNULL))AND(((vt1.c0)<=(v0.c0)))))AND('-2038045907' COLLATE RTRIM)), json_array_length('', CAST(v0.c2 AS TEXT)), NULL HAVING ((((vt1.c1)<(v0.c1)))&(CASE WHEN vt1.c1 THEN v0.c2 ELSE v0.c1 END)) ORDER BY (((vt1.c1, v0.c1, v0.c1)) BETWEEN (((+ (vt1.c0)), vt1.c1 COLLATE NOCASE, -2.069342395E9)) AND ((((v0.c2)>=(vt1.c1)), (((v0.c2, v0.c0, v0.c1)) BETWEEN ((vt1.c1, 18047065, v0.c1)) AND ((vt1.c1, v0.c1, v0.c1))), ROUND(vt1.c0, v0.c1))))  NULLS LAST LIMIT -972509751 OFFSET -868293064;SELECT CASE COUNT(*)  WHEN ((((((((((((((((vt1.c0)OR(v0.c2)))AND('ﳳ>*nSR	[')))AND(v0.c1)))AND(v0.c2)))AND(v0.c2)))OR(vt1.c1)))AND(v0.c0)))AND(vt1.c1)) THEN v0.c1 ELSE v0.c1 END FROM v0, vt1 WHERE (load_extension(CASE x''  WHEN 'PY,<>' THEN NULL ELSE '' END));SELECT DISTINCT ((v0.c1 COLLATE RTRIM) ISNULL), ((((0xffffffffbe539a2e)OR(TOTAL_CHANGES())))OR(((vt1.c0)LIKE('-608140647')))), COUNT(*) FROM v0, vt1; -- 0ms;
SELECT DISTINCT (((NOT (vt1.c1)))IS((v0.c1 IN (v0.c0)))) FROM v0, vt1; -- 0ms;
SELECT ALL (((((v0.c1)*(v0.c1))))<=((((v0.c2) BETWEEN (vt1.c1) AND (v0.c0))))), ((((((((((v0.c2)>=(vt1.c0)))OR(v0.c1 COLLATE NOCASE)))OR(vt1.c0 COLLATE RTRIM)))AND(CASE x''  WHEN vt1.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c0 ELSE x'' END)))OR((((v0.c1))<>((vt1.c1))))), ((((((vt1.c1)OR(v0.c0)))AND(v0.c2))) BETWEEN (MAX(v0.c0)) AND (((v0.c0)&(v0.c2)))) FROM vt1, v0 WHERE ((~ ((NOT ('	H*h3u'))))) GROUP BY NULL, (+ (((v0.c1)||(vt1.c0)))), (((((vt1.c1)) BETWEEN ((vt1.c0)) AND ((vt1.c0)))) NOT BETWEEN ('1032256755') AND (NULL)) HAVING (((((v0.c1)AND(vt1.c1)))OR(v0.c1)) IN ()); -- 1ms;
SELECT DISTINCT ((((v0.c1)*(vt1.c0))) ISNULL) FROM vt1, v0; -- 0ms;
SELECT ALL ((vt1.c1)%(v0.c2)) COLLATE NOCASE FROM vt1, v0 WHERE (UNLIKELY(((9.90848671E8) IS FALSE))); -- 0ms;
SELECT DISTINCT GROUP_CONCAT(((x'554b') NOT BETWEEN (vt1.c0) AND (v0.c0))) FROM vt1, v0; -- 0ms;
SELECT DISTINCT COUNT(*) OVER ( ORDER BY (((((v0.c0)>(vt1.c1))))==((((v0.c0)>=(v0.c1))))) ASC  NULLS LAST) FROM vt1 WHERE (((TYPEOF(DISTINCT '0.3496431474085645'))*(((x'')<<('9듣*Y%~hVꚍ'))))) GROUP BY CASE ((vt1.c1)+(v0.c2))  WHEN ((v0.c2) ISNULL) THEN (+ (v0.c0)) ELSE v0.c2 COLLATE NOCASE END;SELECT ALL ((((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c1)))|((((v0.c1, vt1.c0, v0.c2))>=((vt1.c0, vt1.c0, v0.c2))))), (+ (TOTAL(vt1.c1))), CAST(CASE WHEN v0.c0 THEN vt1.c1 END AS TEXT), ((((v0.c0 IN ())))<>((CASE v0.c0  WHEN vt1.c1 THEN v0.c0 WHEN v0.c2 THEN v0.c1 WHEN v0.c0 THEN v0.c0 ELSE v0.c1 END))), (- (CASE WHEN v0.c1 THEN vt1.c1 END)) FROM vt1 WHERE ('34823932' COLLATE NOCASE);SELECT COUNT(CAST('' AS NUMERIC)) FROM vt1 WHERE (((((QUOTE('>9#0o~纏1'))AND(((0xfffffffff58e04cd) IS TRUE))))AND(CASE WHEN 'emLhL' THEN '-75224669' ELSE NULL END))) LIMIT 2092221285; -- 0ms;
SELECT DISTINCT ((((v0.c1) NOT BETWEEN (v0.c2) AND (v0.c1)))<<(HEX(DISTINCT v0.c2))) FROM vt1, v0; -- 0ms;
SELECT ALL vt1.c1 FROM v0, vt1 WHERE (((((('-2060498629') NOTNULL)))>(((+ (0.2565736766133334)))))); -- 0ms;
SELECT DISTINCT GROUP_CONCAT((((vt1.c0))<=((v0.c1)))) COLLATE RTRIM FROM v0, vt1 NOT INDEXED WHERE (CASE WHEN NULL THEN NULL WHEN '-732066319' THEN '1902309242' WHEN 0X10cce79b THEN 0.4503557202773568 ELSE 0.43628408158041576 END COLLATE NOCASE); -- 1ms;
SELECT DISTINCT ((COUNT(v0.c2)) IS TRUE) FROM v0, vt1 WHERE (CAST(x'32c5' AS REAL) COLLATE RTRIM); -- 0ms;
SELECT ALL ((- (v0.c2)) IN ()) FROM vt1, v0; -- 0ms;
SELECT DISTINCT ((((v0.c0)) BETWEEN ((vt1.c0)) AND ((v0.c2))) IN ()), (v0.c2 COLLATE BINARY IN ()), (- (((v0.c2) NOTNULL))) FROM v0, vt1 WHERE (((((((NULL)OR(NULL)))OR(0.8724227879513592)))==(((NULL) IS TRUE)))); -- 0ms;
SELECT ALL CAST(((vt1.c1)*(v0.c2)) AS REAL) FROM v0, vt1 GROUP BY (NOT (((v0.c2)IS NOT(v0.c0)))) HAVING ((SUM(vt1.c0)) NOT NULL); -- 1ms;
SELECT AVG(CAST(v0.c2 AS REAL)) OVER (), vt1.c0, CASE WHEN ((vt1.c1) BETWEEN (v0.c2) AND (v0.c2)) THEN NULL WHEN (((vt1.c0))=((vt1.c0))) THEN 0.96696025820762 WHEN (v0.c0 IN (v0.c0, vt1.c1)) THEN (((vt1.c1)) NOT BETWEEN ((v0.c2)) AND ((vt1.c0))) ELSE COUNT(vt1.c0) END FROM v0, vt1; -- 0ms;
SELECT CAST(((v0.c2)/(v0.c2)) AS REAL) FROM v0, vt1; -- 0ms;
SELECT ALL CAST(HEX(v0.c2) AS NUMERIC) FROM vt1 NOT INDEXED;SELECT ALL (((- (v0.c1))) ISNULL) FROM v0 WHERE (UPPER(DISTINCT ((8.56310124E8) NOT BETWEEN (NULL) AND (x'9e97')))); -- 0ms;
SELECT CAST(CASE v0.c2  WHEN vt1.c0 THEN vt1.c1 ELSE v0.c0 END AS NUMERIC), AVG((v0.c0 IN ())), ((v0.c1) NOT NULL) COLLATE NOCASE FROM vt1, v0 WHERE (json_array(((x'') NOT BETWEEN ('3~1&k\r') AND ('')), CAST(x'5320' AS INTEGER))); -- 1ms;
SELECT DISTINCT ((vt1.c0 COLLATE RTRIM)-(((x'')>=(v0.c0)))) FROM vt1 WHERE (CAST(((NULL)IS NOT(0.5599435251239319)) AS INTEGER));SELECT TOTAL((vt1.c1 IN ())) OVER () FROM vt1, v0 GROUP BY (((((v0.c2))<((v0.c1))))<(0.6418157045937034)); -- 0ms;
SELECT ALL v0.c0 FROM v0, vt1 LIMIT -371056365; -- 0ms;
SELECT DISTINCT ((CAST(v0.c0 AS REAL)) BETWEEN (GROUP_CONCAT(v0.c0)) AND (AVG(x''))) FROM vt1 WHERE (((((0Xffffffff9bc26556)%(''))) IS FALSE));SELECT ALL ((((~ (vt1.c1))))<((((v0.c0)<<(v0.c2))))) FROM vt1, v0 WHERE (CASE WHEN NULL THEN x'1890' END COLLATE RTRIM) ORDER BY ((((v0.c2)AND(v0.c0)))||((NOT (v0.c2))))  NULLS FIRST LIMIT -1766260788; -- 1ms;
SELECT ALL ((vt1.c0 COLLATE NOCASE) IS TRUE) FROM vt1 GROUP BY (NOT (((v0.c1)<(v0.c1))));SELECT DISTINCT CASE SQLITE_COMPILEOPTION_USED(v0.c0)  WHEN (('f7,|stnE')IS NOT(vt1.c1)) THEN ((v0.c0) NOT BETWEEN (vt1.c0) AND (v0.c1)) WHEN (- (v0.c2)) THEN v0.c2 COLLATE NOCASE WHEN CASE WHEN vt1.c0 THEN v0.c2 END THEN vt1.c0 COLLATE BINARY ELSE CAST(v0.c2 AS REAL) END FROM v0, vt1; -- 0ms;
SELECT ALL FIRST_VALUE(x'') OVER () FROM v0 WHERE ((~ ((((NULL))>=((0.762323908749817)))))); -- 0ms;
SELECT ALL ((LIKELY(DISTINCT 0.58306909081784))||(((vt1.c1)%(v0.c0)))) FROM vt1, v0 LIMIT 1716475202 OFFSET 271412340; -- 0ms;
SELECT ALL CASE WHEN ((0.013338447749045246) IS FALSE) THEN (NOT (v0.c1)) WHEN CAST(v0.c1 AS NUMERIC) THEN CAST(v0.c2 AS TEXT) WHEN CASE WHEN vt1.c1 THEN v0.c0 END THEN ((1.472627507E9)+(v0.c1)) WHEN (+ (v0.c2)) THEN (~ (vt1.c0)) WHEN ((((v0.c1)AND(v0.c1)))OR(v0.c2)) THEN UNLIKELY(DISTINCT v0.c1) END FROM vt1 WHERE ((((((x'')%('-273186264'))))<((((x'') BETWEEN (0.8327729486241927) AND ('1284801807'))))));SELECT ALL ((((v0.c0)>=('')))+(NULL)) FROM vt1, v0 WHERE (x''); -- 0ms;
SELECT DISTINCT (- (UNLIKELY(v0.c2))) FROM vt1, v0 WHERE (((((0x7c7c3490) IS TRUE)) IS TRUE)); -- 0ms;
SELECT DISTINCT v0.c0 FROM v0; -- 0ms;
SELECT ALL ((CASE WHEN vt1.c0 THEN v0.c1 WHEN vt1.c1 THEN x'edaf' WHEN v0.c1 THEN vt1.c0 ELSE vt1.c0 END) BETWEEN (v0.c2 COLLATE BINARY) AND (((((vt1.c0)OR(vt1.c1)))OR(v0.c0)))), PERCENT_RANK() OVER ( ORDER BY ((((((((v0.c1)AND(vt1.c1)))OR(v0.c1)))AND(v0.c0)))OR(v0.c1)) COLLATE NOCASE  NULLS LAST, ((((CASE 0.13778249260812436  WHEN v0.c2 THEN v0.c0 END)OR(0.6553932307597476)))AND(((x'')/(v0.c2)))) ASC), ((CAST(v0.c0 AS BLOB))AND(((NULL) NOT BETWEEN (v0.c2) AND (vt1.c1)))) FROM vt1 ORDER BY (((0X76b0000d)IS(vt1.c1)) IN ());SELECT DISTINCT ((vt1.c0 COLLATE BINARY)LIKE((((vt1.c1)) BETWEEN ((v0.c2)) AND ((vt1.c1))))) FROM vt1 WHERE (((('')GLOB(-702461227)) IN ())) ORDER BY x'de5c' COLLATE BINARY ASC  NULLS FIRST, (((v0.c1))>=((v0.c0))) COLLATE RTRIM ASC, ((((vt1.c0) BETWEEN (vt1.c0) AND (vt1.c1)))LIKE(CAST(v0.c2 AS REAL))) DESC;SELECT ABS(((v0.c2) BETWEEN (v0.c2) AND (v0.c2))), ((CAST(v0.c2 AS REAL)) NOT BETWEEN ((v0.c2 IN ())) AND (0X3a311209 COLLATE NOCASE)), (((((vt1.c1)) NOT BETWEEN ((v0.c1)) AND ((NULL)))) IS TRUE), ((load_extension(vt1.c0)) BETWEEN (((((((((v0.c2)AND(v0.c0)))AND(vt1.c1)))OR(v0.c0)))OR(vt1.c0))) AND ((- (v0.c1)))), NULL, (((((v0.c2) ISNULL)))==(('822309976'))), ((SUM(v0.c2)) NOTNULL) FROM v0, vt1 GROUP BY ((v0.c1 COLLATE NOCASE)!=(0.9525688549875568)) HAVING (- ((- (v0.c1))));SELECT DISTINCT NULL FROM vt1 WHERE (((0.16930984347496159)IS(NULL)) COLLATE NOCASE); -- 0ms;
SELECT DISTINCT (((((((vt1.c0)AND(v0.c2)))AND(v0.c0)), ((((((((x'01bbd772')AND(v0.c2)))AND(vt1.c1)))AND(v0.c0)))OR(v0.c0)), CAST(v0.c1 AS TEXT)))>=((((v0.c1) IS TRUE), ((v0.c1) IS TRUE), ((v0.c0) BETWEEN (v0.c0) AND (v0.c1))))) FROM vt1;SELECT ((+ (0.2989630628584844)) IN ()) FROM v0, vt1 WHERE ((NOT (NULL COLLATE NOCASE))); -- 1ms;
SELECT ALL json_array_length(((v0.c0) NOT NULL), (NOT (v0.c0))) FROM v0, vt1 GROUP BY ((vt1.c0 COLLATE RTRIM)LIKE(CASE NULL  WHEN x'' THEN vt1.c1 WHEN vt1.c0 THEN vt1.c1 WHEN vt1.c1 THEN vt1.c0 ELSE v0.c0 END)), ((v0.c0 COLLATE NOCASE) IS TRUE), ((((vt1.c1) BETWEEN (v0.c1) AND (v0.c1)))/(0.2931060308796828)), (((v0.c1)) BETWEEN ((CAST(v0.c2 AS REAL))) AND ((((((NULL)OR(v0.c1)))AND(vt1.c0))))), v0.c2 HAVING (NOT (v0.c0)) COLLATE RTRIM;SELECT ALL GROUP_CONCAT(v0.c0 COLLATE RTRIM COLLATE BINARY) FILTER(WHERE (((((v0.c0)IS(0.9005371708178628))))<=((((vt1.c0)OR(vt1.c1)))))) OVER () FROM vt1 WHERE ((((('-1322385125')*('vﳳK3mTuge'))) IS TRUE));SELECT ALL ((((vt1.c1) BETWEEN (vt1.c0) AND (v0.c0)))AND(((x'10a0') IS TRUE))) FROM vt1;SELECT DISTINCT ((((v0.c0)OR(((v0.c1) BETWEEN (v0.c0) AND (1.126622381E9)))))AND(((v0.c0)-(vt1.c1)))), (- (x'9885')), 0.39734485141715004 FROM vt1;SELECT TRIM(DISTINCT 0.10867840171724763) FROM vt1; -- 0ms;
SELECT DISTINCT ((CASE vt1.c0  WHEN vt1.c1 THEN vt1.c1 END)OR('wPOSmy')) FROM vt1, v0 WHERE (ROUND(x'' COLLATE NOCASE, ((0.22768357688611618) NOT NULL))); -- 1ms;
SELECT ALL ((((v0.c1)AND(0.6888403147335236)))OR(v0.c2)) COLLATE BINARY FROM vt1 LIMIT 783548202;SELECT DISTINCT CASE WHEN (((v0.c0)) BETWEEN ((v0.c0)) AND ((v0.c0))) THEN '0.9501087882105917' ELSE vt1.c0 END FROM v0, vt1; -- 0ms;
SELECT DISTINCT ((COALESCE(DISTINCT v0.c2, vt1.c1)) BETWEEN (((vt1.c1)IS NOT(v0.c0))) AND (((((vt1.c0)AND(vt1.c1)))OR(v0.c1)))) FROM v0;SELECT DISTINCT (((SUM(vt1.c1)))<>((vt1.c0 COLLATE BINARY))), 0.849773825030456, CASE WHEN v0.c1 THEN vt1.c1 ELSE v0.c0 END COLLATE RTRIM, (((vt1.c0)) BETWEEN ((NULL)) AND ((vt1.c1))), 0.8443797364573963 FROM v0, vt1; -- 0ms;
SELECT TOTAL(((v0.c0) NOT BETWEEN (v0.c1) AND (v0.c1))) OVER () FROM vt1;SELECT ALL TOTAL(((v0.c2) IS TRUE)) FILTER(WHERE ((+ (v0.c1)) IN ((((v0.c1)) BETWEEN ((v0.c1)) AND ((NULL)))))) OVER ( ORDER BY (('406548119') IS FALSE)), NULL, CAST(((v0.c2)>>(v0.c1)) AS BLOB), (v0.c1 IN ()), (((- (v0.c1)))IS NOT(CASE v0.c2  WHEN v0.c2 THEN v0.c0 ELSE v0.c1 END)) FROM v0 GROUP BY ((((v0.c0) NOTNULL))IS(CAST(vt1.c0 AS TEXT)));SELECT COUNT(*), DENSE_RANK() OVER (), ((CAST(1.783862539E9 AS BLOB))IS NOT(TRIM(vt1.c1))), ((vt1.c0) BETWEEN ((- (v0.c2))) AND ((v0.c0 IN (x'03e9')))), CASE WHEN v0.c2 COLLATE BINARY THEN CASE v0.c2  WHEN v0.c0 THEN v0.c2 WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c2 END ELSE ((v0.c2)IS(v0.c0)) END FROM vt1, v0 WHERE (LIKE(((((NULL)AND('!Ub綜')))AND(x'')), (+ (NULL)))); -- 0ms;
SELECT DISTINCT (((vt1.c1) IS TRUE) IN (0.8593249989009311)) FROM v0 ORDER BY SQLITE_VERSION() DESC;SELECT ALL CAST(((((vt1.c0)AND(0X1c63a9ee)))OR(v0.c2)) AS TEXT) FROM vt1, v0; -- 0ms;
SELECT DISTINCT ((((v0.c2) IS TRUE))IS(((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)))) FROM v0 WHERE (0.4029074765105818);SELECT DISTINCT ((- (v0.c1)) IN ()) FROM v0 ORDER BY (x'' IN ())  NULLS LAST; -- 0ms;
SELECT ALL (((~ (vt1.c0))) NOT BETWEEN (CAST(v0.c2 AS BLOB)) AND (v0.c1)) FROM v0, vt1 WHERE ((((851436315)) BETWEEN ((((((934510183)OR(NULL)))OR('Wsfm>')))) AND ((CASE WHEN x'' THEN '-2069342395' WHEN NULL THEN NULL WHEN '\rp' THEN NULL ELSE '' END)))); -- 1ms;
SELECT DISTINCT vt1.c0 FROM v0, vt1; -- 0ms;
SELECT v0.c2, ((COUNT(vt1.c1))==(AVG(vt1.c1))), v0.c0 FROM v0 WHERE ((((('-1940163417')GLOB(x'')))+(x'2ec8' COLLATE BINARY)));SELECT ((((v0.c2 COLLATE BINARY)AND(CASE v0.c2  WHEN vt1.c0 THEN v0.c2 WHEN v0.c1 THEN v0.c2 WHEN vt1.c0 THEN vt1.c0 WHEN v0.c1 THEN vt1.c1 WHEN NULL THEN v0.c2 END)))OR(x'')) FROM vt1;SELECT DISTINCT ((((((((CASE WHEN v0.c0 THEN vt1.c1 ELSE x'15ee' END)OR(NULL COLLATE RTRIM)))OR(((v0.c2) NOT BETWEEN (v0.c0) AND (vt1.c1)))))AND(CAST(v0.c2 AS TEXT))))OR(NULL)) FROM vt1, v0 WHERE ((NOT (TRIM(NULL)))); -- 0ms;
SELECT ALL COUNT(((v0.c0)OR(vt1.c1))) FILTER(WHERE load_extension((((v0.c0)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c0))))) OVER () FROM v0;SELECT DISTINCT NTILE(((((((v0.c1)AND(v0.c1)))AND(0.9773779189100632))) BETWEEN ((+ (v0.c0))) AND (((v0.c0)<=(v0.c1))))) OVER () FROM v0 WHERE (CASE (((('')OR(NULL)))OR(x''))  WHEN LTRIM(x'', x'') THEN IFNULL('-2013595058', NULL) ELSE ((NULL) ISNULL) END); -- 1ms;
SELECT DISTINCT CAST(((((((((vt1.c0)OR(vt1.c1)))OR(v0.c2)))AND(v0.c1)))OR(vt1.c1)) AS REAL), ROW_NUMBER() OVER (), vt1.c1 FROM vt1 WHERE (((CAST(NULL AS REAL))==((('(p') IS TRUE))));SELECT DISTINCT CAST(v0.c1 AS TEXT) COLLATE NOCASE FROM v0 LIMIT 1305421172; -- 0ms;
SELECT DISTINCT (ROUND(v0.c2, '1e500') IN (CAST(x'' AS INTEGER))) FROM v0, vt1 WHERE (SUBSTR((0.8638146144942201 IN ()), NULL)) GROUP BY ((vt1.c1 IN ()) IN (((v0.c0)|(v0.c0)))), CASE WHEN vt1.c1 COLLATE BINARY THEN CAST(x'80a7' AS BLOB) ELSE ((vt1.c1)>>(NULL)) END, CAST(v0.c0 COLLATE NOCASE AS REAL) HAVING CASE ((v0.c1) IS FALSE)  WHEN (NOT (v0.c1)) THEN v0.c0 ELSE ((vt1.c1)<>(v0.c0)) END; -- 0ms;
SELECT ((CAST(NULL AS NUMERIC))&(((v0.c2)>>(v0.c2)))) FROM vt1, v0 WHERE (CASE WHEN ((x'')|(0.6581532365977263)) THEN 0.2931060308796828 END); -- 0ms;
SELECT DISTINCT v0.c0, v0.c0, ((CAST(vt1.c1 AS TEXT)) IS FALSE) FROM v0, vt1 WHERE (-2013749696); -- 0ms;
SELECT DISTINCT ((((((v0.c0)OR(v0.c0)))AND(vt1.c0)))*(((v0.c2)<<(vt1.c0)))), ((((CAST(vt1.c0 AS INTEGER))AND(ABS(vt1.c1))))OR(MIN(vt1.c0))), -7.5224669E7 FROM v0, vt1; -- 1ms;
SELECT DISTINCT (((vt1.c0)) NOT BETWEEN ((vt1.c1)) AND ((v0.c1))) COLLATE BINARY FROM v0;SELECT DISTINCT GROUP_CONCAT(((v0.c2) BETWEEN (v0.c2) AND (v0.c1))) OVER () FROM v0 WHERE ((- (MIN(NULL, '䅞~', x'', x'')))); -- 0ms;
SELECT DISTINCT TOTAL(UNICODE(v0.c0)) COLLATE NOCASE FROM vt1, v0 INTERSECT SELECT DISTINCT ((((v0.c2) BETWEEN (vt1.c0) AND (NULL)))LIKE(((v0.c1)<=(v0.c0)))) FROM vt1 WHERE (CASE WHEN HEX(0.9215795530224842) THEN CASE WHEN NULL THEN x'a90a' END WHEN ((0.3556086196885492)+(0.16618502914428557)) THEN (NULL IN ()) WHEN ((NULL)>=(NULL)) THEN CAST(0x102d6c74 AS INTEGER) END) LIMIT -2042360452 OFFSET -2061828897;SELECT DISTINCT (((((v0.c0, v0.c1, vt1.c1))>=((v0.c0, NULL, '҃xim%7'))))IS NOT(TOTAL(v0.c1))) FROM v0, vt1 WHERE (((((x'') NOT BETWEEN (x'f16a') AND (0.5425497855302366)))IS('755101974' COLLATE RTRIM))); -- 0ms;
SELECT DISTINCT CASE (vt1.c1 IN ())  WHEN (((vt1.c0, v0.c2, vt1.c0, v0.c2, vt1.c1))==((vt1.c0, vt1.c0, v0.c2, vt1.c1, vt1.c0))) THEN '~.' WHEN CAST(vt1.c1 AS INTEGER) THEN (NOT (vt1.c0)) WHEN vt1.c0 COLLATE BINARY THEN vt1.c0 COLLATE RTRIM END, (((vt1.c0, vt1.c1, v0.c1)) NOT BETWEEN ((IFNULL(DISTINCT vt1.c1, vt1.c0), ((v0.c1) BETWEEN (vt1.c0) AND (vt1.c1)), CAST(v0.c0 AS INTEGER))) AND ((CASE WHEN v0.c1 THEN v0.c0 ELSE v0.c1 END, ((vt1.c0) NOT BETWEEN (v0.c1) AND (v0.c2)), TRIM(v0.c2, vt1.c1)))), CAST(((vt1.c0) IS TRUE) AS INTEGER) FROM v0;SELECT ALL CAST(((vt1.c1)IS(v0.c2)) AS NUMERIC), v0.c0, CAST(AVG(vt1.c1) AS REAL), UNLIKELY(CASE WHEN vt1.c1 THEN vt1.c1 END), CASE WHEN CASE WHEN v0.c2 THEN v0.c0 ELSE v0.c0 END THEN CAST(v0.c2 AS BLOB) END FROM v0;SELECT SUBSTR(v0.c1, v0.c2) COLLATE RTRIM FROM vt1;SELECT DISTINCT RANK() OVER ( RANGE BETWEEN ((((vt1.c0)&(v0.c2))) ISNULL) PRECEDING AND (NOT ((v0.c0 IN (v0.c2)))) PRECEDING) FROM vt1, v0;SELECT DISTINCT (((v0.c2, v0.c0, vt1.c0)) NOT BETWEEN ((COUNT(v0.c0), (((v0.c0, v0.c2, v0.c1, x'', v0.c0))>((v0.c0, vt1.c1, v0.c2, vt1.c1, vt1.c1))), ((v0.c1) BETWEEN (v0.c2) AND (v0.c1)))) AND (((+ (v0.c1)), (v0.c2 IN ()), v0.c0 COLLATE BINARY))), v0.c0, ((((v0.c1) NOTNULL))||(((((x'')AND(v0.c2)))OR(vt1.c1)))) FROM vt1, v0 LIMIT -1654100443 OFFSET 1330380294; -- 0ms;
SELECT DISTINCT ((v0.c0 COLLATE NOCASE)%(CASE v0.c1  WHEN v0.c0 THEN 0x59cc68b6 END)) FROM vt1, v0; -- 0ms;
SELECT ALL ((((((((MIN(v0.c2))AND(v0.c1 COLLATE RTRIM)))OR(UPPER(vt1.c0))))OR(((vt1.c0)!=(vt1.c1)))))AND((((v0.c0)) NOT BETWEEN ((vt1.c0)) AND ((v0.c2))))), ((CASE WHEN v0.c0 THEN v0.c2 END)LIKE(CAST(0.05478312789557527 AS BLOB))), ((((v0.c1) BETWEEN (v0.c1) AND (v0.c1)))-(CAST(vt1.c1 AS INTEGER))) FROM v0, vt1 WHERE (((0.9628416419597595) NOT NULL)); -- 1ms;
SELECT DISTINCT ((((((vt1.c0)OR(0.6324008526081234)))OR(v0.c0))) NOTNULL), TOTAL((- (v0.c2))) OVER (), (((vt1.c1) NOT BETWEEN (vt1.c1) AND (v0.c1)) IN ()) FROM vt1 WHERE (((((1.438371779E9) ISNULL))>(((('-608621210'))>((NULL))))));SELECT DISTINCT CASE WHEN ((vt1.c0) IS TRUE) THEN LIKELY(vt1.c0) ELSE v0.c2 END FROM v0, vt1; -- 0ms;
SELECT DISTINCT vt1.c1 FROM v0 WHERE (((x'' IN ()) IN ()));SELECT DISTINCT ((((CASE WHEN v0.c0 THEN v0.c1 END)OR(((vt1.c1)AND(NULL)))))AND(222744268)), ((- (v0.c1)) IN ()), RANK() OVER () FROM vt1;SELECT DISTINCT json_remove(CASE WHEN vt1.c1 THEN vt1.c1 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN vt1.c1 ELSE NULL END, (vt1.c0 IN (v0.c2, vt1.c1)), ((v0.c0)>>(vt1.c0)), NULLIF(v0.c0, v0.c2)) FROM vt1 GROUP BY ((CASE WHEN vt1.c1 THEN vt1.c1 END)IS NOT((NOT (v0.c1)))) HAVING CASE v0.c2  WHEN (NOT (vt1.c0)) THEN (+ (vt1.c1)) ELSE (((vt1.c1, 0.4800487179865577, v0.c1)) BETWEEN ((v0.c0, vt1.c1, v0.c0)) AND ((v0.c1, vt1.c0, v0.c1))) END;SELECT DISTINCT (((((v0.c2)|(v0.c1))))>=((SUM(vt1.c0)))), (((v0.c1) BETWEEN (v0.c2) AND (vt1.c0)) IN ()), COUNT(*) OVER () FROM v0 WHERE (CAST((('')-('-507251721')) AS BLOB));SELECT DISTINCT vt1.c0 FROM vt1, v0 ORDER BY ((-2117037023) NOT BETWEEN ((vt1.c1 IN ())) AND (CAST(v0.c0 AS TEXT))) DESC  NULLS LAST; -- 0ms;
SELECT DISTINCT CASE WHEN (vt1.c0 IN (vt1.c0)) THEN ((((vt1.c1)AND(vt1.c1)))OR(v0.c2)) ELSE NULL END, (((((vt1.c1)*(v0.c0))))>((CAST(v0.c2 AS BLOB)))), CAST(vt1.c0 AS NUMERIC) COLLATE BINARY FROM v0, vt1 WHERE ((- ((0.7113905979646069 IN ())))); -- 0ms;
SELECT v0.c2 FROM v0, vt1 WHERE (((NULL COLLATE BINARY) IS FALSE)); -- 0ms;
SELECT CAST(v0.c0 COLLATE NOCASE AS INTEGER) FROM vt1;SELECT DISTINCT (((0.6188848760073121))==((CAST(vt1.c1 AS INTEGER)))) FROM v0, vt1; -- 0ms;
SELECT ALL NTILE(0.8005805546507877) OVER () FROM v0 WHERE ((- (((((4.48072188E8)OR(NULL)))AND(0.7455059237237737))))) GROUP BY (((vt1.c0 IN ())) BETWEEN (((vt1.c1)GLOB(v0.c1))) AND ((((vt1.c0))==((v0.c0))))) HAVING CASE WHEN ((vt1.c1) NOT BETWEEN (v0.c0) AND (vt1.c0)) THEN (vt1.c0 IN ()) END;SELECT DISTINCT MIN(((vt1.c0)IS NOT(vt1.c1))) FROM v0, vt1; -- 0ms;
SELECT (((+ (v0.c0)))-((('') BETWEEN (v0.c2) AND (vt1.c1)))), AVG((vt1.c1 IN ())) OVER (), CUME_DIST() OVER ( ORDER BY ABS(((v0.c0) ISNULL)) DESC  NULLS LAST) FROM vt1, v0 WHERE (((((NULL) IS TRUE))AND(((0xffffffffc321d4e4)>('YqP%'))))); -- 0ms;
SELECT ((AVG(vt1.c1)) IS TRUE), vt1.c0, (v0.c1 COLLATE BINARY IN ()) FROM v0 WHERE (CASE WHEN ((NULL)==('')) THEN '-1589616332' COLLATE RTRIM END);SELECT DISTINCT NTILE((- (CASE WHEN vt1.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN v0.c0 THEN vt1.c0 END))) OVER ( ORDER BY v0.c2  NULLS LAST) FROM v0, vt1 WHERE (((('186118930') NOT BETWEEN (NULL) AND ('')) IN ())); -- 0ms;
SELECT DISTINCT TRIM(((v0.c1)%(vt1.c1)), CAST(v0.c2 AS INTEGER)) FROM vt1 WHERE (((((-1400240661 COLLATE NOCASE)AND(((((0.4392741453922415)AND(0.21321436879599043)))OR('1131806009')))))AND(((NULL)*('-829804530'))))) GROUP BY ((((v0.c0)%(NULL))) ISNULL) HAVING 0X7aa3df71;SELECT ((vt1.c0 COLLATE BINARY)|(v0.c0)) FROM vt1;SELECT ALL (- ((v0.c0 IN (v0.c0)))) FROM v0 WHERE (CAST('-810433651' AS REAL) COLLATE BINARY); -- 1ms;
SELECT ALL ((((vt1.c0)<<(v0.c2))) NOT BETWEEN ((- (vt1.c1))) AND (((x'89ca')>>(v0.c0)))), LIKELIHOOD(v0.c0, 0.7439589066057967), AVG(CAST(v0.c2 AS REAL)) FROM vt1, v0 WHERE (((((0x40f54b98) NOT NULL)) NOT BETWEEN ((('0.5616441696437676')+(NULL))) AND (((-218665512) NOT BETWEEN ('856310124') AND (NULL))))) GROUP BY ((v0.c0) NOT BETWEEN ((v0.c1 IN ())) AND (x'')) HAVING CASE WHEN (+ (v0.c0)) THEN LIKELIHOOD(DISTINCT v0.c2, 0.17319481136348158) ELSE ((NULL) BETWEEN (v0.c2) AND (vt1.c0)) END; -- 0ms;
SELECT DISTINCT ((NULLIF(DISTINCT v0.c0, v0.c2)) ISNULL) FROM v0 GROUP BY ((((v0.c2) IS TRUE))<=(CASE WHEN v0.c2 THEN vt1.c0 ELSE v0.c0 END));SELECT DISTINCT GROUP_CONCAT((v0.c2 IN (v0.c0))), vt1.c1, COUNT((~ (v0.c1))) OVER () FROM vt1;SELECT DISTINCT (v0.c0 IN ()) FROM vt1; -- 0ms;
SELECT DISTINCT CASE WHEN (((NULL)) BETWEEN ((vt1.c0)) AND ((v0.c0))) THEN ((vt1.c1) ISNULL) END FROM v0 LEFT OUTER JOIN vt1 ON CAST(CASE WHEN v0.c2 THEN v0.c0 END AS INTEGER) WHERE (627246144); -- 0ms;
SELECT DISTINCT v0.c2, RANK() OVER ( ORDER BY ((v0.c1)&(CASE WHEN vt1.c1 THEN vt1.c0 END)), (((((v0.c2, v0.c1, v0.c1))>=((vt1.c0, v0.c0, v0.c1))))||(((v0.c0)IS NOT(vt1.c1)))) DESC, ((((v0.c1)<=(v0.c1)))%(CAST(vt1.c0 AS TEXT)))), ((((((0.7884379900054794) BETWEEN (vt1.c1) AND (vt1.c0)))OR(0.7308010160548271)))OR(CASE WHEN v0.c2 THEN vt1.c0 END)) FROM v0;SELECT DISTINCT CASE ((x'27ea')IS(vt1.c1))  WHEN GROUP_CONCAT(v0.c0) THEN TRIM(v0.c0) WHEN '.' THEN (((vt1.c1, v0.c2, vt1.c1))<((vt1.c0, vt1.c1, 0.2024130314609357))) WHEN IFNULL(DISTINCT v0.c1, vt1.c0) THEN CASE WHEN v0.c0 THEN vt1.c0 END ELSE CASE v0.c0  WHEN NULL THEN vt1.c1 END END FROM vt1, v0 WHERE ((((+ (x'ef88')))/(CASE WHEN '' THEN NULL END))); -- 1ms;
SELECT ALL (NOT (((v0.c0) NOT BETWEEN (v0.c1) AND (vt1.c1)))) FROM v0;SELECT ((((v0.c1)<>(v0.c1))) NOT BETWEEN (x'') AND ((+ (v0.c0)))), ((((0.8146759917897083)OR(((v0.c0) IS FALSE))))AND((((v0.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c2))))), (+ (((v0.c1)IS NOT(v0.c2)))) FROM vt1 WHERE ((((CASE 0.7455059237237737  WHEN NULL THEN NULL WHEN 0.7217063460159753 THEN 0.2501654901900524 WHEN x'' THEN 0.5010519107106333 END, (+ (NULL)), ((669958482)||('')), (('')IS NOT(0.467639500823819)), (NULL IN (x''))))!=((((((x'')AND('f9R')))AND(NULL)), NULLIF(x'', 'Y'), ((((((((0.6421194825555858)AND('a_CQd')))OR(NULL)))AND('0.43257688967427277')))AND(x'')), (((x'e398')) NOT BETWEEN (('-866405031')) AND ((-1.011117619E9))), ((((((((x'')OR(0.34424767777552434)))AND('')))AND('Pr{D')))AND(NULL)))))) ORDER BY CASE WHEN TIME(v0.c1, v0.c0, v0.c0, v0.c0, v0.c0) THEN (+ (v0.c2)) WHEN ((vt1.c0)<=(vt1.c0)) THEN (((vt1.c0))!=((v0.c0))) WHEN UPPER(DISTINCT vt1.c0) THEN CAST(NULL AS INTEGER) END  NULLS FIRST;SELECT DISTINCT CAST(v0.c2 AS REAL) COLLATE BINARY FROM vt1, v0; -- 0ms;
SELECT (((x'4318808660f4', v0.c1, v0.c0)) BETWEEN (((- (v0.c1)), (((v0.c1, vt1.c0, v0.c0)) BETWEEN ((vt1.c1, vt1.c1, vt1.c1)) AND ((v0.c2, v0.c0, vt1.c1))), (('-2035360272')<=(v0.c0)))) AND ((((((vt1.c1)OR(vt1.c0)))OR(v0.c0)), v0.c0 COLLATE RTRIM, COUNT(*)))) FROM v0;SELECT DISTINCT MIN((~ (NULL)) COLLATE RTRIM), CAST(CAST(v0.c1 AS REAL) AS TEXT), (((NOT (vt1.c1))) ISNULL) FROM vt1, v0; -- 1ms;
SELECT (((((v0.c1)<(v0.c2))))<((((((vt1.c1)AND(x'')))OR(v0.c2))))), LAG((((vt1.c0)) BETWEEN ((CAST(v0.c0 AS BLOB))) AND ((LIKE('', vt1.c1, 'O')))), ((((((v0.c1)AND(vt1.c1)))OR(vt1.c0))) BETWEEN (ABS(DISTINCT v0.c2)) AND (CAST(vt1.c1 AS INTEGER))), ((((vt1.c0) BETWEEN (-184334636) AND (v0.c2))) NOT BETWEEN (((((((((v0.c2)AND(x'')))AND(vt1.c1)))AND(vt1.c0)))AND(v0.c0))) AND (CASE v0.c2  WHEN v0.c0 THEN v0.c1 ELSE v0.c0 END))) OVER (), CASE (- (vt1.c1))  WHEN CAST(v0.c1 AS TEXT) THEN (((vt1.c1))>((v0.c2))) WHEN (((vt1.c1)) BETWEEN ((v0.c0)) AND ((v0.c1))) THEN (((v0.c0))>((v0.c2))) WHEN vt1.c1 COLLATE BINARY THEN ((v0.c1) NOTNULL) END FROM v0, vt1 ORDER BY v0.c0 DESC; -- 0ms;
SELECT ALL ((((v0.c0)OR(vt1.c0 COLLATE RTRIM)))OR('|GcwWs')) FROM v0 WHERE (CASE (- (x''))  WHEN CAST('' AS REAL) THEN IFNULL(DISTINCT '1654775458', -237647035) ELSE ((((NULL)OR(0.42565740863166934)))OR(NULL)) END);SELECT ALL (NOT ((vt1.c1 IN ()))), CASE WHEN ((v0.c1) ISNULL) THEN ((v0.c0) BETWEEN (vt1.c0) AND (vt1.c0)) WHEN ((v0.c0) BETWEEN (vt1.c0) AND (vt1.c0)) THEN ((v0.c0) BETWEEN (v0.c1) AND (vt1.c1)) WHEN (((vt1.c1)) NOT BETWEEN ((v0.c1)) AND ((v0.c2))) THEN ((v0.c0) NOT BETWEEN (v0.c2) AND (v0.c1)) ELSE v0.c0 COLLATE BINARY END, (+ (v0.c1)) FROM v0;SELECT ALL COUNT(v0.c0) OVER () FROM vt1, v0; -- 0ms;
SELECT DISTINCT LAG(TYPEOF(((((vt1.c0)AND(vt1.c0)))OR(vt1.c1))), ((vt1.c1)/(vt1.c1)) COLLATE RTRIM, vt1.c1) OVER () FROM vt1 WHERE ((+ ((('-2013749696') NOT BETWEEN (x'') AND (x'4759e0d5'))))) LIMIT 1766234710 INTERSECT SELECT ALL ((((((((((((((v0.c0)AND(v0.c1)))OR(v0.c1)))OR(v0.c1)))OR(v0.c1)))AND(vt1.c0)))AND(v0.c0))) BETWEEN (CASE WHEN v0.c1 THEN v0.c1 END) AND (MAX(v0.c0))) FROM v0 WHERE ((((((x'0826') ISNULL)))<(((('')>(0x26a12df))))));SELECT ALL ((vt1.c1) NOT NULL), ((CASE v0.c0  WHEN vt1.c0 THEN v0.c2 WHEN v0.c2 THEN vt1.c0 WHEN vt1.c0 THEN v0.c0 ELSE vt1.c0 END) BETWEEN ((- (vt1.c1))) AND (((v0.c1) IS TRUE))), (((('')OR(((v0.c1)==(vt1.c1)))))AND(((v0.c0)*(vt1.c0)))) FROM v0, vt1; -- 0ms;
SELECT DISTINCT (- (x'' COLLATE BINARY)) FROM vt1; -- 0ms;
SELECT DISTINCT (((vt1.c0)) BETWEEN (((((v0.c1)) BETWEEN ((v0.c2)) AND ((v0.c1))))) AND ((((x'd891')IS NOT(vt1.c0))))), (((vt1.c1)<=(vt1.c1)) IN ()), COUNT(((6.75992795E8) NOT BETWEEN (vt1.c0) AND (NULL))) OVER () FROM v0, vt1; -- 1ms;
SELECT DISTINCT (~ (v0.c2)) COLLATE BINARY FROM vt1, v0 WHERE ((+ (((NULL)||(0.1501109435078024))))); -- 0ms;
SELECT (NOT (HEX(v0.c2))), CAST((- (x'')) AS BLOB), (~ (v0.c1 COLLATE NOCASE)) FROM v0 WHERE (((CAST(0.24969526357336558 AS INTEGER)) NOT BETWEEN (CASE WHEN 0.4526761347689603 THEN x'' ELSE 0.024743602667039677 END) AND (NULL COLLATE RTRIM))); -- 0ms;
SELECT ALL LAST_VALUE(((((((((((((v0.c0)OR(v0.c1)))AND(v0.c0)))OR(v0.c1)))OR(CASE v0.c2  WHEN v0.c0 THEN v0.c1 END)))OR((((v0.c2)) NOT BETWEEN ((v0.c0)) AND ((v0.c1))))))OR((((v0.c2))>((NULL)))))) OVER () FROM v0 WHERE (((x'' IN ()) IN ())) ORDER BY ((((((((((vt1.c1) NOT BETWEEN (vt1.c1) AND (v0.c0)))AND((NOT (v0.c1)))))OR(CASE WHEN v0.c2 THEN vt1.c1 ELSE vt1.c1 END)))AND(CAST(v0.c2 AS BLOB))))AND((v0.c2 IN ())));SELECT DISTINCT GROUP_CONCAT(((((v0.c2)OR(v0.c2)))OR(x''))) COLLATE BINARY FROM vt1 WHERE ((((NOT (314595575)))>>(CASE WHEN '' THEN '\r!' WHEN 0.6720434869881314 THEN '' WHEN '-1280833896' THEN '' ELSE '3똉(SA3(8c' END))) GROUP BY CAST(((x'') BETWEEN (vt1.c0) AND (v0.c2)) AS INTEGER), (((+ (vt1.c0))) BETWEEN (CASE WHEN v0.c2 THEN vt1.c0 ELSE v0.c0 END) AND (COALESCE(DISTINCT v0.c0, v0.c1, vt1.c0, v0.c2))), ((v0.c0)&(v0.c1)) COLLATE BINARY, CASE WHEN SQLITE_SOURCE_ID() THEN ((v0.c0) BETWEEN (v0.c2) AND (v0.c2)) WHEN (- (v0.c1)) THEN ((v0.c2) NOT NULL) WHEN ((v0.c2)<>(vt1.c0)) THEN ((vt1.c0)IS NOT(v0.c0)) ELSE v0.c0 COLLATE NOCASE END, COALESCE(((((vt1.c1)AND(v0.c1)))OR(v0.c1)), v0.c1 COLLATE NOCASE) HAVING (((((v0.c0)) BETWEEN ((v0.c0)) AND ((vt1.c1))))!=((- (v0.c1))));SELECT DISTINCT ((((vt1.c1 IN ())))<=((CASE WHEN 0.3487413638437965 THEN vt1.c1 WHEN v0.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c1 ELSE vt1.c1 END))) FROM vt1, v0; -- 0ms;
SELECT ((TRIM(vt1.c1, vt1.c1)) BETWEEN (vt1.c1) AND (vt1.c1 COLLATE RTRIM)) FROM v0;SELECT DISTINCT (((+ (vt1.c1)))>=(NULL)) FROM v0 WHERE ((((((('')OR(0.835989386967213)))AND('P}5_wsSVC')))&(('*{bΩ' IN ()))));SELECT DISTINCT (((vt1.c0)>=(vt1.c1)) IN (((NULL) NOT BETWEEN (v0.c0) AND (vt1.c1)))), MAX(CAST(v0.c2 AS NUMERIC)), CASE (v0.c0 IN ())  WHEN (v0.c2 IN ()) THEN (((vt1.c1, vt1.c1, vt1.c1))<=((v0.c0, vt1.c0, v0.c2))) WHEN 0.4828910574764419 THEN v0.c2 COLLATE BINARY WHEN (('564036066')IS NOT(v0.c1)) THEN ((((vt1.c1)AND(v0.c0)))AND(vt1.c1)) END FROM vt1, v0 ORDER BY ((('9F輾4|')||(v0.c2)) IN (vt1.c0 COLLATE BINARY)) ASC; -- 0ms;
SELECT DISTINCT (('-617015556') ISNULL) FROM vt1, v0 WHERE ((((NULL))<(('-442248365'))) COLLATE NOCASE COLLATE BINARY); -- 0ms;
SELECT ALL v0.c2 FROM vt1, v0; -- 0ms;
SELECT ALL (((v0.c2)) BETWEEN ((((v0.c1) NOTNULL))) AND (('F 〙mFu&'))), ((PRINTF(vt1.c1, v0.c1, vt1.c1, vt1.c0, vt1.c1))>(SUM(v0.c0))), CAST((((x'')) NOT BETWEEN ((v0.c1)) AND ((0.12460036810474384))) AS NUMERIC) FROM vt1 WHERE (QUOTE(((NULL)LIKE(0xffffffffb5b508b0)))) ORDER BY ((((((((vt1.c0)OR('J<1mq')))AND(v0.c1)))AND((~ (v0.c1)))))AND((((v0.c1))>=(('-1101817298')))))  NULLS FIRST;SELECT DISTINCT (((v0.c2 IN (v0.c2, vt1.c0)))AND(vt1.c0 COLLATE BINARY)) FROM vt1;SELECT DISTINCT ((v0.c0) NOT NULL) COLLATE BINARY FROM vt1 WHERE (((((0.17916935651651456) NOT NULL))>=((~ (x'')))));SELECT (((v0.c2)LIKE(v0.c2)) IN (CAST(v0.c1 AS INTEGER))) FROM v0, vt1; -- 0ms;
SELECT ALL (+ (v0.c2 COLLATE RTRIM)), (MAX(v0.c2) IN (((v0.c0) IS FALSE))), CASE WHEN TOTAL(v0.c0) THEN TRIM(v0.c0) ELSE (((v0.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c0))) END FROM vt1, v0 WHERE (((((0.6276730386092525) IS FALSE)) NOT BETWEEN ((+ (x''))) AND (((NULL) NOT NULL)))) ORDER BY ((((((v0.c0)AND(v0.c2)))AND(vt1.c1))) IS FALSE) DESC; -- 0ms;
SELECT DISTINCT vt1.c1, (((((x'')AND(vt1.c0)))AND(vt1.c0)) IN (v0.c0)), (((vt1.c0)) NOT BETWEEN ((CAST(x'' AS REAL))) AND ((((vt1.c1)IS(v0.c0))))) FROM v0, vt1 WHERE ((((((0x4d07f1df)) NOT BETWEEN ((NULL)) AND (('{5}')))) NOT BETWEEN (((((0.5863107118574221)OR('1032256755')))AND(x'ee47'))) AND (0.6910539718810706 COLLATE BINARY))); -- 0ms;
SELECT DISTINCT ((((vt1.c1) IS TRUE))OR(CASE WHEN v0.c1 THEN v0.c0 END)), CAST(((((vt1.c1)OR(x'')))AND(v0.c2)) AS BLOB), (+ (v0.c0 COLLATE BINARY)), CASE WHEN (((v0.c0))<((vt1.c1))) THEN (((v0.c2, v0.c1, vt1.c0, v0.c1, v0.c2))<((vt1.c1, v0.c2, vt1.c1, v0.c2, v0.c2))) END, (((((v0.c1)) NOT BETWEEN ((v0.c0)) AND ((vt1.c0))))*(x'')) FROM vt1 WHERE ((((('') IS FALSE))!=(CAST('!<' AS INTEGER))));SELECT DISTINCT ((HEX(v0.c2)) ISNULL), CASE v0.c2  WHEN (NOT (vt1.c1)) THEN (((v0.c2))>((v0.c0))) WHEN ((v0.c0)>>(vt1.c1)) THEN TOTAL(v0.c0) WHEN ((vt1.c1)%(v0.c2)) THEN NULL ELSE ((vt1.c1) BETWEEN (vt1.c0) AND (vt1.c0)) END, ((0x240b646d)+(CASE '-246354249'  WHEN vt1.c1 THEN v0.c0 WHEN vt1.c1 THEN vt1.c1 WHEN v0.c2 THEN v0.c1 END)) FROM v0, vt1 ORDER BY ROUND(((v0.c2) BETWEEN (vt1.c0) AND (v0.c2)), -1096969908) DESC; -- 0ms;
SELECT ALL (((- (v0.c0)))LIKE(vt1.c0 COLLATE BINARY)) FROM v0, vt1; -- 0ms;
SELECT LIKELIHOOD(v0.c0, 0.9440185074663623) FROM vt1, v0; -- 0ms;
SELECT DISTINCT LAST_VALUE(ABS(((((((((vt1.c1)OR(vt1.c1)))AND(vt1.c1)))AND(vt1.c1)))OR(vt1.c0)))) OVER () FROM vt1 WHERE (((NULL)<=('A[&xB|')) COLLATE BINARY); -- 0ms;
SELECT DISTINCT (((vt1.c0)) NOT BETWEEN ((CAST(vt1.c1 AS INTEGER))) AND ((CAST(v0.c0 AS INTEGER)))) FROM v0;SELECT DISTINCT TYPEOF(DISTINCT CASE v0.c2  WHEN v0.c1 THEN v0.c2 END) FROM v0 WHERE (LOWER(DISTINCT ((1065746488) ISNULL))); -- 1ms;
SELECT v0.c1 FROM v0, vt1 NOT INDEXED WHERE (((((-1e500)IS(NULL)))<(LIKELIHOOD(DISTINCT 0.9472683690454545, 0.9184271668741246)))) ORDER BY (((- (vt1.c0)))<=((v0.c2 IN ()))) ASC  NULLS LAST; -- 0ms;
SELECT DISTINCT ((((((v0.c0)) NOT BETWEEN ((v0.c1)) AND ((vt1.c1)))))==((((v0.c1)>>(v0.c0))))) FROM vt1, v0 WHERE (CAST(CASE WHEN '[Y*W' THEN 0.33206083843993817 ELSE '-1679308282' END AS REAL)); -- 0ms;
SELECT DISTINCT CASE WHEN CAST(v0.c1 AS INTEGER) THEN TRIM(v0.c0, vt1.c1) END FROM vt1, v0; -- 0ms;
SELECT COUNT('') OVER ( GROUPS  CURRENT ROW EXCLUDE TIES), ((((((((((v0.c1)OR(v0.c0)))OR(v0.c0)))OR(v0.c0)))OR(v0.c1)))LIKE(AVG(vt1.c0))), CASE CASE vt1.c1  WHEN vt1.c1 THEN vt1.c0 ELSE v0.c2 END  WHEN GROUP_CONCAT(v0.c2) THEN v0.c0 ELSE ((v0.c2)OR(v0.c2)) END FROM vt1, v0 WHERE (((((x'f5d4')OR(x'3d4d')))*((('1976991792') NOT BETWEEN ('574349817') AND (0.9856573190124717))))); -- 0ms;
SELECT DISTINCT HEX(LOWER(v0.c1)) FROM v0 WHERE (CAST(x'' AS INTEGER)) GROUP BY ((((NULL)&(v0.c0)))IS(((v0.c1) NOT BETWEEN (vt1.c1) AND (vt1.c0)))) HAVING 0.0917070292686396;SELECT DISTINCT (((((((v0.c1))>((v0.c1))))OR(0.4669231891326556 COLLATE BINARY)))OR(((v0.c0) ISNULL))) FROM vt1 WHERE (CASE (('')<=(0.22270327878221896))  WHEN ((0.13450326647205624)LIKE(0.9981257192156414)) THEN ((x'')IS NOT(-879866187)) END);SELECT DISTINCT NTH_VALUE(json_array(CASE WHEN vt1.c0 THEN vt1.c1 ELSE '-634741913' END, vt1.c1, (((vt1.c0))>((vt1.c1))), (- (vt1.c1))), ((((vt1.c0)<(vt1.c1)))/((((vt1.c0, vt1.c1, NULL)) NOT BETWEEN ((vt1.c1, vt1.c1, vt1.c1)) AND ((vt1.c0, vt1.c1, vt1.c1)))))) OVER () FROM vt1 WHERE (((0.2426280969243122 IN ()) IN ((((NULL))<>((0X13ab7a30))), json_object('-1770539151', x''))));SELECT DISTINCT CASE WHEN CASE v0.c0  WHEN v0.c1 THEN v0.c2 WHEN v0.c2 THEN vt1.c1 WHEN vt1.c0 THEN v0.c1 ELSE v0.c0 END THEN v0.c0 END, CASE CASE vt1.c0  WHEN v0.c1 THEN vt1.c1 END  WHEN ((((((((((((v0.c0)OR(vt1.c1)))AND(v0.c2)))OR(v0.c0)))AND(v0.c0)))OR(vt1.c0)))OR(v0.c0)) THEN x'' ELSE ((vt1.c0) NOT BETWEEN (v0.c2) AND (vt1.c1)) END, (((vt1.c0)) BETWEEN ((NULL)) AND (((((vt1.c0))>((v0.c2)))))) FROM vt1 WHERE ((('1823869841')&(((((0Xffffffffa5df51fd)OR(NULL)))AND(''))))) ORDER BY (v0.c2 COLLATE RTRIM IN ((vt1.c0 IN ()))), CAST(((v0.c2)LIKE(vt1.c0)) AS TEXT) DESC, (((((((vt1.c0))!=((v0.c0))))AND(((vt1.c0) NOT BETWEEN (NULL) AND (vt1.c1)))))OR(((((x'51cb')AND(v0.c2)))OR(vt1.c0)))) DESC  NULLS FIRST;SELECT v0.c2 FROM vt1, v0; -- 1ms;
SELECT (((v0.c1)) BETWEEN (((((vt1.c0)) BETWEEN ((vt1.c1)) AND ((vt1.c1))))) AND ((TOTAL(v0.c1)))) FROM v0, vt1 WHERE (CAST((('9167312235587352891:1279057150796690834 1355545912010329973T') NOT BETWEEN (-1394076471) AND ('I{U)t}JT')) AS INTEGER)); -- 0ms;
SELECT DISTINCT vt1.c0 FROM vt1, v0 WHERE ((NOT (((x'2a6c0733e8ee')+(0.3793514768429548))))); -- 0ms;
SELECT DISTINCT ((((((vt1.c0)) BETWEEN ((v0.c1)) AND ((vt1.c0)))))<=((MAX(v0.c2)))) FROM v0, vt1 ORDER BY (- (((v0.c0) NOT BETWEEN (vt1.c0) AND (v0.c2)))) ASC  NULLS FIRST; -- 0ms;
SELECT DISTINCT IFNULL(DISTINCT (((v0.c1))<>((v0.c2))), vt1.c0 COLLATE RTRIM) FROM v0, vt1; -- 0ms;
SELECT ALL CASE CASE WHEN v0.c1 THEN v0.c0 WHEN v0.c0 THEN v0.c2 WHEN v0.c0 THEN v0.c0 END  WHEN highlight(v0.c2, v0.c2, '1279425347', vt1.c0) THEN CASE NULL  WHEN vt1.c0 THEN vt1.c0 END WHEN (((v0.c1)) NOT BETWEEN ((vt1.c1)) AND ((vt1.c0))) THEN ((v0.c0)/(vt1.c0)) WHEN ((vt1.c1)>>(x'')) THEN v0.c2 COLLATE RTRIM ELSE vt1.c1 COLLATE NOCASE END FROM vt1, v0;SELECT DISTINCT x'' FROM vt1, v0 WHERE (CAST(LENGTH('-673305965') AS TEXT)); -- 0ms;
SELECT DISTINCT ((((vt1.c1)<<(vt1.c0)))GLOB(((vt1.c1)OR(v0.c2)))) FROM v0, vt1 WHERE ((((((1.7976931348623157E308, x'', NULL)) NOT BETWEEN ((x'', NULL, 0Xffffffffc3bb91cd)) AND ((x'76e6', NULL, x'')))) NOT BETWEEN (((NULL) BETWEEN (NULL) AND (x'1b06b44b'))) AND ((NULL IN ('KU'''))))); -- 0ms;
SELECT DISTINCT ((((v0.c0) IS TRUE)) NOT BETWEEN (vt1.c0 COLLATE RTRIM) AND (((v0.c2)<(v0.c2)))) FROM vt1, v0 ORDER BY CASE '-218665512'  WHEN CAST(v0.c2 AS INTEGER) THEN ((NULL) NOT BETWEEN (v0.c1) AND (vt1.c0)) WHEN TRIM(vt1.c0, v0.c0) THEN ((v0.c1) IS FALSE) WHEN CASE WHEN vt1.c1 THEN v0.c1 ELSE vt1.c1 END THEN CASE v0.c1  WHEN vt1.c1 THEN NULL END ELSE CAST(v0.c0 AS REAL) END; -- 0ms;
SELECT DISTINCT x'' FROM vt1; -- 0ms;
SELECT ALL (v0.c1 COLLATE NOCASE IN (((((v0.c0)AND(v0.c2)))OR(v0.c0)), (vt1.c1 IN ()))) FROM vt1, v0 WHERE (((NULL COLLATE RTRIM) IS TRUE)); -- 0ms;
SELECT SUM(((((v0.c0)OR(v0.c0)))OR(vt1.c1))) COLLATE BINARY FROM v0 WHERE ((+ ((('{!') ISNULL))));SELECT 0.28399715790301994 FROM vt1, v0 GROUP BY NULL; -- 0ms;
SELECT DISTINCT ((((((v0.c0)<(v0.c1)))OR(((v0.c2)-(v0.c2)))))OR((+ (vt1.c1)))) FROM v0, vt1 GROUP BY -1062370463;SELECT DISTINCT ((((((v0.c0)||(v0.c0)))AND(json_quote(vt1.c1))))AND(NULL)), vt1.c0, CASE WHEN CASE vt1.c0  WHEN vt1.c1 THEN vt1.c0 WHEN vt1.c0 THEN v0.c1 WHEN v0.c0 THEN vt1.c0 END THEN (+ (v0.c2)) ELSE vt1.c0 END FROM v0, vt1 WHERE ((((('716530013')IS NOT(2051340651)))OR(HEX(DISTINCT 0.8232771764171176)))); -- 0ms;
SELECT ALL (~ (vt1.c0 COLLATE NOCASE)) FROM vt1, v0; -- 0ms;
SELECT ALL v0.c0 FROM v0, vt1 WHERE (CAST((+ ('~0?Q\n*)')) AS REAL)) LIMIT 674858064; -- 0ms;
SELECT DISTINCT SUM((v0.c0 IN ())), (((v0.c2, v0.c1, vt1.c1)) BETWEEN (((((v0.c2, vt1.c0, v0.c2)) BETWEEN ((vt1.c1, v0.c2, v0.c0)) AND ((v0.c2, v0.c2, vt1.c0))), ((v0.c1) BETWEEN (vt1.c0) AND (v0.c2)), ((vt1.c1)|(vt1.c0)))) AND ((((((vt1.c0)OR(v0.c0)))AND(v0.c0)), (~ (v0.c0)), (((v0.c2, v0.c1, vt1.c0))>=((vt1.c0, vt1.c1, vt1.c0)))))), CAST(vt1.c1 AS BLOB) COLLATE RTRIM FROM vt1 ORDER BY 0.4613986109641949;SELECT ALL ((((((((((((((vt1.c1)==(v0.c1)))OR((NOT ('1532179076')))))OR(LOWER(DISTINCT 'uꨄw'))))OR(((((v0.c0)OR(v0.c1)))OR(vt1.c1)))))AND((+ (vt1.c1)))))AND(((vt1.c1) NOT BETWEEN (v0.c1) AND (v0.c1)))))AND(CASE WHEN NULL THEN v0.c0 WHEN vt1.c0 THEN v0.c1 WHEN v0.c1 THEN v0.c0 END)), (x'f48efd66' COLLATE RTRIM IN ()), CAST(COALESCE(v0.c2, v0.c1) AS NUMERIC) FROM v0 WHERE (((('')) NOT BETWEEN ((x'' COLLATE BINARY)) AND ((((x'')IS NOT('108385341')))))) GROUP BY ((ABS(DISTINCT vt1.c0)) BETWEEN (((v0.c1)IS(v0.c0))) AND ((((vt1.c0))<=((vt1.c1)))));SELECT 0.013557565405401761 FROM vt1, v0; -- 0ms;
SELECT DISTINCT (((v0.c1 IN ()))>>(((((v0.c0)OR(v0.c1)))AND(v0.c0)))) FROM v0; -- 1ms;
SELECT DISTINCT MIN(((((((((((((v0.c1)AND(vt1.c0)))AND(vt1.c1)))OR(v0.c1)))OR(v0.c0)))AND(vt1.c1)))OR(vt1.c1))) FROM v0;SELECT DISTINCT ((NULL) NOTNULL), (- ((+ (v0.c2)))), ((((v0.c0)/(vt1.c1))) NOT BETWEEN ((vt1.c0 IN ())) AND (((vt1.c0) IS FALSE))) FROM vt1 WHERE (MIN(json_patch(x'', '-2000147385'), CAST(-1.394076471E9 AS BLOB)));SELECT ALL (NOT (((((((((v0.c2)OR(v0.c2)))OR(vt1.c0)))AND(vt1.c0)))AND(v0.c0)))) FROM v0, vt1; -- 0ms;
SELECT DISTINCT ((((((vt1.c1)AND(vt1.c1)))OR(vt1.c1)))<=(x'cc00')) FROM v0, vt1 GROUP BY CASE WHEN ((v0.c0) NOT NULL) THEN (v0.c2 IN ()) ELSE CASE WHEN v0.c1 THEN vt1.c1 WHEN vt1.c0 THEN v0.c2 WHEN vt1.c1 THEN vt1.c1 END END HAVING (~ (v0.c0 COLLATE NOCASE)); -- 1ms;
SELECT CAST(((v0.c0)IS(vt1.c0)) AS REAL), ((((vt1.c0)+(vt1.c1))) IS TRUE), SUM(((vt1.c1) NOT BETWEEN (vt1.c1) AND (v0.c1)) COLLATE NOCASE) OVER () FROM vt1, v0 GROUP BY CASE WHEN (((vt1.c0, v0.c0, vt1.c0)) NOT BETWEEN ((vt1.c1, v0.c0, vt1.c1)) AND ((vt1.c1, v0.c1, x'57ed'))) THEN json_array(vt1.c1, vt1.c0) END, NULL, ((('', vt1.c0 COLLATE NOCASE, ((((v0.c1)OR(v0.c2)))OR(vt1.c0))))<>((((0.22762729338919008)LIKE(v0.c1)), v0.c0, (+ (v0.c1))))) HAVING vt1.c1 LIMIT 48701668 OFFSET -68900342;SELECT ALL ((((((v0.c1)AND(vt1.c1)))OR(-1.825186678E9))) IS TRUE) FROM vt1, v0 ORDER BY (((CASE WHEN 0xfffffffff6f392e5 THEN NULL ELSE NULL END, ((v0.c2)AND(0.31637641835764996)), ((v0.c2)-('-1295280969'))))>=((CASE WHEN v0.c1 THEN v0.c0 END, CASE '7'  WHEN NULL THEN v0.c0 END, ((x'b9a6')|(vt1.c0))))) ASC; -- 0ms;
SELECT GROUP_CONCAT(((v0.c1) BETWEEN (vt1.c0) AND (v0.c0))) OVER ( ORDER BY CASE WHEN ((v0.c1) NOT BETWEEN (vt1.c1) AND (v0.c2)) THEN CASE WHEN v0.c2 THEN vt1.c1 END WHEN (vt1.c1 IN ()) THEN ((v0.c2) NOT BETWEEN (v0.c1) AND ('')) WHEN GLOB(v0.c0, v0.c2) THEN ((((((((v0.c1)AND(v0.c0)))AND(vt1.c0)))OR(NULL)))AND(vt1.c1)) END ASC  NULLS LAST) FROM v0, vt1; -- 1ms;
SELECT DISTINCT COUNT(NULL COLLATE BINARY) OVER (), MAX(CASE WHEN vt1.c1 THEN v0.c1 ELSE v0.c0 END, ((v0.c1)IS NOT(vt1.c1)), v0.c1 COLLATE BINARY, ((vt1.c0) BETWEEN (vt1.c1) AND (vt1.c1))), (((v0.c2))!=((v0.c2))) COLLATE RTRIM, (CASE WHEN v0.c0 THEN vt1.c0 END IN ()), (SUM(v0.c2) IN (((x'd925')IS NOT(v0.c2)), LIKELY(DISTINCT v0.c1))) FROM vt1 WHERE ((((((((((((('\r-Ph#Q#\n' COLLATE NOCASE)AND(((('Yq')) BETWEEN (('-1825186678')) AND (('0b['))))))AND((((x'', NULL, 0.06159250348467715)) NOT BETWEEN ((NULL, 0X7baafe77, NULL)) AND ((NULL, 0X53d3ae1b, '|gcwws'))))))AND(SQLITE_COMPILEOPTION_USED('-936110713'))))AND(UNLIKELY(DISTINCT NULL))))OR(x'')))OR('' COLLATE BINARY)));SELECT ALL ((((((vt1.c1)AND(v0.c1)))AND(vt1.c0)))OR((+ ('')))) FROM vt1 WHERE ((((- ('486850932')))+(CASE 0.39139678104659825  WHEN x'' THEN '-2035360272' ELSE x'' END)));SELECT DISTINCT ((vt1.c1 COLLATE RTRIM) ISNULL), v0.c1, ((CASE vt1.c1  WHEN v0.c2 THEN v0.c1 ELSE vt1.c0 END) IS FALSE) FROM v0, vt1; -- 0ms;
SELECT ALL (('1857462447') NOT BETWEEN ((+ (''))) AND ((((v0.c1))>=((v0.c0))))) FROM vt1, v0 WHERE (ABS(DISTINCT ((((x'')AND(0.42430879513183195)))AND(0.23490796330162012)))); -- 0ms;
SELECT DISTINCT ((CAST(v0.c2 AS BLOB)) BETWEEN (CAST(x'' AS NUMERIC)) AND ('')) FROM vt1, v0; -- 0ms;
SELECT DISTINCT PERCENT_RANK() OVER (), NULL, v0.c2 FROM vt1, v0 WHERE (CAST(((((NULL)AND(1101262180)))AND(0.1542840365668986)) AS TEXT)); -- 0ms;
SELECT DISTINCT ((GROUP_CONCAT(vt1.c0))LIKE(NULLIF(vt1.c0, v0.c0))) FROM v0;SELECT DISTINCT TOTAL(NULL), (((((v0.c1)) NOT BETWEEN ((v0.c2)) AND ((v0.c2)))) ISNULL), ((CASE WHEN v0.c2 THEN vt1.c0 ELSE v0.c2 END) IS TRUE) FROM v0, vt1; -- 0ms;
SELECT DISTINCT GROUP_CONCAT(((v0.c2) NOT BETWEEN (vt1.c0) AND (vt1.c1))) FILTER(WHERE (- ((((0.17403117129970802, v0.c1, 0.041358749110131265)) BETWEEN ((v0.c1, vt1.c0, v0.c1)) AND ((v0.c2, v0.c2, vt1.c0)))))) OVER (), ((v0.c0 COLLATE RTRIM) NOTNULL), CASE v0.c2 COLLATE BINARY  WHEN ((((vt1.c1)OR(v0.c1)))OR(vt1.c1)) THEN ((v0.c2) ISNULL) ELSE CAST(v0.c2 AS REAL) END FROM v0;SELECT '?㶡' FROM vt1 WHERE (JULIANDAY('JL', 0.19339024440356622, x'77f8', 0.22130415435647421, 'ﳳ>*n8R	[') COLLATE RTRIM); -- 0ms;
SELECT ALL CAST(NULL AS BLOB) FROM v0 WHERE ((((x'a818')) NOT BETWEEN ((((NULL) NOT NULL))) AND ((LIKELY(NULL))))); -- 0ms;
SELECT DISTINCT (((v0.c2 IN ()))||(v0.c0 COLLATE RTRIM)), ((((((((json_insert(v0.c0, vt1.c1, v0.c2))OR(((((v0.c0)OR(vt1.c0)))OR(v0.c0)))))AND(((v0.c2) NOTNULL))))OR((- (v0.c2)))))OR(CASE v0.c2  WHEN v0.c1 THEN v0.c2 ELSE v0.c2 END)), CAST(((((vt1.c0)AND(v0.c2)))OR(v0.c2)) AS NUMERIC) FROM v0;SELECT ALL (- (((v0.c2)&(v0.c1)))), MAX(CAST(v0.c2 AS NUMERIC)), (((((+ (v0.c1)))OR(AVG(v0.c2))))AND((vt1.c1 IN ()))) FROM v0 WHERE ((NOT (((0.6675583874722446)<>(0.3558497614130577))))); -- 0ms;
SELECT DISTINCT TOTAL((NOT (vt1.c1))) OVER () FROM vt1, v0; -- 0ms;
SELECT DISTINCT (v0.c1 COLLATE BINARY IN ()) FROM vt1, v0 WHERE ((((x'10b0' COLLATE RTRIM))<=((((0.9150713310766159) NOT NULL))))); -- 0ms;
SELECT DISTINCT CAST(-1e500 AS INTEGER) FROM vt1, v0 WHERE ((('' IN ()) IN (CAST(NULL AS BLOB)))); -- 0ms;
SELECT ALL ((((((vt1.c1)||(v0.c1)))OR(((((((((v0.c2)OR(v0.c1)))OR(vt1.c0)))OR(v0.c1)))OR(v0.c0)))))AND(CAST(v0.c2 AS INTEGER))) FROM v0, vt1 WHERE (CAST((((0.5758255483974474))<((0xffffffffd7a7cb6d))) AS REAL)) GROUP BY (+ (LIKELY(v0.c2))) HAVING '-1984172910'; -- 0ms;
SELECT DISTINCT LAST_INSERT_ROWID() FROM v0 WHERE (((((('0.46652252511385994')) NOT BETWEEN ((x'')) AND (('')))) NOT BETWEEN (CAST(0x3b2c7554 AS INTEGER)) AND (CASE WHEN 'i4)c	oc' THEN '-180809292' WHEN x'7db2' THEN 0Xffffffffa691ad90 WHEN x'' THEN 0.08767751460219797 ELSE NULL END))); -- 0ms;
SELECT DISTINCT ((((v0.c2 COLLATE BINARY)AND(vt1.c1 COLLATE BINARY)))OR(((vt1.c0) NOT BETWEEN (vt1.c1) AND (v0.c2)))), ((((vt1.c1)<(vt1.c1)))<<(((x'89ca17ae')<(v0.c1)))), CAST(CAST(v0.c0 AS NUMERIC) AS NUMERIC) FROM vt1;SELECT DISTINCT (v0.c2 IN ()), (((('1032256755')%(vt1.c0)))<>(vt1.c1)), x'dcf4' FROM vt1, v0 WHERE (((((NULL)-('\F5()'))) BETWEEN (CASE x''  WHEN 0.030365865149189486 THEN x'' ELSE -1.394076471E9 END) AND (((0.41384001595436115) NOT BETWEEN (x'') AND ('Pj+4'))))); -- 0ms;
SELECT ((((((((vt1.c1)OR(NULL)))AND(v0.c2)))AND(((vt1.c1)&(v0.c1)))))AND(CASE v0.c1  WHEN v0.c1 THEN vt1.c1 END)) FROM v0, vt1 WHERE (x'2371'); -- 0ms;
SELECT json_patch(((((((((v0.c0)OR(v0.c0)))AND(v0.c1)))AND(1.2309528E7)))OR(v0.c0)), x'c35e') FROM vt1 WHERE ((((((x''))<((0.44357788320781344))))|(LOWER(DISTINCT '448072188'))));SELECT DISTINCT ((x'08fb')=(((v0.c1)<=(v0.c0)))), CASE ((((v0.c1)OR('-720833210')))OR(v0.c2))  WHEN ((((((((vt1.c0)AND('-308824021')))AND('')))AND(v0.c0)))OR(v0.c1)) THEN v0.c2 END, CAST(((((((((v0.c2)OR(v0.c2)))OR(v0.c2)))AND(v0.c2)))AND(v0.c2)) AS BLOB) FROM v0, vt1 WHERE ((('nK奲|㟎%m')*('d_fOk<v\rK')) COLLATE NOCASE); -- 0ms;
SELECT (NULLIF(DISTINCT v0.c1, vt1.c0) IN ()) FROM v0, vt1 WHERE ((((x'dd0d10ee' IN ()))%((- (0.33777825493060487))))); -- 0ms;
SELECT DISTINCT CASE ((v0.c2)>=(vt1.c0))  WHEN NULL THEN ((vt1.c1) NOT BETWEEN (vt1.c0) AND (vt1.c0)) ELSE TOTAL_CHANGES() END FROM vt1 NOT INDEXED;SELECT DISTINCT ((((vt1.c1)-(vt1.c0))) BETWEEN (CAST(v0.c0 AS NUMERIC)) AND (((v0.c1) ISNULL))), CAST(CASE WHEN x'e7ff' THEN v0.c2 END AS INTEGER), (((v0.c0, v0.c0, vt1.c1)) NOT BETWEEN ((vt1.c1 COLLATE NOCASE, CASE v0.c0  WHEN v0.c2 THEN vt1.c1 WHEN -2069148746 THEN v0.c1 WHEN x'' THEN v0.c1 END, SUM(v0.c0))) AND ((CASE WHEN '-694718142' THEN vt1.c0 ELSE v0.c2 END, 0.5291276317165475, vt1.c1))) FROM vt1;SELECT ALL (((((((vt1.c1))=((vt1.c1))))OR(((v0.c0)==('')))))AND((v0.c1 IN ('-1938781384', -3.70576036E8)))) FROM vt1 NOT INDEXED;SELECT DISTINCT UPPER(v0.c2 COLLATE RTRIM), MIN(CAST(v0.c0 AS INTEGER)), GROUP_CONCAT(((v0.c2) IS TRUE)) FROM v0 WHERE ((((0Xfffffffff53911b4)) BETWEEN ((x'')) AND ((CAST(0.5550756970670515 AS BLOB))))); -- 0ms;
SELECT DISTINCT CASE WHEN (~ (vt1.c1)) THEN NULL WHEN v0.c0 THEN ((((v0.c2)OR(vt1.c1)))AND(v0.c2)) WHEN v0.c0 COLLATE BINARY THEN NULL END FROM vt1;SELECT ALL LAG((((v0.c0, v0.c1, v0.c1)) BETWEEN (((- (v0.c1)), (v0.c1 IN ()), v0.c1)) AND (((+ (v0.c1)), v0.c2, v0.c2))), (((+ (v0.c0)))>((v0.c1 IN (v0.c2, v0.c1)))), ((((v0.c0) NOT BETWEEN (v0.c0) AND (v0.c0)))<>(v0.c0))) OVER (), NTH_VALUE(((v0.c2)=(v0.c1)) COLLATE NOCASE, (((((NOT (v0.c2)))AND(((((v0.c1)OR(v0.c2)))AND(v0.c0)))))AND((v0.c0 IN (v0.c0))))) OVER (), v0.c2 FROM v0;