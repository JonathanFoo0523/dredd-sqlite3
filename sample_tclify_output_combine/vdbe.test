set testdir [file dirname $argv0]
source $testdir/tester.tcl

# kill mutants ['10240', '10242', '10245', '10246', '10247', '10249', '10250', '10251', '10274', '10278']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-0.1 {
  CREATE TABLE a(b);
  ALTER TABLE a RENAME TO c;
  INSERT INTO c VALUES('1281932754');
  ALTER TABLE c ADD d e;
  PRAGMA integrity_check;
} {ok}

# kill mutants ['10244', '10253', '10276']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-1.1 {
  CREATE TABLE a(b);
  INSERT INTO a VALUES(0), ('');
  ALTER TABLE a ADD c d;
  PRAGMA integrity_check;
} {ok}

# kill mutants ['10247', '10248', '10253']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-2.1 {
  CREATE TABLE a(b c);
  INSERT INTO a VALUES('#Xrè¤‰iH');
  PRAGMA integrity_check;
} {ok}

# kill mutants ['29450', '29451', '29456', '29459', '29460', '29463', '29464', '29465', '29467', '29468', '29469', '29472', '29473', '29477', '29482', '29483', '29484', '29488', '29491', '29492']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test vdbe-dredd-3.1 {
  BEGIN;
  PRAGMA journal_mode = WAL;
} {1 {cannot change into wal mode from within a transaction}}

# kill mutants ['10254', '10275']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-4.1 {
  CREATE TABLE a(b);
  INSERT INTO a VALUES('2127897027');
  ALTER TABLE a ADD c TEXT;
  PRAGMA integrity_check;
} {ok}

# kill mutants ['13075']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-5.1 {
   CREATE TABLE t0 (a  );
               CREATE INDEX b ON t0(0 ) WHERE CAST(CASE   WHEN '' THEN 0 ELSE '' END AS );
               ALTER TABLE t0 ADD  c80 REAL;
               INSERT OR FAIL INTO t0(c80) VALUES ('478449942918254012');
} {}

# kill mutants ['1051', '1052']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-6.1 {
  CREATE VIRTUAL TABLE vt0 USING fts5(c0);
  INSERT INTO vt0 VALUES('0.9387278617375547');
  SELECT
  CASE 'iw\'  WHEN CAST(vt0.c0 AS BLOB) THEN CASE NULL  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END END, CAST(0 AS TEXT) FROM vt0 WHERE (0)GLOB((0)AND' ')  ;
} {{} 0}

# kill mutants ['29474', '29475', '29476', '29478', '29480', '29481', '29485']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-7.1 {
  PRAGMA journal_mode = WAL;
} {wal}

# kill mutants ['13107']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-8.1 {
  CREATE TABLE a(c0);
    CREATE INDEX i54 ON a(0 ) ;
    ALTER TABLE a ADD c80 REAL;
    INSERT INTO a(c80) VALUES('478449942918254012');
} {}

# kill mutants ['6989', '7021']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-9.1 {
  CREATE VIRTUAL TABLE rt1 USING rtree_i32(c0, c1, a);
  INSERT INTO rt1(a) VALUES('');
  UPDATE OR REPLACE rt1 SET c1 = '', c1 = 0.09173082268426602, c0 = '-1927927150';
  CREATE VIRTUAL TABLE vt1 USING fts4;
  INSERT OR REPLACE INTO vt1 VALUES('');
  SELECT c0 >> ((c0)OR(vt1))FROM vt1, rt1;
} {-963963575}

# kill mutants ['5248']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-10.1 {
  PRAGMA encoding = 'UTF16';
  CREATE VIRTUAL TABLE a USING rtree_i32(b, c, d, e, f);
  INSERT INTO a VALUES(4, '', '', x'',                                  '');
  SELECT CASE(b) || 0 WHEN 0 THEN 0 END, HEX(b) FROM a GROUP BY(TRUE);
} {{} 34}

# kill mutants ['13909', '13913', '13918', '13941', '13945', '13950']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-11.1 {
  CREATE TABLE a(b REAL);
  INSERT INTO a VALUES('28bb167d'), (377315562139577);
  UPDATE a SET b = b;
} {}

# kill mutants ['5267']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-12.1 {
  CREATE VIRTUAL TABLE rt0 USING rtree_i32(c0, c1, c2c0 );
   CREATE VIRTUAL TABLE rt1 USING rtree(c0, c1, a);
   INSERT OR ROLLBACK INTO rt1(c1) VALUES(x'');
   INSERT OR IGNORE INTO rt0(c1, c0) VALUES(0, '');
   SELECT 0 FROM rt1 JOIN rt0 ON(UPPER(1) | 0)     WHERE(0 << rt0.c1) || 0;
} {}

# kill mutants ['8341', '8342', '8345', '8346', '8347', '8348', '8349', '8350', '8373', '8374', '8377', '8378', '8379', '8380', '8381', '8382', '8384', '8387', '8388', '8390', '8394', '8395', '8416', '8419', '8420', '8422', '8426', '8427', '8428', '8429']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-13.1 {
  CREATE TABLE a(TEXT);
  ALTER TABLE a ADD c74 TEXT;
  ALTER TABLE a RENAME TO t0;
  INSERT INTO t0(c74) VALUES(x'');
  SELECT 0 FROM t0 WHERE(t0.c74) BETWEEN(0) AND '823398575';
} {}

# kill mutants ['5273']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-14.1 {
  CREATE TABLE a(c1, c2);
  CREATE VIRTUAL TABLE rt1 USING rtree(c0, c1, c2);
  INSERT INTO a VALUES(0, '');
  INSERT OR FAIL INTO rt1(c2) VALUES(x'');
  SELECT COUNT() FROM rt1 JOIN a ON(UPPER(c0)) | 0 WHERE(0 << a.c1) || 0;
} {0}

# kill mutants ['8391', '8423', '8433']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-15.1 {
  CREATE TABLE t0(a);
  ALTER TABLE t0 ADD b TEXT;
  INSERT INTO t0 VALUES('1410308096', '380084861');
  ALTER TABLE t0 ADD c49;
  ALTER TABLE t0 RENAME b TO c7;
  INSERT INTO t0(c49, a, c7) VALUES(1.632483556E9, '380084861', '');
  SELECT 0, 0 COLLATE RTRIM, LAG(0, 0, TRIM(DISTINCT 0, 0)) OVER(), 0,
      CASE(0 NOT BETWEEN 0 AND(t0.c7)) WHEN 0 THEN CAST(t0.c49 AS BLOB) WHEN
      SQLITE_COMPILEOPTION_GET('') THEN 7 END FROM t0;
} {0 0 0 0 {} 0 0 0 0 {}}

# kill mutants ['1236', '1237']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-16.1 {
  PRAGMA encoding = 'UTF16be';
  SELECT 0 % CAST(1 AS BLOB);
} {0}

# kill mutants ['1238']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-17.1 {
  CREATE TABLE a(b, c, d);
  ALTER TABLE a ADD e;
  INSERT INTO a VALUES('1592577901', 0, 0, '(5');
  SELECT *FROM a WHERE(1 / b);
} {}

# kill mutants ['8409', '8441']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-18.1 {
  PRAGMA encoding = 'UTF16be';
  CREATE VIRTUAL TABLE a USING rtree(b, c, d);
  INSERT INTO a(d) VALUES(1.7976931348623157E308);
  SELECT 0 BETWEEN 0 AND(CAST(d AS TEXT)) FROM a;
} {1}

# kill mutants ['5081']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-19.1 {
       CREATE  VIEW g(c) AS SELECT  (1)AND(HEX(0))   WHERE 1;
            SELECT 0 FROM g WHERE ((g.c||c)) ;
} {0}

# kill mutants ['23905', '23910', '23912', '23913', '23924']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-20.1 {
  CREATE VIRTUAL TABLE a USING fts5(0);
  REINDEX;
  BEGIN;
  CREATE VIEW b AS SELECT 0;
  ROLLBACK;
  INSERT INTO a VALUES(0);
} {}

# kill mutants ['6812', '6844']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-21.1 {
  CREATE TABLE a(b);
  REPLACE INTO a VALUES('1975310166');
  SELECT 0 << b FROM a;
} {0}

# kill mutants ['23906']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-22.1 {
  PRAGMA reverse_unordered_selects = true;
  CREATE TABLE a(b);
  SELECT 0 FROM a;
} {}

# kill mutants ['6814', '6846']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-23.1 {
  CREATE TABLE a(b, c, d);
  INSERT INTO a VALUES('1515344457', '', '');
  SELECT 0 >> LIKELIHOOD(b, 0.9549105288276599) FROM a;
} {0}

# kill mutants ['6838']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-24.1 {
  CREATE TABLE t0(a);
  INSERT INTO t0 VALUES('');
  ALTER TABLE t0 RENAME TO t1;
  CREATE TABLE IF NOT EXISTS t0(c0, BLOB, c3);
  INSERT OR REPLACE INTO t0 VALUES(-136851432, 0, '');
  SELECT 0 FROM t0 JOIN t1 ON(c0 >> c0);
} {}

# kill mutants ['31476']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-25.1 {
  CREATE VIRTUAL TABLE a USING rtree_i32(b, c, d);
  INSERT INTO a(d) VALUES(0);
  SELECT CHANGES();
} {1}

# kill mutants ['8341', '8345', '8346', '8348', '8349', '8350', '8366', '8373', '8374', '8377', '8379', '8380', '8381', '8382', '8384', '8387', '8388', '8395', '8416', '8419', '8420', '8426', '8427']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test vdbe-dredd-26.1 {
   CREATE VIRTUAL TABLE a USING fts5(b);
                           INSERT INTO a VALUES (x'7d8c');
                              SELECT 0 FROM a (CASE b  WHEN b THEN b END BETWEEN 0 AND CAST(b AS TEXT))   ;
} {}

finish_test
