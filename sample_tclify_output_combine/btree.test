set testdir [file dirname $argv0]
source $testdir/tester.tcl

# kill mutants ['41239', '41296', '41306']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-0.1 {
  PRAGMA encoding = 'UTF16le';
   CREATE VIRTUAL TABLE a USING fts5(0);
   PRAGMA secure_delete = 1;
} {1}
do_catchsql_test btree-dredd-0.2 {
   CREATE VIRTUAL TABLE b USING fts5;
} {1 {vtable constructor failed: b}}

# kill mutants ['10884', '10885', '10897', '10898', '10899', '10903', '10905', '10906', '10907', '10909', '10910', '10911', '10916', '10917', '10929', '10930', '10931', '10935', '10937', '10938', '10939', '10941', '10942', '10943', '10944', '10945', '10946', '10947', '10948', '10949', '10950', '10951', '10953', '10954', '10955', '10958', '10959', '10960', '10961', '10963', '10964', '10965', '10966', '10967', '10968', '10969', '10970', '10971', '10973', '10976', '10977', '10978', '10979', '10980', '10981', '10982', '10983', '10985', '10986', '10987', '10990', '10991', '10992', '10993', '10995', '10996', '10997', '10998', '10999', '11000', '11001', '11002', '11003', '11005', '11009', '11028', '11041', '11060', '11061', '11062', '11063', '11064', '11065', '11066', '11067', '11068', '11073', '11075', '11076', '11078', '11079', '11080', '11086', '11089', '11090', '11091', '11093', '11095', '11098', '11099', '11100', '11101', '11102', '11103', '11105', '11107', '11108', '11110', '11111', '11112', '11118', '11121', '11122', '11123', '11124', '11125', '11127', '11130', '11131', '11132', '11133', '11134', '11135', '11136', '11137', '11138', '11139', '11142', '11143', '11147', '11148', '11151', '11152', '11168', '11169', '11170', '11171', '11174', '11175', '11178', '11179', '11180', '11183', '11184', '11186', '11204', '11205', '11206', '11236', '11237', '11238', '11480', '11481', '11484', '11485']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-1.1 {
   CREATE VIRTUAL TABLE vt1 USING fts4(, orderDESC);
                           PRAGMA cell_size_check = 1;
                           CREATE VIEW  v00 AS SELECT DISTINCT CAST(CASE WHEN t0c75 THEN 0.8285128162388518 ELSE vt1.c0 END AS INTEGER) FROM t0, vt1 WHERE ((((0<>((NULL, '211119301', NULL)))) NOTNULL));
} {}

# kill mutants ['33234', '33235', '33238', '33239', '33277', '33279', '33280', '33281', '33282', '33284', '33302', '33306', '33308', '33309', '33312', '33313', '33314', '33316', '33334']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-2.1 {
  CREATE TABLE a(b);
  PRAGMA secure_delete = true;
} {1}
do_execsql_test btree-dredd-2.2 {
  DROP TABLE a;
  ANALYZE;
} {}

# kill mutants ['33286', '33318']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-3.1 {
  CREATE TABLE a(b);
  CREATE INDEX i83 ON a(0);
  PRAGMA auto_vacuum = 1;
  VACUUM;
  PRAGMA secure_delete = 1;
} {1}
do_execsql_test btree-dredd-3.2 {
  DROP INDEX "i83";
} {}

# kill mutants ['10884', '10900', '10901', '10903', '10905', '10907', '10909', '10910', '10911', '10916', '10932', '10933', '10935', '10937', '10939', '10941', '10942', '10943', '10944', '10945', '10946', '10947', '10948', '10949', '10950', '10951', '10953', '10954', '10955', '10958', '10959', '10960', '10961', '10963', '10964', '10965', '10966', '10968', '10969', '10970', '10971', '10973', '10976', '10977', '10978', '10979', '10980', '10981', '10982', '10983', '10985', '10986', '10987', '10990', '10991', '10992', '10993', '10995', '10996', '10997', '10998', '11000', '11001', '11002', '11003', '11005', '11031', '11032', '11044', '11063', '11064', '11075', '11080', '11086', '11089', '11090', '11091', '11093', '11094', '11095', '11098', '11099', '11100', '11101', '11102', '11103', '11107', '11112', '11118', '11121', '11122', '11123', '11125', '11127', '11130', '11131', '11132', '11133', '11134', '11135', '11136', '11137', '11138', '11139', '11142', '11143', '11147', '11148', '11151', '11152', '11168', '11169', '11170', '11171', '11174', '11175', '11179', '11180', '11183', '11184', '11186']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-4.1 {
  CREATE TABLE a(b);
  PRAGMA cell_size_check = true;
  VACUUM;
  INSERT INTO c VALUES('pgsz');
} {1 {no such table: c}}

# kill mutants ['10904', '10936']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-5.1 {
  CREATE VIRTUAL TABLE vt0 USING fts4(notindexedc0c0, 1, c2);
  CREATE VIRTUAL TABLE rt0 USING rtree(a, b, c2);
  PRAGMA cell_size_check = true;
  VACUUM;
} {}

# kill mutants ['11208', '11209', '11210', '11211', '11214', '11215', '11217', '11218', '11219', '11220', '11221', '11222', '11223', '11224', '11225', '11226', '11520', '11521', '11522', '11523', '11525', '11526', '11527', '11529', '11534', '11543', '11546', '11547']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-6.1 {
  ANALYZE;
} {}

# kill mutants ['11524', '11545', '11548', '11549', '11550']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-7.1 {
  ANALYZE;
  ANALYZE;
} {}

# kill mutants ['10897', '10898', '10929', '10930', '11016', '11028', '11030', '11034', '11035', '11036', '11037', '11042', '11045', '11048', '11060', '11062', '11066', '11067', '11068', '11069', '11073', '11076', '11078', '11079', '11105', '11108', '11110', '11111', '11204', '11205', '11206', '11236', '11237', '11238', '11480', '11481', '11484', '11485']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-8.1 {
  PRAGMA cell_size_check = true;
  VACUUM;
  INSERT INTO a VALUES('pgsz');
} {1 {no such table: a}}

# kill mutants ['10974']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-9.1 {
  PRAGMA temp.cell_size_check = true;
  CREATE VIRTUAL TABLE vt0 USING fts4;
  CREATE VIRTUAL TABLE rt0 USING rtree_i32;
} {1 {Too few columns for an rtree table}}

# kill mutants ['11021', '11022', '11023', '11024', '11053', '11054', '11055', '11056']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-10.1 {
   CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2, a, c4);
                           CREATE VIRTUAL TABLE vt1 USING fts4(c0 , c1 , languageid="lid");
                           INSERT INTO vt1(c1, lid, c0) VALUES ('958758674', '97fe', '480698361');
                           INSERT   INTO rt0(c4, c0) VALUES ('', NULL), (NULL, 4.80698361E8);
                           INSERT OR ROLLBACK INTO vt1 VALUES (x'', 0.06317974027915396), ('', x''), (0.7316559180258133, '');
                           INSERT OR ABORT INTO vt1(c1) VALUES (3), (x''), ('');
                           INSERT OR REPLACE INTO vt1(c1) VALUES (NULL), (3), ('');
                           INSERT OR ROLLBACK INTO rt0(c4, c2) VALUES (NULL, x'');
                           INSERT OR IGNORE INTO vt1(c1) VALUES (''), (x''), (NULL);
                           INSERT OR IGNORE INTO rt0(c4) VALUES (0.12689496300959469);
                           INSERT OR IGNORE INTO rt0(c1, c4, c0) VALUES (x'', x'', x''), (NULL, NULL, '1422414237779');
                           INSERT OR ABORT INTO rt0(c2) VALUES (NULL), (0.12689496300959469), ('');
                           PRAGMA cell_size_check = true;
                           INSERT OR ABORT INTO vt1(lid) VALUES (x'');
                           INSERT OR IGNORE INTO rt0(c4) VALUES (NULL);
                           INSERT OR FAIL INTO vt1(c1, c0, lid) VALUES (0.18931703131407318, 7, x'');
                          SELECT COUNT() OVER () FROM vt1, rt0;
} {}

# kill mutants ['11535', '11538', '11539', '11542']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-11.1 {
  CREATE VIRTUAL TABLE a USING fts5;
} {1 {vtable constructor failed: a}}

# kill mutants ['11536']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-12.1 {
  PRAGMA secure_delete = 1;
} {1}
do_catchsql_test btree-dredd-12.2 {
   CREATE VIRTUAL TABLE a USING b;
} {1 {no such module: b}}

# kill mutants ['11520', '11521', '11522', '11525', '11526', '11527', '11529', '11534', '11537', '11540', '11543', '11546', '11547']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-13.1 {
  ANALYZE;
} {}

# kill mutants ['10967', '10999', '11009', '11029', '11033', '11041', '11061', '11065']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-14.1 {
  CREATE VIRTUAL TABLE a USING rtree(b, c, d);
  PRAGMA cell_size_check = true;
  VACUUM;
  INSERT INTO e VALUES('pgsz');
} {1 {no such table: e}}

# kill mutants ['41270', '41344', '41345', '41346', '41349', '41350', '41357', '41358', '41361', '41362', '41363', '41364', '41365']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-15.1 {
  PRAGMA encoding = 'UTF16le';
  CREATE VIRTUAL TABLE a USING fts5(0);
  CREATE VIRTUAL TABLE b USING fts5;
} {1 {vtable constructor failed: b}}

# kill mutants ['41347', '41348', '41354', '41355']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-16.1 {
  PRAGMA encoding = 'UTF16le';
  CREATE VIRTUAL TABLE vt0 USING fts5(0);
  CREATE VIRTUAL TABLE vt1 USING fts5(0);
  CREATE VIRTUAL TABLE rt0 USING rtree(a, b, c);
  DROP TABLE vt1;
} {}

# kill mutants ['11047', '11140', '11172']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-17.1 {
  CREATE VIRTUAL TABLE a USING fts4;
  CREATE VIRTUAL TABLE rt1 USING rtree_i32(b, c, d);
  PRAGMA cell_size_check = true;
  VACUUM;
  INSERT INTO e VALUES('pgsz');
} {1 {no such table: e}}

# kill mutants ['41351']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-18.1 {
  PRAGMA encoding = 'UTF16le';
   CREATE VIRTUAL TABLE vt0 USING fts5(0);
   CREATE VIRTUAL TABLE rt0 USING rtree(b, a, c);
} {}

# kill mutants ['41352', '41356', '41359', '41360']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-19.1 {
  PRAGMA encoding = 'UTF16le';
  CREATE VIRTUAL TABLE a USING fts5(0);
  CREATE VIRTUAL TABLE vt1 USING fts5(0);
  CREATE VIRTUAL TABLE rt0 USING rtree(b, c, d);
} {}

# kill mutants ['11523', '11544']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-20.1 {
  CREATE TABLE a(b);
} {}

# kill mutants ['41241']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-21.1 {
  PRAGMA encoding = 'UTF-16le';
         CREATE VIRTUAL TABLE a USING fts5("");
         PRAGMA secure_delete = 1;
} {1}
do_catchsql_test btree-dredd-21.2 {
         CREATE VIRTUAL TABLE b USING fts5;
} {1 {vtable constructor failed: b}}

# kill mutants ['41246', '41278', '41299', '41310', '41331', '41342']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-22.1 {
  PRAGMA encoding = 'UTF16le';
  CREATE VIRTUAL TABLE a USING fts5(0);
  PRAGMA secure_delete = 1;
} {1}
do_catchsql_test btree-dredd-22.2 {
  CREATE VIRTUAL TABLE b USING fts5;
} {1 {vtable constructor failed: b}}

# kill mutants ['41247']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-23.1 {
  PRAGMA encoding = 'UTF16le';
               CREATE VIRTUAL TABLE vt0 USING fts5(c1 , "unicode61 remove_diacritics 2 tokenchars '' separators ''");
               UPDATE vt0 SET c1=0 WHERE '2f4389ab3d94';
               PRAGMA secure_delete (11);
} {1}
do_execsql_test btree-dredd-23.2 {
               CREATE VIRTUAL TABLE vt1 USING fts5(UNINDEXED);
               VACUUM ;
} {}

# kill mutants ['41279', '41282', '41283', '41314', '41315']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-24.1 {
  PRAGMA encoding = 'UTF16le';
  CREATE VIRTUAL TABLE a USING fts5(0);
  PRAGMA secure_delete = 1;
} {1}
do_catchsql_test btree-dredd-24.2 {
  CREATE VIRTUAL TABLE b USING fts5(0);
  VACUUM;
  UPDATE b SET c =   '';
} {1 {no such column: c}}

# kill mutants ['41288']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-25.1 {
  PRAGMA encoding = 'UTF-16le';
  CREATE VIRTUAL TABLE vt0 USING fts5(1);
  PRAGMA secure_delete = FAST;
} {2}
do_catchsql_test btree-dredd-25.2 {
  CREATE VIRTUAL TABLE vt1 USING fts5;
} {1 {vtable constructor failed: vt1}}

# kill mutants ['41295']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-26.1 {
  PRAGMA encoding = 'UTF16le';
    CREATE VIRTUAL TABLE a USING fts5( 0      );
    PRAGMA secure_delete = FAST;
} {2}
do_catchsql_test btree-dredd-26.2 {
    CREATE VIRTUAL TABLE vt1 USING fts5;
} {1 {vtable constructor failed: vt1}}

# kill mutants ['11216']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-27.1 {
  CREATE VIRTUAL TABLE rt0 USING rtree(, c2, c3, c4);
} {}

# kill mutants ['41297']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-28.1 {
  PRAGMA encoding = 'UTF16le';
       CREATE VIRTUAL TABLE a USING fts5(1      );
       PRAGMA secure_delete = 1;
} {1}
do_catchsql_test btree-dredd-28.2 {
       CREATE VIRTUAL TABLE b USING fts5;
} {1 {vtable constructor failed: b}}

# kill mutants ['41298']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-29.1 {
  PRAGMA encoding = 'UTF16le';
   CREATE VIRTUAL TABLE vt0 USING fts5(      1  );
   PRAGMA secure_delete = FAST;
} {2}
do_execsql_test btree-dredd-29.2 {
   CREATE VIRTUAL TABLE vt1 USING fts5(UNINDEXED);
} {}

# kill mutants ['61266', '61267', '61275', '61280', '61298', '61299']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-30.1 {
  PRAGMA secure_delete = 1;
} {1}
do_execsql_test btree-dredd-30.2 {
  PRAGMA journal_mode = WAL;
} {wal}
do_execsql_test btree-dredd-30.3 {
  PRAGMA secure_delete;
} {1}

# kill mutants ['41248', '41249']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-31.1 {
  PRAGMA encoding = 'UTF16le';
           CREATE VIRTUAL TABLE vt0 USING fts5(     UNINDEXED,     "unicode61 remove_diacritics  tokenchars '' separators ''");
           ANALYZE;
           CREATE VIRTUAL TABLE vt1 USING fts5(UNINDEXED);
           VACUUM;
} {}

# kill mutants ['9575']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-32.1 {
  CREATE VIRTUAL TABLE rt0 USING rtree_i32(c0, c1, c2);
           CREATE VIRTUAL TABLE rt1 USING rtree_i32(c0, c1, c2c3 );
           ANALYZE ;
           CREATE TABLE t0(INTc1 INTEGER, c2 REAL);
           ALTER TABLE t0 RENAME TO a;
} {}

# kill mutants ['9577']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-33.1 {
  CREATE VIRTUAL TABLE vt1 USING fts5;
} {1 {vtable constructor failed: vt1}}

# kill mutants ['41330']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-34.1 {
  PRAGMA encoding = 'UTF-16le';
  CREATE VIRTUAL TABLE vt0 USING
  fts5(1
       );
  PRAGMA secure_delete = 1;
} {1}
do_execsql_test btree-dredd-34.2 {
  CREATE VIRTUAL TABLE vt1 USING fts5(UNINDEXED);
} {}

# kill mutants ['11126']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_catchsql_test btree-dredd-35.1 {
    CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);
       PRAGMA cell_size_check = true;
       UPDATE OR IGNORE rt1 SET (c0)=0;
} {1 {no such table: rt1}}
do_catchsql_test btree-dredd-35.2 {
       VACUUM;
       INSERT INTO vt00 VALUES('pgsz', '62562');
} {1 {no such table: vt00}}
do_execsql_test btree-dredd-35.3 {
       
} {}

# kill mutants ['41273']
# FALSE_ADV
# reset_db
# sqlite3_db_config db DEFENSIVE 1
# do_execsql_test btree-dredd-36.1 {
#   PRAGMA encoding = 'UTF16le';
#   CREATE VIRTUAL TABLE vt0 USING
#   fts5(c0c1 );
#   PRAGMA secure_delete = FAST;
# } {2}
# do_catchsql_test btree-dredd-36.2 {
#   CREATE VIRTUAL TABLE vt1 USING fts5;
# } {1 {vtable constructor failed: vt1}}

# kill mutants ['41274']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-37.1 {
  PRAGMA encoding = 'UTF16le';
    CREATE VIRTUAL TABLE a USING fts5(0 );
    PRAGMA main.secure_delete = 1;
} {1}
do_catchsql_test btree-dredd-37.2 {
    CREATE VIRTUAL TABLE vt1 USING fts5;
} {1 {vtable constructor failed: vt1}}

# kill mutants ['41311']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-38.1 {
  PRAGMA encoding = 'UTF16le';
  CREATE VIRTUAL TABLE a USING fts5(0);
  PRAGMA secure_delete = 1; -- , 
} {1}
do_catchsql_test btree-dredd-38.2 {
  CREATE VIRTUAL TABLE b USING fts5;
} {1 {vtable constructor failed: b}}

# kill mutants ['41271']
reset_db
sqlite3_db_config db DEFENSIVE 1
do_execsql_test btree-dredd-39.1 {
  PRAGMA encoding = 'UTF16le';
  CREATE VIRTUAL TABLE a USING
  fts5(1
       );
  PRAGMA secure_delete = FAST;
} {2}
do_catchsql_test btree-dredd-39.2 {
  CREATE VIRTUAL TABLE vt1 USING fts5;
} {1 {vtable constructor failed: vt1}}

finish_test
