-- Time: 2024/06/07 06:34:13
-- Database: database29
-- Database version: 3.40.0
-- seed value: 4055230529
PRAGMA cache_size = 50000; -- 0ms;
PRAGMA temp_store=MEMORY; -- 0ms;
PRAGMA synchronous=off; -- 0ms;
CREATE VIRTUAL TABLE vt0 USING fts4(c0, c1 UNINDEXED, c2 UNINDEXED, prefix=96, notindexed=c0); -- 1ms;
UPDATE OR IGNORE vt0 SET c1=0.6945852907175998; -- 0ms;
ROLLBACK TRANSACTION; -- 2ms;
PRAGMA busy_timeout = 0; -- 0ms;
INSERT OR IGNORE INTO vt0(c1) VALUES ('㧒s'); -- 1ms;
INSERT OR ROLLBACK INTO vt0(c1, c0) VALUES ('xkiF]#', x'c6a1'), (0.6945852907175998, x''), (x'55a6', '-1531732565'); -- 0ms;
INSERT OR IGNORE INTO vt0(c0, c2) VALUES (x'', 'xkiF]#'); -- 0ms;
COMMIT; -- 0ms;
UPDATE OR IGNORE vt0 SET c2=''; -- 1ms;
INSERT OR IGNORE INTO vt0(c0, c1) VALUES ('-768605929', NULL), (NULL, x''), (-1832958741, 0.6945852907175998), (NULL, '0.6945852907175998'), (NULL, NULL); -- 2ms;
INSERT OR IGNORE INTO vt0(c1) VALUES (''), (''), (''); -- 0ms;
PRAGMA application_id = 7068541690320132916; -- 0ms;
INSERT OR ROLLBACK INTO vt0(c0) VALUES (-1795180990), (x''), ('㧒S'); -- 0ms;
PRAGMA application_id; -- 0ms;
INSERT OR IGNORE INTO vt0(c2, c1) VALUES (NULL, (TRIM('kv', x'') IN ())); -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0) VALUES('rebuild'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 7); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 680817957); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 2); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 12); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('automerge', 11); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 830376995); -- 1ms;
INSERT INTO vt0(vt0) VALUES('rebuild'); -- 0ms;
END; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('merge', -944078535);\n; -- 0ms;
INSERT INTO vt0(vt0) VALUES('automerge=9'); -- 0ms;
UPDATE OR IGNORE vt0 SET c1='2V0VVk'; -- 1ms;
UPDATE OR IGNORE vt0 SET c0='-1840332404', c2=x'' WHERE CAST((((vt0.c1))=((vt0.c0))) AS REAL); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
UPDATE OR IGNORE vt0 SET c1=-1.840332404E9, c1=1904728159, c0='-213878416' WHERE (~ (CAST(vt0.c2 AS REAL))); -- 1ms;
PRAGMA main.reverse_unordered_selects = true; -- 0ms;
INSERT OR IGNORE INTO vt0 VALUES (x'', 0.8894988286582023, '.wlC嗑+h+'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '18313'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '58612'); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '38473'); -- 0ms;
INSERT INTO vt0(vt0) VALUES('rebuild'); -- 0ms;
UPDATE OR FAIL vt0 SET (c1)=(x'f06f'); -- 0ms;
INSERT OR IGNORE INTO vt0(c1) VALUES (0.8894988286582023); -- 0ms;
INSERT OR FAIL INTO vt0(c1, c0, c2) VALUES (((CASE WHEN NULL THEN 0xffffffffff2db0e2 ELSE 'wD7쬾' END)<(x'' COLLATE RTRIM)), x'', '2w'); -- 0ms;
PRAGMA legacy_file_format = false; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
ANALYZE; -- 0ms;
INSERT OR IGNORE INTO sqlite_stat1 VALUES('vt0', 'sqlite_autoindex_vt0_segdir_1', ' sz=-213878416'); -- 0ms;
INSERT OR FAIL INTO vt0(c2) VALUES (NULL), (NULL), (''); -- 0ms;
PRAGMA short_column_names; -- 0ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
INSERT OR IGNORE INTO vt0(c2, c0) VALUES (x'f06c', '-1645805780'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 1303139636); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 3); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('merge', -690025786);\n; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 8); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '11531'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('automerge', 11); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 13); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('automerge', 4); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('automerge', 11); -- 0ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 0ms;
INSERT OR ABORT INTO vt0(c2, c1, c0) VALUES (NULL, x'489e', NULL); -- 0ms;
DELETE FROM sqlite_stat1 WHERE (((('' IN (NULL, x'')), ((((0.6119620163638211)AND(0.5078367419169119)))AND(x'539e')), ((((((((-1531732565)AND('-690025786')))OR(x'')))AND(0Xffffffffb78d93f9)))OR(x''))))>(((((0.5078367419169119, NULL, -1795180990)) NOT BETWEEN ((NULL, 'ꡤ㜌)', NULL)) AND ((0.1697743770536535, x'4a98', NULL))), LIKELIHOOD(DISTINCT '503535057', 0.2897782865631491), '566610750' COLLATE BINARY))); -- 0ms;
INSERT OR IGNORE INTO vt0(c2, c0) VALUES ('-1832958741', 0.05563511003497468), (0.3796494658756179, '1740499333'), ('259405580', 0Xffffffffb273078b); -- 0ms;
INSERT OR IGNORE INTO vt0(c0, c1, c2) VALUES (NULL, 'k', -1649672889), ('S}', '-1795180990', NULL), (NULL, '2146578864', 0.05563511003497468); -- 0ms;
PRAGMA journal_mode; -- 0ms;
UPDATE vt0 SET (c1, c1)=('', 0.08331672424964309) WHERE ((((vt0.c2 COLLATE BINARY)AND(CASE '547685126'  WHEN vt0.c0 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c0 END)))OR(CAST(vt0.c2 AS NUMERIC))); -- 0ms;
UPDATE vt0 SET (c0, c1)=(NULL, x'06eccce7') WHERE 0.8193019010031795; -- 0ms;
PRAGMA incremental_vacuum; -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt0(vt0) VALUES('rebuild'); -- 0ms;
PRAGMA wal_checkpoint(PASSIVE); -- 1ms;
INSERT OR ABORT INTO vt0(c2) VALUES (''); -- 0ms;
PRAGMA journal_size_limit = 0; -- 0ms;
INSERT OR IGNORE INTO vt0(c0, c2, c1) VALUES ('wD7쬾', x'', '-448756640'); -- 0ms;
INSERT OR IGNORE INTO vt0(c0) VALUES (0.08203966144732688), (x'f9dc922f'), ('-1795180990'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 1783082877); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 8); -- 0ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
UPDATE vt0 SET (c1, c0)=(NULL, 0.40563698399859915) WHERE 0.8114882748048118; -- 1ms;
INSERT OR IGNORE INTO vt0(c1, c2) VALUES ('-1400912846', x''); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 10); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '18310'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '12622'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '47828'); -- 0ms;
INSERT INTO vt0(vt0) VALUES('automerge=3'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 1390053270); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('merge', -13782814);\n; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 588095591); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 9); -- 0ms;
INSERT INTO vt0(vt0) VALUES('automerge=10'); -- 0ms;
ANALYZE; -- 0ms;
INSERT OR IGNORE INTO vt0(c1, c2, c0) VALUES ('0.1697743770536535', x'bba2', NULL); -- 0ms;
UPDATE OR IGNORE vt0 SET c0=NULL WHERE ((CAST(vt0.c2 AS NUMERIC)) BETWEEN (vt0.c0 COLLATE RTRIM) AND (((vt0.c1)|(vt0.c0)))); -- 0ms;
INSERT OR ABORT INTO vt0(c1, c2) VALUES (NULL, x''); -- 0ms;
PRAGMA foreign_keys; -- 0ms;
INSERT OR REPLACE INTO vt0(c0, c1) VALUES (NULL, '0.08203966144732688'); -- 1ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
UPDATE vt0 SET c0=0.08203966144732688 WHERE (vt0.c2 IN ()); -- 0ms;
ANALYZE; -- 0ms;
ANALYZE vt0; -- 0ms;
UPDATE OR ROLLBACK vt0 SET c1=x''; -- 1ms;
INSERT OR IGNORE INTO vt0 VALUES (0.4408407698988359, '&拊x1*ꇂ', NULL); -- 0ms;
PRAGMA short_column_names = true; -- 0ms;
PRAGMA journal_mode = DELETE; -- 0ms;
PRAGMA defer_foreign_keys = true; -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
UPDATE OR IGNORE vt0 SET c1='zoeSFV,' WHERE ((((((((((vt0.c0)AND(vt0.c2)))AND(vt0.c1)))AND(0.9176918245128369)))OR(0.8894988286582023)))<((+ (vt0.c2)))); -- 0ms;
REINDEX; -- 0ms;
UPDATE OR REPLACE vt0 SET c2=0Xffffffffa4b39dab; -- 1ms;
END TRANSACTION; -- 0ms;
CREATE VIRTUAL TABLE vt1 USING fts4(c0); -- 0ms;
CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2); -- 0ms;
BEGIN IMMEDIATE TRANSACTION; -- 0ms;
UPDATE vt1 SET (c0)=(-4.4875664E8); -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
UPDATE vt1 SET (c0)=(NULL); -- 1ms;
UPDATE OR IGNORE vt0 SET (c1)=(x''); -- 1ms;
END; -- 0ms;
INSERT OR IGNORE INTO vt1 VALUES (0.8114882748048118), (0.9650890054992312), (0.11620480938832078); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '13232'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('optimize'); -- 0ms;
UPDATE vt0 SET c2=NULL, c0=x'', c0=x'f0dc'; -- 1ms;
PRAGMA threads = -8974468853071584665; -- 0ms;
BEGIN EXCLUSIVE TRANSACTION; -- 0ms;
UPDATE OR IGNORE vt0 SET c0=x'dd4a' WHERE ((((((((((vt0.c1)!=(vt0.c1)))AND(((vt0.c2)+(vt0.c0)))))OR((- (vt0.c1)))))OR(vt0.c0 COLLATE RTRIM)))AND(((((vt0.c2)AND(vt0.c0)))AND(vt0.c2)))); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 1813042483); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 2020093582); -- 0ms;
INSERT INTO vt0(vt0) VALUES('merge=-24983375,6');\n; -- 0ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 0ms;
UPDATE rt0 SET (c1)=(x''); -- 0ms;
UPDATE OR IGNORE rt0 SET c2=''; -- 0ms;
UPDATE OR ABORT vt1 SET (c0)=('zoeSFV,') WHERE (((vt1.c0)) NOT BETWEEN (('0.4408407698988359')) AND ((((vt1.c0)|(vt1.c0))))); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
PRAGMA wal_autocheckpoint; -- 1ms;
INSERT OR REPLACE INTO rt0(c0) VALUES ('-412694236'), (0.5913781712592128), (''); -- 0ms;
BEGIN DEFERRED TRANSACTION; -- 0ms;
COMMIT TRANSACTION; -- 0ms;
PRAGMA temp.defer_foreign_keys = true; -- 0ms;
INSERT INTO vt0(vt0) VALUES('rebuild'); -- 1ms;
INSERT OR IGNORE INTO vt0(c2) VALUES ('-808857319'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 7); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 2); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('crisismerge', 958238601); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('automerge', 4); -- 0ms;
INSERT INTO vt1(vt1) VALUES('rebuild'); -- 1ms;
INSERT OR IGNORE INTO vt1(c0) VALUES (0.16367993811348247), (''), (0.7175557148950139); -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
INSERT OR ABORT INTO vt1(c0) VALUES (0.6945852907175998); -- 0ms;
ANALYZE; -- 0ms;
INSERT INTO vt1(vt1) VALUES('automerge=11'); -- 0ms;
INSERT OR ROLLBACK INTO vt1(c0) VALUES ('}7\r릳'), (''), (x'488d'); -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
UPDATE OR IGNORE vt0 SET (c2, c0)=('-951037945', 1374648299) WHERE ((((((((vt0.c0 COLLATE NOCASE)AND(CASE vt0.c2  WHEN vt0.c2 THEN vt0.c1 END)))AND(CASE WHEN vt0.c2 THEN vt0.c0 ELSE vt0.c1 END)))AND(((vt0.c2) IS TRUE))))OR(vt0.c0)); -- 1ms;
UPDATE OR IGNORE vt0 SET c2='-690025786', c1='-1531732565'; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('automerge', 1); -- 3ms;
INSERT INTO vt0(vt0, rank) VALUES('merge', 1827099751);\n; -- 0ms;
INSERT INTO vt1(vt1) VALUES('integrity-check'); -- 0ms;
END; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
SELECT DISTINCT CASE (((rt0.c2))>=((NULL)))  WHEN ((vt0.c1) IS FALSE) THEN CAST(',0' AS REAL) ELSE rt0.c0 END FROM rt0 WHERE (((((NULL)GLOB('1904728159')))%(((x'') NOT BETWEEN (x'') AND (NULL))))) GROUP BY ((TRIM(DISTINCT vt0.c0, vt1.c0)) IS FALSE), ((((((vt1.c0)AND(vt0.c0)))OR(rt0.c1))) BETWEEN (((((((((vt1.c0)AND(rt0.c1)))AND(vt0.c1)))AND(rt0.c0)))OR(vt0.c0))) AND ((NULL IN ()))), ((((vt0.c2)AND(vt0.c2))) IS TRUE), LIKELY(DISTINCT ((vt0.c2) NOT BETWEEN (rt0.c0) AND (vt0.c2))), SQLITE_VERSION() HAVING (- (SUM(rt0.c2)));SELECT vt1.c0 FROM vt1; -- 0ms;
SELECT ALL ((0.8797375244912492)<=(((((((((rt0.c0)OR(x'3d04f9cb')))AND(x'afd21eda')))AND(vt1.c0)))OR(x'e40c')))), MIN(CASE WHEN vt1.c0 THEN rt0.c1 ELSE rt0.c1 END), (((vt1.c0 IN ()))<=(vt0.c0)) FROM vt1, vt0, rt0; -- 0ms;
SELECT DISTINCT ((((((vt0.c1) BETWEEN (rt0.c2) AND (rt0.c2)))AND((rt0.c2 IN (vt0.c1)))))AND(((rt0.c2) BETWEEN (vt0.c0) AND (x'd5e14a17')))) FROM vt1, rt0, vt0; -- 0ms;
SELECT 651071922, ((((rt0.c0) IS FALSE))GLOB(((rt0.c2)AND(vt0.c1)))), ((((+ (vt0.c2))))<=(((rt0.c2 IN ())))) FROM vt1;SELECT DISTINCT (+ ((rt0.c2 IN ()))) FROM vt1, vt0, rt0 GROUP BY rt0.c1 COLLATE NOCASE HAVING 0.05563511003497468 COLLATE RTRIM; -- 1ms;
SELECT GROUP_CONCAT((- (-1649672889))) COLLATE BINARY, (CAST(rt0.c0 AS REAL) IN ()), LIKELIHOOD(DISTINCT ((((rt0.c2)OR(vt0.c2)))AND(rt0.c2)), 0.5637080527315521) FROM rt0;SELECT DISTINCT ((((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c1)))&(((((rt0.c0)OR(rt0.c2)))AND(rt0.c0)))), ((vt1.c0)||(rt0.c0)), ((((rt0.c1)-(rt0.c1)))LIKE(((vt0.c2)+(vt0.c0)))) FROM rt0, vt1, vt0 WHERE (((CASE WHEN NULL THEN '' END)==((('偙ftmo૆7') NOT BETWEEN (NULL) AND (x''))))); -- 0ms;
SELECT DISTINCT rt0.c1 COLLATE RTRIM FROM rt0, vt1 WHERE (((((((((((NULL)OR(x'5a8f')))AND('0c)')))OR(x'57ffe2fc')))AND('-205886853'))) NOT BETWEEN ('[똱') AND ((('s餍L') BETWEEN (NULL) AND (NULL))))); -- 0ms;
SELECT DISTINCT (((vt0.c2 COLLATE BINARY))<>((((((((((vt0.c0)AND(rt0.c2)))AND(vt0.c1)))AND(vt0.c2)))AND(rt0.c2))))) FROM vt1, rt0;SELECT (((((rt0.c2 IN ()))AND(CASE WHEN vt0.c0 THEN vt0.c0 ELSE 0.12906712161135336 END)))OR((+ (rt0.c2)))) FROM vt0 WHERE ((- ('-1215458311')) COLLATE NOCASE);SELECT DISTINCT ((((vt0.c2) BETWEEN (rt0.c0) AND (rt0.c0))) IS FALSE) FROM vt1 LIMIT -1795180990 OFFSET -1649672889;SELECT vt1.c0 FROM vt0;SELECT (((TOTAL(rt0.c2)))>(((((rt0.c0)) BETWEEN ((vt0.c2)) AND ((vt0.c0)))))), TOTAL((((rt0.c2)) NOT BETWEEN ((rt0.c2)) AND ((vt0.c2)))) OVER (), (- ((NOT (vt1.c0)))) FROM vt1 WHERE ((NOT ((('7p3+!LQb')*(0.16832038368949143))))) GROUP BY ((((vt0.c0)>=(rt0.c2)))AND(((rt0.c2) NOT NULL)));SELECT CAST(CAST(vt1.c0 AS REAL) AS REAL) FROM vt0, vt1, rt0 WHERE ((((('1268758963' IN ())))<=((CASE NULL  WHEN 0x58cf1ff3 THEN 0x3f6f322e ELSE 0xffffffff9778468d END)))) GROUP BY ((CAST(NULL AS NUMERIC))&((NOT (rt0.c2)))) HAVING (~ (((rt0.c0) NOT BETWEEN (rt0.c1) AND (vt0.c1)))) ORDER BY CASE ((vt0.c1) NOT NULL)  WHEN (((vt0.c2))<=((vt0.c2))) THEN 0.7558579689900121 ELSE (NOT (vt0.c2)) END; -- 0ms;
SELECT ALL NTH_VALUE(vt0.c2, TYPEOF(vt0.c1 COLLATE BINARY)) OVER ( ROWS  CURRENT ROW EXCLUDE GROUP) FROM vt0, vt1 WHERE (COALESCE(DISTINCT ((0.21661529572344707)>=(0X1e0355d1)), ((x'') IS TRUE))) LIMIT 1102563661; -- 0ms;
SELECT ALL rt0.c2, DENSE_RANK() OVER (), ((CASE vt0.c2  WHEN vt0.c0 THEN rt0.c0 ELSE vt0.c0 END) BETWEEN (vt0.c2) AND (vt1.c0)) FROM rt0 WHERE (CASE WHEN (NOT ('1g%u')) THEN ((x'') IS TRUE) END);SELECT DISTINCT vt1.c0 COLLATE BINARY COLLATE RTRIM FROM rt0 WHERE (((('-699600301', x'', ((x'')||(''))))<((LOWER(DISTINCT -236111406), ((NULL) BETWEEN ('-2144677727') AND (-844654323)), (+ (NULL))))));SELECT DISTINCT ((CAST(vt1.c0 AS TEXT)) NOT BETWEEN ((vt1.c0 IN (vt0.c1))) AND (((((vt0.c0)OR(vt1.c0)))AND(NULL)))) FROM vt1;SELECT ALL ((vt0.c2) BETWEEN (((vt0.c2)>(rt0.c2))) AND (((rt0.c0)<(vt1.c0)))) FROM vt1 FULL OUTER JOIN rt0 ON ((x'' COLLATE BINARY)>>(((vt0.c2) BETWEEN (rt0.c1) AND (rt0.c2)))) LEFT OUTER JOIN vt0 ON (((rt0.c2, NULL, vt0.c0)) BETWEEN ((rt0.c0, load_extension(NULL, rt0.c2), (vt0.c2 IN ()))) AND (((((x'9f0c'))<=((vt0.c0))), (~ (vt1.c0)), ((vt0.c0) NOT BETWEEN (vt1.c0) AND (rt0.c0)))));SELECT ALL ((((CAST(vt0.c1 AS NUMERIC))AND('2018187878')))OR(NULLIF(DISTINCT 0.7801079138825313, rt0.c2))) FROM vt1 WHERE (highlight((((0xffffffff9778468d, NULL, '#')) BETWEEN ((-1.531732565E9, NULL, x'')) AND ((x'd0b694ad', '1294921192', x'68b6'))), ((((0.42220537797257596)AND(0.6572783602047059)))OR(NULL)), 0.5078367419169119 COLLATE NOCASE, ((x'') NOT NULL))) GROUP BY ((((((vt0.c1)<(vt0.c0)))OR((vt0.c2 IN ()))))OR(((vt0.c1) IS FALSE))) HAVING NULLIF(AVG(vt0.c2), ((((vt0.c0)OR(vt0.c2)))OR(rt0.c1)));SELECT DISTINCT (CASE WHEN vt0.c2 THEN '' WHEN vt0.c2 THEN vt0.c0 WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c1 END IN ()) FROM vt1, rt0; -- 0ms;
SELECT DISTINCT (((vt1.c0 IN (vt0.c1))) NOT NULL) FROM rt0, vt1, vt0; -- 0ms;
SELECT DISTINCT json_object(vt0.c0 COLLATE RTRIM, MIN(vt0.c0), (((vt1.c0, vt0.c1, vt1.c0))<((vt0.c1, rt0.c1, rt0.c0))), 0.07284859901355834) FROM vt1, rt0, vt0 WHERE (json_valid((('a7eZQs') BETWEEN ('A&') AND ('uFl+\r8*c'))));SELECT DISTINCT ((((rt0.c2 COLLATE BINARY)OR(CAST(vt0.c2 AS NUMERIC))))AND(((((vt0.c2)AND(NULL)))AND(rt0.c0)))), ((CHAR(x''))>>((+ (x'f55a')))), NULLIF(DISTINCT ((vt0.c0) IS FALSE), ((vt0.c0) BETWEEN (rt0.c1) AND (vt0.c2))) FROM vt1, vt0 WHERE (x'');SELECT ALL ((CASE vt1.c0  WHEN vt1.c0 THEN vt0.c1 WHEN '1707392153' THEN vt1.c0 WHEN vt1.c0 THEN vt0.c0 END)-(((rt0.c0)<>(vt0.c1)))) FROM rt0, vt0, vt1; -- 1ms;
SELECT (((vt0.c0) BETWEEN (rt0.c1) AND (vt0.c0)) IN ()) FROM vt0, vt1, rt0 WHERE (UPPER(DISTINCT (('X릳2S')<<(NULL)))); -- 0ms;
SELECT DISTINCT ((CAST(NULL AS NUMERIC)) IS TRUE) FROM rt0, vt0 WHERE (CASE WHEN '&O%i5䮰C]' THEN (('Ex<l(5Lw(') NOT BETWEEN ('') AND (x'')) WHEN ((x'')LIKE(NULL)) THEN (+ ('')) WHEN '-13782814' THEN (NULL IN ('2w')) ELSE ((x'')AND(-565876223)) END) LIMIT 1669157632 OFFSET 443214139; -- 0ms;
SELECT ALL ((- (vt0.c1)) IN ()) FROM vt0, rt0; -- 0ms;
SELECT DISTINCT (NOT (vt0.c2 COLLATE BINARY)), ((((vt0.c2)AND(rt0.c2)))>((((vt0.c2, vt0.c2, rt0.c1))=((rt0.c2, vt0.c1, rt0.c1))))), (((NOT (rt0.c2))) IS FALSE) FROM vt0 LEFT OUTER JOIN rt0 ON (((rt0.c1) BETWEEN (x'') AND (vt0.c2)) IN ()) WHERE (LTRIM(CASE WHEN 0.08331672424964309 THEN NULL ELSE x'' END)); -- 0ms;
SELECT (CASE WHEN rt0.c1 THEN rt0.c2 END IN ()) FROM rt0 WHERE (((NULL COLLATE NOCASE) NOT BETWEEN (((NULL) ISNULL)) AND ((((x'')) BETWEEN ((0.45451062042614465)) AND (('1678899355')))))) LIMIT 1823736790 OFFSET 86978531; -- 1ms;
SELECT DISTINCT CAST(LOWER(DISTINCT rt0.c1) AS REAL) FROM vt0;SELECT (((vt0.c2))>=(((rt0.c0 IN (rt0.c1, vt0.c2))))) FROM rt0 WHERE ((((NULL IN ()))>>((NULL IN (x'')))));SELECT ALL x'', vt0.c2, GROUP_CONCAT(vt0.c1) OVER () FROM vt0, vt1, rt0 WHERE (((((0.8560184570932701)IS NOT(x'')))AND(((NULL) ISNULL)))); -- 1ms;
SELECT DISTINCT RANK() OVER () FROM vt1, vt0 WHERE (((CAST(x'' AS REAL)) BETWEEN (-448756640) AND (((NULL) ISNULL)))); -- 0ms;
SELECT ALL NULL FROM rt0, vt1 LIMIT -1753725299; -- 0ms;
SELECT DISTINCT AVG(((((((((rt0.c2)OR(0.8355929876954997)))OR(rt0.c1)))AND(vt0.c2)))OR(vt0.c1))) FROM rt0 GROUP BY 0.7504998087561068, x'886d' COLLATE RTRIM, ((TRIM(DISTINCT NULL))OR(CAST(rt0.c0 AS BLOB))) ORDER BY LOWER(NULL) COLLATE BINARY ASC;SELECT DISTINCT ((((((((((rt0.c2) IS FALSE))OR(vt0.c1 COLLATE BINARY)))OR(vt0.c1)))OR((vt0.c2 IN ()))))AND((((vt0.c0, vt0.c1, rt0.c0)) NOT BETWEEN ((x'd70d', rt0.c0, vt0.c2)) AND (('偙ftmo૆7', rt0.c2, vt0.c2))))) FROM vt1, vt0, rt0 WHERE (((((((0.582922761824724)) BETWEEN ((x'')) AND (('X릳2S')))))>=((x'')))); -- 1ms;
SELECT ((CASE WHEN vt0.c0 THEN vt1.c0 END)/(rt0.c0)) FROM vt1, rt0, vt0 LIMIT -1105614718 OFFSET 945858670; -- 0ms;
SELECT DISTINCT TRIM(((((((((NULL)AND(rt0.c0)))AND(rt0.c1)))AND(vt0.c2)))OR(vt1.c0)), ((rt0.c2)<<(vt1.c0))), (((- (vt0.c2)))>=(((vt1.c0)||(vt0.c2)))), ((((((((((vt0.c1)*(vt1.c0)))AND(vt0.c2)))AND(CAST(rt0.c0 AS INTEGER))))AND(CASE rt0.c1  WHEN rt0.c2 THEN vt0.c0 END)))AND(((rt0.c0)||(rt0.c0)))) FROM vt0;SELECT DISTINCT ((((((vt0.c1)>=(rt0.c1)))OR(((vt0.c1)<>('sk9TP')))))OR(AVG(vt0.c1))) FROM rt0, vt0 WHERE ((((+ (NULL)))>>('0.8114882748048118'))); -- 0ms;
SELECT DISTINCT CUME_DIST() OVER () FROM rt0, vt1; -- 0ms;
SELECT ALL '_' FROM vt0, rt0 WHERE (((((x'') BETWEEN (NULL) AND ('-2112222869'))) BETWEEN ((('') NOT BETWEEN (NULL) AND (x''))) AND (CASE WHEN NULL THEN '3i' END))) INTERSECT SELECT DISTINCT ((((((vt0.c0)OR(vt1.c0)))AND('1977874028')))%((- (vt0.c2)))) FROM rt0, vt1, vt0 WHERE ('0.0') GROUP BY (((('-2144677727')||(vt0.c0))) NOT NULL), (((vt0.c1) NOT BETWEEN (rt0.c1) AND (vt0.c0)) IN ()), ((vt0.c1) NOT BETWEEN (vt0.c0) AND (CASE WHEN rt0.c1 THEN vt1.c0 ELSE vt0.c2 END)) HAVING (((((rt0.c1))<((vt0.c1))))<=(((vt1.c0) BETWEEN (rt0.c1) AND (vt0.c2)))); -- 0ms;
SELECT DISTINCT vt0.c1, (((vt0.c1) NOT BETWEEN (vt0.c1) AND (rt0.c1)) IN (LIKELIHOOD('}o', 0.06661935093500759))), COUNT(*) OVER (), LIKELIHOOD(((((((((vt0.c0)AND(vt1.c0)))OR(x'')))OR(vt0.c1)))AND(vt0.c0)), 0.9231767851906755), CAST(COUNT(*) AS BLOB), CASE vt0.c2  WHEN CAST(rt0.c0 AS NUMERIC) THEN vt1.c0 COLLATE BINARY END, ((CAST(rt0.c1 AS INTEGER))>=(CAST(rt0.c2 AS REAL))) FROM rt0, vt0, vt1; -- 1ms;
SELECT ALL (- (vt0.c0 COLLATE BINARY)) FROM rt0, vt0, vt1 ORDER BY HEX(vt0.c0) COLLATE BINARY  NULLS FIRST; -- 2ms;
SELECT DISTINCT SUM((rt0.c1 IN (rt0.c2, vt0.c1))) FILTER(WHERE rt0.c2) OVER () FROM rt0;SELECT (~ (AVG(vt1.c0))) FROM rt0, vt0 WHERE (CASE WHEN 0X41b7c94d COLLATE NOCASE THEN (('#nc(\n5ZzI')||('503535057')) END) GROUP BY (((((rt0.c1 IN ()))OR((((vt1.c0)) NOT BETWEEN (('473169986')) AND ((rt0.c2))))))OR((NULL IN ()))), ((((vt0.c0 COLLATE NOCASE)AND(CAST(rt0.c2 AS TEXT))))OR(LIKELY(vt0.c0))), (+ (rt0.c1)) COLLATE BINARY;SELECT ((CASE vt0.c2  WHEN vt0.c0 THEN vt1.c0 END) NOT BETWEEN (((rt0.c0)OR(0.956354834275908))) AND (vt0.c1)) FROM vt1, rt0, vt0 WHERE (((((x'')|(x'')))IS((~ ('855654453'))))); -- 0ms;
SELECT DISTINCT (NOT (CAST(vt0.c0 AS TEXT))) FROM vt1, rt0 WHERE (((((x'')<=(651071922))) BETWEEN (((x'2bad')/('2w'))) AND (MIN('1551335030', 0.4408407698988359)))) GROUP BY (((((vt0.c0)AND(rt0.c2)))OR(vt0.c2)) IN (rt0.c0)), CASE TYPEOF(vt0.c0)  WHEN (((rt0.c1, vt0.c2, rt0.c0)) NOT BETWEEN ((vt0.c1, rt0.c2, vt0.c1)) AND ((vt0.c0, vt1.c0, rt0.c1))) THEN ((rt0.c1)<(vt0.c2)) WHEN vt0.c2 COLLATE RTRIM THEN (((vt0.c0)) BETWEEN ((vt1.c0)) AND ((vt0.c1))) WHEN ((vt1.c0) NOT NULL) THEN ((0.2316105872336629)GLOB(vt1.c0)) ELSE (rt0.c2 IN ()) END, vt0.c2, CASE CASE vt0.c0  WHEN vt1.c0 THEN vt0.c2 END  WHEN rt0.c0 COLLATE NOCASE THEN (rt0.c0 IN ()) END, ((((rt0.c0) NOT NULL))GLOB(IFNULL(DISTINCT vt0.c1, vt0.c2))) HAVING vt0.c2;SELECT DISTINCT ((COUNT(*))-(503535057)) FROM vt1 WHERE (((((NULL)<<(x'')))<>(((-1100587977) NOT NULL)))) GROUP BY (- ((-1.79518099E9 IN ()))), ((((((((((((NULL)AND(rt0.c1)))AND(rt0.c1)))OR(vt0.c0)))OR(rt0.c2)))AND((rt0.c0 IN ()))))OR(((0xfffffffff3ba6a7b) IS TRUE))), x'b912' COLLATE NOCASE, '', (((rt0.c1) NOTNULL) IN ()); -- 0ms;
SELECT DISTINCT LIKE(((vt0.c1) NOT BETWEEN (NULL) AND (vt0.c2)), CASE WHEN NULL THEN vt1.c0 ELSE rt0.c2 END), vt0.c0, (NOT (((vt0.c1) NOT NULL))) FROM vt0, rt0, vt1; -- 0ms;
SELECT DISTINCT ((((vt0.c2) NOT BETWEEN (rt0.c1) AND (rt0.c2)))>(x'')) FROM vt0, vt1, rt0 WHERE (CASE WHEN ((NULL) BETWEEN ('651071922') AND (1740499333)) THEN ((((((((x'')AND('0.07284859901355834')))AND(0x9aedaa1)))OR(0X784bde0f)))AND(0.8683247091410501)) ELSE ((0.6510281049019713)LIKE(x'')) END); -- 0ms;
SELECT ALL CASE ((vt0.c0)>=(vt0.c2))  WHEN ((vt0.c0)||(vt1.c0)) THEN CASE WHEN rt0.c0 THEN vt0.c0 WHEN rt0.c1 THEN vt0.c2 WHEN vt0.c1 THEN vt0.c1 END ELSE vt0.c0 END, MIN((~ (vt0.c0))) COLLATE BINARY, (((((vt1.c0)LIKE(vt0.c1)), ((0Xffffffffba38cbd9)>(vt0.c2)), (rt0.c2 IN ())))<((((((((((vt0.c2)AND(rt0.c0)))OR(rt0.c1)))OR(vt0.c1)))AND(rt0.c2)), CAST(rt0.c0 AS TEXT), (~ (vt0.c1))))) FROM vt1 LIMIT -699904044;SELECT DISTINCT (((NULLIF(rt0.c0, -2.13878416E8), ('1769218413' IN ()), (rt0.c1 IN ())))<>((NULL, (((rt0.c2)) NOT BETWEEN ((vt0.c2)) AND ((vt0.c0))), vt0.c1 COLLATE RTRIM))) FROM rt0, vt0 WHERE ((NOT ('*K%(?'))); -- 0ms;
SELECT GROUP_CONCAT(COUNT(((rt0.c0) IS FALSE))), MIN((rt0.c2 IN ())), CAST(NULLIF(DISTINCT rt0.c0, vt0.c0) AS TEXT) FROM vt0, vt1, rt0 WHERE ((- (((('1e500'))>((0.5000735577614439))))));SELECT ALL (CASE WHEN vt0.c0 THEN vt0.c1 ELSE NULL END IN ()) FROM vt1, rt0; -- 0ms;
SELECT DISTINCT COUNT(*), ((MIN(rt0.c0))+(((rt0.c0) NOT NULL))), (~ (COALESCE(DISTINCT vt0.c0, vt1.c0))) FROM vt0, vt1, rt0; -- 1ms;
SELECT ALL CASE WHEN rt0.c0 THEN vt0.c1 ELSE vt0.c2 END COLLATE NOCASE FROM vt1, rt0, vt0 GROUP BY vt0.c2, CASE ''  WHEN rt0.c1 THEN ((rt0.c2)AND(rt0.c2)) ELSE rt0.c2 END, (((rt0.c1, vt1.c0, rt0.c0)) NOT BETWEEN ((vt0.c2 COLLATE RTRIM, (((rt0.c2, vt1.c0, rt0.c0))<((vt0.c2, vt1.c0, NULL))), vt0.c2)) AND ((rt0.c2, ((vt0.c1)=(rt0.c1)), CASE rt0.c1  WHEN rt0.c2 THEN rt0.c0 WHEN vt0.c1 THEN rt0.c0 WHEN vt1.c0 THEN vt0.c0 END))) ORDER BY TOTAL_CHANGES() ASC  NULLS FIRST; -- 3ms;
SELECT DISTINCT CAST(((rt0.c0)>=(vt0.c2)) AS REAL), ((((vt0.c1)AND((rt0.c1 IN ()))))AND(((rt0.c0)=(rt0.c1)))), vt0.c1 FROM vt0, rt0; -- 0ms;
SELECT DISTINCT ((((rt0.c2)AND(NULL)))==(CASE WHEN rt0.c1 THEN 9.4585867E8 END)) FROM rt0, vt0, vt1 WHERE (CAST(((NULL)/('v,')) AS NUMERIC)); -- 0ms;
SELECT DISTINCT (('') ISNULL), MAX(((NULL) NOT BETWEEN (vt1.c0) AND (rt0.c2))), 0.8560184570932701 COLLATE RTRIM FROM vt0;SELECT DISTINCT (((((((((~ (rt0.c0)))OR((((rt0.c1))>((rt0.c2))))))AND((((rt0.c1, vt0.c2, rt0.c0))=((vt0.c2, vt0.c1, rt0.c2))))))AND((rt0.c0 IN ()))))OR((((vt0.c1)) NOT BETWEEN ((rt0.c2)) AND ((vt1.c0))))) FROM vt0, vt1 WHERE (CASE WHEN CASE WHEN '-1280542194' THEN 0.4296644889723894 END THEN ((1.06425195E9) NOT BETWEEN (0Xffffffff8125c3e9) AND (x'')) ELSE CAST(NULL AS TEXT) END);SELECT ALL COUNT(*) FROM rt0, vt0 WHERE (((((489465626)==('1294921192')))>(NULL))); -- 0ms;
SELECT TRIM((- (vt0.c0)), CAST(rt0.c2 AS BLOB)) FROM vt0, rt0, vt1; -- 0ms;
SELECT (((((vt0.c2)OR(vt0.c2)))AND(rt0.c0)) IN ()) FROM rt0, vt0 LIMIT 929189265; -- 0ms;
SELECT DISTINCT CAST((((vt0.c2))==((vt1.c0))) AS TEXT) FROM rt0, vt1;SELECT DISTINCT (((+ (rt0.c1))) NOT BETWEEN (((NULL) IS FALSE)) AND (SUM(vt1.c0))), rt0.c2, ((((vt0.c1)>=(vt0.c0))) BETWEEN (DATE(rt0.c0, rt0.c1, rt0.c2)) AND ((rt0.c2 IN ()))) FROM vt0;SELECT NTH_VALUE(vt0.c0, ((vt0.c0)<(CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt0.c0 END))) OVER (), ((((rt0.c2) ISNULL)) ISNULL), 'd#<4⿣/' FROM vt1, vt0;SELECT ALL vt0.c0 FROM vt0 WHERE ((((((NULL)<<(x'121b')), '1332120964' COLLATE BINARY, (((x'eb680ee5c974', x'', NULL)) BETWEEN ((0.5340391134849501, 0.05948377091358337, NULL)) AND ((x'', -1144797624, '1154352591')))))<((((-1.7976931348623157E308) IS TRUE), CASE WHEN '1888764180' THEN x'' END, ((0.46160775519646846) ISNULL))))) LIMIT 1027372643; -- 0ms;
SELECT DISTINCT x'', (((rt0.c1 IN ())) BETWEEN ((NOT (rt0.c2))) AND (rt0.c2)), ((((rt0.c1)OR('Hải'))) IS FALSE) FROM vt1, rt0 WHERE (((('-825510351' IN (x'', -2.128231447E9))) NOT BETWEEN ((((('(ws/alv9q')OR('尷-184:2784130555634322412 126:6289854597095763985TV\rx')))AND('&,'))) AND (((NULL) NOT BETWEEN (0.5260767052980405) AND (''))))); -- 0ms;
SELECT ALL GROUP_CONCAT(0.6334479991285491) OVER () FROM vt0, vt1, rt0 WHERE ((((0.0598105208823525) BETWEEN (0x6974216d) AND (x'')) IN ())) LIMIT -1724152381 OFFSET -936573311; -- 0ms;
SELECT DISTINCT vt0.c2, COUNT(*) OVER ( ORDER BY rt0.c0 COLLATE NOCASE COLLATE NOCASE  NULLS LAST), CAST((((vt1.c0))=(('0.6119620163638211'))) AS REAL) FROM vt0, vt1, rt0 GROUP BY (((((rt0.c1) NOT BETWEEN (vt0.c0) AND (rt0.c1))))==((((vt0.c0)+(rt0.c0))))); -- 2ms;
SELECT DISTINCT MIN(((vt0.c1) BETWEEN (rt0.c1) AND (vt1.c0))) FROM rt0 WHERE (((((NULL)+(NULL)))IS NOT(CAST(x'a2e5' AS TEXT))));SELECT DISTINCT MAX(MIN(rt0.c1 COLLATE RTRIM)) FROM rt0, vt0, vt1;SELECT ((((((rt0.c0)OR(vt1.c0)))AND(x'')))<=(((((vt0.c0)OR(rt0.c0)))AND(vt0.c0)))) FROM rt0, vt1 GROUP BY (((vt0.c0 IN (rt0.c1))) BETWEEN (NULL) AND (CAST(vt1.c0 AS INTEGER))), CASE WHEN (~ (rt0.c2)) THEN NULL END, (- (((rt0.c0)!=(vt0.c0)))) LIMIT 1352799537 OFFSET -1601784967;SELECT DISTINCT ((((LAST_INSERT_ROWID())OR(CASE rt0.c1  WHEN vt0.c2 THEN rt0.c2 WHEN vt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c0 END)))AND(((('	5s]踬J\nk', vt1.c0, vt0.c1)) NOT BETWEEN ((vt0.c0, rt0.c0, vt0.c0)) AND ((vt0.c0, vt0.c2, 'B~{N &pY'))))), ((((((vt0.c1)AND(rt0.c2)))OR(0Xffffffff982dd59c))) NOTNULL), (((~ (rt0.c0))) NOT NULL) FROM vt1, vt0;SELECT ((((((((((rt0.c1)AND(rt0.c2)))OR(vt1.c0)))AND(rt0.c0)))AND(-1.74182666E9)))>>(((vt0.c0)|(rt0.c0)))) FROM vt0, vt1, rt0 WHERE ((x'' COLLATE BINARY IN (CAST(x'' AS REAL), CASE 0X784b1a66  WHEN '-1400912846' THEN -1474589320 WHEN 0.9054550382659327 THEN 1827099751 WHEN x'' THEN 0.45592188950171375 END))); -- 0ms;
SELECT ALL rt0.c2 FROM vt1, vt0, rt0 WHERE (x'5349'); -- 0ms;
SELECT ALL rt0.c2 FROM vt0 WHERE (LIKELY(DISTINCT '' COLLATE NOCASE));SELECT ALL rt0.c1, DATE(vt0.c2, vt1.c0, vt1.c0, rt0.c2, rt0.c0) COLLATE NOCASE, CASE WHEN (((vt1.c0)) NOT BETWEEN ((vt0.c1)) AND ((rt0.c2))) THEN ((vt0.c0) BETWEEN (vt0.c2) AND (rt0.c0)) ELSE ABS(NULL) END FROM rt0 WHERE ((NULL IN (CASE WHEN x'' THEN '-1396992997' WHEN NULL THEN 0.12872195560740707 WHEN NULL THEN NULL ELSE x'' END)));SELECT ALL TOTAL(((rt0.c0) NOTNULL)), NULLIF((- (vt1.c0)), '#e?)f鐛_g'), CASE WHEN ((vt0.c2) NOTNULL) THEN 0.0598105208823525 END FROM vt0;SELECT AVG(((rt0.c1)<>(rt0.c2))) OVER () FROM rt0, vt0, vt1 ORDER BY NULL COLLATE NOCASE ASC; -- 2ms;
SELECT DISTINCT rt0.c1 FROM vt1;SELECT ALL (((vt0.c2)) NOT BETWEEN ((((vt0.c2)|(rt0.c1)))) AND ((((vt0.c1) NOT NULL)))) FROM vt0, rt0, vt1 WHERE (((((x'051a')) NOT BETWEEN (('-236111406')) AND ((NULL))) IN ())) GROUP BY ((((('-1832958741')) BETWEEN ((rt0.c0)) AND ((rt0.c2)))) BETWEEN ((- (vt0.c1))) AND (rt0.c2)), ((((NULL)OR((rt0.c1 IN ()))))OR((rt0.c0 IN (vt0.c1)))), CASE WHEN (((vt0.c0, rt0.c0, rt0.c2))<>((rt0.c1, rt0.c1, vt0.c0))) THEN CASE WHEN x'' THEN x'' ELSE vt0.c2 END END HAVING NULL; -- 0ms;
SELECT ALL (((rt0.c0, rt0.c1, vt0.c2)) NOT BETWEEN ((198860515, ((vt0.c0)<=(vt0.c2)), (0.13307082722759322 IN ()))) AND ((rt0.c1, ((vt0.c0)>(vt0.c0)), (rt0.c2 IN ())))) FROM vt1;SELECT ALL '', ((rt0.c2)LIKE(rt0.c0)) COLLATE NOCASE, ((((rt0.c0)IS(vt0.c0)))/(CASE WHEN rt0.c1 THEN rt0.c1 END)) FROM vt0, vt1, rt0; -- 0ms;
SELECT DISTINCT (+ ('')), (((~ (rt0.c1))) NOT NULL), ((((((((TRIM(vt0.c2, vt0.c2))AND('-1792167761' COLLATE RTRIM)))AND((NOT (vt0.c0)))))OR(((rt0.c1)AND(rt0.c0)))))AND((((rt0.c0, vt0.c0, 'h#'))<=((vt1.c0, vt1.c0, rt0.c2))))) FROM vt1, vt0, rt0 WHERE (4.89465626E8); -- 0ms;
SELECT DISTINCT (((((vt0.c1)<(rt0.c0))))<((((((((((vt1.c0)OR(rt0.c0)))OR(rt0.c2)))AND(rt0.c2)))AND(vt0.c0))))), (NOT (vt0.c1)) COLLATE RTRIM, ((((SUM(rt0.c0))OR(highlight(vt1.c0, vt1.c0, vt0.c2, vt0.c0))))AND(TRIM(DISTINCT rt0.c1))) FROM vt0, vt1;SELECT DISTINCT ((((((((((((rt0.c1)OR(((((rt0.c1)OR(vt1.c0)))AND(rt0.c2)))))AND((((vt1.c0))==((vt0.c0))))))AND(CAST(rt0.c1 AS BLOB))))OR(0X45775059)))OR(GROUP_CONCAT(rt0.c0))))AND((NOT (rt0.c2)))) FROM rt0 GROUP BY ((rt0.c1) NOT NULL) COLLATE RTRIM, NULL, (NOT ((rt0.c0 IN (vt0.c0)))) HAVING CAST(vt1.c0 COLLATE NOCASE AS TEXT);SELECT ALL LIKE(((vt0.c0)|(rt0.c2)), LENGTH(vt0.c1)), ((CASE WHEN vt0.c0 THEN vt0.c2 END) IS TRUE), ((((((((((((((rt0.c0)OR(vt0.c2)))AND(rt0.c2)))AND(rt0.c0)))OR(vt0.c2)))AND('749089357')))AND(rt0.c2)))%(CASE rt0.c1  WHEN rt0.c2 THEN x'' END)) FROM rt0, vt0 WHERE ((((NULL IN (NULL)))==(((x'') BETWEEN (0Xffffffffbd93ef47) AND ('3uወ~'))))); -- 0ms;
SELECT ((((vt1.c0)+(vt1.c0)))=(SUM(vt1.c0))) FROM rt0, vt0 GROUP BY ((((rt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c0))) BETWEEN (vt0.c2 COLLATE BINARY) AND (((rt0.c1)<>(vt0.c2)))) ORDER BY (((rt0.c1 IN (rt0.c2)))||((+ (vt0.c0)))) ASC  NULLS LAST;SELECT ALL (((vt0.c0, rt0.c2, vt0.c0)) BETWEEN ((0.45706502748402444, '-1215458311', ((rt0.c1)<(x'ad9e')))) AND ((((vt0.c2) IS TRUE), MIN(x''), ((vt1.c0) BETWEEN (rt0.c0) AND (vt1.c0))))) FROM rt0, vt1, vt0; -- 1ms;
SELECT DISTINCT ((((vt0.c2) NOT BETWEEN (vt0.c0) AND (rt0.c2))) BETWEEN (CAST(vt0.c1 AS INTEGER)) AND (rt0.c2)) FROM vt0, rt0 WHERE (LIKELIHOOD(DISTINCT ((x'') BETWEEN ('') AND (0.4953493214219252)), 0.6632394779572914)); -- 0ms;
SELECT ALL ROW_NUMBER() OVER () FROM vt0, vt1, rt0 WHERE (CASE CAST('1827099751' AS TEXT)  WHEN ((0Xffffffffee7b9c6e)GLOB(0.6626404591652871)) THEN ((0.5657282538688323) NOT NULL) ELSE (((0.7276806630777718))>((0.5970663281768965))) END); -- 1ms;
SELECT DISTINCT SUM(CAST(-1627590383 AS TEXT)) FROM vt1; -- 0ms;
SELECT ALL ((((((((((((rt0.c1)AND(vt1.c0)))AND(rt0.c1)))AND(vt0.c2)))AND(vt0.c2)))AND(0.12872195560740707)))AND(((((((((vt0.c2)OR(vt0.c1)))AND(vt0.c1)))AND(rt0.c0)))AND(rt0.c2)))) FROM rt0, vt1;SELECT ALL (CAST(rt0.c2 AS NUMERIC) IN ()) FROM vt1, rt0; -- 0ms;
SELECT DISTINCT ((((vt0.c0 COLLATE RTRIM)OR(((rt0.c1) NOT BETWEEN ('%Bvw6d^>q') AND (vt1.c0)))))OR(AVG(rt0.c0))) FROM vt0, vt1, rt0; -- 1ms;
SELECT DISTINCT (((((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c2)), ((vt0.c0) NOT BETWEEN (vt1.c0) AND (vt0.c2)), (NULL IN ('', rt0.c2))))<=(((((vt0.c2, vt1.c0, rt0.c1)) BETWEEN ((vt1.c0, vt0.c0, vt0.c2)) AND ((rt0.c1, vt1.c0, vt1.c0))), rt0.c0, ((rt0.c0)OR(vt0.c1))))) FROM vt0 WHERE (0x762da115);SELECT TOTAL(((rt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c2))) OVER () FROM vt0, vt1 WHERE (((CASE WHEN 0.5078367419169119 THEN NULL END) BETWEEN ((NOT (x''))) AND (((((((((NULL)OR(NULL)))AND(x'')))OR('+o0}r|')))OR(NULL)))));SELECT ((NULL)>((((vt0.c2, vt0.c1, '')) NOT BETWEEN ((vt0.c0, vt0.c0, rt0.c0)) AND ((rt0.c2, rt0.c1, vt0.c1))))) FROM rt0, vt1, vt0 WHERE (0.21285777391995497) ORDER BY (+ (((((1982701845)OR(vt0.c1)))OR(0x3f6f322e)))); -- 1ms;
SELECT ALL LAST_VALUE(rt0.c1) OVER () FROM rt0, vt1; -- 1ms;
SELECT DISTINCT LAST_VALUE((- (LOWER(vt0.c0)))) OVER ( ORDER BY ((((CAST(rt0.c1 AS NUMERIC))AND(vt0.c2)))AND(((vt0.c0)+(rt0.c1)))) DESC  NULLS LAST, QUOTE((((rt0.c2))>((vt1.c0))))) FROM vt0, vt1;SELECT DISTINCT CASE (((rt0.c2)) BETWEEN ((vt0.c1)) AND ((vt0.c1)))  WHEN CASE vt1.c0  WHEN vt1.c0 THEN vt0.c1 WHEN vt0.c2 THEN x'' WHEN rt0.c1 THEN vt0.c0 END THEN ((((rt0.c0)AND(vt1.c0)))AND(vt0.c1)) ELSE json_patch(rt0.c2, vt0.c1) END, (((((vt0.c0 IN (rt0.c2, vt0.c2)))AND(TRIM(rt0.c1))))OR((vt0.c1 IN ()))), MAX(((vt1.c0)|(rt0.c1))) FROM vt0 WHERE (((((((NULL)OR('-1301084277')))AND(NULL)))IS((((('-1649672889')AND(NULL)))AND(0.9481887198006101)))));SELECT DISTINCT ((vt0.c2)<>(0.9900379203565297)), (~ (((((((((((((rt0.c2)OR(0xffffffffdcfaa49c)))OR(vt1.c0)))AND(NULL)))AND(vt0.c1)))OR(vt0.c2)))OR(0xffffffff93e532a0)))), ((rt0.c0 IN ()) IN ()) FROM vt0, vt1;SELECT LAG(CASE (~ (vt0.c1))  WHEN ((vt0.c2)AND(vt1.c0)) THEN (vt1.c0 IN ()) ELSE NULL END, NULL, vt0.c2) OVER () FROM vt1, vt0; -- 0ms;
SELECT ALL ((((rt0.c1) NOT BETWEEN (vt1.c0) AND (vt0.c2)))IS((NOT (vt0.c1)))), COUNT(*) OVER (), ((((((vt0.c2)AND(rt0.c2)))OR(vt1.c0)))<>(vt0.c1)) FROM rt0, vt0;SELECT DISTINCT CAST(((rt0.c0)-(vt0.c0)) AS INTEGER) FROM vt1, vt0 WHERE (NULLIF(((0.28881058788406333) NOT BETWEEN (x'') AND ('')), ((0Xffffffffe7edbb1f)LIKE(1406251007))));SELECT CAST(((NULL) BETWEEN (0.07931915382074484) AND (rt0.c2)) AS TEXT) FROM vt0 WHERE (CASE CAST('-690025786' AS REAL)  WHEN LIKELY(DISTINCT '呸\n') THEN ((((((((-1946050110)OR('')))AND('1668578098')))OR('')))AND(NULL)) ELSE (('')*('')) END) ORDER BY ((((vt0.c1) NOT NULL)) IS FALSE) DESC, NULL  NULLS FIRST, ((((((rt0.c1)AND(rt0.c1)))OR(rt0.c1))) BETWEEN ((((rt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1)))) AND (CASE WHEN vt0.c1 THEN vt1.c0 ELSE rt0.c0 END))  NULLS LAST;SELECT ((((((((((vt0.c2)AND(0.5369948093360719)))OR(rt0.c2)))OR(x'')))AND(vt0.c0))) ISNULL), (~ (NULL COLLATE BINARY)), COUNT(CAST(vt0.c2 AS REAL)) FROM vt1, vt0, rt0; -- 1ms;
SELECT CAST((NOT (rt0.c1)) AS REAL) FROM vt0 NOT INDEXED, rt0, vt1 WHERE (((CAST(0.6265124960326475 AS NUMERIC)) NOT BETWEEN (((((NULL)AND(0.5260767052980405)))AND(x'528a'))) AND (COALESCE(DISTINCT -7.68605929E8, -1603121633)))); -- 0ms;
SELECT DISTINCT ((((vt1.c0)IS(rt0.c2))) ISNULL) FROM vt0;SELECT ALL TOTAL((((NULL))>((0.4613402598374634)))) FROM rt0, vt0; -- 1ms;
SELECT DISTINCT x'99ef932d' FROM vt0; -- 0ms;
SELECT DISTINCT FIRST_VALUE(((vt0.c2) NOTNULL) COLLATE NOCASE) OVER () FROM vt0; -- 0ms;
SELECT ALL (('	&RFm%䀵') ISNULL) FROM vt1, vt0, rt0; -- 0ms;
SELECT ALL (((((((((((vt0.c2))>=((vt1.c0))))AND((rt0.c0 IN ()))))OR(CAST(rt0.c1 AS BLOB))))OR(json_array_length(-412694236))))OR(((rt0.c1)<=(vt0.c0)))) FROM vt1, vt0, rt0 WHERE (NULL); -- 0ms;
SELECT CASE WHEN MIN(x'') THEN UNLIKELY(DISTINCT vt1.c0) END, CAST(x'' AS BLOB), ((((((rt0.c2)OR(vt1.c0)))OR(0xffffffffe3cd9bb6))) NOT BETWEEN (((((rt0.c0)OR(vt1.c0)))OR(vt0.c1))) AND ((((vt0.c0, rt0.c0, vt0.c1)) BETWEEN ((vt1.c0, rt0.c0, 0.7801079138825313)) AND ((0.7175557148950139, vt0.c0, vt0.c2))))) FROM vt1, rt0, vt0; -- 1ms;
SELECT ALL IFNULL(((((rt0.c1)AND(vt0.c2)))OR(vt0.c2)), ((vt1.c0)*(vt1.c0))) FROM rt0, vt1 WHERE (LIKE('511579085' COLLATE RTRIM, ((x'') NOT BETWEEN (x'') AND (NULL)), 's'));SELECT ((rt0.c1)/(vt0.c1 COLLATE NOCASE)) FROM vt1 WHERE (LOWER(DISTINCT ((('-1620239917', '0.21661529572344707', '-999259721')) NOT BETWEEN ((0.28881058788406333, 0.4464316820194796, '-Infinity')) AND ((NULL, NULL, '1421461502')))));SELECT ALL '1165447257', ((CAST(vt0.c0 AS BLOB))/((+ (vt1.c0)))), (((rt0.c1, vt0.c0, vt1.c0)) BETWEEN ((((((vt0.c2)OR(vt1.c0)))AND(vt0.c1)), AVG(vt1.c0), COUNT(*))) AND ((x'c9ae', SUM(rt0.c2), CASE rt0.c0  WHEN rt0.c0 THEN rt0.c1 WHEN vt0.c0 THEN rt0.c0 WHEN rt0.c2 THEN vt0.c0 WHEN '}O' THEN rt0.c0 WHEN rt0.c0 THEN 0.8744162999528795 END))) FROM vt1, vt0, rt0 WHERE (NULL) LIMIT -1946050110 OFFSET 1368939219; -- 0ms;
SELECT ALL CAST((((rt0.c1, rt0.c0, vt0.c1)) BETWEEN ((vt0.c1, rt0.c2, vt0.c2)) AND ((vt0.c2, rt0.c0, rt0.c1))) AS REAL), (((((((((vt0.c2)OR(vt0.c0)))AND(vt0.c0)))AND(vt0.c1)))OR(vt0.c1)) IN ()), COUNT(*) FROM rt0, vt0 GROUP BY (~ (((vt0.c1)GLOB(vt1.c0)))), CAST(((vt0.c1)||('J<a''')) AS BLOB), '-1264495496';SELECT (((vt1.c0) IS FALSE) IN ()) FROM vt1, rt0 GROUP BY CASE WHEN ((((((((rt0.c2)AND(rt0.c2)))AND(vt0.c1)))AND(rt0.c1)))OR(vt0.c1)) THEN rt0.c1 COLLATE NOCASE WHEN ((rt0.c1) NOT BETWEEN (vt0.c1) AND (rt0.c0)) THEN rt0.c1 WHEN ((vt0.c0)IS(vt0.c1)) THEN ((NULL) BETWEEN (vt1.c0) AND (vt0.c0)) ELSE CAST(rt0.c0 AS NUMERIC) END, LOWER(((vt0.c1)-(vt1.c0))), CASE WHEN ((rt0.c2) IS TRUE) THEN ((((((((((((vt0.c1)OR(vt0.c2)))AND(vt0.c1)))OR(rt0.c0)))OR(vt1.c0)))AND(rt0.c0)))OR(vt0.c1)) ELSE 0.6532858610212929 END;SELECT DISTINCT ((((rt0.c0)<<(vt1.c0))) NOT NULL), ((((rt0.c0) NOT BETWEEN (rt0.c1) AND ('7h2s]Gi'))) NOT BETWEEN (((vt0.c2)+(rt0.c1))) AND (((rt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1)))), (((((~ (vt0.c2)))AND(-1832958741)))AND(((((rt0.c1)OR(vt0.c1)))AND(vt0.c1)))) FROM rt0, vt1 ORDER BY (((((rt0.c2) BETWEEN (vt0.c1) AND (vt0.c2)), ((vt0.c2)|(rt0.c0)), ((vt1.c0)>(x'')), ((vt1.c0) BETWEEN (vt0.c0) AND (vt1.c0)), ((vt0.c1)IS NOT(vt1.c0))))<>((((rt0.c1) BETWEEN (rt0.c0) AND (rt0.c2)), rt0.c1 COLLATE RTRIM, (((rt0.c2, rt0.c1, rt0.c2, rt0.c0, vt0.c2)) BETWEEN ((rt0.c0, NULL, vt0.c0, vt0.c2, vt0.c2)) AND (('<*', rt0.c0, vt0.c1, vt1.c0, vt0.c1))), (rt0.c0 IN (vt0.c2, vt0.c2)), rt0.c0))) DESC;SELECT ALL JULIANDAY((~ (vt0.c0)), CAST(vt1.c0 AS INTEGER), TOTAL(rt0.c0)) FROM vt1, rt0;SELECT DISTINCT (((vt0.c1, ((rt0.c1) NOTNULL), ((vt1.c0)==(vt0.c1)), (NOT (vt1.c0)), (((vt0.c2, vt0.c1, rt0.c1))>=((rt0.c0, rt0.c2, rt0.c0)))))<>((CASE vt0.c1  WHEN vt0.c0 THEN rt0.c1 WHEN rt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN vt1.c0 END, ((vt0.c0)GLOB(rt0.c1)), (rt0.c1 IN ()), (+ (vt0.c1)), vt0.c1))) FROM vt1, vt0, rt0; -- 0ms;
SELECT DISTINCT (- (((vt1.c0) BETWEEN (vt1.c0) AND (vt0.c0)))) FROM vt1, rt0, vt0 WHERE (((((x'bf57')|(0.5137299398757635))) BETWEEN ((((x'', x'fd56', '-2072633250')) NOT BETWEEN ((x'fc78', x'09c52ce9', -6.90025786E8)) AND ((NULL, 0.6744280093984282, 0.02803193668162285)))) AND (0x7adaa401))); -- 0ms;
SELECT ALL GROUP_CONCAT(CASE rt0.c0  WHEN vt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 END) FROM vt0, vt1, rt0 WHERE (0.9200867602881787); -- 1ms;
SELECT ((((((vt0.c0)OR(rt0.c1)))OR(rt0.c2)))*((((vt0.c2)) NOT BETWEEN ((x'ef05')) AND ((vt0.c0))))) FROM rt0, vt1, vt0 NOT INDEXED WHERE (((x'' COLLATE BINARY)>(((NULL)<(NULL))))); -- 0ms;
SELECT DISTINCT CASE (+ (NULL))  WHEN MIN(rt0.c1) THEN (rt0.c2 IN ()) END, (((rt0.c2)) NOT BETWEEN (((vt0.c1 IN ()))) AND ((vt0.c1))), vt1.c0 FROM vt1, rt0 WHERE (CASE WHEN x'' THEN ((x'de0f')<=(0xffffffffae06dbfe)) END);SELECT ALL SUM(((vt1.c0) NOT NULL)) FROM vt1; -- 0ms;
SELECT DISTINCT CASE vt0.c2 COLLATE NOCASE  WHEN CAST(rt0.c0 AS TEXT) THEN ((((vt1.c0)AND(rt0.c1)))AND(vt1.c0)) END FROM vt1 ORDER BY (((x'7559')) BETWEEN ((rt0.c2 COLLATE BINARY)) AND ((CASE WHEN vt0.c0 THEN vt0.c1 WHEN rt0.c0 THEN NULL WHEN rt0.c1 THEN 0.18650386217343762 ELSE vt0.c1 END)))  NULLS LAST, (+ (vt0.c0)) COLLATE BINARY  NULLS LAST;SELECT (NOT ((((vt0.c2))>=((rt0.c1))))), (GROUP_CONCAT(vt0.c1) IN ()), (((rt0.c0)) NOT BETWEEN ((vt0.c0)) AND ((COUNT(vt1.c0)))), ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt1.c0)))=(((vt0.c1)>=(vt0.c0)))), (((NOT (rt0.c0))) NOTNULL) FROM rt0, vt0 WHERE (((((CAST(NULL AS NUMERIC))OR(NULL COLLATE NOCASE)))OR(((0X7754b0e8) NOT BETWEEN ('') AND ('190618524')))));SELECT COUNT(*) COLLATE RTRIM FROM vt1, rt0 WHERE ((LIKE(NULL, x'12fd', '-') IN ())); -- 0ms;
SELECT ALL CASE CASE WHEN vt1.c0 THEN rt0.c2 ELSE 0.6247042882607717 END  WHEN CASE vt0.c1  WHEN vt0.c2 THEN rt0.c1 END THEN (rt0.c0 IN (vt0.c1)) WHEN vt0.c1 THEN ((vt0.c2) IS FALSE) WHEN ((rt0.c1) BETWEEN (vt0.c1) AND (vt0.c0)) THEN CAST(vt0.c2 AS NUMERIC) ELSE UNICODE(x'7a4e') END FROM vt1 WHERE (((CAST('pmV\n' AS TEXT)) NOT BETWEEN ((NOT ('-738141838'))) AND (((NULL)>=(0X1d2ca71a)))));SELECT DISTINCT NULL, COUNT(*) OVER (), (UPPER(DISTINCT vt0.c1) IN (NULLIF(vt1.c0, rt0.c2))) FROM vt0, vt1;SELECT DISTINCT ((((vt1.c0)IS(vt1.c0))) NOT BETWEEN (rt0.c0 COLLATE BINARY) AND (vt0.c0 COLLATE NOCASE)) FROM vt0, rt0, vt1; -- 0ms;
SELECT DISTINCT ((LENGTH(vt1.c0)) NOTNULL) FROM rt0, vt0, vt1 WHERE (-7.68605929E8) LIMIT 528715076 OFFSET -1112000448; -- 0ms;
SELECT (+ (((((vt1.c0)AND(vt0.c1)))AND('')))) FROM vt0, vt1; -- 0ms;
SELECT DISTINCT ((vt0.c2)>=(NULL)) COLLATE BINARY FROM vt0, rt0, vt1; -- 0ms;
SELECT DISTINCT (vt0.c0 COLLATE BINARY IN (x'cb9d')), NULLIF(rt0.c0 COLLATE RTRIM, CASE vt1.c0  WHEN vt0.c0 THEN rt0.c2 END), (((+ (vt0.c2)))*(((((vt0.c2)OR(vt0.c2)))OR(vt0.c0)))) FROM rt0, vt0, vt1 WHERE (CAST((('-148941712') BETWEEN (NULL) AND (NULL)) AS BLOB)) GROUP BY (((((rt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c2))))>((((vt0.c0)AND(rt0.c0))))) HAVING (CASE WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END IN ((~ (vt0.c0)))); -- 1ms;
SELECT ALL ((CASE WHEN vt0.c0 THEN vt1.c0 END)||(((rt0.c2)%(rt0.c2)))) FROM vt0;SELECT ((((rt0.c0)!=(vt0.c1))) IS FALSE) FROM rt0 WHERE (((((('-1144797624')OR(NULL)))OR(0.6066701705609628)) IN ()));SELECT DISTINCT CASE WHEN (rt0.c2 IN (vt1.c0, rt0.c2)) THEN ((((vt1.c0)AND(rt0.c1)))OR(vt1.c0)) END FROM vt0;SELECT ALL (CASE WHEN rt0.c2 THEN vt0.c1 END IN ()) FROM vt0, rt0; -- 0ms;
SELECT (((CAST(rt0.c0 AS REAL)))>=(((vt0.c2 IN (rt0.c2))))), vt0.c2, ((CASE WHEN rt0.c2 THEN rt0.c1 END)-(CAST(rt0.c0 AS BLOB))) FROM rt0, vt1 WHERE (CASE ((x'9060')|(NULL))  WHEN CASE NULL  WHEN NULL THEN 0.7276806630777718 WHEN NULL THEN NULL WHEN 0.22247384270543935 THEN 0Xffffffffb24a43c4 END THEN ((x'') NOT NULL) END);SELECT DISTINCT (((vt0.c1)) NOT BETWEEN ((TRIM(rt0.c0))) AND ((((vt1.c0)||(x''))))), x'', CAST(0.673130244899207 AS NUMERIC) COLLATE NOCASE FROM vt1, vt0, rt0; -- 0ms;
SELECT DISTINCT (((rt0.c1 IN ()))&((vt0.c1 IN ()))) FROM vt0 WHERE (((((0.5754321674644571)<(x'')))OR('1355609110' COLLATE BINARY))); -- 0ms;
SELECT (((((((vt0.c1)) NOT BETWEEN ((rt0.c0)) AND ((''))))OR(((vt0.c2)%(vt1.c0)))))OR(CAST(rt0.c0 AS INTEGER))) FROM vt0;SELECT DISTINCT ((((((vt0.c1)||(vt0.c2)))AND((~ (vt0.c1)))))AND((~ (rt0.c2)))) FROM vt0, rt0; -- 0ms;
SELECT DISTINCT (((vt0.c2))<=(((+ (rt0.c2))))), json_quote(((rt0.c0)LIKE(rt0.c1))), AVG(NULLIF(vt0.c2, rt0.c2)) FROM vt0, rt0; -- 0ms;
SELECT ALL ((((vt0.c0) BETWEEN (vt0.c1) AND (vt1.c0))) BETWEEN (MIN(x'7b9e')) AND ((((rt0.c2))>=((rt0.c2))))) FROM rt0;SELECT DISTINCT 0.43656657037182656 FROM vt1, vt0, rt0; -- 0ms;
SELECT DISTINCT (NOT ((NOT (rt0.c0)))), NTILE(((((rt0.c2) ISNULL))<<(((rt0.c2)<>(rt0.c0))))) OVER (), CASE CASE vt1.c0  WHEN vt0.c1 THEN rt0.c0 ELSE vt0.c2 END  WHEN CASE vt1.c0  WHEN '' THEN NULL ELSE rt0.c2 END THEN ((NULL) NOT BETWEEN (rt0.c0) AND (vt0.c0)) ELSE 563829908 END, ('' IN ()), (+ (((((rt0.c2)OR(vt1.c0)))OR(vt1.c0)))) FROM rt0;SELECT DISTINCT LAST_VALUE(((SQLITE_COMPILEOPTION_GET(vt0.c2))<(CASE vt1.c0  WHEN rt0.c1 THEN rt0.c1 WHEN vt0.c1 THEN vt1.c0 WHEN vt0.c2 THEN vt1.c0 END))) OVER (), CAST(rt0.c2 AS TEXT), CASE WHEN CAST(rt0.c1 AS NUMERIC) THEN ((rt0.c1)=(vt0.c0)) WHEN (vt1.c0 IN ()) THEN (+ (vt0.c2)) WHEN ((vt0.c1) ISNULL) THEN CHANGES() WHEN (NOT (rt0.c2)) THEN ((vt1.c0)<<(vt0.c2)) WHEN (- (vt1.c0)) THEN AVG(vt0.c2) END FROM vt1, rt0, vt0 WHERE (NULL COLLATE BINARY COLLATE RTRIM) GROUP BY CASE ((1764876867) BETWEEN (vt0.c2) AND (vt0.c0))  WHEN '2073736410' THEN ((vt1.c0)<=(rt0.c1)) END, (((vt0.c1)IS NOT(rt0.c2)) IN (rt0.c0 COLLATE BINARY)), (rt0.c1 IN (vt0.c1)) COLLATE NOCASE; -- 0ms;
SELECT ALL vt0.c1 FROM rt0, vt1 WHERE (((((0.11620480938832078)IS NOT('gp')))|(CASE WHEN 0.8845426330073247 THEN NULL WHEN 0.1594883611809399 THEN -1.649672889E9 WHEN NULL THEN -1792167761 END))) GROUP BY CAST(LIKELIHOOD(vt0.c1, 0.3957133558693139) AS INTEGER);SELECT (((((((((vt0.c1)AND(vt0.c2)))AND(rt0.c2)))OR(vt0.c2)))OR(rt0.c2)) IN ()) FROM vt0 WHERE ((((('-1301084277') ISNULL)) NOT NULL)); -- 0ms;
SELECT AVG(CAST(-1.47458932E9 AS NUMERIC)) FROM rt0, vt1, vt0; -- 0ms;
SELECT ((((vt0.c1)<>(vt0.c2)))<<(((rt0.c2)<=(vt1.c0)))) FROM vt1 GROUP BY CASE WHEN (vt0.c0 IN (vt0.c0)) THEN ((vt0.c0)+(rt0.c0)) ELSE NULL END HAVING (json(vt0.c0) IN ());SELECT (((rt0.c2, vt0.c0, rt0.c0, vt0.c1, vt0.c2)) NOT BETWEEN ((((rt0.c1) NOT BETWEEN (vt0.c2) AND (vt0.c0)), (((rt0.c1))<((rt0.c1))), CASE WHEN rt0.c2 THEN vt1.c0 WHEN vt0.c2 THEN '1517191982' WHEN rt0.c2 THEN vt0.c2 END, ((rt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c0)), (vt1.c0 IN ()))) AND ((CASE WHEN rt0.c0 THEN vt1.c0 WHEN vt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN -1786324463 ELSE vt1.c0 END, CASE rt0.c2  WHEN -6.99600301E8 THEN rt0.c0 ELSE vt0.c0 END, (vt0.c2 IN (vt1.c0)), COALESCE(rt0.c0, vt0.c1), CASE vt0.c1  WHEN vt1.c0 THEN vt1.c0 WHEN vt0.c0 THEN vt1.c0 WHEN vt0.c2 THEN rt0.c2 ELSE rt0.c0 END))), CASE WHEN ((rt0.c1) NOT BETWEEN (rt0.c2) AND (vt0.c0)) THEN COUNT(*) END, vt0.c1 FROM vt1, rt0, vt0 WHERE (((LOWER(DISTINCT NULL)) IS TRUE)); -- 0ms;
SELECT NTILE((rt0.c0 IN (0.12872195560740707))) OVER ( ORDER BY rt0.c2 DESC), ((((((vt0.c0)) NOT BETWEEN (('7p3+!LQb')) AND ((rt0.c2)))))<>(((((vt0.c0))>=((vt0.c2)))))), MAX(rt0.c1, CASE rt0.c2  WHEN vt0.c2 THEN vt1.c0 WHEN rt0.c2 THEN rt0.c2 WHEN vt0.c0 THEN NULL ELSE rt0.c2 END, (NOT (vt0.c1)), TOTAL(rt0.c0)) FROM rt0 ORDER BY (((CASE vt0.c2  WHEN rt0.c0 THEN vt0.c2 WHEN rt0.c2 THEN '-821595451' WHEN rt0.c1 THEN vt0.c0 END))>((vt0.c1))), ((((rt0.c2) BETWEEN (vt1.c0) AND (vt1.c0))) NOT NULL) ASC  NULLS LAST;SELECT NULL FROM rt0; -- 0ms;
SELECT ALL ((CAST(rt0.c2 AS BLOB)) IS TRUE) FROM vt1;SELECT DISTINCT ((vt0.c2 COLLATE BINARY) BETWEEN (CASE WHEN rt0.c1 THEN rt0.c2 END) AND (SUM('-1878933004'))) FROM vt0, vt1 WHERE ((((x'f1d6' COLLATE NOCASE))<>((((x'')>=(x'')))))) ORDER BY ((rt0.c0)<=(vt0.c1)) COLLATE BINARY, ((CASE WHEN vt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c0 WHEN 0.2001704897285982 THEN rt0.c2 ELSE vt0.c1 END) BETWEEN (rt0.c2) AND ((vt1.c0 IN (vt0.c1))));SELECT DISTINCT (((((vt0.c2))!=((vt0.c1)))) NOTNULL) FROM rt0 WHERE (CASE WHEN '-868968388' THEN 0.7789846755031894 ELSE 'l''2*2x(' END COLLATE RTRIM);SELECT DISTINCT COUNT((((NULL, rt0.c1, vt0.c0))=((rt0.c1, vt1.c0, vt0.c2)))) OVER ( RANGE BETWEEN rt0.c2 COLLATE RTRIM PRECEDING AND  UNBOUNDED FOLLOWING EXCLUDE GROUP), AVG((- (vt0.c0))), CASE -1919453731  WHEN ((rt0.c2)=(vt0.c2)) THEN '-587553636' ELSE (((vt0.c2))>((vt0.c0))) END FROM vt0, rt0, vt1;SELECT TOTAL(rt0.c2) FROM rt0, vt0, vt1; -- 1ms;
SELECT DISTINCT (((rt0.c1) NOT BETWEEN (vt0.c1) AND (rt0.c0)) IN ()) FROM vt0, vt1 GROUP BY CAST(((rt0.c0) NOT BETWEEN (rt0.c2) AND ('^S(qq*8')) AS BLOB);SELECT DISTINCT ((((rt0.c2) BETWEEN (x'') AND (vt0.c0))) IS FALSE) FROM vt0, rt0, vt1 WHERE (((((NULL)&(0Xffffffff9ba2ee80)))IS NOT(((((NULL)OR(0.45706502748402444)))OR(x''))))); -- 0ms;
SELECT DISTINCT ((((rt0.c0 COLLATE NOCASE)OR(NULL)))AND(CAST(vt1.c0 AS BLOB))) FROM vt1, rt0; -- 0ms;
SELECT '1420925803' FROM rt0, vt0, vt1 WHERE (CASE (('#e?)f鐛_g')LIKE(x'ab66'))  WHEN CAST(NULL AS REAL) THEN CASE WHEN NULL THEN -1114378425 WHEN x'58b9' THEN x'' WHEN NULL THEN '2Jo' ELSE NULL END END); -- 1ms;
SELECT ALL rt0.c1, '929189265', json_quote(((rt0.c1) NOT NULL)) FROM vt0, rt0 WHERE ((NOT (CAST(0.8905994946639455 AS INTEGER)))); -- 0ms;
SELECT ALL LAST_VALUE(((CAST(rt0.c2 AS BLOB)) NOT NULL)) OVER () FROM vt1, rt0; -- 0ms;
SELECT ALL COUNT(*) FROM rt0 LIMIT -870619694 OFFSET 552982188; -- 0ms;
SELECT DISTINCT ((rt0.c0)&(((rt0.c1) IS FALSE))) FROM rt0 WHERE (''); -- 0ms;
SELECT ((((((vt0.c2) NOT BETWEEN (x'') AND (vt1.c0)))AND(json_array_length(rt0.c2))))AND(((0.8355929876954997)<=(vt0.c2)))), ((COUNT(*)) IS FALSE), CAST('0.6334479991285491' AS TEXT) FROM rt0, vt0, vt1; -- 1ms;
SELECT DISTINCT ((- (vt1.c0)) IN ()), vt1.c0, rt0.c1 FROM vt0, vt1;SELECT vt0.c2, (JULIANDAY(rt0.c1, vt0.c1, rt0.c2, vt1.c0, vt0.c2) IN ()), (rt0.c2 IN ()) FROM rt0 GROUP BY (((rt0.c0)) NOT BETWEEN ((CAST(vt0.c0 AS NUMERIC))) AND ((((((((((-1.144797624E9)OR(rt0.c2)))OR(vt0.c1)))AND(rt0.c0)))OR(vt0.c0))))), ((TRIM(DISTINCT rt0.c2, vt0.c2)) IS FALSE), CAST((((vt0.c1)) NOT BETWEEN ((vt0.c2)) AND ((rt0.c0))) AS NUMERIC), json_array_length(((rt0.c2) BETWEEN (vt1.c0) AND (0.32656752296347547)), (~ (rt0.c1))), (+ (NULL)) HAVING ((IFNULL(DISTINCT vt0.c0, rt0.c1)) BETWEEN ((- (rt0.c2))) AND (ROUND(vt0.c1, rt0.c2))) ORDER BY CAST((~ (rt0.c0)) AS BLOB) ASC, ((((vt1.c0)OR(((rt0.c1) ISNULL))))OR(rt0.c0 COLLATE NOCASE)), ((((((vt0.c1)AND(rt0.c2)))OR((+ (vt0.c1)))))OR(((0.43814821323845654)>(rt0.c0)))) DESC  NULLS FIRST;SELECT vt1.c0 FROM rt0, vt0 WHERE ((x'e158' IN ('-369293160', x'60aaaf5a')) COLLATE RTRIM);SELECT DISTINCT CAST(((((((((vt1.c0)AND(vt1.c0)))AND(rt0.c1)))OR(vt0.c0)))AND(vt0.c1)) AS INTEGER) FROM vt1 WHERE (((TRIM(DISTINCT x'')) NOT BETWEEN ((((((((('PbP餍I9')OR(NULL)))OR(0.8734702587855525)))OR(-936573311)))OR('''繶'))) AND (((x'')<<(NULL))))) GROUP BY ((((((((rt0.c0)AND(vt0.c0)))AND(vt0.c1)))AND(vt0.c1)))AND(rt0.c2)) COLLATE RTRIM HAVING CAST(((rt0.c2) ISNULL) AS TEXT);SELECT ALL UPPER(((vt0.c1)GLOB(rt0.c2))), FIRST_VALUE(((rt0.c1 COLLATE NOCASE) NOT BETWEEN ((((vt0.c0, rt0.c2, vt0.c2)) NOT BETWEEN ((vt0.c1, x'', vt1.c0)) AND ((vt0.c0, rt0.c0, rt0.c1)))) AND (((rt0.c1) BETWEEN (rt0.c0) AND (0.8894988286582023))))) OVER (), LAG(vt0.c1, (CAST(vt0.c2 AS REAL) IN ()), NULL) OVER () FROM vt0, vt1, rt0 WHERE (0.16832038368949143); -- 5ms;
SELECT DISTINCT (((vt0.c0) BETWEEN (rt0.c2) AND (vt0.c1)) IN ((vt0.c0 IN ()))), SUM((((vt0.c1)) NOT BETWEEN ((rt0.c2)) AND ((rt0.c0)))) OVER (), LAST_VALUE(((((vt0.c0))!=((vt1.c0))) IN ())) OVER ( ROWS  CURRENT ROW) FROM vt1, vt0;SELECT ALL TOTAL(vt0.c1) FROM vt1;SELECT DISTINCT (((((((((((rt0.c0)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c0))))AND(rt0.c0)))OR(((rt0.c0) NOT NULL))))OR(CAST(1.82373679E9 AS NUMERIC))))AND((vt0.c1 IN ()))), (COUNT(*) IN ()), (((vt0.c0, vt1.c0, vt0.c0)) NOT BETWEEN ((CAST(rt0.c0 AS REAL), (rt0.c0 IN ()), IFNULL(vt1.c0, rt0.c0))) AND ((GROUP_CONCAT(vt1.c0), TOTAL(vt0.c2), CAST(rt0.c1 AS NUMERIC)))) FROM vt0, rt0, vt1 GROUP BY '916370915' HAVING ((rt0.c1)||('-944772739')); -- 2ms;
SELECT DISTINCT ((GROUP_CONCAT(rt0.c1))>=(((rt0.c0) BETWEEN (vt1.c0) AND (rt0.c2)))) FROM vt0, rt0, vt1 WHERE ('b-' COLLATE RTRIM); -- 0ms;
SELECT DISTINCT (- (CASE WHEN rt0.c1 THEN vt0.c1 END)) FROM vt1 LEFT OUTER JOIN rt0 ON (- (((vt0.c1)IS(rt0.c0)))) FULL OUTER JOIN vt0 ON MIN('-936573311', ((rt0.c1)-(rt0.c0)));SELECT (((vt0.c2)!=(rt0.c2)) IN ()), CASE WHEN ((0.31995369377245686)+(vt0.c0)) THEN vt1.c0 END, LAG((~ (((vt0.c2) IS TRUE))), CASE (((vt0.c2))>=((vt0.c2)))  WHEN CASE WHEN vt0.c0 THEN vt0.c1 END THEN vt0.c1 COLLATE BINARY END, vt0.c0) OVER () FROM vt0 WHERE ((((((((((0.7297198003062847)AND('-infinity')))OR(x'1fdf')))AND(x'')))OR(NULL)) IN ((('0.8355929876954997')/('-748443234'))))) ORDER BY ((CAST(rt0.c2 AS TEXT))|(vt0.c1 COLLATE NOCASE)) DESC  NULLS FIRST;SELECT 0.13307082722759322 FROM rt0, vt0, vt1 WHERE (((((x'')IS(x'')))&((0.14952928198876936 IN ())))); -- 0ms;
SELECT (((vt1.c0 IN ())) NOT BETWEEN (GROUP_CONCAT(vt1.c0)) AND ((((rt0.c0)) NOT BETWEEN ((NULL)) AND ((vt0.c2))))), (NOT (((vt0.c0)<<(NULL)))), ((COUNT(rt0.c0)) IS FALSE) FROM vt1, rt0, vt0 WHERE (0.12906712161135336) GROUP BY ((- (vt1.c0)) IN (((rt0.c0) ISNULL))), ((((vt0.c0 COLLATE BINARY)OR(((rt0.c0) IS TRUE))))OR(((((vt0.c2)AND(vt0.c0)))OR(rt0.c1)))), (+ ((rt0.c1 IN (vt0.c2)))) HAVING ((NULL) IS TRUE); -- 0ms;
SELECT DISTINCT ((vt0.c1)GLOB(vt0.c0)) COLLATE BINARY FROM rt0 WHERE (((-4.12694236E8) NOT NULL) COLLATE NOCASE) UNION SELECT DISTINCT LEAD((((vt1.c0)) BETWEEN ((((0X60c541e5) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) AND ((((vt1.c0)GLOB('51490416'))))), (((((vt1.c0)AND(vt1.c0)))AND(NULL)) IN (((vt1.c0) BETWEEN (vt1.c0) AND ('繶.yK')))), 164104971) OVER () FROM vt1 WHERE ((((((x'b803' IN ()))OR((('ࡎE]X8b_y') IS TRUE))))OR(((-678740013)AND(0.3568768130673621)))));SELECT DISTINCT (((NOT (vt0.c1)))<(vt1.c0 COLLATE BINARY)) FROM vt1, vt0, rt0 WHERE ((((-950547730, '1982701845', x'')) BETWEEN ((((((((((968053051)OR(0.7723921831749859)))AND(0.8218760467090582)))OR(x'525d')))AND(0.19851905554405036)), CASE x''  WHEN x'' THEN x'06ab' WHEN x'' THEN 'pmv\n' WHEN 0.30006520284580795 THEN NULL END, 0.05563511003497468 COLLATE NOCASE)) AND ((LOWER(-1.649672889E9), x'' COLLATE RTRIM, (((0.8218760467090582))=((0.8212178148071657))))))); -- 0ms;
SELECT DISTINCT (((- (vt0.c0)))&(((vt0.c1)OR(vt1.c0)))) FROM vt1;SELECT DISTINCT NULL FROM rt0, vt1, vt0; -- 0ms;
SELECT DISTINCT (((vt1.c0 IN ())) NOT BETWEEN (((vt0.c2) NOTNULL)) AND ((- (rt0.c1)))) FROM vt1, vt0, rt0 WHERE (LIKELIHOOD(DISTINCT (('mFR]cvVn') IS FALSE), 0.2060288763732646)); -- 0ms;
SELECT DISTINCT SUM(((vt0.c1) NOT BETWEEN (rt0.c2) AND (rt0.c0))) OVER (), (NULL IN ()), 'WH#GCJ!' FROM vt0 LIMIT 812491708;SELECT DISTINCT json_quote('834524446') FROM vt1 WHERE (((CASE NULL  WHEN '?9' THEN x'' END)/((('#')>(x''))))); -- 0ms;
SELECT ALL ((x'f95c3f26')AND(((vt0.c2)%(rt0.c1)))) FROM vt0, vt1;SELECT DISTINCT NTH_VALUE(vt1.c0, TRIM(vt0.c2 COLLATE BINARY, (((vt0.c0, vt0.c2, vt0.c0))<=((vt0.c1, vt0.c1, vt0.c0))))) OVER (), ((((vt0.c2)&(rt0.c0)))>=(CAST(rt0.c1 AS TEXT))), CASE WHEN (((rt0.c0)) BETWEEN ((vt1.c0)) AND ((rt0.c0))) THEN ((vt0.c1) NOT NULL) WHEN ((vt0.c2)>(rt0.c1)) THEN COUNT(*) WHEN (vt0.c1 IN ()) THEN vt1.c0 WHEN (rt0.c2 IN (rt0.c2)) THEN ((vt0.c1)IS(vt0.c0)) WHEN (((x'', x'', vt0.c1))!=((vt0.c0, rt0.c0, vt0.c2))) THEN (((rt0.c1)) BETWEEN ((rt0.c1)) AND ((vt0.c2))) END, (((((((vt0.c2)AND(vt1.c0)))OR(vt0.c1))))!=((TRIM(vt0.c2, vt1.c0)))), CAST((((vt0.c0, rt0.c2, vt1.c0))>=((rt0.c1, rt0.c0, vt0.c2))) AS BLOB) FROM vt0, vt1;SELECT ALL (((((((((rt0.c0)OR(x'df2b')))OR(vt1.c0)))AND(vt0.c1)))OR('!')) IN ()) FROM vt0, vt1, rt0; -- 0ms;
SELECT ((GROUP_CONCAT(rt0.c0)) BETWEEN (rt0.c1 COLLATE RTRIM) AND (((((((((vt0.c2)OR(rt0.c1)))AND(vt0.c0)))OR(rt0.c1)))OR(rt0.c0)))), ((((rt0.c0)<<(rt0.c0))) NOT BETWEEN (((vt0.c0)<<(rt0.c1))) AND (vt0.c1 COLLATE NOCASE)), ((((rt0.c1) IS FALSE))>=(((rt0.c1)AND(vt0.c2)))) FROM vt1, vt0 WHERE ((CASE WHEN NULL THEN '-377308167' ELSE x'' END IN ()));SELECT DISTINCT vt0.c1, CAST((vt0.c1 IN ()) AS INTEGER), (((((vt0.c1))>=((rt0.c0)))) BETWEEN (((vt0.c1)&(vt0.c1))) AND (((vt0.c0)*(vt0.c1)))) FROM vt1;SELECT ALL x'abbd' FROM rt0 WHERE (TOTAL_CHANGES()); -- 1ms;
SELECT ((((rt0.c2)%(rt0.c1)))-(NULL)) FROM vt0, rt0; -- 0ms;
SELECT DISTINCT vt0.c2 FROM rt0;SELECT CUME_DIST() OVER () FROM vt1 GROUP BY (rt0.c0 COLLATE BINARY IN ()) HAVING ((vt0.c0)%(rt0.c0)) COLLATE BINARY;SELECT rt0.c2 COLLATE RTRIM FROM vt1, vt0, rt0 WHERE ((CASE WHEN 0.9235444404898595 THEN x'6a0a' ELSE NULL END IN (ABS(NULL), ('489465626' IN ())))); -- 0ms;
SELECT ALL (NULL IN ()), MAX(MIN(((vt0.c1)IS NOT(rt0.c1)))), ((((vt0.c2 IN (vt1.c0))))<>((((rt0.c1)%(vt1.c0))))) FROM vt0, vt1, rt0 WHERE (((((NULL)OR('1633450721'))) BETWEEN ((('855654453')+(NULL))) AND (((x'') BETWEEN (x'') AND ('-13782814')))));SELECT ALL TRIM(CASE vt0.c1  WHEN rt0.c1 THEN vt1.c0 ELSE rt0.c1 END, UNLIKELY(DISTINCT vt0.c1)) FROM rt0 WHERE ((((((((((('b~{n &py')AND('170909448')))AND(0.6776336196898513)))AND(NULL)))AND(NULL))) NOT NULL));SELECT ALL ((((((((((rt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1)))OR(CAST(rt0.c2 AS NUMERIC))))OR((((vt1.c0))=((rt0.c0))))))AND(vt0.c2 COLLATE BINARY)))AND(((vt0.c2)IS NOT(rt0.c0)))) FROM vt1 WHERE (CAST(CAST('' AS TEXT) AS BLOB));SELECT (((vt0.c2)AND(vt0.c1)) IN ((('\n-')-(vt0.c1)), ((rt0.c2) NOT NULL))) FROM vt1 WHERE (CASE (- (NULL))  WHEN ((((((((0.20006491700070872)OR(NULL)))OR(x'a7fd')))OR(x'')))OR('0.0')) THEN 0.07714796959518655 ELSE ('*ѵ' IN ('')) END);SELECT ALL rtreenode((NOT (vt0.c2)), vt1.c0 COLLATE BINARY), ((((((((((vt0.c1)-(x'189c')))AND(CAST(rt0.c2 AS INTEGER))))OR((+ (rt0.c2)))))AND(((((((((((((rt0.c0)AND(rt0.c2)))OR(x'f734ed4c')))OR(rt0.c0)))OR(vt0.c2)))AND(vt0.c2)))OR(rt0.c2)))))AND((vt1.c0 IN (vt0.c2, vt0.c0)))), ((((vt0.c2)IS(NULL)))IS(((vt1.c0) NOT BETWEEN (0.7564583889357888) AND (vt0.c0)))) FROM vt0, vt1 WHERE ((CAST(0.5657282538688323 AS NUMERIC) IN ()));SELECT ALL (((~ ('-125849148'))) IS FALSE), ((-737228934) BETWEEN (((vt0.c1)-(rt0.c1))) AND (MAX(vt0.c1))), (((((vt0.c2))<((vt0.c0))))GLOB(((rt0.c1)||(NULL)))) FROM vt1, rt0 WHERE (((((0.9469188160091276) IS TRUE))!=((((x''))!=((NULL))))));SELECT DISTINCT (COUNT(rt0.c1) IN ()) FROM vt0, rt0, vt1 WHERE (highlight(QUOTE(NULL), json_array_length('\n4', x''), (- (0.1876186480902612)), 0.4940102889272714));SELECT DISTINCT ((((((vt0.c2) NOT BETWEEN (vt0.c0) AND (rt0.c0)))AND(CASE vt0.c0  WHEN vt0.c2 THEN rt0.c1 END)))AND(rt0.c0 COLLATE RTRIM)) FROM vt1, rt0;SELECT DISTINCT vt0.c1 FROM vt1, vt0 WHERE (((('1294921192') BETWEEN (1823736790) AND ('Ko')) IN ())) ORDER BY CASE ((vt0.c2) BETWEEN (vt0.c1) AND (rt0.c0))  WHEN json('0.5078367419169119') THEN (- (rt0.c2)) WHEN ((vt0.c1) ISNULL) THEN (((vt0.c1)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0))) WHEN ((((((((((((vt0.c1)OR(rt0.c2)))OR(rt0.c1)))AND(vt0.c2)))AND(vt0.c2)))OR(vt1.c0)))OR(vt0.c0)) THEN ((vt0.c0) NOT NULL) ELSE TYPEOF(-2.112222869E9) END ASC  NULLS LAST;SELECT DISTINCT CASE WHEN rt0.c0 THEN vt1.c0 END COLLATE NOCASE FROM vt0, vt1, rt0; -- 0ms;
SELECT ((LIKELY(0.07931915382074484)) NOT NULL) FROM vt0, vt1, rt0 ORDER BY (((((((vt0.c1, vt1.c0, 0.1676123226617613)) NOT BETWEEN ((rt0.c0, vt0.c1, rt0.c1)) AND ((vt1.c0, vt0.c2, rt0.c0))))OR(ABS(rt0.c2))))OR((((('547685126')OR(vt0.c1)))AND(rt0.c0)))) ASC  NULLS LAST, vt0.c1; -- 3ms;
SELECT DISTINCT LEAD(vt0.c0, ((((((vt0.c1)AND(rt0.c0)))AND(rt0.c1))) NOT NULL), vt1.c0) OVER () FROM vt1, vt0, rt0 WHERE (((((((((x'')AND((('-1741826660') BETWEEN (NULL) AND (x'')))))AND(NULL)))OR((((x'', NULL, NULL))=(('&,', NULL, 0.8566995536863721))))))OR(((-1553747676)==(-1342584158))))); -- 0ms;
SELECT ALL COUNT(*) FROM rt0 GROUP BY (+ (vt0.c2)) COLLATE BINARY;SELECT ALL (((((((rt0.c0))<=((rt0.c2))))AND(IFNULL(vt0.c0, vt0.c2))))AND(((rt0.c2) NOT BETWEEN (vt0.c0) AND (vt0.c2)))), CAST((((vt0.c2)) BETWEEN ((rt0.c2)) AND ((rt0.c2))) AS BLOB), (((('-587553636')OR(((rt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)))))OR(SUM(rt0.c1))) FROM vt0, rt0 WHERE ((NOT ((((x'', '!X', x''))>((NULL, 'o', 'o')))))) GROUP BY (+ (vt0.c2)), TYPEOF(rt0.c0) COLLATE RTRIM, (((vt0.c1) NOT BETWEEN (vt0.c0) AND (x'')) IN ()); -- 0ms;
SELECT CASE CASE vt0.c0  WHEN vt1.c0 THEN vt0.c1 END  WHEN (~ (vt1.c0)) THEN vt0.c0 COLLATE RTRIM ELSE CAST(x'' AS INTEGER) END FROM rt0, vt0 WHERE ((((- (NULL)))<(json_object('Ua65', '-1603121633'))));SELECT DISTINCT (((((rt0.c0 IN ()))AND((((rt0.c0, vt0.c2, rt0.c2))<=((vt0.c2, rt0.c2, vt0.c2))))))AND(((vt0.c0) NOT NULL))) FROM vt1, vt0, rt0; -- 1ms;
SELECT DISTINCT rt0.c1, (((NULL))==(((vt0.c2 IN ())))), NTH_VALUE((+ (rt0.c2)) COLLATE NOCASE, json_valid(CASE WHEN rt0.c0 THEN rt0.c2 END)) OVER () FROM rt0; -- 0ms;
SELECT DISTINCT CASE IFNULL(DISTINCT vt0.c1, vt0.c1)  WHEN ((rt0.c2)-(rt0.c2)) THEN ((vt0.c1)+(vt0.c0)) WHEN ((rt0.c2)LIKE(vt0.c1)) THEN ((((rt0.c1)AND(vt0.c1)))OR(vt1.c0)) WHEN 0.51091015672238 THEN CAST(rt0.c2 AS INTEGER) END FROM vt1 WHERE ((((((('nowgo')AND('1184368087')))AND('1165447257')))&(((('1528451467'))>(('-156530637'))))));SELECT ALL ((((vt1.c0)AND(LIKELIHOOD(rt0.c0, 0.25293892298185816))))AND(NULL)), AVG(vt0.c2), (COUNT(vt0.c0) IN ()) FROM rt0, vt1, vt0; -- 1ms;
SELECT ((CASE vt0.c1  WHEN rt0.c1 THEN vt0.c0 END)+((((vt0.c1)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c0))))) FROM rt0, vt1, vt0; -- 0ms;
SELECT DISTINCT (((NOT (rt0.c2)))<<(vt0.c1)), TOTAL(CASE WHEN '' THEN rt0.c1 WHEN vt1.c0 THEN rt0.c2 WHEN rt0.c1 THEN vt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN vt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 WHEN vt0.c2 THEN rt0.c0 END), ((((vt0.c1)-(vt0.c2)))+(x'')), vt1.c0, vt1.c0 FROM vt0, rt0 LIMIT -431189833 OFFSET 1929662251;SELECT DISTINCT ROW_NUMBER() OVER () FROM vt0, vt1, rt0 WHERE (CAST(x'' AS INTEGER)); -- 0ms;
SELECT DISTINCT LAST_VALUE(TYPEOF(DISTINCT ((vt0.c2)/(vt0.c1)))) OVER () FROM vt1, vt0, rt0; -- 2ms;
SELECT DISTINCT ((((vt0.c1) IS TRUE))>>(rt0.c0)) FROM vt1, rt0, vt0; -- 0ms;
SELECT ((((NULL)AND(((vt0.c2) NOT NULL))))OR(CASE 0x33004035  WHEN 0.8797375244912492 THEN 0.5518605970924384 END)), (((((vt1.c0) NOT BETWEEN (rt0.c1) AND (rt0.c2))))==((0.207203593500086 COLLATE NOCASE))), CASE (NOT (''))  WHEN vt1.c0 COLLATE RTRIM THEN LTRIM(rt0.c1) END FROM vt0;SELECT ((((rt0.c1)AND(rt0.c1)))AND(vt0.c0)) COLLATE BINARY, CAST(((((x'')AND(vt0.c1)))AND('259405580')) AS INTEGER), CAST((((vt0.c1)) BETWEEN ((vt0.c1)) AND ((rt0.c0))) AS REAL) FROM rt0;SELECT DISTINCT CAST(json_object(vt0.c0, vt0.c0) AS BLOB) FROM rt0;SELECT DISTINCT (((((((((('Ex<l(5Lw(')OR(vt0.c0)))AND(rt0.c0)))OR(vt0.c2)))OR(vt0.c2))) BETWEEN ((vt0.c1 IN ())) AND (MAX(rt0.c1))) FROM vt1, rt0 WHERE ((json_extract('', '', '*k%(?', '-1973268455') IN ((~ (x'')))));SELECT DISTINCT MIN(((((rt0.c0)AND(rt0.c1)))OR(vt1.c0))) FROM vt1, rt0, vt0 WHERE ((NOT (x'')) COLLATE RTRIM) ORDER BY (((+ (vt0.c0))) ISNULL), vt0.c0 COLLATE NOCASE; -- 1ms;
SELECT ALL (((rt0.c0 IN ())) BETWEEN (CHANGES()) AND (vt0.c0 COLLATE BINARY)) FROM rt0, vt1;SELECT ALL (((vt0.c2 IN ())) NOT BETWEEN (CAST(vt0.c1 AS REAL)) AND ('q	?J묫+')) FROM vt1, rt0, vt0; -- 0ms;
SELECT DISTINCT (('VzS>.')!=(((vt0.c1)-(rt0.c2)))) FROM rt0;SELECT ALL CUME_DIST() OVER (), ((((vt0.c1) ISNULL))%((vt0.c0 IN ()))), NULL FROM vt1 WHERE (json_valid(CASE 7.49089357E8  WHEN NULL THEN x'75c727a0' END)) GROUP BY CAST(rt0.c2 COLLATE BINARY AS TEXT) HAVING (((LOWER(rt0.c1)))>((((rt0.c2)IS(rt0.c0)))));SELECT DISTINCT vt0.c0 FROM rt0;SELECT ALL (~ (((vt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0)))), RANK() OVER ( ORDER BY (((('頷He0' COLLATE RTRIM)AND(LIKE(vt0.c1, rt0.c1))))OR(((((vt1.c0)AND(0X33c3d0fd)))OR(vt0.c1)))) ASC  NULLS FIRST, (NOT ((NOT (vt0.c2))))), ((((vt0.c2)>=(vt0.c2))) BETWEEN (((((vt0.c2)AND(rt0.c2)))AND(vt1.c0))) AND ((((('-1279584376')AND(vt0.c1)))OR(rt0.c0)))) FROM rt0, vt0, vt1; -- 4ms;
SELECT DISTINCT ((((vt0.c0)OR(rt0.c0)))%(((rt0.c1) NOT NULL))), ((AVG(rt0.c0))-(CASE vt1.c0  WHEN rt0.c0 THEN rt0.c2 END)), ((((vt1.c0) NOT BETWEEN (rt0.c0) AND (vt0.c1)))<=(MIN(vt0.c2))) FROM rt0 WHERE (0.4480760235073441) ORDER BY (((((vt1.c0, vt0.c1, rt0.c0)) NOT BETWEEN ((rt0.c1, vt0.c0, rt0.c0)) AND ((vt0.c1, vt0.c1, rt0.c0)))) NOT BETWEEN (CASE WHEN vt1.c0 THEN rt0.c2 END) AND (rt0.c2)) DESC  NULLS FIRST, (- (0.4605975471467322)) DESC;SELECT DISTINCT CASE WHEN (~ (vt1.c0)) THEN vt0.c1 COLLATE NOCASE WHEN (((rt0.c2, vt0.c1, vt0.c2)) NOT BETWEEN ((vt0.c0, rt0.c2, vt0.c0)) AND (('0.7558579689900121', vt1.c0, rt0.c2))) THEN ((rt0.c1) NOT NULL) WHEN CAST(rt0.c1 AS BLOB) THEN rt0.c2 COLLATE RTRIM END, COUNT(SQLITE_COMPILEOPTION_USED(vt0.c0)) OVER (), ((((((((((rt0.c1)OR(vt0.c0)))OR(vt0.c0)))OR(rt0.c0)))AND('Lig瘸UW')))IS NOT(COALESCE(DISTINCT vt0.c2, 0.8114882748048118))) FROM rt0, vt0, vt1 WHERE ((((x'' IN ())) NOT BETWEEN (x'847c') AND (((104873646)<<(0.7303220201888899))))); -- 3ms;
SELECT GROUP_CONCAT((NOT (rt0.c1))) FROM vt0, rt0, vt1 WHERE (LIKELY('3j#*G')); -- 2ms;
SELECT DISTINCT (((rt0.c2 IN ()))IS(((vt1.c0)+(NULL)))) FROM vt1, rt0, vt0; -- 0ms;
SELECT ALL 2.5940558E8 COLLATE RTRIM FROM rt0; -- 0ms;
SELECT DISTINCT (((- (vt0.c2))) ISNULL) FROM rt0 LIMIT 1612598531;SELECT DISTINCT AVG(((rt0.c0) ISNULL)) FROM rt0, vt1; -- 0ms;
SELECT DISTINCT ((((vt0.c2 COLLATE RTRIM)OR((~ (vt0.c0)))))OR(GROUP_CONCAT('1283281452'))) FROM rt0, vt0, vt1; -- 1ms;
SELECT ALL ((MIN(rt0.c1)) BETWEEN (LIKELY(rt0.c0)) AND (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE rt0.c0 END)) FROM vt1 NOT INDEXED;SELECT DISTINCT GROUP_CONCAT(8.6978531E7) OVER ( PARTITION BY (+ ((((vt0.c1, vt0.c0, vt0.c2)) BETWEEN ((rt0.c0, rt0.c0, vt0.c1)) AND ((rt0.c0, vt0.c2, rt0.c2))))), (((vt1.c0)) NOT BETWEEN (((- (rt0.c0)))) AND ((((((rt0.c1)AND(rt0.c1)))OR(NULL)))))) FROM vt0, vt1, rt0; -- 4ms;
SELECT TOTAL(((rt0.c1) NOT BETWEEN (vt0.c2) AND (vt1.c0))) OVER () FROM vt0, rt0, vt1 ORDER BY rt0.c1  NULLS FIRST; -- 4ms;
SELECT ALL NULL COLLATE NOCASE FROM vt1, vt0, rt0 WHERE (CASE CAST(x'' AS TEXT)  WHEN ((x'')-('㋷D+T')) THEN ((NULL)<<(NULL)) END); -- 0ms;
SELECT DISTINCT CASE WHEN TOTAL(vt0.c2) THEN CAST(vt0.c0 AS INTEGER) ELSE ((((vt0.c2)AND(rt0.c0)))OR(vt0.c1)) END FROM vt0, rt0, vt1 WHERE ('162454177'); -- 1ms;
SELECT MIN(CAST(vt0.c2 AS NUMERIC)) FROM vt1, rt0, vt0; -- 1ms;
SELECT DISTINCT CAST((((vt0.c2, x'bd93', vt1.c0)) BETWEEN ((vt0.c2, vt0.c2, vt0.c2)) AND ((x'', vt0.c1, vt0.c1))) AS BLOB) FROM vt1, rt0, vt0; -- 0ms;
SELECT ((0xffffffffffffffff)IS NOT((((vt0.c1))>((vt0.c0))))) FROM vt1 WHERE ((((NOT (0xfffffffff933982a))) ISNULL));SELECT DISTINCT (+ ((NOT (rt0.c0)))), (rt0.c0 IN ()), COUNT(((vt0.c2)>(rt0.c1))) FROM vt1, rt0;SELECT DISTINCT ((((CASE WHEN vt0.c1 THEN rt0.c0 WHEN rt0.c0 THEN rt0.c1 WHEN '-699904044' THEN rt0.c2 WHEN rt0.c1 THEN vt1.c0 WHEN '2138493246' THEN vt0.c2 WHEN vt1.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 ELSE vt1.c0 END)OR((((rt0.c2)) NOT BETWEEN (('.wlC嗑+h+')) AND (('1769218413'))))))OR(GROUP_CONCAT(vt0.c2))) FROM vt1, rt0, vt0 WHERE (((CAST(NULL AS NUMERIC))<(CAST(-347613770 AS REAL)))) UNION ALL SELECT DISTINCT ((rt0.c1 IN ('59355821')) IN ()) FROM rt0, vt1, vt0; -- 1ms;
SELECT DISTINCT 0.6463104100822749 FROM rt0, vt0 WHERE (((((-451130230)*(x'')))GLOB((((('0.21661529572344707')OR(9.29189265E8)))AND(x''))))); -- 0ms;
SELECT DISTINCT vt0.c2 FROM vt1, rt0 WHERE (TYPEOF(DISTINCT ((-2.4983375E7)LIKE(NULL)))) GROUP BY ((((rt0.c1)/(vt0.c0)))%(((x'') NOT BETWEEN (vt1.c0) AND (vt0.c2))));SELECT ALL ((((vt0.c1)*(rt0.c0)))IS((rt0.c1 IN ()))) FROM vt1 WHERE (json_array_length(0.23102456441271624 COLLATE BINARY));SELECT DISTINCT ((CAST(rt0.c0 AS NUMERIC))<(((vt0.c1)<>(rt0.c2)))) FROM vt1, rt0, vt0; -- 0ms;
SELECT DISTINCT ((((vt0.c1)OR((((946823051)) BETWEEN ((vt0.c2)) AND ((vt0.c0))))))OR((rt0.c2 IN (vt1.c0, vt1.c0)))), (~ (CAST(rt0.c0 AS TEXT))), '', (((~ (vt0.c2))) NOTNULL), 0X2514ea0b FROM vt1, vt0, rt0 WHERE (TRIM((('l''2*2x(') IS FALSE), (x'' IN ('189232379')))); -- 0ms;
SELECT DISTINCT (((LIKELIHOOD(DISTINCT rt0.c1, 0.13438982276437483)))<>((((((vt0.c0)AND(vt0.c2)))AND(NULL))))), ((((rt0.c2, rt0.c2, vt0.c1, rt0.c0, vt0.c2))>((rt0.c1, vt0.c1, vt0.c1, vt0.c0, rt0.c2))) IN (CASE vt0.c0  WHEN vt0.c2 THEN '1660561180' ELSE vt0.c2 END)), ((CASE WHEN vt0.c2 THEN vt0.c0 ELSE '929189265' END)OR(COUNT(*))) FROM vt0, rt0, vt1 WHERE (((0.6066701705609628) BETWEEN (')TYJ') AND (0.32656752296347547)) COLLATE NOCASE); -- 1ms;
SELECT ALL (((vt1.c0 IN (rt0.c2))) IS TRUE), (((((vt0.c0, NULL, vt0.c0))<=((vt0.c0, rt0.c0, vt0.c0))))IS NOT(load_extension(rt0.c2))), TOTAL(json_remove(vt0.c0, vt1.c0)) FROM rt0, vt0;SELECT DISTINCT NULL FROM vt1; -- 0ms;
SELECT DISTINCT CASE WHEN ((rt0.c2)AND(rt0.c1)) THEN CAST(rt0.c1 AS NUMERIC) WHEN CAST(vt1.c0 AS TEXT) THEN ((rt0.c2) NOT BETWEEN (rt0.c2) AND (rt0.c0)) WHEN ((NULL)*(rt0.c1)) THEN TOTAL(vt0.c1) END FROM vt0 WHERE ((((NULL)) BETWEEN ((x'' COLLATE BINARY)) AND (((('1L') NOT BETWEEN (x'') AND ('VX'))))));SELECT DISTINCT AVG(((rt0.c1)LIKE(555940497)) COLLATE NOCASE) FROM vt0, vt1, rt0 WHERE (CAST((((('1193966099')AND('')))AND('')) AS REAL)) INTERSECT SELECT DISTINCT ((((((vt0.c0)AND(vt0.c0)))OR(vt0.c2)))%(CAST(vt1.c0 AS NUMERIC))) FROM vt1 RIGHT OUTER JOIN rt0 ON (NOT ((+ (vt0.c0)))) INNER JOIN vt0 ON CAST(x'' AS INTEGER);SELECT ((((CAST(rt0.c1 AS BLOB))OR(CASE vt0.c2  WHEN vt0.c0 THEN vt0.c2 WHEN 1977874028 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c0 WHEN rt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN rt0.c0 END)))AND(((vt0.c0) NOT BETWEEN (x'') AND (vt1.c0)))), (+ (((rt0.c0) BETWEEN (vt0.c1) AND (rt0.c1)))), CASE WHEN ((((((((vt0.c1)AND(rt0.c0)))AND(rt0.c1)))OR(vt0.c0)))AND(vt0.c2)) THEN ((vt0.c1)LIKE('92')) END FROM rt0, vt0 CROSS JOIN vt1 ON CASE CASE WHEN rt0.c2 THEN rt0.c0 ELSE vt0.c2 END  WHEN CASE WHEN rt0.c2 THEN rt0.c0 WHEN vt1.c0 THEN vt0.c0 WHEN x'' THEN vt0.c1 END THEN CAST(rt0.c1 AS REAL) END WHERE (((((((NULL) NOT BETWEEN (0Xfffffffff3407970) AND ('-1792167761')))AND((((((((('-1')OR('FALSE')))AND(NULL)))AND(0x77361ea3)))AND(-8.25510351E8)))))AND(((0x14fcd9b6)||(0.5905412573686186))))) GROUP BY CASE WHEN ((((((((rt0.c2)AND(vt1.c0)))OR(vt1.c0)))OR(vt0.c0)))AND(rt0.c1)) THEN (((((((('-213878416')AND(rt0.c0)))OR('1311219378')))OR(vt1.c0)))OR(1430268888)) ELSE '113592697' END, (vt0.c0 COLLATE BINARY IN (((rt0.c0) NOT NULL), (vt0.c0 IN ()))), ((((CASE rt0.c1  WHEN vt0.c2 THEN rt0.c2 ELSE rt0.c2 END)AND((((rt0.c2, vt0.c1, vt0.c2)) NOT BETWEEN ((vt1.c0, vt0.c2, '')) AND ((rt0.c2, rt0.c1, vt0.c0))))))AND(x'')) HAVING (NOT (((vt0.c1)<=(rt0.c1)))); -- 1ms;
SELECT ALL ((vt0.c1 IN (rt0.c2, vt0.c0)) IN ()) FROM rt0, vt1, vt0 WHERE (((((CAST(0.8644496736802684 AS NUMERIC))AND((('566610750') IS TRUE))))OR((NOT (NULL))))); -- 0ms;
SELECT DISTINCT PERCENT_RANK() OVER (), CAST((((rt0.c0, rt0.c2, rt0.c2))>=((rt0.c1, 0.045883237931114595, vt1.c0))) AS BLOB), MIN(TOTAL(rt0.c2)) COLLATE NOCASE FROM vt0, rt0;SELECT ALL CASE vt1.c0  WHEN rt0.c0 THEN rt0.c1 WHEN '945858670' THEN '1252885148' WHEN '-1260712428' THEN vt0.c1 ELSE rt0.c2 END COLLATE RTRIM FROM rt0, vt0 WHERE ((NOT (0.8964841196425575)) COLLATE NOCASE);SELECT ALL COUNT('vv') OVER (), (((((vt0.c0) NOT BETWEEN (rt0.c0) AND (vt0.c2))))<>(((((vt0.c1))>((vt0.c1)))))), LIKELY(((rt0.c0)<<(rt0.c2))) FROM vt1 GROUP BY 'GOZ樓', vt0.c0, ((((vt1.c0) IS TRUE)) NOT NULL);SELECT ALL UPPER(DISTINCT GROUP_CONCAT(rt0.c1)) FROM vt1, rt0, vt0 WHERE (TRIM(0x50375a46, NULL) COLLATE RTRIM); -- 0ms;
SELECT DISTINCT x'' FROM vt1, rt0, vt0; -- 0ms;
SELECT DISTINCT (((rt0.c0))!=((MIN(rt0.c0)))), x'', vt1.c0 FROM rt0 WHERE (STRFTIME((NOT (x'')), ((((0.6399890340941327)AND('Z|^^')))AND('?c')), ('0.2316105872336629' IN ())));SELECT ALL TRIM(((((((((vt0.c2)AND(rt0.c0)))OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c1))), CASE (1.374648299E9 IN ())  WHEN ((vt0.c2)OR(rt0.c0)) THEN (vt0.c0 IN ()) ELSE TYPEOF(vt1.c0) END, CAST(vt0.c1 COLLATE BINARY AS BLOB), (((rt0.c1) NOT BETWEEN (rt0.c0) AND (vt0.c1)) IN (CASE WHEN vt0.c1 THEN '%Bvw6d^>q' END, ('1375467680' IN ()))), ((vt0.c2 COLLATE RTRIM) IS FALSE), rt0.c1, ((((((((vt0.c1)OR(vt1.c0)))OR(vt0.c0)))OR(rt0.c2)))OR((((vt0.c2))<((vt0.c0))))) FROM vt0;SELECT DISTINCT CAST(0.8218760467090582 AS BLOB) FROM rt0, vt0 WHERE (((((((x'5386')AND(x'')))AND(NULL)))IS NOT((~ ('P\rKFQ8'))))) ORDER BY NULL ASC  NULLS FIRST LIMIT -1215458311; -- 0ms;
SELECT ((((((((((0xffffffff9661f72e) IS TRUE))OR(((((rt0.c2)AND(rt0.c1)))OR(vt0.c2)))))AND(SUM(vt1.c0))))OR(CHAR(vt0.c0))))AND(vt0.c2 COLLATE NOCASE)) FROM rt0, vt1, vt0; -- 1ms;
SELECT DISTINCT (((rt0.c1)<<(vt0.c1)) IN ()), ((SQLITE_COMPILEOPTION_GET(vt0.c0))<((((vt0.c0)) BETWEEN ((rt0.c1)) AND ((vt0.c0))))), TOTAL(('' IN ())) FROM vt0, vt1, rt0; -- 0ms;
SELECT CAST(CASE WHEN rt0.c0 THEN rt0.c2 END AS NUMERIC) FROM rt0; -- 0ms;
SELECT ALL ((((rt0.c0, rt0.c0, vt1.c0)) NOT BETWEEN ((rt0.c2, NULL, vt0.c1)) AND ((rt0.c2, -9.36573311E8, vt1.c0))) IN (((rt0.c2)|(vt0.c0)))) FROM vt0, vt1;SELECT DISTINCT ((((vt0.c0 COLLATE RTRIM)AND((~ (rt0.c0)))))AND((((rt0.c0))==((rt0.c1))))), LEAD(CAST(vt1.c0 AS NUMERIC), CASE WHEN vt1.c0 THEN '-1753725299' ELSE vt1.c0 END COLLATE NOCASE, CASE ((vt0.c2)>=(vt0.c1))  WHEN TOTAL_CHANGES() THEN ((vt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c2)) ELSE CASE WHEN vt0.c2 THEN vt0.c2 ELSE rt0.c0 END END) OVER (), vt1.c0 FROM vt1 NOT INDEXED, vt0, rt0 GROUP BY (((((~ (rt0.c0)))OR((('0.8355929876954997')|(vt0.c1)))))OR(rt0.c0 COLLATE RTRIM)) LIMIT 1769218413; -- 2ms;
SELECT ALL (+ ((('%M') IS TRUE))) FROM rt0 ORDER BY SQLITE_SOURCE_ID(), ((((rt0.c1) ISNULL))/(((((vt0.c0)AND(rt0.c0)))OR(vt1.c0)))) ASC  NULLS LAST, TYPEOF(DISTINCT rt0.c1) COLLATE RTRIM;SELECT ((((rt0.c0) NOT BETWEEN (vt0.c2) AND (rt0.c2))) BETWEEN (((('473169986', vt0.c0, vt0.c1)) NOT BETWEEN ((rt0.c1, rt0.c0, vt1.c0)) AND ((vt0.c1, '-1720233937', -1666634943)))) AND ((vt0.c2 IN ()))) FROM rt0, vt1 WHERE ((NOT ((('1551335030') IS FALSE))));SELECT DISTINCT (((vt0.c2, vt1.c0, rt0.c2, vt0.c2, rt0.c2))=((vt0.c0, vt0.c0, rt0.c0, rt0.c1, vt0.c1))) COLLATE NOCASE, GLOB((((rt0.c0)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c2))), x'e62c'), vt0.c1 FROM rt0, vt0 WHERE (((SQLITE_COMPILEOPTION_GET(x'')) BETWEEN (x'') AND ((((x''))!=((x'3b4d')))))) LIMIT -588225109;SELECT ALL 0X3c1de1b4 FROM rt0, vt1, vt0 LIMIT 547685126; -- 0ms;
SELECT DISTINCT PERCENT_RANK() OVER () FROM vt0, rt0, vt1; -- 1ms;
SELECT DISTINCT x'' FROM rt0, vt1, vt0 WHERE (((CAST(0.36671394061408125 AS INTEGER))<(((0.18867769435461457)>(0.39828515389204))))) GROUP BY CAST(CASE vt1.c0  WHEN 8.6978531E7 THEN vt0.c0 END AS BLOB) HAVING CAST(CASE WHEN vt0.c1 THEN rt0.c2 END AS TEXT); -- 0ms;
SELECT ALL UNICODE(vt0.c2 COLLATE BINARY), ((SUM(rt0.c0)) NOT BETWEEN (rt0.c2 COLLATE RTRIM) AND ((((vt0.c2)) BETWEEN ((vt1.c0)) AND ((vt0.c0))))), ((vt0.c0)/((vt0.c0 IN ()))) FROM rt0, vt0, vt1; -- 1ms;
SELECT (((((((((('i') NOT NULL))OR((NOT (vt0.c2)))))OR(MIN(vt0.c0, rt0.c0))))AND(vt0.c2)))OR(AVG(vt1.c0))) FROM vt1, vt0, rt0 WHERE (NULLIF((((NULL)) BETWEEN ((x'')) AND ((0.45728063249570905))), ((0.45173360704466337) NOT NULL))) GROUP BY (((~ (rt0.c2))) ISNULL) HAVING CAST(LIKELY(vt1.c0) AS INTEGER); -- 0ms;
SELECT DISTINCT CAST(TRIM(DISTINCT vt1.c0) AS BLOB), ((((vt0.c2)AND(rt0.c2))) BETWEEN (vt0.c2 COLLATE RTRIM) AND (((rt0.c2)|(277520216)))), NTH_VALUE(((vt0.c0)>(NULL COLLATE BINARY)), ((((vt0.c2) ISNULL)) IS TRUE)) OVER () FROM vt0, vt1;SELECT DISTINCT load_extension(TOTAL(vt1.c0)), SUM((- (rt0.c2))) OVER (), CAST(CAST(vt0.c2 AS BLOB) AS NUMERIC) FROM vt0, vt1, rt0 WHERE (NULL) ORDER BY (((rt0.c1)) NOT BETWEEN ((vt0.c2)) AND ((vt1.c0))) COLLATE BINARY COLLATE BINARY DESC, ((('170087071')) BETWEEN ((CAST('' AS TEXT))) AND ((vt0.c0 COLLATE RTRIM))) ASC;SELECT DISTINCT 0.5969994978213522 FROM rt0, vt0, vt1 WHERE ((('1103889037' COLLATE NOCASE)==((0.6473498352102858 IN ())))) LIMIT -1114378425; -- 0ms;
SELECT DISTINCT ((((vt0.c1)<=(vt1.c0))) BETWEEN (x'd2ca') AND (rt0.c2)) FROM vt1;SELECT ALL TOTAL(((x'') NOT BETWEEN (rt0.c2) AND (vt0.c0))) FILTER(WHERE rt0.c1) OVER (), x'', CASE WHEN 0.6001129959969318 THEN vt0.c2 ELSE vt0.c0 END COLLATE RTRIM FROM vt1 ORDER BY ((rt0.c2) BETWEEN ('AF*nKH.p') AND ('2146578864')) COLLATE NOCASE  NULLS FIRST;SELECT DISTINCT (((rt0.c1)) BETWEEN (((NOT (vt1.c0)))) AND ((GROUP_CONCAT(vt0.c2)))) FROM rt0;SELECT COUNT(*) FROM vt1; -- 1ms;
SELECT ((((CAST(vt0.c0 AS NUMERIC))OR(x'')))AND((vt0.c0 IN ()))) FROM vt0; -- 0ms;
SELECT DISTINCT (((vt0.c0)) NOT BETWEEN ((((((((((vt1.c0)OR(vt0.c2)))OR(vt0.c2)))AND(rt0.c1)))OR(rt0.c1)))) AND ((((rt0.c1)*(vt0.c0))))) FROM vt1, rt0 WHERE ((((((NULL)) NOT BETWEEN (('xkif]#')) AND ((0Xffffffffac7fc432)))) BETWEEN ((+ (NULL))) AND (0X762da115 COLLATE BINARY)));SELECT DISTINCT (- (MIN('kH'))) FROM vt0, vt1; -- 0ms;
SELECT (((((vt0.c1)) NOT BETWEEN ((vt0.c1)) AND ((NULL))))LIKE(((rt0.c0)AND(rt0.c2)))) FROM vt1, vt0, rt0; -- 0ms;
SELECT '-951037945', vt0.c1, CASE (vt1.c0 IN ())  WHEN vt1.c0 THEN ((vt1.c0)AND('-1114378425')) WHEN ((((rt0.c0)AND(rt0.c2)))AND(vt0.c1)) THEN rt0.c2 COLLATE NOCASE WHEN ((vt0.c2) NOT BETWEEN (vt0.c1) AND (rt0.c1)) THEN COUNT(NULL) ELSE (rt0.c1 IN (rt0.c0)) END FROM rt0, vt1, vt0; -- 0ms;
SELECT DISTINCT 0.4337165136421587 FROM vt0, vt1 GROUP BY (((((vt0.c0))=((rt0.c0)))) BETWEEN (((rt0.c1) BETWEEN (rt0.c0) AND (vt0.c1))) AND ('')) HAVING (((- (vt1.c0))) NOT NULL);SELECT DISTINCT GROUP_CONCAT(((vt0.c0)*(vt0.c0))) OVER ( ORDER BY (((rt0.c0 IN ())) NOT BETWEEN (((NULL) BETWEEN (vt0.c1) AND (rt0.c1))) AND (CASE WHEN vt0.c1 THEN rt0.c0 ELSE rt0.c1 END))  NULLS FIRST GROUPS  CURRENT ROW), 'c!,p ', ((((vt1.c0 IN ())))>=((rt0.c2 COLLATE BINARY))) FROM vt0, vt1 WHERE ((((x'0d08' IN ()))>>(NULL)));SELECT DISTINCT (NOT (rt0.c1)) FROM vt1, rt0 WHERE (((((x'')AND(0.9433912393985134)))OR(NULL)) COLLATE BINARY); -- 0ms;
SELECT DISTINCT CAST(vt1.c0 AS TEXT), ((((((((CASE WHEN rt0.c0 THEN vt1.c0 ELSE rt0.c1 END)AND(SUM(vt0.c1))))OR(rt0.c0 COLLATE BINARY)))AND(rt0.c0)))AND(((vt1.c0)/(rt0.c2)))), CASE IFNULL(rt0.c2, rt0.c1)  WHEN (((vt0.c2)) BETWEEN ((vt0.c0)) AND ((vt1.c0))) THEN (((vt1.c0, vt0.c2, x'', vt0.c0, rt0.c0)) BETWEEN ((rt0.c0, rt0.c1, vt0.c0, vt0.c2, vt0.c1)) AND (('1740591617', vt1.c0, rt0.c0, rt0.c1, rt0.c1))) ELSE (vt0.c2 IN (vt0.c1)) END FROM rt0;SELECT DISTINCT ((((((((((vt1.c0)OR(rt0.c1)))AND(vt0.c1)))OR(rt0.c0)))AND(vt1.c0))) NOT BETWEEN (LIKELIHOOD(vt0.c0, 0.7498668497429473)) AND (CASE WHEN vt1.c0 THEN vt0.c2 END)) FROM rt0 WHERE (((NULL IN ()) IN ()));SELECT DISTINCT CASE ((x'')-(rt0.c0))  WHEN TRIM(vt0.c1) THEN '-1257029880' ELSE (((vt0.c1)) NOT BETWEEN ((rt0.c0)) AND ((vt0.c0))) END, COUNT(*) OVER (), AVG(x'') OVER () FROM vt1;SELECT DISTINCT (~ ((0x2d767de3 IN (rt0.c2)))), CAST(rt0.c1 AS INTEGER) COLLATE NOCASE, (- (rt0.c2 COLLATE BINARY)) FROM vt1, vt0, rt0 WHERE ((((NULL, NULL, -1.144797624E9)) NOT BETWEEN ((NULL COLLATE RTRIM, CAST(x'' AS REAL), (+ (x'ce5e')))) AND ((CAST('-788339465' AS INTEGER), ((NULL) IS FALSE), '' COLLATE BINARY)))) LIMIT 1774913372; -- 0ms;
SELECT (+ (TOTAL(rt0.c0))) FROM vt0;SELECT ALL LIKE(vt1.c0, rt0.c0 COLLATE BINARY), COUNT((rt0.c2 IN (vt0.c2))) OVER (), TOTAL((vt0.c0 IN (vt1.c0))) OVER ( PARTITION BY (~ (((vt0.c0) BETWEEN (vt1.c0) AND (vt1.c0)))), ((vt1.c0)AND((((rt0.c2))>=((rt0.c1)))))) FROM rt0;SELECT DISTINCT ((((rt0.c2) BETWEEN (vt0.c1) AND (vt0.c1)))LIKE(((vt0.c0)AND(vt0.c1)))), rt0.c2, HEX(TRIM(rt0.c1)) FROM rt0;SELECT DISTINCT 'GIt#CP' FROM vt1; -- 0ms;
SELECT (((rt0.c2, vt0.c2, rt0.c0)) BETWEEN (((- (vt0.c0)), ((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt1.c0)), NULL)) AND ((((((((((rt0.c0)AND(vt0.c0)))AND(vt1.c0)))OR(NULL)))OR(rt0.c2)), ((((((((vt1.c0)AND(vt0.c2)))AND(vt1.c0)))AND(rt0.c0)))AND(x'')), ((0Xffffffffc78e4989)&(rt0.c1))))), (((vt1.c0)) NOT BETWEEN ((vt1.c0 COLLATE NOCASE)) AND (((rt0.c1 IN (vt0.c2))))), CASE WHEN AVG(rt0.c1) THEN (rt0.c1 IN ()) END FROM vt1, rt0;SELECT ((vt1.c0) BETWEEN (rt0.c1 COLLATE RTRIM) AND ((((rt0.c0, rt0.c2, vt1.c0)) NOT BETWEEN ((vt1.c0, rt0.c2, rt0.c0)) AND ((vt0.c2, rt0.c1, vt0.c1))))), x'81f5', ((vt0.c0 COLLATE RTRIM)||(CASE WHEN vt0.c0 THEN vt0.c1 WHEN rt0.c2 THEN rt0.c2 WHEN rt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c1 WHEN vt1.c0 THEN vt1.c0 ELSE rt0.c2 END)) FROM vt0 WHERE (((((((((((((UPPER(0.20564587319925043))AND(CASE WHEN x'9d55' THEN 0Xffffffff87d1661e ELSE x'' END)))AND((((0.0545354721398249, NULL, '1678899355')) NOT BETWEEN ((NULL, x'a566', x'')) AND ((829968819, -2.112222869E9, '38663367'))))))AND(((((NULL)OR('LtMS')))AND(x'')))))OR((~ (x'')))))AND((('2018237967') NOT NULL))))AND((NULL IN ()))));SELECT DISTINCT CAST(MAX(0.9693825513700334) AS INTEGER) FROM vt0, rt0; -- 1ms;
SELECT ALL (~ ((vt1.c0 IN ()))) FROM rt0 WHERE ((((((x''))!=((NULL)))) ISNULL)); -- 0ms;
SELECT DISTINCT (((('') NOTNULL))>=((vt0.c0 IN ()))) FROM rt0, vt0 WHERE (CAST(((NULL)&(0.2999709214687738)) AS BLOB)); -- 0ms;
SELECT ALL vt0.c2, LOWER(((rt0.c0)AND(vt1.c0))), CAST(((vt0.c2) BETWEEN (vt1.c0) AND (vt0.c0)) AS BLOB) FROM rt0, vt0, vt1; -- 0ms;
SELECT MIN((((rt0.c1)) BETWEEN ((rt0.c2)) AND ((vt1.c0)))) FROM vt0, rt0 GROUP BY (((0.43433496966249907 IN ()))==((x'cebe' IN ()))) HAVING (((rt0.c2, rt0.c0, vt0.c0)) NOT BETWEEN (((((rt0.c2)) BETWEEN ((vt0.c2)) AND ((vt0.c1))), (((vt0.c0, rt0.c2, vt0.c2))==((vt0.c2, rt0.c0, rt0.c1))), (((rt0.c1, rt0.c1, rt0.c0)) NOT BETWEEN ((vt0.c2, rt0.c2, rt0.c1)) AND ((vt0.c0, vt0.c1, vt1.c0))))) AND ((((rt0.c1) NOT BETWEEN (rt0.c1) AND (rt0.c0)), ((rt0.c0)<<(vt0.c1)), vt0.c1 COLLATE NOCASE)));SELECT LEAD(((vt0.c0 COLLATE BINARY) NOT BETWEEN (vt0.c2) AND (vt1.c0)), CASE WHEN ((vt1.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) THEN CAST(vt0.c1 AS TEXT) WHEN (((vt0.c0))<>((vt0.c0))) THEN ((vt0.c1)>=(vt0.c2)) WHEN 'v/KT' THEN ((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c1)) ELSE (vt0.c1 IN (vt0.c0)) END, (~ (CASE vt1.c0  WHEN vt0.c2 THEN vt0.c1 ELSE vt0.c1 END))) OVER () FROM vt0, vt1 GROUP BY (((('0.9054550382659327') NOT BETWEEN (vt0.c0) AND (rt0.c1))) BETWEEN (NULL) AND ((((rt0.c0)) BETWEEN ((rt0.c1)) AND ((vt0.c1))))) HAVING ((((vt0.c1)AND(((rt0.c1)<=(vt0.c0)))))AND(CASE vt0.c2  WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c2 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN vt0.c2 WHEN vt0.c1 THEN vt1.c0 END)) LIMIT -153374134 OFFSET -1742124055;SELECT vt0.c1, AVG('/.' COLLATE RTRIM) FILTER(WHERE (((((((rt0.c0)) NOT BETWEEN ((rt0.c0)) AND ((vt0.c1))))OR((vt0.c1 IN (rt0.c2)))))OR(0.5970663281768965))) OVER (), NTH_VALUE(((((vt0.c0)GLOB(vt0.c1)))<=((~ (vt0.c2)))), CAST(UPPER(NULL) AS BLOB)) OVER () FROM vt1, vt0 WHERE (((~ (NULL)) IN ())) ORDER BY CAST((~ (vt1.c0)) AS REAL) DESC, CAST(((((rt0.c1)OR(rt0.c0)))OR('')) AS TEXT)  NULLS LAST, NULL  NULLS FIRST;SELECT ((((rt0.c2)/(vt1.c0)))<(((rt0.c0) BETWEEN (rt0.c0) AND ('F⒯')))) FROM vt1, vt0 WHERE (CASE (('86978531')GLOB(NULL))  WHEN json_object(-576843413, 0.30006520284580795, NULL, NULL, 0.8355929876954997, '444155399') THEN ((((0xffffffffcee5b70f)OR(NULL)))AND(x'2f4b')) WHEN (NULL IN ('u릜7fA8~^')) THEN ((((x'')AND('Pn~')))AND(NULL)) WHEN '' COLLATE RTRIM THEN ((0.757666980328075) NOT BETWEEN ('-311384487') AND ('1332120964')) ELSE '-1475080856' END) GROUP BY CASE rt0.c0 COLLATE NOCASE  WHEN CAST(rt0.c0 AS TEXT) THEN (vt0.c1 IN (rt0.c2, vt0.c2)) END HAVING (((rt0.c2)) BETWEEN ((((vt0.c1)|(NULL)))) AND ((((rt0.c2) ISNULL))));SELECT DISTINCT (((NOT (vt0.c0))) NOTNULL) FROM vt0, rt0 GROUP BY ((CAST(rt0.c1 AS NUMERIC)) NOT BETWEEN ((NOT (vt0.c0))) AND (CAST(vt0.c2 AS TEXT))) HAVING SUM(((rt0.c0)AND(rt0.c0))); -- 0ms;
SELECT DISTINCT (+ (0.5910515796545186)) FROM rt0, vt0; -- 0ms;
SELECT ALL TOTAL(((vt0.c0) BETWEEN (rt0.c0) AND (rt0.c1))) FROM rt0, vt0; -- 0ms;
SELECT ALL ((rt0.c2 COLLATE BINARY)<(((rt0.c1) NOT BETWEEN (vt0.c2) AND (vt1.c0)))) FROM vt1 GROUP BY '-1712338466' COLLATE BINARY HAVING (rt0.c2 COLLATE NOCASE IN ());SELECT DISTINCT ((json_insert(vt1.c0, vt1.c0, rt0.c2)) NOT BETWEEN (((rt0.c1)>(vt1.c0))) AND (GLOB(rt0.c2, '.wlC嗑+h+'))) FROM rt0, vt1, vt0 ORDER BY NULL  NULLS LAST LIMIT -1402997156;SELECT ALL CUME_DIST() OVER () FROM vt1, vt0 WHERE (((((((x'')%('-1724152381')))OR((NOT ('㿔.<')))))AND(((x'e0f3')AND(x''))))); -- 0ms;
SELECT DISTINCT (+ ((((rt0.c2))<((x'ae20'))))) FROM rt0, vt1, vt0 WHERE ((((((NOT (NULL)))OR(((NULL)GLOB(0.7328120361944759)))))OR(GLOB(0.7516643112163691, 1872845519)))); -- 3ms;
SELECT DISTINCT CASE ((x'7337') ISNULL)  WHEN ((rt0.c1) BETWEEN (vt1.c0) AND (rt0.c1)) THEN LIKELIHOOD(vt0.c2, 0.5783530193422779) END, rt0.c0, ((((vt1.c0)<<(rt0.c1))) BETWEEN (((((vt0.c2)AND(vt0.c2)))OR(rt0.c1))) AND (rt0.c0)) FROM vt1, rt0 WHERE ((((((x'', 0.09697941447529168, 0.16367993811348247)) BETWEEN (('5pm!GZW5', '344857043', x'75ac')) AND ((NULL, x'9cab', '2ur艳D'))))IS NOT(CAST(0x2f6ba05d AS NUMERIC))));SELECT DISTINCT (AVG(vt1.c0) IN ()) FROM vt1; -- 0ms;
SELECT DISTINCT TRIM(-951037945, '1452163804'), (((vt0.c1)/(vt0.c0)) IN ()), (((rt0.c2)) NOT BETWEEN ((((vt0.c2)||('-1620882512')))) AND ((((((vt0.c0)AND(vt0.c0)))AND(rt0.c1))))) FROM rt0, vt0 WHERE (CASE WHEN ('1294921192' IN ()) THEN CASE x''  WHEN 0.08347175303602339 THEN 0.5304217714935655 END ELSE ((((x'5244')OR(2.018237967E9)))AND(x'')) END); -- 0ms;
SELECT ALL (((~ (rt0.c2)))+((((rt0.c1))>=((vt0.c0))))), ((((((vt0.c2)AND(rt0.c1)))AND(rt0.c0))) IS FALSE), (((((vt0.c1)) BETWEEN ((rt0.c2)) AND ((rt0.c1))))IS NOT(MIN(rt0.c1))) FROM vt1, vt0;SELECT ALL x'' FROM rt0, vt0 WHERE (CASE WHEN NULL COLLATE NOCASE THEN MIN(0Xfffffffff5b38c0b, '2130953849') END); -- 0ms;
SELECT DISTINCT CAST((((rt0.c0)) NOT BETWEEN ((rt0.c0)) AND ((rt0.c1))) AS TEXT) FROM vt1, vt0, rt0 WHERE ((~ ((- (NULL))))); -- 0ms;
SELECT DISTINCT CAST(rt0.c1 AS TEXT) COLLATE NOCASE FROM vt0;SELECT DISTINCT LAST_VALUE((((vt1.c0, vt1.c0, vt1.c0)) BETWEEN (((+ (vt1.c0)), (~ (vt1.c0)), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0)))) AND ((((vt1.c0)GLOB(NULL)), (vt1.c0 IN ()), vt1.c0)))) OVER (), NTILE((('cIW%S')IS NOT((((vt1.c0, vt1.c0, 0.582922761824724))=((vt1.c0, vt1.c0, vt1.c0)))))) OVER (), (('-1108846436') NOT BETWEEN ((rt0.c0 IN ())) AND (CASE WHEN rt0.c2 THEN vt1.c0 WHEN rt0.c2 THEN vt0.c0 WHEN vt0.c2 THEN rt0.c2 END)), rt0.c1, vt1.c0 FROM vt1;SELECT DISTINCT GROUP_CONCAT((~ (rt0.c0))) FROM vt0 WHERE (CAST(((('-33814102', '1', 0.8114882748048118)) BETWEEN (('Wg]d>A', 0.36400042845616287, NULL)) AND ((2.000035491E9, '', 0xffffffffeb998f1c))) AS INTEGER));SELECT DISTINCT (((rt0.c0)) NOT BETWEEN ((((vt0.c0)-(rt0.c0)))) AND ((((rt0.c2)-(vt0.c2))))) FROM vt0 WHERE ((((((((((('1165447257')!=('')))OR(SUBSTR(NULL, x''))))AND(((('503535057')) BETWEEN ((0.3957529876567204)) AND ((0.8894988286582023))))))AND(CASE NULL  WHEN NULL THEN '-1795180990' END)))OR((('')=(NULL)))));SELECT ((((rt0.c2) IS FALSE))|(CAST(vt0.c0 AS BLOB))) FROM vt1, rt0 WHERE (((((NULL) NOT NULL))LIKE(((((NULL)AND(0Xffffffffe5408460)))AND(-1579232271))))) ORDER BY (((vt0.c1)IS(vt0.c1)) IN (rt0.c2 COLLATE RTRIM))  NULLS FIRST, ((((vt0.c1)|(rt0.c1))) BETWEEN ((~ (vt0.c1))) AND (COALESCE(rt0.c1, vt0.c1, vt0.c2, rt0.c0, vt0.c1, '赸&5P憻M', vt1.c0, vt1.c0))) DESC  NULLS LAST;SELECT CASE WHEN (~ (rt0.c0)) THEN CAST(rt0.c1 AS INTEGER) WHEN vt0.c1 COLLATE RTRIM THEN vt0.c1 WHEN ((vt1.c0) NOTNULL) THEN rt0.c2 COLLATE RTRIM WHEN CASE vt0.c0  WHEN vt0.c0 THEN rt0.c0 END THEN ((vt0.c0)OR(rt0.c1)) WHEN ((0.28881058788406333)OR(vt0.c1)) THEN ((rt0.c0)AND('')) END, (((0X480a22e5))<((((0.7200425090475631)/(vt1.c0))))), MAX(((vt0.c0)LIKE('尷-184:2784130555634322412 126:6289854597095763985TV\rx')) COLLATE NOCASE) FROM vt1, vt0 LIMIT -213878416 OFFSET -1972430375;SELECT ALL (((vt0.c2 IN ()))*((NOT (x'7b94')))) FROM vt0 WHERE ((('-1062833682')OR(CASE WHEN '-665870006' THEN 0.7564583889357888 ELSE 0.21661529572344707 END))); -- 0ms;
SELECT ALL '-1627590383' FROM rt0 WHERE (CASE WHEN ((929189265)==(0.1602773527406165)) THEN (((('')OR('')))AND(NULL)) ELSE ((0.97535010734701) NOT BETWEEN ('') AND (x'')) END); -- 0ms;
SELECT DISTINCT CASE WHEN ((((((((vt1.c0)OR(vt0.c1)))AND(rt0.c1)))OR(vt0.c1)))OR(vt0.c1)) THEN ((((((((rt0.c0)OR(rt0.c2)))AND(vt0.c2)))AND(vt0.c0)))AND(0Xffffffffed53aa6d)) END FROM rt0;SELECT ALL vt0.c0, ((CAST(vt0.c1 AS NUMERIC)) NOT NULL), (((vt0.c1 IN ())) NOT BETWEEN (COUNT(*)) AND ((- (vt0.c1)))) FROM vt0, rt0 WHERE (0.5754321674644571); -- 0ms;
SELECT vt0.c1, STRFTIME(vt0.c0, (NOT (rt0.c2)), (((rt0.c1, vt1.c0, vt0.c0)) BETWEEN ((vt0.c1, rt0.c0, rt0.c2)) AND ((vt0.c2, rt0.c2, vt0.c0))), vt1.c0, vt1.c0), MAX(NULL) FROM vt0, rt0 ORDER BY ((rt0.c1) IS FALSE) COLLATE NOCASE;SELECT DISTINCT (((vt0.c0 IN ()))!=(UPPER(vt0.c2))) FROM vt0, vt1 LIMIT 770976622; -- 0ms;
SELECT DISTINCT (((vt1.c0)||(vt0.c0)) IN ()) FROM vt1, vt0 GROUP BY ((vt1.c0)<=(vt0.c1)) COLLATE BINARY; -- 1ms;
SELECT DISTINCT (((vt0.c1 IN ())) BETWEEN (vt0.c2) AND (((vt0.c1) NOTNULL))) FROM vt1, rt0 WHERE (LOWER(DISTINCT (((('')OR('eR\n-&kU')))AND(-1.280542194E9))));SELECT ((json(vt0.c0))>((((vt0.c1, NULL, vt0.c1, vt0.c0, vt0.c1)) NOT BETWEEN ((vt0.c2, 0.87624249298908, rt0.c1, rt0.c2, rt0.c0)) AND ((rt0.c1, vt1.c0, rt0.c0, '	VmxZuk', rt0.c0))))), (- (((rt0.c2) BETWEEN (rt0.c1) AND (rt0.c1)))), COUNT(*) FROM vt1;SELECT ((vt0.c1 COLLATE BINARY)-(((vt0.c0)IS(rt0.c2)))) FROM vt0, vt1, rt0; -- 0ms;
SELECT DISTINCT ((CASE vt0.c1  WHEN vt0.c0 THEN rt0.c1 WHEN vt0.c2 THEN 1.669157632E9 WHEN vt0.c1 THEN vt1.c0 ELSE rt0.c2 END) IS FALSE), COUNT((~ (vt0.c1))) OVER ( ROWS ((((((vt0.c0))<((vt0.c2))), rt0.c0 COLLATE BINARY, ((vt1.c0) NOT BETWEEN (vt0.c0) AND (vt0.c1))))<=((NULL COLLATE RTRIM, ((vt0.c2) NOT NULL), CAST(vt0.c2 AS NUMERIC)))) PRECEDING), ((NULL) NOT NULL) FROM vt0 WHERE (CASE ((0.028111339067976027) NOT BETWEEN (0.673130244899207) AND (x''))  WHEN (((x'')) BETWEEN ((x'395b')) AND (('f<'))) THEN (((0.6195638889185311))<=((''))) ELSE (NULL IN ()) END) LIMIT -2112222869 OFFSET 489465626;SELECT ((((((((((rt0.c2)OR(rt0.c1)))OR(rt0.c0)))OR('2')))OR(rt0.c0)))&(((((vt0.c2)AND(NULL)))OR(rt0.c0)))) FROM rt0, vt0 WHERE (TYPEOF(DISTINCT (('''繶') IS FALSE))); -- 0ms;
SELECT (((vt0.c0 IN ()))>=(NULLIF(DISTINCT rt0.c0, '⼶!FJP>UKx'))) FROM rt0, vt1, vt0 ORDER BY CASE CAST(vt0.c1 AS TEXT)  WHEN CASE WHEN vt1.c0 THEN '쌸jc줪d޸' WHEN vt0.c0 THEN vt0.c2 WHEN rt0.c2 THEN vt0.c1 END THEN ((rt0.c0)%(rt0.c1)) ELSE (((rt0.c2, vt1.c0, vt1.c0)) BETWEEN ((rt0.c1, rt0.c2, rt0.c2)) AND ((rt0.c0, vt1.c0, vt0.c1))) END; -- 1ms;
SELECT (NOT ((- (rt0.c2)))) FROM vt1;SELECT DISTINCT CAST(CASE 0.09207288655558665  WHEN vt0.c0 THEN NULL ELSE vt0.c1 END AS INTEGER) FROM rt0, vt1, vt0 WHERE (COALESCE(DISTINCT (+ (0.5234110620183849)), ((('0.9650890054992312', NULL, x'83d5')) BETWEEN (('-1988202731', '', 9.22455596E8)) AND (('z|^^', x'', x''))))); -- 0ms;
SELECT 0.08173795060693778 FROM vt0; -- 0ms;
SELECT DISTINCT (NOT ((((rt0.c2)) BETWEEN ((rt0.c2)) AND ((vt1.c0))))) FROM rt0, vt0, vt1; -- 1ms;
SELECT ((CAST(vt1.c0 AS BLOB))IS NOT(MIN(vt1.c0))), (((((vt0.c1))<((vt0.c0))))>(rt0.c0 COLLATE RTRIM)), (NOT (rt0.c2 COLLATE NOCASE)) FROM vt1 ORDER BY CAST(CAST(rt0.c2 AS BLOB) AS TEXT)  NULLS LAST LIMIT -86664394 OFFSET -2062221686;SELECT DISTINCT ((((COUNT(*))OR((vt0.c1 IN (rt0.c2)))))OR(NULL)), (((rt0.c0)*(rt0.c1)) IN ()), ((('}脹uT\s')) NOT BETWEEN (((rt0.c1 IN ()))) AND (((NOT (rt0.c1))))) FROM rt0 WHERE ((((((((((('1102563661')OR(0.44182582068720033)))OR(((((((((NULL)AND(0.11620480938832078)))AND('')))OR('-1738942927')))OR(0.7723921831749859)))))AND(((1.88876418E9)>>('nWBSN')))))AND((('-1563055944')>=(-2012211670)))))OR(((x'c7c3')&(-1.7976931348623157E308)))));SELECT DISTINCT 0.4441722232659646 COLLATE RTRIM FROM rt0, vt0, vt1; -- 0ms;
SELECT DISTINCT CAST(vt0.c1 AS TEXT) COLLATE NOCASE FROM vt1, vt0, rt0 WHERE (((((NULL)AND(CAST('2057419204' AS NUMERIC))))AND(((x'') NOT BETWEEN (0xb65d961) AND (NULL))))); -- 0ms;
SELECT DISTINCT CASE WHEN vt1.c0 THEN TOTAL(vt1.c0) WHEN CASE vt1.c0  WHEN rt0.c1 THEN rt0.c1 END THEN CAST(vt0.c0 AS NUMERIC) WHEN CAST(vt0.c0 AS BLOB) THEN (- (vt0.c1)) ELSE ((vt0.c2) NOTNULL) END, TRIM(DISTINCT (rt0.c0 IN ()), ((((vt0.c2)AND(NULL)))OR(rt0.c1))), ((UNLIKELY(DISTINCT rt0.c0)) IS TRUE) FROM rt0 GROUP BY ((((+ (vt0.c1))))<=((((((((((vt0.c2)OR(rt0.c2)))AND(vt1.c0)))OR(vt0.c1)))OR(vt1.c0)))));SELECT GROUP_CONCAT(0xc690975) OVER () FROM vt0, rt0 WHERE ('-236111406' COLLATE BINARY) ORDER BY CASE WHEN CAST(rt0.c2 AS NUMERIC) THEN (vt0.c0 IN ()) WHEN ((rt0.c1) NOT BETWEEN (rt0.c1) AND (vt1.c0)) THEN ((rt0.c0) NOT BETWEEN (vt0.c0) AND (rt0.c0)) WHEN 0.35183859886109725 THEN ((rt0.c0) NOT BETWEEN (vt0.c2) AND (vt0.c1)) END;SELECT (((rt0.c2) NOT BETWEEN (rt0.c0) AND (rt0.c0)) IN (NULL, ((0.3202622112354472)<<(vt0.c2)))) FROM vt1;SELECT ALL ((((x'')/('!BF2hO1/'))) NOTNULL) FROM vt0, rt0, vt1; -- 0ms;
SELECT TOTAL(((rt0.c2)<(rt0.c0))) OVER () FROM vt0, rt0, vt1 ORDER BY CASE CASE rt0.c2  WHEN vt1.c0 THEN rt0.c0 WHEN vt0.c0 THEN vt1.c0 WHEN rt0.c1 THEN vt1.c0 ELSE vt0.c0 END  WHEN json_object(rt0.c0, vt0.c2) THEN (((NULL, rt0.c1, vt0.c1))<=((vt0.c0, vt0.c2, vt0.c0))) ELSE ((vt0.c0)<(vt1.c0)) END;SELECT DISTINCT ((TOTAL(rt0.c0))>>(CASE vt0.c0  WHEN 0x45775059 THEN rt0.c2 ELSE rt0.c0 END)) FROM rt0, vt1, vt0; -- 3ms;
SELECT ALL AVG((vt0.c2 IN ())), COUNT(*) OVER (), x'' FROM vt0 WHERE (CAST(((NULL)&(NULL)) AS NUMERIC)); -- 0ms;
SELECT ((((((((((vt0.c2)AND(rt0.c1)))AND(vt1.c0)))AND(rt0.c2)))OR(rt0.c0)))IS(CASE rt0.c1  WHEN rt0.c0 THEN vt0.c2 END)) FROM vt0, vt1, rt0 WHERE (CASE WHEN CAST(NULL AS NUMERIC) THEN (0X2281ed4c IN ()) END) GROUP BY rt0.c2, (+ (rt0.c2)) COLLATE RTRIM COLLATE BINARY, (- (x'd402a2c1')); -- 0ms;
SELECT json_remove(((((rt0.c2)AND(vt0.c0)))AND(rt0.c0)), (- (rt0.c0))) FROM vt0, vt1, rt0;SELECT ALL AVG((NOT (vt0.c2))) FROM rt0 INNER JOIN vt0 ON ((((((((((vt1.c0)AND(vt1.c0)))OR(rt0.c2)))AND(vt0.c0)))AND(vt1.c0))) IS FALSE) WHERE (((((((0.6636695365926578)OR('2W')))OR(0.8795017987167559)))/(((-1.620882512E9) BETWEEN (0.1582333821987102) AND ('^Q	벙')))));SELECT DISTINCT (((rt0.c0)) BETWEEN ((vt0.c2)) AND ((vt0.c0))) COLLATE RTRIM FROM rt0, vt0 WHERE (((((x'1ff8')GLOB(x'e6f6')))|((((NULL)) BETWEEN ((2.018187878E9)) AND ((x'')))))) LIMIT 443214139; -- 0ms;
SELECT ((vt0.c2)!=(((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c1)))AND(rt0.c0)))AND(rt0.c2)))) FROM vt0 WHERE (CASE (('jmM')>>('1332120964'))  WHEN ((1.131111114E9) IS FALSE) THEN 937877064 END);SELECT COUNT(*) OVER (), ((NULL)LIKE(((vt0.c2)IS NOT(vt0.c0)))), CUME_DIST() OVER ( ORDER BY (~ (CASE WHEN vt0.c1 THEN rt0.c2 ELSE vt1.c0 END)) ASC) FROM vt1 ORDER BY CASE WHEN (vt0.c2 IN ()) THEN rt0.c0 END DESC  NULLS LAST;SELECT DISTINCT TOTAL(rt0.c0) FROM vt1, vt0 WHERE (CAST(1488721024 AS INTEGER) COLLATE BINARY);SELECT DISTINCT CASE WHEN ((rt0.c2) NOT BETWEEN (1.332120964E9) AND (0.6627321909410678)) THEN ((vt0.c0) IS TRUE) WHEN ((vt0.c1) IS TRUE) THEN AVG(rt0.c0) WHEN LIKELIHOOD(DISTINCT vt0.c2, 0.9843048437502366) THEN vt0.c0 COLLATE NOCASE ELSE vt0.c0 END FROM rt0 WHERE ((json_array_length(0.37893880039265704, x'ab58') IN ()));SELECT ((vt0.c2)LIKE((vt0.c1 IN ()))), vt0.c1, (((- (rt0.c1)))>=(((0.7723921831749859)GLOB(rt0.c0)))) FROM rt0;SELECT ALL (((rt0.c1)) NOT BETWEEN ((((((((((vt1.c0)OR(vt0.c0)))OR(rt0.c1)))AND(vt1.c0)))AND(vt0.c1)))) AND ((((rt0.c2)%(rt0.c0))))) FROM vt0, rt0;SELECT DISTINCT LIKELY(((vt0.c0)+(vt0.c2))) FROM rt0, vt1, vt0 WHERE ((((NULL IN (x'2b2e'))) NOT NULL)); -- 0ms;
SELECT (~ ((vt0.c0 IN ()))) FROM vt0, rt0; -- 0ms;
SELECT DISTINCT CAST(((((vt0.c1)OR(rt0.c0)))AND('1240137033')) AS INTEGER) FROM vt1 LIMIT -1617860802 OFFSET -1170682919;SELECT ALL (~ ((~ (vt0.c2)))) FROM rt0, vt1 WHERE (CASE ((-1105614718) IS TRUE)  WHEN 1.131111114E9 THEN (+ ('1162769850')) END);SELECT DISTINCT ('' IN ()) FROM rt0; -- 0ms;
SELECT CAST(vt0.c0 AS REAL) COLLATE RTRIM, UPPER(DISTINCT ((vt0.c1) IS TRUE)), CAST(TRIM(rt0.c2, vt0.c2) AS BLOB) FROM vt0, rt0; -- 0ms;
SELECT ((((((((((rt0.c0)OR(vt0.c1)))AND(vt0.c1)))OR(rt0.c2)))OR(rt0.c2)))>>((vt0.c2 IN ()))) FROM vt0 GROUP BY ((vt0.c0) NOTNULL) COLLATE BINARY HAVING (- (((rt0.c2) ISNULL)));SELECT DISTINCT (COUNT(vt0.c0) IN (vt0.c1)), ((vt0.c0) BETWEEN (rt0.c1) AND (rt0.c0)) COLLATE RTRIM, (((rt0.c1)=(rt0.c1)) IN (CAST(NULL AS TEXT), NULL)) FROM vt1 WHERE (CAST(((x'')||(x'')) AS TEXT));SELECT DISTINCT ((CAST(vt0.c0 AS NUMERIC)) NOTNULL) FROM vt0 ORDER BY ((CAST(vt1.c0 AS NUMERIC))OR(((vt0.c0)*(vt0.c1))))  NULLS FIRST, ((((((vt0.c0)AND(rt0.c2)))AND(rt0.c0))) BETWEEN (CASE WHEN vt1.c0 THEN rt0.c0 END) AND (((vt1.c0)/(rt0.c0)))) DESC  NULLS LAST, (((((((((('')+(rt0.c2)))OR((rt0.c0 IN ()))))AND((rt0.c2 IN ()))))OR(((vt0.c0) BETWEEN ('%') AND (vt1.c0)))))AND(vt0.c1 COLLATE NOCASE));SELECT DISTINCT MIN(NULLIF(rt0.c1, vt0.c0)) FROM vt0, rt0, vt1; -- 1ms;
SELECT ((LIKELY(vt1.c0))IS NOT(((vt0.c0)>=(vt0.c2)))) FROM vt0 WHERE (((((((((((('1268758963')AND(0.09871350176760718)))AND('⋯L}')))OR(1.027372643E9)))AND(x''))))==((((('1154352591'))<((0.9284529811761946)))))));SELECT DISTINCT (NOT (((vt0.c1) ISNULL))), MAX(((vt0.c1) ISNULL)), COUNT(CASE WHEN vt0.c0 THEN vt1.c0 END) OVER () FROM vt1, rt0;SELECT (rt0.c1 IN ()) COLLATE BINARY FROM rt0, vt0; -- 0ms;
SELECT DISTINCT SUM(COALESCE(rt0.c2, rt0.c0, vt1.c0, rt0.c0)) OVER (), CASE rt0.c2  WHEN vt0.c1 THEN rt0.c1 ELSE vt1.c0 END COLLATE BINARY, (((CAST(vt0.c0 AS BLOB)))!=(((0.4464316820194796 IN ())))) FROM vt0, vt1 GROUP BY vt0.c1, CAST((rt0.c2 IN (vt0.c1)) AS NUMERIC), ((((x'')LIKE(vt0.c1)))IS(((vt0.c1)*(rt0.c1)))), GLOB(x'e04f', (- (rt0.c0))), TRIM(vt0.c0, vt0.c2) COLLATE NOCASE ORDER BY LIKELY(((rt0.c0) NOTNULL))  NULLS FIRST, vt0.c0;SELECT DISTINCT (((+ (rt0.c0)))!=(-1840332404)) FROM vt0, rt0; -- 1ms;
SELECT DISTINCT LTRIM(((((rt0.c2)AND(vt0.c2)))OR(rt0.c2))) FROM vt0 WHERE ((((x'', NULL, NULL)) NOT BETWEEN ((UPPER(DISTINCT 0.7069586465026723), (x'ee0a' IN (x'')), ('-783788406' IN ()))) AND ((x'ce17', CASE WHEN 0.2315612911484347 THEN 0Xffffffffc82d0681 END, (((NULL))>=(('-1500744529')))))));SELECT vt0.c2 FROM vt1;SELECT CAST(CASE vt0.c0  WHEN vt1.c0 THEN vt0.c0 ELSE vt0.c0 END AS NUMERIC), ((((CASE WHEN rt0.c1 THEN vt0.c1 WHEN rt0.c2 THEN vt0.c0 WHEN vt1.c0 THEN rt0.c0 END)AND(CASE x''  WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c2 END)))AND(((vt0.c1) IS FALSE))), ((vt1.c0)/(((rt0.c2) NOT BETWEEN (rt0.c1) AND (vt0.c0)))) FROM vt1, vt0, rt0 WHERE (((0xffffffffbfc56ef9) IS FALSE) COLLATE RTRIM); -- 0ms;
SELECT DISTINCT LAG(((((((((((((rt0.c1 COLLATE RTRIM)AND(rt0.c2 COLLATE NOCASE)))AND(rt0.c2 COLLATE RTRIM)))AND(CAST(rt0.c0 AS REAL))))AND(rt0.c0 COLLATE RTRIM)))AND(NULL)))AND(x'')), ((CAST(rt0.c2 AS REAL))%(((rt0.c0)/(rt0.c1)))), (((((((rt0.c2)AND(rt0.c2)))AND(rt0.c0))))<>((UPPER(DISTINCT rt0.c0))))) OVER ( RANGE BETWEEN  CURRENT ROW AND  UNBOUNDED FOLLOWING EXCLUDE CURRENT ROW) FROM rt0 WHERE (x'') GROUP BY ((((((vt0.c1)&(rt0.c1)))OR(((vt1.c0)/(vt0.c0)))))OR(vt0.c2 COLLATE NOCASE)), ((~ (rt0.c2)) IN (json_array(vt0.c1, rt0.c2))), CASE WHEN ((rt0.c2) ISNULL) THEN ((vt0.c2) BETWEEN (rt0.c1) AND (rt0.c1)) ELSE ((vt0.c0)OR(rt0.c0)) END;SELECT ALL (0.074912294198056 IN ()) FROM rt0, vt1, vt0 WHERE (((((((x'')*('1L')))OR((((('T.1')OR(1799897513)))AND('-1603121633')))))AND(('0J' IN ())))); -- 0ms;
SELECT (((+ (vt1.c0)))AND(((((((((vt0.c2)OR(rt0.c1)))AND(vt0.c0)))AND(vt0.c1)))AND(vt0.c2)))) FROM vt0, vt1 WHERE (((((x'') BETWEEN ('-1792167761') AND ('1110597059')))|(((('')) NOT BETWEEN (('-699904044')) AND ((0.7291718608579548)))))) GROUP BY ((((((((vt0.c0)OR(vt0.c2)))AND(rt0.c0)))AND(rt0.c0)))AND(vt1.c0)) COLLATE RTRIM, (((((+ (vt0.c2)))AND(((vt0.c2) ISNULL))))AND(-1662945456)), json_extract(((vt0.c2) NOT BETWEEN (rt0.c1) AND ('-1215458311')), ((rt0.c1)|(rt0.c0))), x'' COLLATE RTRIM, ((vt0.c0)%(rt0.c1)) HAVING ((((vt1.c0)AND(vt0.c1)))%(TRIM(NULL)));SELECT DISTINCT ((+ (rt0.c1)) IN ()), CAST(((rt0.c0) ISNULL) AS BLOB), vt0.c1 FROM vt0;SELECT ALL ((NULL COLLATE RTRIM) NOTNULL) FROM vt0, vt1, rt0; -- 0ms;
SELECT ((vt0.c0) ISNULL) FROM rt0;SELECT rt0.c2 FROM rt0, vt0 WHERE ('Ry') GROUP BY 0x24cfa63f HAVING CAST((rt0.c1 IN (rt0.c0, vt0.c1)) AS REAL);SELECT ALL ((0.4296644889723894 IN ()) IN ()), ((((rt0.c1) IS TRUE))>=(((rt0.c0) IS FALSE))), (NOT ('%M')) FROM rt0, vt1; -- 0ms;
SELECT DISTINCT (((vt0.c2, vt1.c0, 'c3wH쥍CKd', x'', '922455596')) NOT BETWEEN (((vt1.c0 IN ()), (rt0.c1 IN ()), CAST(rt0.c0 AS BLOB), (((vt0.c1))<((vt0.c0))), LENGTH(vt0.c0))) AND ((((vt0.c1) IS FALSE), vt1.c0 COLLATE NOCASE, ((vt1.c0)GLOB(vt0.c0)), CASE WHEN vt0.c2 THEN NULL END, (~ (rt0.c1))))) FROM rt0 WHERE ((((0.4531991135631668 IN ()))*(((((x'')AND('竆p')))OR(x'')))));SELECT DISTINCT COUNT(*) FROM rt0, vt0, vt1; -- 1ms;
SELECT DISTINCT ((CASE WHEN vt0.c0 THEN rt0.c2 ELSE 0.5352608479760735 END)<<((rt0.c1 IN (vt0.c0, vt1.c0)))) FROM vt0, vt1, rt0 WHERE (LIKELY(CAST(NULL AS INTEGER))); -- 0ms;
SELECT LAG(CASE WHEN ((NULL) ISNULL) THEN (+ (vt1.c0)) END, ((CASE 0.7102080844276821  WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)/((vt1.c0 IN (vt1.c0, vt1.c0)))), (((((((vt1.c0, vt1.c0, vt1.c0)) NOT BETWEEN ((vt1.c0, vt1.c0, vt1.c0)) AND ((vt1.c0, vt1.c0, vt1.c0))))AND(vt1.c0 COLLATE RTRIM)))OR(vt1.c0))) OVER (), ((COUNT(vt0.c1))<=(((rt0.c2) NOTNULL))), NTH_VALUE(vt1.c0, vt1.c0 COLLATE BINARY) OVER ( ORDER BY TYPEOF(DISTINCT ((((vt0.c0)AND(rt0.c2)))OR(vt0.c2))) DESC  NULLS LAST, ((('')) NOT BETWEEN ((x'')) AND ((rt0.c2 COLLATE RTRIM))) DESC  NULLS FIRST ROWS (NOT (((rt0.c0)*(vt0.c1)))) PRECEDING) FROM vt1 WHERE (NULLIF(((((NULL)OR(NULL)))OR('0.4464316820194796')), IFNULL('-1474589320', -2113760850)));SELECT DISTINCT CASE ((vt0.c1)*(vt0.c2))  WHEN (((vt0.c1)) BETWEEN ((rt0.c0)) AND ((rt0.c2))) THEN ((rt0.c0)<(rt0.c1)) ELSE (rt0.c1 IN ()) END FROM rt0 LIMIT 1405009507;SELECT ALL json_array_length(CASE rt0.c1  WHEN rt0.c1 THEN vt0.c2 ELSE vt0.c0 END, x''), (((vt1.c0, vt0.c0, vt0.c0))>((rt0.c1, rt0.c0, vt0.c2))) COLLATE BINARY, CAST(vt1.c0 AS NUMERIC) FROM vt1, vt0;SELECT ALL '' FROM vt0, vt1, rt0; -- 0ms;
SELECT ALL (NOT (rt0.c1)) FROM vt0, rt0, vt1 WHERE (CAST((- (0.7276806630777718)) AS TEXT)); -- 0ms;
SELECT DISTINCT COUNT(*) OVER (), NTH_VALUE(((((rt0.c1 COLLATE RTRIM)OR(((vt1.c0)IS NOT(rt0.c1)))))AND(CAST(vt1.c0 AS NUMERIC))), (rt0.c0 COLLATE RTRIM IN ())) OVER (), ((CASE rt0.c2  WHEN rt0.c2 THEN rt0.c0 ELSE x'' END)IS(rt0.c1)) FROM vt1, rt0;SELECT ALL HEX((~ (rt0.c2))) FROM vt1, rt0 WHERE ((((('68289543')&(-768605929))) BETWEEN (((0.41808449329129704)<<(0.5653252892471355))) AND (((-1.840332404E9)>(0.9822311739189773))))) GROUP BY CAST(TRIM(vt0.c2) AS BLOB), json_type(vt0.c1) COLLATE NOCASE, (((rt0.c1, vt0.c0, (((('-212235247')AND(x'59ce')))OR(vt0.c1))))==((CAST(rt0.c1 AS REAL), vt0.c2, ((vt0.c1) NOT BETWEEN (vt1.c0) AND (vt0.c2))))) HAVING CASE WHEN ((((((((vt0.c2)OR(vt0.c2)))OR(vt1.c0)))AND('')))AND(rt0.c1)) THEN TOTAL(rt0.c2) ELSE ((((vt0.c0)OR(vt1.c0)))OR(vt0.c0)) END;SELECT ALL ((((rt0.c1)GLOB(rt0.c1)))LIKE((- (rt0.c0)))), NTILE(((NULL) ISNULL) COLLATE BINARY) OVER (), vt1.c0 FROM rt0;SELECT DISTINCT (((x'9fb7')-(vt1.c0)) IN ()), COUNT(((vt0.c2)IS(rt0.c2))) OVER ( ORDER BY (((0X37624d91 IN (vt0.c2))) NOTNULL)  NULLS LAST, ((((((((((((NULL)AND(((rt0.c0)IS(rt0.c0)))))OR(CAST(vt0.c0 AS TEXT))))OR(0.8212178148071657)))AND(((vt0.c2)-(NULL)))))AND(CASE WHEN vt0.c1 THEN vt0.c1 END)))AND(((vt0.c2) NOT BETWEEN (rt0.c2) AND (vt0.c1))))), (~ (CASE WHEN rt0.c1 THEN vt1.c0 ELSE '' END)) FROM vt0, rt0 WHERE ((LIKELIHOOD(DISTINCT NULL, 0.3464592692671622) IN ()));SELECT ALL ((((((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))OR(vt0.c0)))AND(vt0.c2))) NOT BETWEEN (((vt0.c1) IS FALSE)) AND (((rt0.c2) IS TRUE))) FROM vt0, rt0, vt1; -- 0ms;
SELECT DISTINCT CAST((rt0.c0 IN ()) AS NUMERIC) FROM vt1; -- 0ms;
SELECT ALL NULLIF(((vt0.c1) ISNULL), CASE rt0.c0  WHEN vt0.c1 THEN rt0.c2 WHEN vt1.c0 THEN rt0.c1 WHEN 0X50a21531 THEN vt1.c0 WHEN rt0.c1 THEN rt0.c1 WHEN vt0.c2 THEN vt0.c1 END) FROM vt1, vt0 WHERE (NULL);SELECT ALL COUNT(*) FROM rt0 WHERE (((NULL COLLATE NOCASE)GLOB(CAST(0Xffffffffe9d1e0f3 AS NUMERIC)))) ORDER BY CASE WHEN ((rt0.c2)GLOB(vt0.c0)) THEN rt0.c1 COLLATE RTRIM ELSE CASE WHEN vt0.c1 THEN rt0.c0 END END ASC;SELECT rt0.c2 FROM vt1, vt0, rt0 WHERE (UPPER(DISTINCT LOWER(DISTINCT 0.32225875431429485))) GROUP BY ((TRIM(rt0.c1)) IS TRUE) HAVING '1e500'; -- 3ms;
SELECT '2018237967' FROM vt1, vt0; -- 0ms;
SELECT NULL FROM rt0 WHERE (CAST(((x'')IS NOT(x'')) AS REAL)) LIMIT 1299849137 OFFSET 1440208828; -- 0ms;
SELECT DISTINCT ((IFNULL(rt0.c0, rt0.c2)) BETWEEN (((vt1.c0) NOTNULL)) AND (('3j#*g' IN ()))) FROM vt1 WHERE (((x'')<=('0.9900379203565297')) COLLATE RTRIM);SELECT DISTINCT NTH_VALUE(((((+ (vt1.c0))))=((vt1.c0))), ((((NULL COLLATE BINARY)AND(((vt1.c0)<(vt1.c0)))))OR(''))) OVER () FROM vt1 WHERE (('zA' COLLATE NOCASE IN ((('1904728159')LIKE(NULL))))); -- 0ms;
SELECT DISTINCT ((((((((((vt1.c0) NOT NULL))AND(SUM(rt0.c2))))AND((vt0.c0 IN ()))))OR(((rt0.c2) IS TRUE))))AND(MIN(vt0.c0))) FROM vt1, rt0, vt0 WHERE ((~ ((((('29811042')AND(1e500)))AND(x''))))); -- 1ms;
SELECT (((CASE vt0.c0  WHEN 'kh' THEN rt0.c2 WHEN vt0.c2 THEN vt0.c1 WHEN rt0.c0 THEN '-1757010745' END))<((rt0.c0 COLLATE RTRIM))) FROM vt1, vt0, rt0 WHERE (CASE WHEN ((NULL)IS NOT(1.332120964E9)) THEN (- (NULL)) END); -- 0ms;
SELECT DISTINCT CASE WHEN ((rt0.c0) NOT NULL) THEN rt0.c1 WHEN (rt0.c0 IN ()) THEN ((rt0.c2)*(rt0.c0)) WHEN ((rt0.c2) BETWEEN (vt0.c2) AND (rt0.c0)) THEN LOWER(vt0.c2) WHEN vt0.c1 COLLATE RTRIM THEN LIKELIHOOD(DISTINCT rt0.c1, 0.18298647102495447) WHEN ((vt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c1)) THEN 0.4296644889723894 END FROM rt0, vt0, vt1 GROUP BY (((((rt0.c0))<>((rt0.c2))))/(((rt0.c0) NOTNULL))); -- 2ms;
SELECT json_insert(1096659813, TRIM(DISTINCT vt1.c0), ((((rt0.c2)AND(vt0.c0)))OR(rt0.c0)), '-2115692861', CASE WHEN vt1.c0 THEN rt0.c1 ELSE vt1.c0 END), vt0.c2, DENSE_RANK() OVER () FROM vt1, rt0 WHERE (((('-177780187')) BETWEEN ((NULL)) AND ((x''))) COLLATE RTRIM) GROUP BY 0.8114882748048118 HAVING (- (((((((((((((vt0.c0)AND(rt0.c1)))AND(rt0.c2)))OR('1904728159')))AND(rt0.c0)))AND(vt1.c0)))AND(vt0.c2)))) LIMIT -1912579090;SELECT DISTINCT (- ((+ (rt0.c1)))) FROM vt0, vt1;SELECT ((((rt0.c1)) BETWEEN ((vt1.c0)) AND ((rt0.c2))) IN (((vt0.c1) BETWEEN (vt0.c2) AND (vt0.c0)), vt0.c1 COLLATE BINARY)) FROM vt0, rt0 WHERE ((- ((((x'df2d', 0.1248185070654676, 0.39395023972509713))>=((NULL, '1334436270', 0.15643025128490673))))));SELECT DISTINCT ((vt0.c1)>=(rt0.c1)) COLLATE NOCASE FROM vt1, vt0, rt0; -- 0ms;
SELECT ALL ((CASE WHEN 1.489969139E9 THEN vt0.c0 END) IS FALSE) FROM vt0; -- 0ms;
SELECT ALL (+ (vt0.c0)) COLLATE BINARY FROM vt0, vt1, rt0; -- 0ms;
SELECT DISTINCT ((rt0.c0 COLLATE RTRIM)%((~ (vt0.c2)))) FROM vt1, rt0, vt0; -- 0ms;
SELECT DISTINCT ((((vt0.c0)AND(vt1.c0))) BETWEEN (vt1.c0 COLLATE RTRIM) AND ((~ (rt0.c2)))) FROM vt0, vt1;SELECT DISTINCT CAST(rt0.c2 AS NUMERIC) FROM vt0;SELECT DISTINCT SUM(vt1.c0) OVER (), COUNT(*) FILTER(WHERE ((rt0.c2 COLLATE NOCASE)<>(((vt0.c1) NOT BETWEEN (rt0.c0) AND (vt0.c2))))) OVER (), SUBSTR(((vt0.c2)==(vt0.c0)), CASE WHEN x'e5b5' THEN rt0.c0 WHEN rt0.c1 THEN vt1.c0 WHEN vt0.c2 THEN vt0.c1 END) FROM vt1, rt0, vt0 WHERE (((((CAST(-2089664393 AS BLOB))AND(CASE WHEN -1601784967 THEN x'' WHEN 0.9630993673533672 THEN NULL WHEN '0.1594883611809399' THEN NULL ELSE 0.9656524488494295 END)))AND(((663599190)||('\n-'))))) GROUP BY CAST(rt0.c2 AS BLOB) COLLATE BINARY; -- 0ms;
SELECT DISTINCT DENSE_RANK() OVER (), ((+ (rt0.c0)) IN (((-1061816718)LIKE(vt0.c0)), ((((vt1.c0)OR(vt1.c0)))OR(vt0.c0)))), highlight((+ (rt0.c2)), (~ ('')), (((vt0.c1, rt0.c2, vt0.c0)) NOT BETWEEN ((rt0.c2, rt0.c1, rt0.c1)) AND ((vt0.c2, vt1.c0, vt0.c1))), TRIM(vt0.c1)), rt0.c0, GROUP_CONCAT((('-448756640') BETWEEN (rt0.c2) AND (vt0.c2))) FILTER(WHERE (((+ (vt0.c1))) IS FALSE)) OVER ( ORDER BY (0.038441087239278526 IN ()) ASC  NULLS FIRST GROUPS BETWEEN  UNBOUNDED PRECEDING AND  CURRENT ROW EXCLUDE CURRENT ROW) FROM rt0, vt0, vt1;SELECT (TRIM(vt0.c1) IN ((vt0.c2 IN ()))), (((SQLITE_COMPILEOPTION_USED(rt0.c2), (x'2c6d' IN ()), ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt0.c0))))==((((vt1.c0)-(rt0.c1)), rt0.c0 COLLATE BINARY, ((vt0.c2)+(rt0.c1))))), ((((rt0.c2)OR(vt0.c2)))AND(CASE WHEN x'' THEN rt0.c0 END)) FROM vt1;SELECT DISTINCT (((((((((vt1.c0)OR(rt0.c0)))OR(vt0.c1)))OR(vt0.c2)))OR(vt0.c2)) IN ()) FROM vt0 WHERE (x'' COLLATE RTRIM); -- 0ms;
SELECT DISTINCT CASE ((rt0.c1)<(rt0.c0))  WHEN ((x'') BETWEEN (rt0.c2) AND (vt1.c0)) THEN CAST(vt0.c2 AS TEXT) WHEN ((((rt0.c0)AND(vt0.c2)))OR(rt0.c2)) THEN ((rt0.c0) IS TRUE) WHEN ((vt1.c0) IS FALSE) THEN vt0.c1 COLLATE NOCASE ELSE LIKELY(rt0.c2) END FROM rt0, vt0;SELECT CAST(SUM(vt1.c0) AS NUMERIC) FROM vt0, vt1; -- 1ms;
SELECT DISTINCT ((CAST('1233986565' AS INTEGER)) NOT BETWEEN ((('餍(Rwc,#J')IS(rt0.c0))) AND (ABS(vt1.c0))) FROM vt1, vt0, rt0 WHERE ((((((((((0.9625083805516349)AND(x'')))AND(NULL)))OR('Lig瘸UW')))OR(NULL)) IN (((1443706401) BETWEEN (0.998128467994609) AND (0.0031291789721468177))))); -- 0ms;
SELECT DISTINCT vt1.c0, SUM(rt0.c0), ((('gnDN^Dh/+'))<(((NOT (rt0.c1))))) FROM rt0 WHERE (IFNULL((NULL IN (0.6001904111590555)), COALESCE(DISTINCT NULL, NULL, x'b837', 'w.L'))) LIMIT 381306677;SELECT DISTINCT (+ (vt0.c1)), CASE WHEN ((rt0.c1)OR(vt0.c0)) THEN UPPER(DISTINCT vt0.c0) ELSE (((vt0.c0, rt0.c2, vt0.c2, rt0.c0, vt1.c0, rt0.c0, rt0.c0)) NOT BETWEEN ((vt1.c0, vt0.c0, vt1.c0, rt0.c1, vt0.c0, vt1.c0, vt0.c1)) AND ((vt1.c0, vt0.c1, rt0.c1, rt0.c0, vt1.c0, rt0.c0, vt0.c2))) END, AVG((((rt0.c1, vt0.c0, '1332120964')) NOT BETWEEN ((x'', vt0.c2, rt0.c0)) AND ((rt0.c0, x'bc57', x'')))) FROM rt0, vt1, vt0; -- 1ms;
SELECT DISTINCT PERCENT_RANK() OVER () FROM rt0, vt0 GROUP BY (json_object(vt1.c0, rt0.c1) IN ((((1.769218413E9))>=((vt1.c0))), CASE vt0.c2  WHEN rt0.c2 THEN rt0.c2 END));SELECT DISTINCT (((vt0.c2))>((((vt0.c1)IS NOT(vt1.c0))))) FROM vt1, rt0, vt0 WHERE (LIKELIHOOD((~ (0.766699367993762)), 0.2708801753382807)); -- 0ms;
SELECT DISTINCT CASE CASE WHEN vt0.c2 THEN vt0.c0 END  WHEN (vt0.c0 IN (x'b509', vt0.c0)) THEN (((vt1.c0, rt0.c1, vt0.c0))>((vt0.c0, '-1620882512', rt0.c0))) WHEN ((rt0.c2) NOT BETWEEN (vt1.c0) AND (vt0.c0)) THEN ((((rt0.c2)OR(vt0.c0)))OR(vt0.c0)) WHEN CAST(vt0.c2 AS INTEGER) THEN ((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt1.c0)) END, vt0.c2, (NULL IN ()) FROM vt1, rt0, vt0; -- 0ms;
SELECT DISTINCT (NOT (((vt0.c2) BETWEEN (rt0.c0) AND (rt0.c2)))), (~ (((((rt0.c2)OR(rt0.c1)))AND(vt0.c1)))), ((((((vt0.c2) BETWEEN (vt0.c0) AND (vt0.c0)))OR(CAST(0.5313380850038824 AS REAL))))AND(vt0.c2)), rt0.c2, CASE WHEN ((vt1.c0) BETWEEN (rt0.c1) AND (rt0.c0)) THEN ((rt0.c2) NOTNULL) END FROM vt1 GROUP BY (((NOT (rt0.c0))) NOT NULL);SELECT DISTINCT ((LIKELY(rt0.c0))AND(COUNT(*))), (~ (vt0.c0)), ((((vt1.c0)<(vt0.c1)))!=(((rt0.c2)*(rt0.c0)))) FROM rt0, vt1 GROUP BY CASE WHEN (((rt0.c0))!=((vt0.c2))) THEN (rt0.c2 IN ()) ELSE ((vt1.c0) IS TRUE) END, CASE WHEN ((((vt0.c1)AND('-868498634')))OR(vt0.c1)) THEN ((((((((rt0.c2)AND(rt0.c2)))OR(vt0.c2)))OR(rt0.c2)))AND(vt0.c0)) WHEN (((0.15389263129729502)) BETWEEN ((rt0.c1)) AND ((rt0.c2))) THEN (((('1489969139')AND(vt1.c0)))OR(vt0.c2)) WHEN CAST(rt0.c0 AS TEXT) THEN CASE rt0.c0  WHEN rt0.c0 THEN rt0.c1 END END, (((vt1.c0 COLLATE BINARY))<((x'3ab07de9'))) HAVING 0.8538584231548326 COLLATE BINARY COLLATE BINARY ORDER BY ((((9.4585867E8)OR(CAST(rt0.c2 AS TEXT))))AND(CAST(vt0.c0 AS INTEGER)));SELECT ((((x'')|(rt0.c2))) NOT NULL), SUM(CASE rt0.c1  WHEN vt0.c2 THEN vt0.c2 END) OVER (), ((((vt1.c0)&(rt0.c1)))IS(vt1.c0)) FROM vt1 WHERE (((((0x28dd7445)<<(-2.144677727E9)))<>((((('l腾')AND(x'c9d3')))OR(0.16250682159061958))))) LIMIT -936573311;SELECT DISTINCT CAST((((vt1.c0))>=((rt0.c1))) AS INTEGER), (((((rt0.c1) IS TRUE), ((rt0.c2) BETWEEN (vt0.c2) AND (vt1.c0)), (('') NOTNULL)))>((x'', vt0.c2 COLLATE RTRIM, CAST(rt0.c0 AS NUMERIC)))), NTILE(((((rt0.c2) NOTNULL)) BETWEEN (((vt0.c0)AND(vt0.c2))) AND ((vt0.c0 IN ())))) OVER () FROM rt0, vt1, vt0 WHERE (x'b2e1'); -- 0ms;
SELECT vt0.c1 FROM vt1, vt0; -- 0ms;
SELECT DISTINCT ((vt0.c2 COLLATE NOCASE)IS((- (vt1.c0)))), (- (((vt0.c1)>(rt0.c1)))), (- (vt0.c0)) FROM vt1 WHERE (((CASE 'Nq2f'  WHEN 0.752318911479106 THEN 0X1 END) NOT BETWEEN (((NULL) BETWEEN ('\r]') AND (x'04e8'))) AND ((((x'a4a5', NULL, NULL))=((NULL, '2018185455', NULL))))));SELECT ((vt1.c0 COLLATE NOCASE) IS TRUE) FROM vt1 WHERE (CAST(0.520456391073377 AS INTEGER) COLLATE BINARY); -- 0ms;
SELECT ALL ((((((vt0.c0)OR(rt0.c1)))OR(rt0.c2)))<=(rt0.c1)) FROM vt0, rt0 GROUP BY ((CAST(rt0.c0 AS TEXT)) NOT BETWEEN (CASE WHEN vt0.c2 THEN vt0.c0 WHEN rt0.c1 THEN vt1.c0 WHEN vt1.c0 THEN '0.08203966144732688' END) AND (((rt0.c2)IS NOT(vt0.c2))));SELECT (((vt1.c0)) NOT BETWEEN ((COALESCE(vt1.c0, vt1.c0))) AND ((((vt0.c0)>(vt0.c2))))) FROM vt0 WHERE (CAST(LIKELY(DISTINCT NULL) AS BLOB)) LIMIT 156528379;SELECT ALL ((((((((rt0.c2)OR(rt0.c0)))OR(vt0.c2)))AND(((vt1.c0)AND(vt0.c0)))))AND(CAST(rt0.c1 AS TEXT))) FROM vt1 NOT INDEXED WHERE (((((',䚍줤+b')<=(0.3498685657384132))) IS FALSE));SELECT DISTINCT (((vt0.c1)) BETWEEN (((('')||(rt0.c2)))) AND ((((vt0.c2) NOT BETWEEN (vt0.c2) AND (vt0.c1))))) FROM vt1, rt0 WHERE (((CASE NULL  WHEN x'efde' THEN -808857319 WHEN x'' THEN x'' WHEN x'' THEN 0.30006520284580795 ELSE NULL END) NOTNULL));SELECT DISTINCT ((((((vt1.c0) BETWEEN (vt0.c2) AND (rt0.c0)))OR(((rt0.c1)&(vt0.c2)))))AND((+ (rt0.c2)))) FROM vt1, vt0, rt0; -- 1ms;
SELECT ALL (NOT ((- (vt1.c0)))) FROM rt0, vt1 GROUP BY ((((vt0.c0) IS FALSE)) BETWEEN ((rt0.c0 IN ())) AND ((+ (rt0.c2)))), LAST_INSERT_ROWID(), (((rt0.c1)) BETWEEN ((NULL)) AND ((((vt1.c0)IS NOT(NULL))))) HAVING CAST(1e500 AS INTEGER);SELECT DISTINCT ((rt0.c1)&(((((rt0.c1)OR(rt0.c0)))AND(rt0.c0)))) FROM vt1, vt0, rt0; -- 0ms;
SELECT DISTINCT ((((vt0.c0) NOTNULL)) BETWEEN (vt0.c2 COLLATE RTRIM) AND (((vt0.c1) IS FALSE))), NULL, CASE WHEN vt0.c1 THEN rt0.c2 ELSE vt0.c1 END COLLATE BINARY FROM vt1, vt0, rt0 WHERE ((((('900230468' IN ('-1696126055', -1280542194)), ((0.5736238338357134)-(x'')), ((0Xffffffff93e532a0) BETWEEN ('-27865140') AND (0.7448334104567617))))<((749089357, (+ (NULL)), 0x3ced03dc)))); -- 0ms;
SELECT ((((0.18650386217343762) BETWEEN (NULL) AND (vt0.c2)))%((((rt0.c1))==((x'247d'))))) FROM vt0, rt0, vt1 WHERE ('-1795180990'); -- 0ms;
SELECT DISTINCT (((((rt0.c1)=(rt0.c2))))<(((((vt0.c2)) BETWEEN ((rt0.c1)) AND ((rt0.c2)))))) FROM vt0, rt0; -- 0ms;
SELECT DISTINCT SUM(((vt0.c1)>>(rt0.c1)) COLLATE RTRIM) OVER (), MAX(CAST(vt0.c1 AS NUMERIC)), (((vt0.c0) BETWEEN (vt1.c0) AND ('-_')) IN (CAST(vt1.c0 AS REAL))) FROM rt0, vt1;SELECT DISTINCT CAST(SUM(vt0.c2) AS REAL), UNICODE((((vt0.c2))<=((vt0.c2)))), (- (((vt0.c1)<=(vt0.c1)))) FROM vt1, rt0, vt0; -- 0ms;
SELECT ((rt0.c2)<=(((vt0.c2) NOTNULL))) FROM vt1, vt0 WHERE (CASE WHEN ((0.4866895701591517) NOT NULL) THEN (((NULL, 0.15601921161726173, 'xstart of dayh'))>=(('4', 0.28100093279973326, ''))) WHEN ((((((((x'')OR(0.27437364121227004)))AND(x'616d')))AND(1668578098)))OR(-1.753725299E9)) THEN ((('hW#쀔'))==(('0.46160775519646846'))) WHEN TRIM(NULL) THEN ((0.016177524164272428)*(0.963730000735173)) END) GROUP BY CAST((((rt0.c0)) NOT BETWEEN ((rt0.c2)) AND ((vt0.c1))) AS TEXT), 0.6088208505014717, (((rt0.c0)) NOT BETWEEN (((((vt0.c0)) BETWEEN ((vt1.c0)) AND ((vt0.c0))))) AND ((CASE 0xffffffff94ffb642  WHEN vt0.c0 THEN rt0.c0 END))) HAVING CASE (((vt0.c0))=((rt0.c1)))  WHEN NULL THEN (- (vt0.c2)) END;SELECT DISTINCT vt1.c0 FROM vt1, rt0; -- 0ms;
SELECT ALL ((((vt0.c2)-(vt0.c2))) NOT NULL) FROM vt1;SELECT UNLIKELY(0X4b9fb9b3) FROM rt0, vt1; -- 0ms;
SELECT DISTINCT SUM((rt0.c2 IN ())) FROM rt0, vt0, vt1 WHERE ((((((0.7276806630777718))=((x'3708'))))<>((((NULL)) BETWEEN (('0.6945852907175998')) AND (('zཚk0iS')))))) GROUP BY ((CASE WHEN vt0.c1 THEN rt0.c0 ELSE rt0.c0 END)<<(((vt1.c0)<>(rt0.c0)))) HAVING LOWER(DISTINCT ((rt0.c1) BETWEEN (vt0.c0) AND (vt0.c1))); -- 0ms;
SELECT DISTINCT NULL FROM vt1; -- 0ms;
SELECT DISTINCT 0x3d3c7663, 'd28}t|&>', ((((CAST(vt0.c1 AS TEXT))OR(CASE WHEN vt1.c0 THEN vt0.c2 WHEN 0X1b74491 THEN rt0.c1 WHEN vt0.c2 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt0.c2 THEN vt1.c0 ELSE rt0.c1 END)))AND(rt0.c1)) FROM vt1, rt0, vt0; -- 0ms;
SELECT ALL (NOT (((vt0.c2) ISNULL))) FROM vt0, rt0 WHERE (TRIM((('1247190778')!=(NULL)))); -- 0ms;
SELECT DISTINCT (- (1268758963)) FROM rt0, vt0 LIMIT -229136676 OFFSET 1678899355; -- 0ms;
SELECT DISTINCT (~ (CAST(vt0.c1 AS REAL))) FROM vt1, vt0, rt0 WHERE ((((((0.299993838378958)) BETWEEN ((x'')) AND ((0.8343693798410285)))) ISNULL)); -- 0ms;
SELECT ALL (('1668578098') NOT BETWEEN (((((((((vt1.c0)AND(vt1.c0)))AND(rt0.c0)))AND(rt0.c0)))OR(vt1.c0))) AND (vt0.c1)) FROM vt1;SELECT ALL (((((rt0.c1) IS FALSE)))>((((vt1.c0)|(rt0.c0))))), ((((vt0.c2 IN ())))<=((MIN(vt0.c0, vt1.c0)))), vt0.c1 FROM vt1, vt0, rt0; -- 0ms;
SELECT DISTINCT MIN(COUNT(vt0.c2) COLLATE NOCASE) FROM vt1, rt0, vt0 WHERE (((((x'')GLOB(-596585345)))GLOB(SQLITE_VERSION())));SELECT ALL COUNT(*), NULL, (~ ('1332120964')) FROM rt0; -- 0ms;
SELECT DISTINCT (((vt0.c1)) BETWEEN ((CAST(x'999af5d4' AS NUMERIC))) AND ((COUNT(*)))), UNICODE(MIN(vt0.c1)), ((vt0.c1) BETWEEN (rt0.c0) AND (rt0.c2)) COLLATE NOCASE FROM vt1, rt0 WHERE (LIKELIHOOD(DISTINCT ('-1565661505' IN ()), 0.9497143608325336));SELECT DISTINCT vt0.c0 FROM vt1, vt0, rt0 WHERE (((((NULL) IS TRUE)) NOT BETWEEN (((NULL) NOT BETWEEN (x'462b') AND (0x50a21531))) AND (((((NULL)AND(NULL)))AND(1e500))))); -- 0ms;
SELECT (~ (((((((((vt0.c0)AND(vt0.c1)))OR(-1388652790)))AND(vt0.c0)))AND(vt0.c2)))) FROM rt0, vt1, vt0 WHERE (x'5340'); -- 0ms;
SELECT ALL (((- (rt0.c1))) NOT BETWEEN (AVG(0x65ab8642)) AND (((((vt0.c0)AND(vt1.c0)))OR(vt0.c2)))) FROM vt0, rt0, vt1 WHERE (CASE WHEN 0.6532858610212929 THEN 5.03535057E8 ELSE 0.10612502760113152 END COLLATE BINARY); -- 1ms;
SELECT DISTINCT ((UPPER(DISTINCT vt0.c2)) ISNULL) FROM vt0, vt1, rt0 WHERE ((((((((x'')) BETWEEN (('2i??')) AND (('#nc(\n5ZzI'))))AND(((x'a0df0f44')AND(0.6711880028731612)))))AND((('E\r') ISNULL)))) ORDER BY (((((vt0.c2, rt0.c1, vt0.c0)) BETWEEN ((vt0.c1, vt1.c0, vt1.c0)) AND ((rt0.c2, 2.5940558E8, vt1.c0))))<=(1606465170)) DESC  NULLS LAST; -- 0ms;
SELECT DISTINCT ((((CASE vt1.c0  WHEN vt0.c1 THEN NULL ELSE rt0.c2 END)AND(((vt1.c0) NOT BETWEEN (rt0.c1) AND (rt0.c1)))))OR(((rt0.c1) NOT NULL))) FROM rt0, vt0 LIMIT 924830965 OFFSET 1378374606;SELECT ALL 0.582922761824724 FROM vt0, rt0, vt1 WHERE (CAST((0.3186589403105631 IN ()) AS TEXT)); -- 1ms;
SELECT DISTINCT ((((((((LAST_INSERT_ROWID())AND(CASE WHEN 180195329 THEN rt0.c2 ELSE vt0.c2 END)))AND(NULL)))AND(((rt0.c1)>>(rt0.c0)))))AND((((-1183069469)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c0))))) FROM vt1, vt0;SELECT DISTINCT (((((rt0.c1 IN ()))AND((rt0.c1 IN ()))))OR(vt1.c0 COLLATE BINARY)) FROM rt0;SELECT ALL ((x'79de9bcd')<(((rt0.c1) NOTNULL))) FROM vt1, rt0, vt0 WHERE (((((TYPEOF('447104506'))AND(((((0xffffffffc7505007)OR(NULL)))OR(x'eed7')))))OR(((x'') NOT NULL)))); -- 0ms;
SELECT COUNT(*) FROM rt0 WHERE ((((- ('')))>>(CAST('-959493544' AS REAL)))); -- 1ms;
SELECT DISTINCT x'' COLLATE NOCASE FROM rt0, vt0 WHERE (CASE WHEN LOWER(DISTINCT 1.102563661E9) THEN (((x'43ec', 0.897556423065276, 0.5456386687439384)) BETWEEN ((NULL, NULL, '\n4')) AND ((198860515, x'5b2d', '0*'))) END); -- 0ms;
SELECT DISTINCT rt0.c2 FROM rt0 LIMIT 1112899397 OFFSET -1024318100; -- 0ms;
SELECT ALL (((((vt0.c1 IN ()))OR(CASE rt0.c2  WHEN vt0.c2 THEN rt0.c1 WHEN vt0.c1 THEN vt0.c0 WHEN x'' THEN vt0.c1 ELSE vt0.c2 END)))AND(CASE WHEN vt0.c1 THEN rt0.c0 WHEN vt0.c2 THEN vt0.c1 WHEN vt0.c2 THEN vt0.c2 END)) FROM vt0, rt0; -- 0ms;
