-- Time: 2024/06/07 01:16:24
-- Database: database9
-- Database version: 3.40.0
-- seed value: 2595788909
PRAGMA cache_size = 50000; -- 4ms;
PRAGMA temp_store=MEMORY; -- 0ms;
PRAGMA synchronous=off; -- 0ms;
PRAGMA case_sensitive_like=ON; -- 0ms;
PRAGMA encoding = 'UTF-16le'; -- 0ms;
CREATE VIRTUAL TABLE vt0 USING fts5(c0, c1 UNINDEXED); -- 4ms;
ANALYZE sqlite_master; -- 1ms;
INSERT OR IGNORE INTO vt0 VALUES ('389585698', x'cbd2'); -- 1ms;
ROLLBACK TRANSACTION; -- 0ms;
UPDATE OR IGNORE vt0 SET c1=3.89585698E8 WHERE ((((vt0.c0)/(vt0.c1)))==(((0.7944778522836192)OR(vt0.c0)))); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 1445712314); -- 0ms;
END; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
COMMIT; -- 0ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 5); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
REINDEX; -- 0ms;
INSERT OR IGNORE INTO vt0(c1) VALUES (''), ('438621477'), (NULL); -- 0ms;
INSERT OR IGNORE INTO vt0 VALUES ('n픥', '274431947'); -- 1ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
COMMIT; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '48993'); -- 0ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 1ms;
REINDEX  vt0; -- 0ms;
UPDATE vt0 SET (c0)=(NULL); -- 1ms;
UPDATE OR IGNORE vt0 SET (c0)=(NULL) WHERE (NOT (CASE WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c1 END)); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
CREATE TEMPORARY VIEW v0(c0) AS SELECT ALL CASE CAST(vt0.c0 AS TEXT)  WHEN ((((((((NULL)OR(vt0.c0)))OR(vt0.c0)))AND(vt0.c1)))AND(vt0.c1)) THEN vt0.c1 COLLATE NOCASE ELSE ((vt0.c0)<(vt0.c1)) END FROM vt0 WHERE ((3.89585698E8 IN ()) COLLATE BINARY) LIMIT 274431947 OFFSET 274431947; -- 0ms;
END; -- 1ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 1ms;
BEGIN DEFERRED TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('merge', -1585658182);\n; -- 0ms;
INSERT OR IGNORE INTO vt0 VALUES (0.8923629458741723, NULL); -- 0ms;
INSERT OR IGNORE INTO vt0(c1) VALUES (NULL); -- 0ms;
INSERT OR FAIL INTO vt0(c0) VALUES (NULL); -- 0ms;
REINDEX BINARY; -- 0ms;
REINDEX  vt0; -- 0ms;
UPDATE OR FAIL vt0 SET (c1)=('') WHERE vt0.c0 COLLATE NOCASE; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 2015110912); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('automerge', 2); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '41122'); -- 0ms;
CREATE VIRTUAL TABLE rt0 USING rtree_i32(c0, c1, c2); -- 1ms;
BEGIN DEFERRED TRANSACTION; -- 0ms;
ANALYZE; -- 0ms;
BEGIN EXCLUSIVE TRANSACTION; -- 0ms;
VACUUM main; -- 0ms;
VACUUM; -- 0ms;
VACUUM; -- 0ms;
VACUUM temp; -- 0ms;
END TRANSACTION; -- 0ms;
ANALYZE; -- 0ms;
INSERT OR REPLACE INTO rt0(c2, c1) VALUES ('', ''), (0.12091578283592896, 'Un'), ('1379288531', '-1644777777'); -- 1ms;
ANALYZE sqlite_master; -- 0ms;
UPDATE OR REPLACE vt0 SET (c1)=(-1.644777777E9); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '47603'); -- 0ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('pgsz', '53597'); -- 0ms;
UPDATE OR IGNORE rt0 SET c0=-139428682 WHERE ((CASE WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c0 END)%(NULL COLLATE RTRIM)); -- 1ms;
BEGIN IMMEDIATE TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('automerge', 1); -- 0ms;
UPDATE OR ROLLBACK vt0 SET c1='' WHERE (('୳(Hb軦') ISNULL); -- 0ms;
INSERT OR ABORT INTO vt0(c0) VALUES (NULL); -- 0ms;
ANALYZE; -- 0ms;
INSERT OR IGNORE INTO vt0(c0) VALUES ('8{vV('); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 1073572400); -- 1ms;
BEGIN  TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
DROP TABLE vt0; -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
INSERT OR ROLLBACK INTO rt0(c1) VALUES (0xffffffff83a7fbc9); -- 0ms;
UPDATE OR REPLACE rt0 SET c0='513576678', c0=x'', c0=x''; -- 0ms;
INSERT OR ROLLBACK INTO rt0(c2, c1) VALUES (-1906222843, x''); -- 1ms;
INSERT OR IGNORE INTO vt0(c1) VALUES ('LꩈK୳PL'); -- 1ms;
UPDATE vt0 SET c0='-1644777777' WHERE CASE WHEN CASE WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c0 END THEN '' WHEN HEX(DISTINCT vt0.c1) THEN vt0.c0 COLLATE RTRIM WHEN (('484897029') NOT NULL) THEN ((vt0.c0) NOT BETWEEN (vt0.c1) AND ('A껈WB|\no')) ELSE (NOT (vt0.c1)) END; -- 0ms;
END TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 0ms;
END; -- 0ms;
END TRANSACTION; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
SELECT ((rt0.c0 COLLATE BINARY) IS FALSE) FROM rt0 WHERE (((x'' COLLATE NOCASE) IS TRUE)); -- 0ms;
SELECT DISTINCT (((vt0.c0)) BETWEEN ((((rt0.c0)|(0.440635192746229)))) AND ((((((((((rt0.c0)AND(rt0.c2)))OR(v0.c0)))AND(vt0.c1)))AND(vt0.c1))))) FROM vt0;SELECT DISTINCT (((vt0.c0 COLLATE RTRIM))<>(((~ (vt0.c0))))) FROM vt0, rt0 FULL OUTER JOIN v0 ON ((((((v0.c0) IS FALSE))AND(((rt0.c1) NOT BETWEEN (v0.c0) AND (vt0.c0)))))AND(((((((((rt0.c0)AND(v0.c0)))OR(rt0.c2)))OR(rt0.c2)))OR(rt0.c0)))); -- 0ms;
SELECT DISTINCT ((MIN(vt0.c1))&(((vt0.c0) ISNULL))) FROM vt0, v0 WHERE (CAST(((NULL)AND('-1e500')) AS REAL)); -- 0ms;
SELECT ALL CASE vt0.c1  WHEN TRIM(DISTINCT rt0.c2) THEN COUNT(*) ELSE CAST(rt0.c1 AS INTEGER) END, NULL, (((((('-90162507')-(x'')))AND(((rt0.c0)IS(rt0.c2)))))AND(((NULL) NOT BETWEEN (vt0.c1) AND ('1747806298')))) FROM vt0, rt0 WHERE ((((('Od(f')||(x''))) BETWEEN ((0.6456717678948926 IN ())) AND (UNICODE(NULL)))); -- 0ms;
SELECT LAG(rt0.c1 COLLATE NOCASE, ((((CASE rt0.c2  WHEN vt0.c0 THEN rt0.c2 WHEN rt0.c0 THEN v0.c0 WHEN rt0.c2 THEN v0.c0 ELSE rt0.c2 END)AND(((rt0.c1)&(rt0.c1)))))AND(vt0.c0)), ((((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c1))) NOT BETWEEN ('675372291') AND (TRIM(rt0.c1, rt0.c2)))) OVER () FROM v0, rt0, vt0 WHERE (((((((-260179243) IS TRUE))OR((0.8923629458741723 IN (x'')))))AND(((NULL) BETWEEN ('') AND (x''))))); -- 1ms;
SELECT DISTINCT ((((vt0.c0) IS FALSE))LIKE(v0.c0 COLLATE BINARY)), (((vt0.c0, v0.c0, rt0.c2)) BETWEEN ((x'', ((rt0.c1)GLOB(vt0.c1)), ((rt0.c1) NOT NULL))) AND (((((rt0.c1))<=((rt0.c0))), ((rt0.c0) NOT BETWEEN (rt0.c2) AND (vt0.c1)), ((((v0.c0)OR(rt0.c2)))OR(vt0.c1))))), ((SQLITE_COMPILEOPTION_USED(v0.c0)) IS FALSE) FROM rt0, vt0;SELECT DISTINCT (~ (rt0.c2)), CAST('-139428682' COLLATE RTRIM AS TEXT), (+ (((vt0.c1) NOT NULL))) FROM rt0, v0 WHERE ((((((((x'')OR('')))AND(275337371))))<((x''))));SELECT DISTINCT (+ (vt0.c0)) FROM v0, rt0;SELECT ALL ((rt0.c1) NOT NULL) COLLATE BINARY FROM rt0 WHERE ((((((x'')) BETWEEN ((0xffffffff86d3f77f)) AND ((2.75337371E8)))) ISNULL)); -- 0ms;
SELECT DISTINCT (((~ ('')))OR(v0.c0)), AVG(vt0.c0), PRINTF((NOT (vt0.c1)), ((v0.c0) ISNULL), ((vt0.c0)IS(rt0.c0))) FROM v0, rt0 WHERE ((- ((('n픥')|(0.440635192746229))))) GROUP BY (((((((rt0.c0)AND(vt0.c1)))OR(rt0.c0)), (((vt0.c1, vt0.c1, rt0.c0)) NOT BETWEEN ((vt0.c0, rt0.c0, rt0.c2)) AND ((rt0.c1, rt0.c2, rt0.c0))), rt0.c0))>=((COALESCE(DISTINCT vt0.c1, rt0.c1), ((v0.c0) IS FALSE), ((rt0.c0) IS FALSE))));SELECT ALL TRIM((('-1400017707') NOT BETWEEN (vt0.c1) AND (rt0.c0))), 0.6456717678948926 COLLATE NOCASE, (((CASE rt0.c1  WHEN rt0.c1 THEN vt0.c0 WHEN rt0.c0 THEN vt0.c1 WHEN rt0.c0 THEN rt0.c1 ELSE rt0.c2 END, ((rt0.c2)OR(x'fef3')), LIKE(vt0.c0, vt0.c0, 'a')))=((((((vt0.c0)AND(rt0.c1)))AND(NULL)), CAST(rt0.c2 AS TEXT), (~ (rt0.c2))))) FROM vt0, rt0, v0 WHERE (UNLIKELY(NULL) COLLATE BINARY) ORDER BY (~ (CAST(rt0.c2 AS REAL))) DESC; -- 0ms;
SELECT ALL (((x'' IN ()))IS NOT(COUNT(rt0.c0))) FROM vt0;SELECT DISTINCT COUNT(*) OVER ( RANGE BETWEEN CASE WHEN CASE vt0.c0  WHEN rt0.c0 THEN v0.c0 ELSE v0.c0 END THEN (x'2e8c1fb9' IN ()) WHEN UNLIKELY(DISTINCT rt0.c2) THEN ((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c1)) WHEN (v0.c0 IN ()) THEN ((rt0.c2)IS NOT(vt0.c0)) END PRECEDING AND  UNBOUNDED FOLLOWING EXCLUDE TIES), ((rt0.c2) BETWEEN (vt0.c1) AND (rt0.c2)) COLLATE BINARY, GROUP_CONCAT(((vt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c1))) OVER (), (- (0.7944778522836192)), ((((vt0.c0) NOT BETWEEN (rt0.c2) AND (v0.c0)))+(NULLIF(rt0.c0, vt0.c0))) FROM rt0, v0, vt0 WHERE ((((((NULL)) BETWEEN ((-1.769952696E9)) AND ((0.12091578283592896)))) NOTNULL)) GROUP BY (NOT (CASE vt0.c0  WHEN rt0.c0 THEN rt0.c1 ELSE vt0.c0 END));SELECT ALL ((((((rt0.c2)AND(v0.c0)))OR(rt0.c2)))<(((vt0.c1) IS FALSE))) FROM v0, rt0, vt0; -- 0ms;
SELECT JULIANDAY(rt0.c2, CASE 0.09224363462621787  WHEN rt0.c0 THEN vt0.c1 END, (NULL IN ())) FROM rt0, vt0, v0 WHERE ((((((''))!=((x'')))) NOTNULL)); -- 0ms;
SELECT NULL FROM vt0, rt0 WHERE (CAST(json_remove(0.6456717678948926, x'') AS TEXT));SELECT DISTINCT (+ (rt0.c0 COLLATE RTRIM)), (((((rt0.c2))<=(('oG')))) NOT NULL), ((((((rt0.c0)OR(rt0.c2)))AND(vt0.c1)))<=(AVG(0.7944778522836192))) FROM vt0, v0, rt0 WHERE (((((('658693446', '-1204936553', x'')) NOT BETWEEN ((x'', 0xffffffffdb2c2e18, 1.7976931348623157E308)) AND (('', '1747806298', '438621477'))))+('0.12091578283592896' COLLATE RTRIM))) EXCEPT SELECT ALL (~ ((vt0.c1 IN (x'446c', rt0.c1)))), ((rt0.c1 IN ()) IN ()), vt0.c1 FROM v0, rt0;SELECT ALL ((NULLIF(rt0.c2, x'')) NOTNULL), MAX(((((((((vt0.c1)AND(vt0.c0)))AND(vt0.c1)))OR(vt0.c0)))AND(vt0.c1))), AVG('f᧖6z*O') FROM rt0, vt0, v0; -- 0ms;
SELECT ALL ((CASE WHEN vt0.c0 THEN vt0.c0 ELSE rt0.c2 END) NOT NULL), vt0.c0, TOTAL(rt0.c2) FILTER(WHERE ((CAST(vt0.c1 AS BLOB))IS(((rt0.c0)IS NOT(rt0.c1))))) OVER () FROM vt0, rt0, v0 ORDER BY ((vt0.c1 COLLATE BINARY) BETWEEN (((rt0.c0) NOT NULL)) AND (((vt0.c0) NOT NULL))), ((((vt0.c0)AND(vt0.c0)))OR(vt0.c1)) COLLATE BINARY DESC; -- 1ms;
SELECT (CASE WHEN v0.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c2 WHEN rt0.c1 THEN v0.c0 END IN ()) FROM vt0; -- 0ms;
SELECT DISTINCT (((CAST(vt0.c0 AS TEXT)))>=((((vt0.c1)||(v0.c0))))), CAST(vt0.c0 COLLATE RTRIM AS BLOB), CAST(((rt0.c2) IS TRUE) AS REAL) FROM rt0, vt0;SELECT ALL (((rt0.c2, vt0.c1, 'fjOr+^V''')) BETWEEN ((v0.c0 COLLATE RTRIM, ((((rt0.c2)AND(vt0.c0)))OR(v0.c0)), ((rt0.c0)LIKE(vt0.c0)))) AND ((CASE WHEN rt0.c0 THEN rt0.c0 END, (vt0.c1 IN ()), rt0.c2 COLLATE RTRIM))) FROM vt0, v0 WHERE (((x'' IN ()) IN ()));SELECT 2123027160, ((vt0.c0 IN ()) IN (((vt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c1)), x'7799')), ((((v0.c0) NOT NULL))IS('Un')), v0.c0, (((vt0.c1)) NOT BETWEEN ((CAST(vt0.c1 AS INTEGER))) AND ((UPPER(DISTINCT v0.c0)))) FROM rt0 WHERE (((((0.9694147275436961) BETWEEN (x'532c') AND (0.6852011146447508)))IS NOT((((0.7557497117584658))>=(('389585698'))))));SELECT DISTINCT COUNT(*), TRIM(DISTINCT TOTAL(rt0.c1), SUM(v0.c0)), ((((((rt0.c1)OR(vt0.c0)))OR(v0.c0)))LIKE((((vt0.c0)) NOT BETWEEN ((rt0.c1)) AND ((v0.c0))))) FROM rt0, v0, vt0 WHERE ((((0.7903695499225918)*(x'106f')) IN ())); -- 0ms;
SELECT (((rt0.c2 COLLATE NOCASE))=((rt0.c0))) FROM rt0 NOT INDEXED, vt0, v0 NOT INDEXED WHERE (((((NULL) BETWEEN (NULL) AND ('()'))) BETWEEN (((((((((NULL)OR(NULL)))AND('5g]XF')))AND(x'5831')))OR(x'4961'))) AND ((((x'', x'', NULL)) NOT BETWEEN (('', 'R껈T B}', NULL)) AND ((0X1e9c8ee6, 0Xffffffffe0690d03, 0.12091578283592896)))))) LIMIT 909786055; -- 0ms;
SELECT DISTINCT ((((rt0.c1)*(v0.c0))) NOT NULL) FROM v0, rt0 WHERE (CASE WHEN ((NULL)*(x'cd07')) THEN (x'' IN ()) WHEN (('-1614099665')AND('.5 K1d~R2')) THEN LTRIM(NULL) WHEN ((('401703571', 0.8628234657323446, NULL, NULL, 0.8628234657323446))<=((NULL, 0x363a3bc7, 0.6215925461856543, NULL, '675372291'))) THEN (- (NULL)) ELSE ((0x3327a066)>>(0.9404965944648449)) END); -- 0ms;
SELECT DISTINCT ((CAST(rt0.c1 AS NUMERIC))%(((vt0.c1)/(vt0.c0)))), CAST(vt0.c1 AS NUMERIC) COLLATE BINARY, CASE WHEN (rt0.c0 IN ()) THEN (((vt0.c0)) BETWEEN ((rt0.c0)) AND ((v0.c0))) WHEN x'' THEN rt0.c2 WHEN (((vt0.c1)) BETWEEN ((rt0.c1)) AND ((NULL))) THEN '' WHEN (+ (vt0.c1)) THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c1)) WHEN ((rt0.c1)OR(v0.c0)) THEN (((vt0.c0)) NOT BETWEEN ((rt0.c2)) AND ((vt0.c0))) ELSE (('a')*(rt0.c0)) END FROM rt0, v0 WHERE (((CAST(NULL AS INTEGER))*(CAST(x'' AS INTEGER))));SELECT DISTINCT ROW_NUMBER() OVER () FROM rt0, v0; -- 0ms;
SELECT DISTINCT ((((((vt0.c1) NOT NULL))OR(rt0.c0)))AND(((vt0.c0)<<(rt0.c2)))) FROM v0 WHERE (LOWER('858234982'));SELECT DISTINCT CASE WHEN ((rt0.c2)<<(v0.c0)) THEN ((rt0.c0)/(vt0.c0)) END, SQLITE_SOURCE_ID() COLLATE NOCASE COLLATE NOCASE, ((((((vt0.c0)<>(rt0.c1)))OR(((vt0.c1)>(vt0.c1)))))OR(')')) FROM vt0 WHERE ((((((NULL))>(('-2086143031')))) BETWEEN ((('') BETWEEN (x'') AND (x''))) AND (((NULL) IS FALSE)))) LIMIT 1421991906 OFFSET -1928053259;SELECT DISTINCT x'' FROM rt0, vt0, v0; -- 0ms;
SELECT DISTINCT CASE WHEN json_patch(rt0.c2, '484897029') THEN (- (rt0.c0)) ELSE rt0.c1 END FROM vt0 WHERE ((((((((((((('-529986301')OR('')))OR(0.6628682313553584)))AND(-1780124153)))AND(0xffffffff9df6aecf)))OR(((((0.9694147275436961)AND(NULL)))OR('JJ')))))OR((('274431947')<>(NULL)))));SELECT DISTINCT CASE CASE vt0.c0  WHEN rt0.c2 THEN v0.c0 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c0 END  WHEN ((vt0.c1) IS FALSE) THEN ((vt0.c0)GLOB(vt0.c1)) END, CASE WHEN ((vt0.c0)*(v0.c0)) THEN CASE WHEN rt0.c2 THEN v0.c0 ELSE rt0.c0 END ELSE ((v0.c0)-(rt0.c1)) END, (((((rt0.c2 IN (0.22851648953100034)))OR(((vt0.c0)=(rt0.c1)))))AND(rt0.c1 COLLATE NOCASE)) FROM rt0, vt0 WHERE ((((0.706934666070961)>=(0.8240207984302003)) IN ((NULL IN ())))) LIMIT -1542556877 OFFSET 45079494;SELECT ALL CAST(vt0.c0 AS INTEGER) COLLATE RTRIM FROM v0, rt0 WHERE (((((x'')AND(x'')))OR(x'')) COLLATE BINARY);SELECT DISTINCT CAST(((v0.c0)<<(vt0.c1)) AS INTEGER) FROM vt0, rt0 WHERE (((CASE WHEN '-2032928897' THEN 0.9853963626475689 ELSE '' END) NOT NULL));SELECT DISTINCT ((SQLITE_COMPILEOPTION_USED(v0.c0)) BETWEEN ('f5Yችc &?s') AND (json_quote(vt0.c0))), ((((vt0.c0) NOT BETWEEN (vt0.c1) AND ('-776177182')))|(((x'')&(rt0.c1)))), ((((rt0.c2)) NOT BETWEEN ((vt0.c1)) AND ((rt0.c0))) IN ()) FROM v0 WHERE ((((- ('Un'))) NOTNULL)) ORDER BY ((((((vt0.c1)OR(rt0.c1)))AND(vt0.c1)))/(x'')) ASC  NULLS LAST;SELECT ALL IFNULL((NOT (rt0.c0)), ((rt0.c2)IS NOT(vt0.c1))) FROM vt0, rt0 WHERE ((((NULL IN (0.8628234657323446, NULL))) ISNULL)); -- 0ms;
SELECT ALL ((rt0.c1) BETWEEN (rt0.c0) AND (vt0.c1)) COLLATE NOCASE FROM vt0 WHERE ((((('')%(0x7e8ad2d8))) NOT BETWEEN ((((x'', x'7e95', '-2134884174')) BETWEEN ((0X437f9478, 2082297645, 1.132434552E9)) AND ((x'', x'', '')))) AND ('-1400017707' COLLATE BINARY)));SELECT ((NULL)OR(COUNT(*))), NULL, CAST(TYPEOF(DISTINCT v0.c0) AS TEXT) FROM vt0, v0, rt0; -- 0ms;
SELECT DISTINCT ((((rt0.c1)||(vt0.c1))) BETWEEN (((vt0.c0) IS TRUE)) AND ((((('0.9404965944648449')OR(rt0.c2)))OR(vt0.c1)))), v0.c0, ((((rt0.c1)AND(vt0.c1)))AND(vt0.c1)) COLLATE NOCASE FROM v0, vt0;SELECT DISTINCT CASE (+ (vt0.c0))  WHEN NULL THEN ((((((((vt0.c1)OR(rt0.c0)))AND(rt0.c1)))OR(rt0.c1)))OR(rt0.c0)) END FROM vt0, rt0; -- 0ms;
SELECT DISTINCT (((rt0.c1 IN ()))/((((rt0.c1))<((rt0.c2))))), 0.1827839503072305 COLLATE RTRIM, rt0.c0 FROM vt0, v0, rt0; -- 0ms;
SELECT DISTINCT CAST(v0.c0 COLLATE RTRIM AS INTEGER) FROM v0, rt0, vt0 WHERE ((LIKELIHOOD(x'', 0.09764398184097867) IN ())); -- 0ms;
SELECT DISTINCT x'da36' FROM vt0, v0 WHERE ((((('-791413727') BETWEEN (NULL) AND ('⥢')))+(((NULL) IS TRUE)))) ORDER BY NULL  NULLS LAST; -- 0ms;
SELECT DISTINCT CAST(GROUP_CONCAT(vt0.c1) AS NUMERIC) FROM vt0 WHERE (((UNLIKELY(DISTINCT '0.9694147275436961')) BETWEEN ((((0.9025365216653853)) BETWEEN (('-24464512')) AND ((0.16993209276529497)))) AND ((NOT ('1350699322'))))); -- 0ms;
SELECT ((vt0.c0 COLLATE NOCASE)<((+ (v0.c0)))) FROM vt0, v0 WHERE (((((5.13576678E8)&(x'7d91')))<>(((NULL)IS('730067842'))))); -- 0ms;
SELECT ((((vt0.c0)&(vt0.c0)))AND(v0.c0)), CAST(GROUP_CONCAT(vt0.c0) AS TEXT), ((GROUP_CONCAT(vt0.c0)) BETWEEN (((rt0.c0)IS(rt0.c2))) AND (TOTAL(vt0.c1))) FROM rt0, vt0 WHERE (json_extract('4*륖*', CAST(NULL AS BLOB)));SELECT ALL ((vt0.c1) NOT NULL) COLLATE BINARY, (((((~ (vt0.c1)))AND((vt0.c1 IN ()))))AND(INSTR(vt0.c1, rt0.c1))), COUNT(*) OVER () FROM rt0, vt0; -- 0ms;
SELECT DISTINCT ABS(DISTINCT AVG(vt0.c1)) FROM v0 LEFT OUTER JOIN vt0 ON (- (LOWER(DISTINCT rt0.c0))) CROSS JOIN rt0 ON (((vt0.c0))<=((vt0.c1))) COLLATE BINARY WHERE (((((((0.09311308112863714) NOTNULL))OR(('eji눤氲' IN (0.8100116382725798, x'')))))OR(CAST(x'' AS TEXT)))) LIMIT 424724739;SELECT ABS(DISTINCT ((v0.c0) NOT BETWEEN (vt0.c1) AND (rt0.c1))) FROM rt0, v0, vt0 WHERE (((NULL COLLATE RTRIM) NOT BETWEEN (((-1780124153) IS TRUE)) AND (('16266244' IN ())))); -- 0ms;
SELECT DISTINCT ((((((rt0.c0)AND(vt0.c0)))AND(vt0.c0))) IS TRUE), 0.31382312096027465, (((((((((((((+ (v0.c0)))AND((((rt0.c2, rt0.c0, rt0.c2))<((v0.c0, NULL, rt0.c0))))))AND(((vt0.c0)OR(-1268353185)))))OR((((rt0.c0)) BETWEEN ((x'')) AND ((rt0.c1))))))OR(-1585658182)))OR(rt0.c1)))OR(v0.c0)) FROM vt0, v0, rt0 WHERE (CAST(LOWER(DISTINCT 0.17489132431553334) AS NUMERIC)); -- 0ms;
SELECT ALL (COUNT(vt0.c1) IN ()) FROM rt0, vt0 WHERE (CAST(LIKELY(1522443526) AS TEXT)); -- 0ms;
SELECT DISTINCT (+ ((rt0.c2 IN (rt0.c0)))), (MIN(vt0.c1) IN ()), (((rt0.c2)) BETWEEN ((((rt0.c2) NOTNULL))) AND ((HEX(DISTINCT vt0.c0)))) FROM rt0 NOT INDEXED;SELECT DISTINCT (~ (CASE v0.c0  WHEN v0.c0 THEN vt0.c1 END)), LEAD(((((vt0.c1)OR(v0.c0)))AND(rt0.c1)) COLLATE NOCASE COLLATE NOCASE, ((COALESCE(DISTINCT v0.c0, rt0.c1))!=(((vt0.c0)/(rt0.c2)))), load_extension(NULLIF(DISTINCT vt0.c1, vt0.c1))) OVER (), vt0.c1 FROM vt0, v0, rt0; -- 0ms;
SELECT ((rt0.c1)<>(NULL)) COLLATE BINARY FROM rt0, vt0 INNER JOIN v0 ON ((SUBSTR(vt0.c1, vt0.c0)) IS FALSE); -- 0ms;
SELECT DISTINCT 0xffffffff8d143df5 FROM vt0 WHERE (x''); -- 0ms;
SELECT DISTINCT ((((rt0.c0)OR(vt0.c1)))AND(vt0.c0)) COLLATE RTRIM COLLATE BINARY FROM v0 WHERE (((((((NULL)AND(-1.780124153E9)))OR(NULL))) BETWEEN (x'') AND ((('389585698')&('1522443526')))));SELECT (CAST(vt0.c0 AS REAL) IN ()) FROM rt0, v0, vt0 WHERE (((((0.45296694923554015 COLLATE RTRIM)OR((NOT (0.2217545802644243)))))OR((+ (NULL))))); -- 0ms;
SELECT DISTINCT x'' FROM vt0 GROUP BY (+ (rt0.c0 COLLATE RTRIM)) LIMIT -529986301 OFFSET -1268353185;SELECT DISTINCT CASE UNLIKELY(rt0.c2)  WHEN v0.c0 COLLATE RTRIM THEN CAST(rt0.c0 AS NUMERIC) ELSE (((x''))>=((vt0.c0))) END FROM vt0, v0, rt0; -- 0ms;
SELECT ALL ((COUNT(NULL)) NOT NULL), json_valid(vt0.c0) COLLATE RTRIM, CASE NULL  WHEN rt0.c1 THEN rt0.c1 END COLLATE BINARY FROM rt0, v0, vt0 ORDER BY ((((CAST(v0.c0 AS TEXT))OR((((rt0.c0, rt0.c2, rt0.c1, vt0.c1, v0.c0))<=((v0.c0, rt0.c0, rt0.c2, vt0.c0, rt0.c2))))))AND(((rt0.c0) BETWEEN (rt0.c2) AND (vt0.c0)))) ASC; -- 0ms;
SELECT DISTINCT MIN(v0.c0, vt0.c0, x'', vt0.c0) COLLATE NOCASE FROM rt0, vt0;SELECT DISTINCT AVG((rt0.c1 IN ())) OVER () FROM rt0 WHERE (((CAST(0.706934666070961 AS INTEGER)) NOT BETWEEN ((((x'', NULL, x'', 0.530470415967761, x'98f2'))>=((0.2768132547730683, NULL, 0.28616328946168823, 0.24812228241243983, 0X1950c903)))) AND (((0.440635192746229) ISNULL)))) LIMIT -1987124150 OFFSET 448330130; -- 0ms;
SELECT AVG(CAST(v0.c0 AS REAL)) OVER () FROM v0 WHERE (CASE WHEN ((0X522cd04c) NOT NULL) THEN x'' END); -- 1ms;
SELECT ALL GROUP_CONCAT((((((((((((('')AND(rt0.c0)))AND(rt0.c2)))AND(rt0.c0)))OR(rt0.c0)))AND(rt0.c1)))OR(vt0.c0))) FILTER(WHERE (((rt0.c0 COLLATE RTRIM, (((rt0.c2))!=((vt0.c1))), ((rt0.c0)IS NOT(v0.c0))))>((CASE v0.c0  WHEN rt0.c0 THEN 0Xffffffff9ca5b224 END, CASE rt0.c0  WHEN vt0.c0 THEN '''9' ELSE rt0.c2 END, ((rt0.c1)IS NOT('8-f')))))) OVER () FROM vt0, v0, rt0 WHERE ((+ ((NULL IN ())))); -- 0ms;
SELECT DISTINCT (((+ (vt0.c0)))<<(((((rt0.c1)AND(v0.c0)))AND(rt0.c2)))), ((((vt0.c1)=(vt0.c0))) ISNULL), ((vt0.c1) ISNULL) COLLATE RTRIM FROM v0;SELECT CASE (((vt0.c0)) BETWEEN ((rt0.c0)) AND ((vt0.c1)))  WHEN json_valid(rt0.c0) THEN CAST(rt0.c1 AS BLOB) END FROM v0;SELECT ALL (((v0.c0)) NOT BETWEEN ((((vt0.c0)-(vt0.c0)))) AND (('2082297645'))) FROM vt0;SELECT ALL (((((rt0.c1)LIKE(rt0.c1))))<((CAST(vt0.c0 AS BLOB)))) FROM v0 WHERE ((((('୳(Hb軦' COLLATE NOCASE)AND(((x'') ISNULL))))AND(((NULL)IS('')))));SELECT DISTINCT RANK() OVER () FROM v0, vt0, rt0; -- 0ms;
SELECT DISTINCT ((((vt0.c0)AND(rt0.c0)))||(CAST(vt0.c1 AS NUMERIC))), ((CASE rt0.c1  WHEN vt0.c1 THEN rt0.c0 END)OR(((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c0)))), (rt0.c0 COLLATE RTRIM IN ()) FROM vt0;SELECT DISTINCT ((vt0.c0 COLLATE BINARY) NOTNULL) FROM vt0, rt0, v0; -- 0ms;
SELECT DISTINCT CAST(rt0.c2 AS NUMERIC) COLLATE BINARY, ((MIN(rt0.c2)) BETWEEN ((vt0.c1 IN ())) AND (0.08004652147737923)), TOTAL(((v0.c0) ISNULL)) OVER ( ORDER BY (rt0.c1 COLLATE NOCASE IN ())), (CASE WHEN v0.c0 THEN vt0.c1 WHEN rt0.c0 THEN vt0.c1 WHEN '0' THEN v0.c0 END IN ()), PERCENT_RANK() OVER () FROM v0, rt0 WHERE ((((0.2632458321486506) NOT BETWEEN (402092557) AND (0.34853549386831595)) IN (CAST(0.11837762921993011 AS NUMERIC)))); -- 0ms;
SELECT CASE ((vt0.c1)%(rt0.c1))  WHEN (rt0.c2 IN (rt0.c0, rt0.c0)) THEN (NOT (vt0.c1)) WHEN (rt0.c1 IN (vt0.c0)) THEN vt0.c1 WHEN ((v0.c0) ISNULL) THEN rt0.c2 COLLATE RTRIM END FROM v0, rt0, vt0 WHERE (((((-6.17861608E8)+(NULL))) NOTNULL)); -- 0ms;
SELECT DISTINCT CAST(json_remove(vt0.c1, vt0.c1) AS NUMERIC), (((('-1769952696')OR(CASE rt0.c2  WHEN 0.3091439100049215 THEN rt0.c0 WHEN rt0.c0 THEN 'Vm''3q桚' WHEN vt0.c0 THEN rt0.c2 WHEN rt0.c0 THEN '' WHEN 0.9853963626475689 THEN rt0.c2 END)))AND(v0.c0 COLLATE RTRIM)), CAST((~ (vt0.c0)) AS INTEGER) FROM rt0, vt0 WHERE (((((310504503)%('-1182233011')))*(NULL)));SELECT DISTINCT LAG('1313790305', CASE ((rt0.c1) BETWEEN (x'0109') AND (rt0.c2))  WHEN rt0.c2 COLLATE NOCASE THEN CAST(rt0.c2 AS NUMERIC) WHEN ((rt0.c1)||(rt0.c1)) THEN CAST(rt0.c0 AS NUMERIC) WHEN (+ (rt0.c2)) THEN CASE WHEN rt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 ELSE rt0.c0 END END, ((COALESCE(rt0.c1, rt0.c1))|(rt0.c2))) OVER () FROM rt0; -- 0ms;
SELECT 'Vm''3q桚' FROM rt0 ORDER BY ((((((v0.c0)<>(v0.c0)))AND(rt0.c0)))OR(-13635761)) ASC  NULLS LAST;SELECT DISTINCT ((('-2032928897')) NOT BETWEEN ((TOTAL(rt0.c0))) AND (((((((((('-875658907')AND(rt0.c2)))OR(rt0.c2)))OR(rt0.c2)))AND(''))))), v0.c0, (((~ (v0.c0))) IS FALSE) FROM v0 WHERE ((872848029 IN ()) COLLATE BINARY);SELECT MAX(vt0.c0), ((CASE WHEN rt0.c1 THEN rt0.c0 ELSE vt0.c1 END)/(vt0.c0 COLLATE BINARY)), ((x'')>(((rt0.c2) ISNULL))) FROM rt0, vt0, v0 GROUP BY 'r,' HAVING ((((vt0.c0)=(rt0.c1)))<(CASE vt0.c1  WHEN rt0.c1 THEN rt0.c2 ELSE v0.c0 END)); -- 0ms;
SELECT DISTINCT UNLIKELY(((((rt0.c2)OR(x'')))AND(v0.c0))) FROM vt0, rt0, v0; -- 0ms;
SELECT DISTINCT RANK() OVER () FROM rt0 WHERE ((((((((((((((('')*(x'')))OR(NULLIF(NULL, 0.5263952385818035))))AND(((NULL)&(NULL)))))AND((~ (x'8602')))))AND(((('N픥')) NOT BETWEEN ((0.17755948334125793)) AND ((0.6852011146447508))))))AND(CAST('-473488776' AS TEXT))))AND('-1987124150' COLLATE NOCASE))) LIMIT 1746592225 OFFSET 562883382; -- 0ms;
SELECT DISTINCT ((vt0.c1) IS TRUE) COLLATE BINARY FROM rt0;SELECT vt0.c1, CAST(rt0.c0 AS BLOB) COLLATE RTRIM, (((((vt0.c0 IN ()))AND(((vt0.c0) IS TRUE))))AND((((((((('⥢')AND(rt0.c0)))OR(vt0.c0)))AND(v0.c0)))AND(vt0.c0)))), (((((NULL))<((v0.c0))))+(0.9485215863455247 COLLATE NOCASE)), COUNT(rt0.c1) OVER () FROM rt0, v0;SELECT DISTINCT ((((rt0.c0) IS FALSE))<=(v0.c0 COLLATE NOCASE)) FROM vt0 WHERE ((((('-1400017707') NOT BETWEEN ('544175305') AND (NULL)))LIKE(('' IN (0.2217545802644243, 0xffffffff8d45da6b))))) ORDER BY ((((vt0.c1)|(rt0.c1)))%(x''))  NULLS LAST;SELECT ((((rt0.c1) NOTNULL)) BETWEEN (v0.c0) AND (rt0.c1)) FROM rt0, vt0 WHERE (CASE ((('790970067'))<=((0.6688698797054431)))  WHEN ((NULL) BETWEEN (x'') AND (0.709071536189655)) THEN ((x'')>(0.6628682313553584)) ELSE ((('804339621')) BETWEEN (('g')) AND ((x'9aee'))) END) GROUP BY CASE WHEN ((v0.c0) NOT NULL) THEN ((rt0.c1) NOT NULL) WHEN ((rt0.c2) NOT BETWEEN (0.021099293260491536) AND (rt0.c2)) THEN vt0.c1 WHEN CASE rt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN vt0.c1 THEN rt0.c1 WHEN vt0.c0 THEN v0.c0 END THEN ((vt0.c0) IS TRUE) END, ((((((rt0.c0)%(rt0.c2)))OR(CASE rt0.c1  WHEN v0.c0 THEN v0.c0 ELSE 0.37495157687632297 END)))OR(vt0.c0)), (CAST(v0.c0 AS BLOB) IN ()), ((((rt0.c1)||(rt0.c2)))-(CAST(rt0.c1 AS INTEGER))), vt0.c1 HAVING ((CAST(vt0.c0 AS NUMERIC)) NOT BETWEEN ((((rt0.c0, vt0.c1, vt0.c0)) NOT BETWEEN ((rt0.c2, rt0.c2, rt0.c2)) AND ((vt0.c0, v0.c0, rt0.c1)))) AND (((vt0.c1)>(v0.c0)))) LIMIT 1350699322;SELECT ALL (+ ((+ (rt0.c0)))), ((rt0.c2 COLLATE BINARY)>=(rt0.c2)), CASE (NOT (vt0.c0))  WHEN ((v0.c0) NOT BETWEEN (rt0.c0) AND (x'325476a7')) THEN ((x'')IS(rt0.c1)) WHEN ((rt0.c1)!=(rt0.c2)) THEN ((v0.c0) IS FALSE) WHEN ((rt0.c0) BETWEEN (vt0.c0) AND (rt0.c2)) THEN JULIANDAY(NULL, rt0.c2, x'6d6b', v0.c0, v0.c0, vt0.c1, rt0.c2) WHEN ((((((((vt0.c0)AND(vt0.c0)))AND(v0.c0)))AND(vt0.c0)))OR(rt0.c2)) THEN NULL WHEN ((vt0.c0)IS(rt0.c0)) THEN 0.8655231598068454 COLLATE RTRIM END FROM v0, rt0 WHERE ((((0.30492409989256963)&(0.15990095404728155)) IN ())) LIMIT 1576247396 OFFSET -522954722;SELECT DISTINCT ((((MAX(vt0.c0))OR(((vt0.c0) NOT NULL))))AND(((rt0.c0) NOT BETWEEN (rt0.c2) AND (NULL)))), CAST(((0.3181920994082016)<=(vt0.c1)) AS NUMERIC), vt0.c1 FROM rt0, vt0, v0 ORDER BY rt0.c2, ((json_object(vt0.c0, vt0.c1)) ISNULL) DESC; -- 0ms;
SELECT TRIM(DISTINCT NULLIF(vt0.c0, v0.c0), (((rt0.c2, vt0.c0, rt0.c2, rt0.c1, rt0.c2)) NOT BETWEEN (('423426019', vt0.c1, x'', rt0.c1, x'')) AND ((rt0.c0, rt0.c0, rt0.c1, v0.c0, rt0.c2)))), '', rt0.c1 FROM vt0, v0 NOT INDEXED;SELECT DISTINCT ((CAST(vt0.c0 AS BLOB)) NOT NULL), ((TRIM(0.4265685036934559)) BETWEEN ((~ (-2133004972))) AND (rt0.c2 COLLATE RTRIM)), MIN(((((v0.c0)AND(rt0.c2)))AND(v0.c0))) FROM vt0, rt0, v0 ORDER BY (('1132434552' COLLATE RTRIM) NOT BETWEEN ((rt0.c2 IN ())) AND ((- (rt0.c2)))) DESC  NULLS LAST; -- 0ms;
SELECT DISTINCT CAST(vt0.c1 AS REAL) COLLATE BINARY FROM rt0, vt0, v0 NOT INDEXED; -- 0ms;
SELECT ALL (rt0.c0 IN ()) FROM v0, rt0 WHERE (CAST(x'3cf7' COLLATE BINARY AS REAL)); -- 0ms;
SELECT DISTINCT vt0.c1, (((NULL))<>((CAST(rt0.c0 AS REAL)))), ((((((rt0.c2) IS TRUE))OR(((rt0.c0)IS(vt0.c1)))))AND(COUNT(*))) FROM vt0 WHERE (((- ('>')) IN ())) LIMIT -532894008 OFFSET 735003323;SELECT DISTINCT (NOT ((~ (v0.c0)))), (((v0.c0 IN ()))<>(CAST(vt0.c0 AS NUMERIC))), ((((((rt0.c1) NOT NULL))AND((- ('?%|흟N/')))))AND((((rt0.c2, v0.c0, v0.c0)) BETWEEN ((rt0.c2, v0.c0, vt0.c0)) AND (('NK', vt0.c1, vt0.c0))))) FROM vt0 WHERE (((((((((GLOB('484897029', x''))OR((('-106262475') ISNULL))))OR(0.26079563649599924 COLLATE RTRIM)))OR(SQLITE_SOURCE_ID())))AND(CAST(NULL AS REAL))));SELECT DISTINCT TOTAL(((rt0.c1) ISNULL)) COLLATE BINARY FROM v0, vt0, rt0 LIMIT 1566662740 OFFSET 730067842; -- 0ms;
SELECT DISTINCT ((CASE WHEN v0.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 WHEN vt0.c1 THEN x'' END) NOTNULL) FROM rt0, vt0, v0 WHERE (((((NULL)>>(NULL))) BETWEEN (CAST(x'' AS NUMERIC)) AND ('_%' COLLATE NOCASE))); -- 1ms;
SELECT DISTINCT (((rt0.c0) BETWEEN (vt0.c1) AND (rt0.c2)) IN (((v0.c0)>=(0X2b752962)))) FROM rt0 WHERE (((((x'')>(NULL)))AND(x'' COLLATE BINARY)));SELECT DISTINCT ((((((rt0.c2)AND(vt0.c1)))AND(vt0.c0)))&(rt0.c0)) FROM v0;SELECT ALL IFNULL(DISTINCT ((vt0.c1) NOTNULL), CHAR(vt0.c0, rt0.c2, rt0.c2)) FROM rt0 WHERE (((((1453144899)<(4.5079494E7))) IS TRUE)) LIMIT 448330130 OFFSET 562883382;SELECT DISTINCT SUM(((rt0.c2) ISNULL)), v0.c0, CASE WHEN vt0.c1 THEN ((vt0.c0) BETWEEN (v0.c0) AND (rt0.c2)) ELSE CASE WHEN vt0.c1 THEN v0.c0 END END FROM rt0 RIGHT OUTER JOIN vt0 ON ABS(IFNULL(rt0.c0, rt0.c0)) UNION SELECT ALL ((rt0.c2 COLLATE NOCASE)>(((rt0.c2) IS FALSE))), (NOT (((v0.c0)&(rt0.c0)))), CASE WHEN ((vt0.c0) BETWEEN (v0.c0) AND (v0.c0)) THEN rt0.c0 COLLATE NOCASE ELSE COUNT('Pz}튎') END FROM v0;SELECT AVG((((vt0.c1)) BETWEEN ((v0.c0)) AND ((rt0.c0))) COLLATE NOCASE) OVER () FROM rt0, vt0, v0; -- 0ms;
SELECT ALL TRIM(DISTINCT ((vt0.c0) NOT BETWEEN (vt0.c1) AND (v0.c0))) FROM v0, vt0 LIMIT 43261432; -- 0ms;
SELECT DISTINCT NULL, v0.c0, rt0.c0, ((((((((((v0.c0)AND(rt0.c0)))AND(rt0.c1)))OR(rt0.c1)))AND(vt0.c1)))AND(((rt0.c2)<(vt0.c0)))), (((rt0.c2)) BETWEEN ((((((vt0.c1)AND(rt0.c2)))AND(vt0.c1)))) AND ((((((vt0.c0)OR(vt0.c0)))AND(rt0.c1))))) FROM vt0 WHERE (NULL);SELECT ALL GROUP_CONCAT((((rt0.c2)) BETWEEN ((NULL)) AND ((vt0.c0)))) FROM v0, rt0 WHERE (TYPEOF(DISTINCT ((0.28480218298243176) NOT BETWEEN (x'a2174277') AND (''))));SELECT DISTINCT x'', UPPER(CAST(v0.c0 AS TEXT)), ((((rt0.c2, rt0.c2, rt0.c2, rt0.c0, x'36df')) NOT BETWEEN ((rt0.c1, vt0.c1, 0.45296694923554015, rt0.c1, rt0.c2)) AND ((rt0.c1, v0.c0, vt0.c1, rt0.c2, rt0.c1))) IN ()) FROM rt0, vt0, v0 WHERE (('' IN ()) COLLATE NOCASE) ORDER BY ((((rt0.c1)GLOB(rt0.c0)))<=(((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c2))))  NULLS LAST, ((((((rt0.c1)+(v0.c0)))OR(CAST(v0.c0 AS INTEGER))))AND(rt0.c2 COLLATE RTRIM)); -- 1ms;
SELECT ALL ((vt0.c1)GLOB(v0.c0)) COLLATE BINARY, TRIM((vt0.c0 IN ()), ((((rt0.c1)OR(rt0.c0)))AND(vt0.c1))), DENSE_RANK() OVER ( RANGE  UNBOUNDED PRECEDING EXCLUDE TIES) FROM rt0;SELECT ALL ((CASE WHEN rt0.c0 THEN vt0.c0 WHEN rt0.c1 THEN v0.c0 WHEN rt0.c2 THEN vt0.c0 END) BETWEEN (((rt0.c0) NOTNULL)) AND ((((rt0.c1)) BETWEEN ((vt0.c0)) AND ((v0.c0))))) FROM v0;SELECT DISTINCT ((0.9712708495667587)<(((vt0.c0) NOT BETWEEN (vt0.c1) AND (rt0.c1)))) FROM vt0, rt0 WHERE (((((((NULL) NOTNULL))AND(((((NULL)AND('&.夅봐y&H')))OR('&Y\WO,Wꝓ膠')))))AND(x''))); -- 0ms;
SELECT ALL ((v0.c0 COLLATE BINARY)IS NOT(json_object(rt0.c2, rt0.c0))), LEAD(CAST(CASE WHEN vt0.c0 THEN rt0.c0 ELSE rt0.c1 END AS INTEGER), vt0.c1, ((((rt0.c0)AND(rt0.c1)))OR(rt0.c0)) COLLATE BINARY) OVER (), ((((TOTAL(vt0.c0))OR(((v0.c0)GLOB(rt0.c0)))))AND(((((vt0.c0)OR(vt0.c1)))OR(vt0.c1)))) FROM v0, rt0, vt0 WHERE ((LAST_INSERT_ROWID() IN ())) GROUP BY CAST(((((((((v0.c0)AND(vt0.c1)))OR(vt0.c1)))AND(rt0.c2)))OR(v0.c0)) AS BLOB), (~ (((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c0)))), JULIANDAY((((rt0.c2, rt0.c1, vt0.c0))<((rt0.c0, rt0.c1, rt0.c2))), '1230641158', json(rt0.c1)) HAVING (((rt0.c0)) BETWEEN ((((rt0.c0)IS(rt0.c1)))) AND ((((vt0.c0)GLOB(rt0.c1))))); -- 1ms;
SELECT DISTINCT CASE WHEN CASE vt0.c1  WHEN vt0.c0 THEN vt0.c0 ELSE v0.c0 END THEN ((vt0.c0) ISNULL) END, ABS(((rt0.c0)IS NOT(rt0.c2))), COUNT(*) FROM vt0, rt0, v0 WHERE (CAST((((('NK')OR(0.16045506049047953)))AND(0.8923629458741723)) AS REAL)); -- 0ms;
SELECT ALL CASE ((vt0.c0)>=(vt0.c1))  WHEN CAST(vt0.c1 AS REAL) THEN ((rt0.c2)AND(vt0.c1)) ELSE CAST(vt0.c0 AS NUMERIC) END FROM rt0, v0, vt0; -- 0ms;
SELECT DISTINCT (((NULL)) BETWEEN (((v0.c0 IN (rt0.c0, rt0.c1)))) AND ((((-1644777777)LIKE(rt0.c2))))) FROM rt0;SELECT DISTINCT CASE 0xfffffffff7b07cb6  WHEN UNLIKELY(DISTINCT vt0.c0) THEN (((x'aecb'))<((vt0.c1))) WHEN ((vt0.c1) BETWEEN (rt0.c0) AND (v0.c0)) THEN (((rt0.c2))>=((vt0.c1))) WHEN ((v0.c0)LIKE(rt0.c2)) THEN ((((v0.c0)AND('b')))AND(vt0.c1)) WHEN (((vt0.c1)) BETWEEN ((v0.c0)) AND ((rt0.c1))) THEN '727420208' COLLATE NOCASE WHEN (((rt0.c2))>((v0.c0))) THEN ((v0.c0)|(rt0.c0)) ELSE (+ (v0.c0)) END, (((vt0.c1)) NOT BETWEEN (((rt0.c2 IN ()))) AND ((UNLIKELY(DISTINCT rt0.c1)))), CASE ((((vt0.c1)AND(v0.c0)))OR(vt0.c0))  WHEN rt0.c1 COLLATE BINARY THEN 'vLP' END FROM rt0;SELECT DISTINCT (((rt0.c2)) NOT BETWEEN ((vt0.c0 COLLATE BINARY)) AND ((rt0.c1))) FROM vt0, v0 WHERE ((CAST(0.6156313081790147 AS INTEGER) IN ()));SELECT NULL FROM v0; -- 0ms;
SELECT (((rt0.c1)) NOT BETWEEN ((((vt0.c1) ISNULL))) AND ((0.10836075948055723))) FROM v0, rt0;SELECT ALL COALESCE(((rt0.c0)%(rt0.c2)), ((v0.c0)<<(vt0.c0)), ((rt0.c1) NOT BETWEEN (vt0.c0) AND (v0.c0)), (vt0.c1 IN (rt0.c1, vt0.c0, rt0.c2)), (+ (vt0.c0)), CAST(vt0.c1 AS REAL)), (((v0.c0))<>((rt0.c2))) COLLATE NOCASE, ((INSTR(vt0.c0, rt0.c0)) BETWEEN (TYPEOF(rt0.c1)) AND ((rt0.c1 IN ()))) FROM vt0, v0, rt0 WHERE (((((('65ᡰ', 0.37266862026030445, NULL)) BETWEEN ((2123027160, x'', '433690293')) AND (('1954134849', -452792308, 0Xffffffffb2478d6d)))) IS TRUE)) GROUP BY NULLIF(rt0.c0, (('')IS NOT(rt0.c1))), (TYPEOF(DISTINCT rt0.c2) IN (CAST(rt0.c2 AS INTEGER), TYPEOF(v0.c0))), v0.c0 COLLATE NOCASE COLLATE RTRIM, ((((vt0.c0)LIKE(rt0.c0))) NOT BETWEEN (rt0.c2) AND (rt0.c0)), (((((- (rt0.c1)))OR(((rt0.c1)<>(rt0.c2)))))OR(CASE 0.4682365602321231  WHEN rt0.c1 THEN rt0.c1 END)) LIMIT -931202782 OFFSET -1742460816; -- 0ms;
SELECT DISTINCT CAST(((((vt0.c0)AND(rt0.c1)))AND(vt0.c0)) AS INTEGER) FROM v0 WHERE (CAST(IFNULL('393549997', NULL) AS BLOB)) ORDER BY CAST(rt0.c1 AS BLOB) DESC  NULLS FIRST;SELECT ALL ((0.32616722937827747) BETWEEN (vt0.c1 COLLATE NOCASE) AND (((v0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c0)))), ((((((((((((((rt0.c1)AND(rt0.c2)))OR(rt0.c1)))OR(rt0.c2)))AND(x'f1ce')))OR(vt0.c0)))OR(rt0.c1))) NOT BETWEEN ((- (rt0.c0))) AND (CAST(NULL AS NUMERIC))), ((rt0.c0) IS FALSE) COLLATE BINARY FROM v0, rt0;SELECT DISTINCT (((~ (vt0.c1))) NOTNULL), UNLIKELY(rt0.c1) COLLATE NOCASE, ((CHAR(vt0.c1, rt0.c0, vt0.c1)) BETWEEN (((vt0.c0)LIKE(rt0.c0))) AND (((rt0.c1)>=('eu')))) FROM v0 WHERE ((NOT ((('792063237') NOTNULL))));SELECT DISTINCT TOTAL((((vt0.c1)) NOT BETWEEN ((rt0.c1)) AND ((NULL)))) FROM rt0, vt0 WHERE ((((((((((- (0Xffffffff80dced54)))AND(TYPEOF(-2133004972))))OR(1295120072)))AND((0.530470415967761 IN ()))))AND(((NULL) NOT NULL)))); -- 0ms;
SELECT DISTINCT ((((CAST(vt0.c0 AS NUMERIC))AND(AVG(vt0.c0))))AND((v0.c0 IN (v0.c0, vt0.c0)))) FROM v0, vt0, rt0 WHERE (((((x'')>>(0.28302464156888063)))/((+ (1513163106))))); -- 0ms;
SELECT DISTINCT ((((vt0.c0) NOTNULL)) NOT NULL) FROM rt0, v0, vt0; -- 0ms;
SELECT (((((rt0.c0, v0.c0, vt0.c1)) NOT BETWEEN (('-1906222843', vt0.c1, vt0.c1)) AND ((rt0.c2, rt0.c0, vt0.c0))))IS(((rt0.c0) NOTNULL))), ((((TYPEOF(DISTINCT rt0.c0))AND(((rt0.c2) NOT BETWEEN (vt0.c1) AND (vt0.c0)))))OR((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((v0.c0))))), ((NULL IN ()) IN ()), ABS(DISTINCT CAST(vt0.c0 AS REAL)), (('769123277' COLLATE NOCASE)>=(rt0.c1)) FROM v0, vt0, rt0 ORDER BY (+ ((- (vt0.c1)))) DESC, ((((v0.c0)||(rt0.c2)))||(CAST(v0.c0 AS TEXT))) LIMIT 1293716395 OFFSET -776177182; -- 0ms;
SELECT DISTINCT ABS(((v0.c0) ISNULL)) FROM v0, vt0 WHERE ((((CAST('JJ' AS REAL)))=(((- (NULL)))))); -- 0ms;
SELECT DISTINCT (((vt0.c0 IN ())) IS FALSE) FROM vt0, v0, rt0 WHERE ((((((NULL IN ()))AND(-9.31202782E8)))OR(CASE WHEN 0.34853549386831595 THEN '310504503' WHEN '-1740189042' THEN '1379288531' WHEN 0.7956224071693958 THEN 0.13424727914035728 WHEN 0.2884806497177397 THEN '' WHEN '-89453558' THEN '%%' ELSE 0.2632458321486506 END))) GROUP BY ((((vt0.c1)IS NOT(rt0.c1))) BETWEEN (((rt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c1))) AND (CAST(vt0.c0 AS NUMERIC))); -- 1ms;
SELECT DISTINCT CASE CASE rt0.c1  WHEN v0.c0 THEN v0.c0 ELSE vt0.c1 END  WHEN ((rt0.c1)<=(rt0.c0)) THEN 'Tc' END FROM rt0;SELECT UPPER(((rt0.c0) BETWEEN (0.40438221607029434) AND (NULL))), ((vt0.c0) NOT BETWEEN ((vt0.c1 IN ())) AND (((rt0.c0) IS FALSE))), COUNT(((rt0.c1) BETWEEN (vt0.c0) AND (NULL))) OVER () FROM vt0, v0 WHERE (CAST(0.5013066357732785 COLLATE RTRIM AS INTEGER));SELECT ALL HEX((((v0.c0, rt0.c1, rt0.c0)) NOT BETWEEN ((vt0.c0, v0.c0, vt0.c0)) AND (('2117480963', v0.c0, v0.c0)))) FROM vt0, rt0, v0; -- 0ms;
SELECT CASE WHEN (NOT (v0.c0)) THEN ((vt0.c1)<(vt0.c0)) END FROM vt0;SELECT ((((COUNT(rt0.c0))AND(rt0.c1)))AND(((vt0.c0)/(rt0.c1)))) FROM v0, vt0, rt0 WHERE ((~ (CAST(x'36cd' AS BLOB)))) GROUP BY ((((rt0.c0) IS FALSE))OR(((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1)))); -- 0ms;
SELECT ALL COUNT(*) OVER ( RANGE  CURRENT ROW EXCLUDE NO OTHERS) FROM rt0, vt0; -- 0ms;
SELECT DISTINCT (((rt0.c2))>((x''))) COLLATE BINARY FROM rt0, vt0; -- 0ms;
SELECT ((ABS(-1579870258))==(0.5874344336859694)) FROM rt0 WHERE (0.6259220037642621); -- 0ms;
SELECT ALL SUM(NULL), (((v0.c0, 0x141b16e0, 0.3026605134199287)) BETWEEN ((((rt0.c1)OR(vt0.c1)), (rt0.c2 IN ()), rt0.c0 COLLATE RTRIM)) AND (((((('<\r쨨CM*S_')AND(vt0.c1)))OR(vt0.c1)), ((0.6193511388679092) NOT NULL), '0}'))), (((((vt0.c1)OR(rt0.c2)))OR(rt0.c0)) IN (CAST(vt0.c1 AS REAL))) FROM vt0, rt0;SELECT ((((x'') BETWEEN (rt0.c2) AND (rt0.c2)))/(((rt0.c2) IS TRUE))) FROM rt0; -- 0ms;
SELECT ALL CASE CAST(vt0.c1 AS NUMERIC)  WHEN ((vt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c2)) THEN ((rt0.c1) NOT BETWEEN (v0.c0) AND (vt0.c1)) ELSE (~ (vt0.c0)) END FROM vt0 WHERE (CAST(((NULL)GLOB('1140472881')) AS INTEGER));SELECT DISTINCT MAX(vt0.c1), CAST(CASE WHEN vt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 ELSE rt0.c0 END AS REAL), CASE WHEN ((vt0.c0) NOT BETWEEN (v0.c0) AND (rt0.c1)) THEN NULLIF(vt0.c0, rt0.c0) END FROM rt0, vt0 WHERE ((~ ((- (x'235d')))));SELECT DISTINCT ((rt0.c0) NOT BETWEEN (vt0.c1) AND (v0.c0)) COLLATE NOCASE FROM vt0, v0, rt0 LIMIT 302749598 OFFSET 121766805; -- 0ms;
SELECT DISTINCT (((vt0.c0)<<(vt0.c1)) IN ()), (NOT (vt0.c0 COLLATE RTRIM)), (((MIN(v0.c0), rt0.c1, COALESCE(DISTINCT rt0.c2, rt0.c1)))!=((((((rt0.c2)AND(v0.c0)))OR(rt0.c0)), ((((rt0.c2)OR(rt0.c2)))AND(vt0.c1)), vt0.c0))) FROM vt0, v0;SELECT DISTINCT (+ (((((vt0.c1)OR(-1787819998)))OR(vt0.c0)))) FROM vt0, rt0, v0 WHERE (((('') NOTNULL) IN ())); -- 0ms;
SELECT CUME_DIST() OVER () FROM v0, vt0 WHERE (json_extract((- (1733931490)), ('0.6156313081790147' IN ('0.5013066357732785')))) LIMIT 735003323 OFFSET 564242259;SELECT CAST(((vt0.c1) IS TRUE) AS BLOB) FROM v0, rt0, vt0 WHERE ((((((4.33690293E8)) NOT BETWEEN (('433690293')) AND ((1.230641158E9))))>(CAST(x'3a74' AS BLOB)))); -- 0ms;
SELECT ALL (rt0.c0 COLLATE NOCASE IN ((rt0.c0 IN ()), UPPER(DISTINCT rt0.c2))), (((v0.c0, rt0.c1, 4.5079494E7))==((rt0.c1, rt0.c0, vt0.c0))) COLLATE NOCASE, CAST(((vt0.c1)AND(v0.c0)) AS TEXT) FROM v0, rt0 WHERE (((('-1107048036' IN ())) ISNULL)) GROUP BY ((((rt0.c2)>=(v0.c0))) BETWEEN (CASE rt0.c2  WHEN vt0.c1 THEN v0.c0 WHEN rt0.c0 THEN rt0.c0 WHEN vt0.c1 THEN vt0.c1 WHEN rt0.c2 THEN x'f933' WHEN rt0.c2 THEN rt0.c1 ELSE v0.c0 END) AND (((rt0.c1)LIKE(rt0.c2)))), UPPER(DISTINCT ((rt0.c1)*(rt0.c1))), NULL HAVING (((((((rt0.c0, rt0.c2, rt0.c1)) NOT BETWEEN ((vt0.c1, rt0.c2, vt0.c0)) AND ((x'', vt0.c1, rt0.c2))))AND(CASE WHEN rt0.c2 THEN v0.c0 END)))OR(CAST(rt0.c2 AS TEXT)));SELECT DISTINCT '3譃p!R', (((('1202058950')OR(SUM(vt0.c1))))OR(((((((((rt0.c2)OR(0.8693079693224595)))OR(vt0.c1)))OR(vt0.c0)))OR(vt0.c1)))), vt0.c0 FROM v0, rt0, vt0 WHERE (TOTAL_CHANGES()); -- 1ms;
SELECT (- ((((0.9046877008430088))<((vt0.c1))))) FROM rt0;SELECT DISTINCT ((CASE rt0.c0  WHEN v0.c0 THEN NULL END)AND(MAX(vt0.c1))) FROM vt0, v0, rt0 WHERE ('792063237'); -- 0ms;
SELECT ((CAST(0.8259229585770316 AS REAL)) NOT BETWEEN ((((rt0.c1))<=((rt0.c1)))) AND (AVG(vt0.c1))) FROM vt0 WHERE (CASE CAST(0.7007315663606543 AS BLOB)  WHEN (('')OR(x'7f90')) THEN ((x'6aea')/('1368687008')) WHEN ((x'') IS FALSE) THEN ((2.75337371E8)<=(NULL)) WHEN (('-1092545923') IS FALSE) THEN ((x'354a') NOT BETWEEN (NULL) AND (x'f3a33fcf')) ELSE CAST(0.16212071476280243 AS BLOB) END);SELECT DISTINCT LAST_VALUE(CAST(v0.c0 AS TEXT)) OVER () FROM vt0, v0, rt0; -- 1ms;
SELECT DISTINCT TOTAL((NULL IN ())) OVER ( ORDER BY ((CASE WHEN vt0.c1 THEN vt0.c0 WHEN rt0.c0 THEN NULL WHEN rt0.c0 THEN vt0.c1 WHEN v0.c0 THEN rt0.c0 WHEN rt0.c1 THEN vt0.c0 END) NOTNULL)  NULLS LAST, (((vt0.c0))>=((vt0.c1))) COLLATE NOCASE  NULLS FIRST, '-317925199' DESC  NULLS FIRST) FROM v0 WHERE ((((('', NULL, ''))<(('-1769952696', x'', x''))) IN ())) LIMIT 1903555777 OFFSET -984416938;SELECT DISTINCT (NOT ((v0.c0 IN ()))) FROM vt0, v0; -- 0ms;
SELECT rt0.c0, (NOT (CASE WHEN rt0.c1 THEN rt0.c1 ELSE vt0.c1 END)), vt0.c1 FROM v0, rt0;SELECT (+ (CAST(rt0.c0 AS INTEGER))) FROM v0 WHERE (((('', '-1742460816', '')) BETWEEN (((((((((('3%tn')OR(0.10706589083121554)))OR(x'd566')))OR('269601024')))AND(NULL)), (((x'')) BETWEEN (('-532894008')) AND ((0.3770651602729447))), ((x'2f2c4b74') ISNULL))) AND (((('1823062358')IS(0.12091578283592896)), ((((0.03188564638679414)AND(0.28616328946168823)))AND(NULL)), CAST(x'' AS TEXT)))));SELECT DISTINCT ((((((rt0.c0) NOT BETWEEN (vt0.c1) AND (rt0.c0)))AND((- (rt0.c1)))))AND((rt0.c1 IN ()))) FROM v0, rt0 WHERE ((((('_%')*(1336564274)))>(x''))); -- 0ms;
SELECT ALL TYPEOF(DISTINCT (- (v0.c0))) FROM v0; -- 0ms;
SELECT DISTINCT ((((((((((rt0.c1)OR(vt0.c1)))AND(rt0.c0)))AND(x'6c830c5b')))OR(vt0.c0))) NOT BETWEEN ((+ (v0.c0))) AND (((rt0.c0) NOT BETWEEN (vt0.c0) AND (rt0.c2)))), rt0.c0, ((((LAST_INSERT_ROWID())OR(CASE rt0.c2  WHEN rt0.c2 THEN rt0.c0 ELSE rt0.c0 END)))OR('(x骝~kN')) FROM v0, vt0, rt0 LIMIT -1105074219; -- 0ms;
SELECT DISTINCT (NOT (((((((((0.6094841867030025)OR(rt0.c0)))AND(vt0.c1)))OR(rt0.c0)))AND(rt0.c1)))) FROM v0, rt0, vt0; -- 0ms;
SELECT DISTINCT (((((rt0.c1))<>((v0.c0))))GLOB(CASE WHEN rt0.c0 THEN v0.c0 END)), (~ (rt0.c0)) COLLATE NOCASE, CAST(LENGTH(x'') AS INTEGER) FROM vt0, v0 WHERE (CASE CAST('&.夅봐Y&H' AS TEXT)  WHEN CASE WHEN NULL THEN NULL ELSE NULL END THEN ((423426019) NOT BETWEEN (0.02581042508351461) AND (NULL)) WHEN CAST(x'5be7' AS NUMERIC) THEN ((x'')/(x'')) WHEN 0.5433306876185929 COLLATE BINARY THEN (0.9473221724565137 IN (4.02092557E8, x'')) ELSE ('s ' IN ('-876211672', x'')) END);SELECT DISTINCT x'7cf2' FROM v0, rt0 WHERE (CAST(CAST(NULL AS INTEGER) AS REAL)); -- 0ms;
SELECT DISTINCT 0x34069a9d FROM vt0, v0, rt0; -- 0ms;
SELECT COALESCE(ABS(DISTINCT '*逵('''), json_object(-5.22954722E8, rt0.c1)) FROM v0 FULL OUTER JOIN rt0 ON (~ (vt0.c1)) CROSS JOIN vt0 ON v0.c0;SELECT DISTINCT (((((((((v0.c0 IN ()))AND(((((vt0.c0)OR(rt0.c1)))AND(rt0.c0)))))AND(((((vt0.c1)OR(rt0.c0)))AND(0xffffffff8e3efe23)))))AND(((rt0.c1) NOT BETWEEN (vt0.c1) AND (v0.c0)))))AND(CAST(vt0.c0 AS INTEGER))), (((+ (vt0.c0)))OR(vt0.c0 COLLATE NOCASE)), (((((v0.c0)AND(vt0.c0)))AND(vt0.c0)) IN ()) FROM rt0;SELECT vt0.c0 FROM v0, vt0, rt0 WHERE ((CAST(0xffffffff898ee44a AS BLOB) IN (((NULL) NOT NULL)))); -- 0ms;
SELECT ((CAST(0.7842875714993857 AS BLOB))>>((NOT (vt0.c1)))), AVG(((((((((((((rt0.c1)OR(NULL)))AND(v0.c0)))OR(vt0.c0)))OR(vt0.c0)))OR(x'')))OR(vt0.c0))), TOTAL((v0.c0 IN ())) OVER () FROM vt0, v0;SELECT DISTINCT ((rt0.c2)||(rt0.c1)) COLLATE BINARY FROM vt0;SELECT (((vt0.c1)>=(v0.c0)) IN ()) FROM vt0, v0; -- 0ms;
SELECT DISTINCT (((((vt0.c0)+(vt0.c0))))=(((rt0.c1 IN ())))) FROM vt0 WHERE (CASE (((NULL)) NOT BETWEEN (('<\r쨨CM*S_')) AND ((NULL)))  WHEN (~ (x'')) THEN '-1268353185' COLLATE NOCASE ELSE CAST('#N' AS NUMERIC) END) GROUP BY ((((rt0.c0) BETWEEN (vt0.c0) AND (vt0.c0))) ISNULL), (rt0.c0 COLLATE BINARY IN ()), (~ (((rt0.c0)<<('1379288531'))));SELECT ALL v0.c0, ((((((((((rt0.c1)>>(vt0.c1)))OR(-1496712511)))OR(rt0.c1)))OR(vt0.c1)))AND(v0.c0 COLLATE NOCASE)), COUNT(CAST(vt0.c0 AS TEXT)) FROM rt0, v0, vt0 GROUP BY (((vt0.c1 IN ()))<>(vt0.c1 COLLATE BINARY)); -- 0ms;
SELECT DISTINCT FIRST_VALUE(rt0.c2) OVER () FROM rt0, vt0, v0 ORDER BY ((CASE vt0.c1  WHEN '1835152867' THEN v0.c0 ELSE vt0.c1 END) IS TRUE) DESC; -- 1ms;
SELECT ALL NULL FROM vt0, rt0, v0 WHERE ((((((('l(x^{F')AND(0.6215925461856543)))OR(0.9546568404236471))) BETWEEN (((0.25662244096797227)>(x''))) AND (((NULL) ISNULL)))); -- 0ms;
SELECT DISTINCT ((CASE WHEN rt0.c1 THEN rt0.c2 END) IS TRUE) FROM rt0; -- 0ms;
SELECT DISTINCT ((LIKELIHOOD(DISTINCT rt0.c2, 0.4758002268076844))%(((v0.c0) NOT BETWEEN (vt0.c1) AND (rt0.c2)))) FROM rt0, v0 NOT INDEXED WHERE (('-931202782' COLLATE BINARY IN ()));SELECT ALL ((rt0.c1 IN ()) IN ()), rt0.c1, CAST('438621477' AS REAL), ((((0.7678269908188146)) NOT BETWEEN ((rt0.c1)) AND ((rt0.c1))) IN ()), CAST(rt0.c2 AS REAL) FROM vt0, rt0, v0 LIMIT -544154140 OFFSET -1928053259; -- 0ms;
SELECT CASE WHEN (((vt0.c1))<>((v0.c0))) THEN (~ (v0.c0)) END FROM rt0 WHERE (CASE WHEN '402092557' THEN 0.25883749697433234 COLLATE RTRIM ELSE ((NULL)>(NULL)) END);SELECT ALL AVG(((rt0.c2) IS FALSE)) OVER ( ROWS CASE WHEN vt0.c1 COLLATE NOCASE THEN INSTR('658693446', rt0.c2) END PRECEDING) FROM vt0, v0, rt0 WHERE ((((NULL)) NOT BETWEEN ((NULL COLLATE BINARY)) AND (((- (-7.91413727E8)))))); -- 0ms;
SELECT DISTINCT ((((((((vt0.c1 COLLATE NOCASE)OR((((rt0.c1))>=((rt0.c1))))))OR(((vt0.c0)||(rt0.c1)))))AND((~ (rt0.c1)))))OR((vt0.c0 IN ()))), vt0.c0, CASE ((rt0.c0) BETWEEN (rt0.c1) AND (rt0.c0))  WHEN LIKE(vt0.c0, vt0.c1, '|') THEN (((rt0.c2, rt0.c2, rt0.c2)) BETWEEN ((vt0.c0, rt0.c2, rt0.c0)) AND ((rt0.c1, vt0.c1, v0.c0))) END, (~ (((v0.c0)<=(rt0.c1)))), (+ ((vt0.c1 IN (rt0.c0, vt0.c0)))), 0.4730215589817287, ((vt0.c1 COLLATE RTRIM) BETWEEN (((vt0.c1)|(v0.c0))) AND (((((rt0.c0)AND(NULL)))OR(rt0.c2)))) FROM rt0, vt0, v0; -- 0ms;
SELECT ALL (((vt0.c1 IN (vt0.c1, vt0.c1)))<(((((rt0.c2)OR(vt0.c1)))AND('451285558')))) FROM vt0, v0, rt0; -- 0ms;
SELECT ALL ((((((v0.c0, NULL, vt0.c1)) BETWEEN ((rt0.c2, vt0.c1, vt0.c1)) AND ((vt0.c1, rt0.c1, rt0.c2)))))>((rt0.c1 COLLATE BINARY))), vt0.c1 COLLATE RTRIM, ((v0.c0)IS(v0.c0)) COLLATE NOCASE FROM vt0, rt0, v0 GROUP BY ((~ (vt0.c1)) IN ()), CASE (NOT (v0.c0))  WHEN ((vt0.c1) BETWEEN (vt0.c0) AND (rt0.c0)) THEN ((rt0.c0) ISNULL) ELSE ((vt0.c1)OR(rt0.c0)) END, rt0.c1 ORDER BY (((rt0.c1)GLOB(rt0.c2)) IN ()) ASC, ((rt0.c2 COLLATE RTRIM) BETWEEN (((rt0.c0) NOT NULL)) AND (((vt0.c0)||(vt0.c0))))  NULLS LAST; -- 0ms;
SELECT ALL RANK() OVER () FROM vt0 WHERE ((((((('-473488776')AND(NULL)))AND(0.17755948334125793))) ISNULL)) GROUP BY ((((PRINTF(vt0.c1))AND((((vt0.c0, vt0.c0, vt0.c0)) NOT BETWEEN ((rt0.c1, vt0.c1, 0.8318981760935286)) AND ((vt0.c1, vt0.c0, rt0.c1))))))OR((v0.c0 IN (vt0.c1, ''))));SELECT ALL ((MAX(NULL)) BETWEEN ((('564242259') IS TRUE)) AND ((('') IS FALSE))) FROM vt0, rt0 WHERE (CASE ''  WHEN (NOT (4.02092557E8)) THEN CASE WHEN 0.24528733037436623 THEN NULL END END) LIMIT 388296888; -- 0ms;
SELECT AVG(CASE WHEN rt0.c1 THEN x'98f4' ELSE rt0.c2 END) FROM v0 WHERE ((((NOT (-1752594590)))OR(CASE WHEN NULL THEN NULL ELSE '-1542556877' END))) LIMIT 965884189 OFFSET 393549997;SELECT DISTINCT (rt0.c1 IN (vt0.c1)) COLLATE BINARY FROM v0, rt0 WHERE (((((((274431947)AND(NULL)))AND('')))>>((((NULL))<=((0.08501697599784575))))));SELECT LAG('-532894008', ((+ (v0.c0)) IN ()), (((((- (rt0.c2)))AND(rt0.c0 COLLATE NOCASE)))OR(((((rt0.c2)OR(rt0.c0)))OR(v0.c0))))) OVER () FROM v0, rt0, vt0 WHERE (((((~ ('l(x^{f')), ((0.1562967942306569) IS TRUE), (+ (x''))))<>((0.08785895192295923 COLLATE BINARY, CAST(NULL AS REAL), CAST(x'' AS NUMERIC))))) GROUP BY ((vt0.c0)IS(vt0.c1)) COLLATE BINARY HAVING (CAST(rt0.c0 AS NUMERIC) IN (vt0.c1, CAST(rt0.c2 AS REAL))); -- 0ms;
SELECT '-390060445' FROM rt0 RIGHT OUTER JOIN v0 ON (((vt0.c0)) BETWEEN (('}sl')) AND ((vt0.c0))) COLLATE BINARY INNER JOIN vt0 ON ((rt0.c2)IS(rt0.c0)) COLLATE RTRIM WHERE ((((0.5599463179769611)) BETWEEN (((('iqorIh[]k') IS TRUE))) AND (((((('-h/5\r')AND('1742805010')))OR('2ncn#f'))))));SELECT ALL CAST((vt0.c1 IN ()) AS REAL), vt0.c0, (((rt0.c0))>((((vt0.c0)*(v0.c0))))) FROM vt0 WHERE (0.737293835500319) LIMIT 1878383522 OFFSET -196330933;SELECT ALL -250139532, GROUP_CONCAT(CASE WHEN rt0.c2 THEN vt0.c0 WHEN rt0.c2 THEN v0.c0 WHEN rt0.c2 THEN rt0.c2 END), ((((vt0.c0 COLLATE RTRIM)OR(((rt0.c2) IS TRUE))))OR('183306946')) FROM rt0, vt0, v0; -- 0ms;
SELECT DISTINCT NULL FROM rt0; -- 0ms;
SELECT ((((ABS(DISTINCT rt0.c0))AND(((v0.c0) NOT BETWEEN (vt0.c1) AND (v0.c0)))))OR(NULL)) FROM v0, vt0, rt0; -- 0ms;
SELECT ALL x'' FROM rt0, vt0, v0; -- 0ms;
SELECT DISTINCT (CASE WHEN rt0.c2 THEN v0.c0 WHEN vt0.c1 THEN rt0.c1 WHEN vt0.c0 THEN rt0.c0 ELSE rt0.c0 END IN ()) FROM vt0, v0, rt0; -- 0ms;
SELECT (NOT (rt0.c2)) FROM v0, rt0; -- 0ms;
SELECT DISTINCT ROW_NUMBER() OVER (), CAST(rt0.c0 COLLATE BINARY AS NUMERIC), UPPER(DISTINCT (NOT (rt0.c0))) FROM vt0, rt0, v0; -- 1ms;
SELECT DISTINCT CAST(MAX(rt0.c1) AS REAL) FROM v0, rt0; -- 1ms;
SELECT DISTINCT ((((vt0.c1) NOT BETWEEN (v0.c0) AND (vt0.c0)))+((vt0.c0 IN ()))), NULL, vt0.c1 FROM rt0, v0;SELECT DISTINCT ((((vt0.c0)&(vt0.c0))) BETWEEN ((v0.c0 IN ())) AND (x'1266')) FROM vt0; -- 0ms;
SELECT DISTINCT SUM((NOT (rt0.c1))) FROM rt0 WHERE ((CASE '}'  WHEN 0.9404965944648449 THEN x'549b' WHEN -9.31202782E8 THEN '888904945' WHEN '-776177182' THEN 0.1426638686839492 END IN ())) ORDER BY ((vt0.c0 COLLATE RTRIM)<=(v0.c0 COLLATE RTRIM))  NULLS LAST;SELECT ALL (((NOT (vt0.c1)))&(v0.c0)) FROM rt0;SELECT ALL (((rt0.c1, rt0.c2, v0.c0)) BETWEEN (('1633765685', CAST(vt0.c0 AS NUMERIC), (rt0.c0 IN (rt0.c2)))) AND (((+ (rt0.c2)), (v0.c0 IN ()), UNLIKELY(rt0.c1)))) FROM rt0, v0 NOT INDEXED, vt0 WHERE (0X5f5d9233); -- 0ms;
SELECT ALL (vt0.c0 IN (NULL)) FROM vt0, rt0, v0; -- 0ms;
SELECT DISTINCT -2086143031 FROM v0, vt0 GROUP BY CASE (((rt0.c1)) NOT BETWEEN ((v0.c0)) AND ((rt0.c2)))  WHEN ((rt0.c2) NOT NULL) THEN CAST(rt0.c0 AS INTEGER) END HAVING (+ (vt0.c1)) COLLATE RTRIM;SELECT DISTINCT ((((v0.c0)&('1735475793')))<<(json_array_length(vt0.c0, rt0.c0))) FROM rt0, vt0, v0 WHERE (PRINTF((x'bc20' IN (0.15657629025550757)), (('562883382') NOT NULL), ((((0.9027454421745935)OR('')))OR(-1118664888)), CAST(0.737293835500319 AS INTEGER), CASE WHEN '-13635761' THEN x'10eb' END)); -- 0ms;
SELECT DISTINCT rt0.c2 FROM v0, vt0, rt0 WHERE (CASE (((x'')) NOT BETWEEN ((0Xffffffff9846d28e)) AND (('\nt#')))  WHEN ((NULL)IS NOT(NULL)) THEN ((NULL) ISNULL) ELSE ((0.8608651272064372)>(0.7891206334193458)) END); -- 0ms;
SELECT ALL (NOT (TRIM(rt0.c0))), (((((+ (rt0.c1)))OR((- (vt0.c0)))))OR('-2032928897')), TOTAL(((v0.c0)>>(rt0.c0))) FROM v0, vt0, rt0 WHERE (TRIM(CAST('72259030' AS INTEGER), CASE x'29a9'  WHEN 'a' THEN '0.12091578283592896' ELSE NULL END)); -- 0ms;
SELECT DISTINCT v0.c0 FROM vt0, rt0 LIMIT -1585658182 OFFSET 102737468;SELECT DISTINCT CASE ((((((((v0.c0)OR('')))OR(vt0.c1)))AND(vt0.c1)))OR(v0.c0))  WHEN v0.c0 COLLATE NOCASE THEN ((v0.c0)+(rt0.c2)) WHEN NULLIF(DISTINCT rt0.c2, vt0.c0) THEN ((((vt0.c1)AND(v0.c0)))AND(rt0.c1)) WHEN ((vt0.c1) NOTNULL) THEN (((rt0.c2, rt0.c1, vt0.c1)) NOT BETWEEN ((vt0.c1, rt0.c2, rt0.c2)) AND ((rt0.c1, vt0.c0, vt0.c0))) ELSE CAST(vt0.c1 AS REAL) END FROM v0, rt0, vt0; -- 0ms;
SELECT DISTINCT vt0.c1, ((((((vt0.c1)LIKE(rt0.c1)))AND(rt0.c0 COLLATE BINARY)))OR(GROUP_CONCAT(vt0.c0))), v0.c0 FROM rt0;SELECT DISTINCT TRIM((((vt0.c1))<((rt0.c1))), (- (vt0.c0))) FROM v0, vt0 WHERE ((+ (('-343079486' IN (NULL)))));SELECT DISTINCT ((MAX(v0.c0))AND(((rt0.c2)LIKE(rt0.c0)))) FROM rt0, v0, vt0; -- 0ms;
SELECT DISTINCT GROUP_CONCAT(((vt0.c1)-(vt0.c0))) OVER () FROM v0, rt0 WHERE ((((1453144899) BETWEEN (NULL) AND ('')) IN ()));SELECT (((('16266244')OR(MAX(rt0.c0))))OR(vt0.c1)) FROM v0, rt0, vt0 LIMIT 438621477; -- 0ms;
SELECT CAST(rt0.c1 AS BLOB), COUNT(((vt0.c1) NOT BETWEEN (vt0.c0) AND (x'a77d'))) OVER (), ((rt0.c1)>=((rt0.c1 IN (rt0.c0)))) FROM vt0, rt0, v0 WHERE ((((((((((x'37b8')OR('-1173128200')))AND('')))OR(0.8259229585770316)))OR(NULL)) IN ())) GROUP BY ((((((((((rt0.c2)OR(rt0.c0)))OR(rt0.c0)))OR(vt0.c1)))OR(0.6773922377344198))) NOT BETWEEN (rt0.c2) AND ((- (rt0.c1)))); -- 0ms;
SELECT ((((((((((((((((v0.c0)AND('m')))AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c1)))OR(rt0.c0)))OR(rt0.c0)))OR(NULL)))AND(((x'') IS TRUE))) FROM rt0;SELECT ALL ((((CAST(vt0.c1 AS TEXT))AND((NOT (rt0.c0)))))AND(((rt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)))), MIN(((rt0.c1) NOT BETWEEN (rt0.c0) AND (v0.c0))) COLLATE NOCASE, CASE WHEN '0.737293835500319' THEN TRIM(DISTINCT vt0.c0, rt0.c0) WHEN (0x5a310962 IN ()) THEN vt0.c0 WHEN ((rt0.c1) NOT NULL) THEN v0.c0 COLLATE NOCASE END FROM vt0 WHERE ((((((NULL)-(x'')), ((NULL) NOT NULL), ((((1576247396)OR(0x682d685a)))OR('\䂲Vr'))))<>((((((NULL)OR('')))AND('-293645714')), '', (x'' IN ('1576247396')))))) GROUP BY (CAST(v0.c0 AS REAL) IN (((rt0.c2) NOTNULL), (('n1')IS(v0.c0)))) HAVING CAST((- (vt0.c0)) AS REAL);SELECT TOTAL(UNLIKELY(x'2571')), (((vt0.c1) IS TRUE) IN ((NOT (rt0.c1)), v0.c0)), CASE HEX(rt0.c2)  WHEN ((vt0.c0)%(vt0.c1)) THEN ((rt0.c2) NOT BETWEEN (v0.c0) AND (NULL)) WHEN ((rt0.c2) BETWEEN (NULL) AND (rt0.c2)) THEN CASE WHEN vt0.c1 THEN rt0.c0 WHEN NULL THEN vt0.c1 WHEN v0.c0 THEN rt0.c2 END WHEN ((rt0.c1) IS TRUE) THEN ((vt0.c0)<>(rt0.c0)) ELSE CASE WHEN rt0.c0 THEN vt0.c0 WHEN v0.c0 THEN vt0.c1 WHEN 0.7012067068915808 THEN v0.c0 END END FROM vt0 WHERE (x'');SELECT json(((vt0.c0) BETWEEN ('|9ュ(ᡈo(') AND (x'90df'))), (rt0.c1 IN ()) COLLATE NOCASE, rt0.c1 FROM v0, vt0;SELECT ALL (((rt0.c1))>=((json_quote('')))) FROM rt0 NOT INDEXED, v0, vt0; -- 0ms;
SELECT (~ ((~ (rt0.c1)))) FROM v0;SELECT DISTINCT ((((vt0.c0)=(rt0.c1)))+(((((((((rt0.c0)AND(rt0.c1)))AND(vt0.c1)))OR(rt0.c2)))AND(rt0.c0)))) FROM vt0, v0;SELECT DISTINCT CAST(CASE WHEN v0.c0 THEN v0.c0 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c2 END AS INTEGER) FROM v0, vt0 WHERE ((((('F')||(-1954507777)))-(('1930557252' IN ()))));SELECT DISTINCT CASE WHEN GROUP_CONCAT(0.16045506049047953) THEN ((rt0.c1)LIKE(rt0.c0)) END FROM v0;SELECT DISTINCT (~ (rt0.c0)) COLLATE BINARY FROM vt0, v0, rt0; -- 0ms;
SELECT DISTINCT vt0.c0 FROM rt0 WHERE (CASE WHEN ((x'')||('402092557')) THEN 0X682d685a COLLATE NOCASE END);SELECT ALL (NOT (rt0.c0 COLLATE BINARY)) FROM v0 WHERE ((((((0Xffffffffca21aee7, NULL, x'3e39a38c'))<=(('x᠆]ⲻkL', 0xffffffffbee1127d, 0.6541116450738349))))OR(((NULL)IS('423426019')))));SELECT (- ((rt0.c0 IN (NULL, rt0.c0)))) FROM v0, vt0 WHERE ((((((- (0.2320482141248008)))OR(((('1489477299', 1.453144899E9, x''))<((NULL, 1453144899, 0.1426638686839492))))))AND(('zB\*d' IN (0.08004652147737923)))));SELECT DISTINCT ((('_1', TOTAL(vt0.c0), ((((vt0.c1)OR(vt0.c1)))OR(rt0.c0)), CAST(vt0.c0 AS INTEGER), CAST(rt0.c1 AS NUMERIC)))<((rt0.c2, ((NULL)<=(rt0.c2)), MAX(v0.c0), 0Xffffffffc2eb11f1, ((((((((rt0.c0)OR(v0.c0)))AND(rt0.c2)))AND(rt0.c1)))AND(rt0.c1))))), ((((rt0.c0)-(rt0.c0))) ISNULL), (((((vt0.c0))=((rt0.c1))))<(CAST(v0.c0 AS TEXT))) FROM v0, vt0 WHERE (((((x'')=(-1.585658182E9)))/((- ('-706426388')))));SELECT CASE ((rt0.c1)LIKE(v0.c0))  WHEN CAST('PU' AS INTEGER) THEN MIN(rt0.c1) ELSE ((rt0.c2)+(rt0.c2)) END FROM rt0 WHERE ((((0.6940785585190032))<((5.64242259E8))) COLLATE RTRIM);SELECT ((((((rt0.c2) NOTNULL))AND((rt0.c1 IN ('72#2C꾐')))))OR((((((((('-1585658182')AND(rt0.c2)))AND(rt0.c2)))OR(rt0.c0)))OR(vt0.c0)))) FROM rt0;SELECT ((SQLITE_COMPILEOPTION_GET(v0.c0))|(rt0.c1)), (((v0.c0 IN (NULL)))/(v0.c0 COLLATE RTRIM)), ((LIKELY('75970918'))OR(v0.c0 COLLATE RTRIM)) FROM v0, rt0, vt0; -- 0ms;
SELECT DISTINCT (+ (((vt0.c0) NOT NULL))) FROM v0, rt0;SELECT CAST(TOTAL(0X4acacac8) AS NUMERIC) FROM vt0, rt0 WHERE ((((x'158d')) NOT BETWEEN ((((((x'')AND(x'')))OR(x'abff')))) AND (((0.6241192711235451 IN ()))))); -- 0ms;
SELECT ALL (((rt0.c0)) BETWEEN (((('-1607807696') NOTNULL))) AND ((CAST(vt0.c1 AS NUMERIC)))) FROM rt0 ORDER BY v0.c0 ASC  NULLS FIRST, CASE (~ (v0.c0))  WHEN (v0.c0 IN (rt0.c2)) THEN v0.c0 WHEN 0.5933794357122684 THEN TYPEOF(rt0.c2) WHEN (rt0.c0 IN ()) THEN ((vt0.c0) ISNULL) WHEN CAST(rt0.c0 AS INTEGER) THEN CAST(vt0.c1 AS INTEGER) WHEN ((v0.c0) ISNULL) THEN CASE x''  WHEN rt0.c0 THEN rt0.c1 ELSE '-532894008' END END DESC, v0.c0;SELECT LAST_VALUE(((rt0.c1)%(rt0.c2 COLLATE NOCASE))) OVER () FROM rt0, vt0, v0 WHERE (CAST((((('45079494')AND(x'e02e')))OR(x'4b25')) AS REAL)); -- 0ms;
SELECT ((+ (v0.c0)) IN ()) FROM vt0 GROUP BY (UPPER(rt0.c2) IN ()), ((rt0.c1 COLLATE BINARY) NOT NULL), x'' HAVING ((((NULL)||(rt0.c0))) NOT BETWEEN (CASE WHEN vt0.c0 THEN 0.9246103205796454 ELSE 0.9971809758091266 END) AND (CAST(v0.c0 AS INTEGER))) LIMIT 641765214 OFFSET -1302770164;SELECT ALL CAST(rt0.c1 AS INTEGER) COLLATE BINARY FROM vt0, v0 WHERE (((1093532756 COLLATE NOCASE) IS TRUE)) LIMIT 1457579993;SELECT DISTINCT NTH_VALUE(rt0.c0, ((((CASE WHEN rt0.c0 THEN rt0.c2 WHEN rt0.c0 THEN v0.c0 WHEN x'' THEN rt0.c2 END)AND(((rt0.c0)|(rt0.c0)))))AND(((rt0.c2)-(rt0.c1))))) OVER () FROM rt0, v0 WHERE ((((('141105588') NOT BETWEEN ('0.6773922377344198') AND (x'')))==((((((((('-2045884227')AND(NULL)))AND('䊻>')))OR(NULL)))OR(NULL))))); -- 0ms;
SELECT ALL (~ (((-8.75658907E8)*('-532894008')))) FROM rt0, vt0; -- 0ms;
SELECT DISTINCT (TRIM(DISTINCT 930259310, rt0.c0) IN (((((vt0.c1)AND(rt0.c2)))OR(rt0.c2)))) FROM vt0, rt0; -- 0ms;
SELECT DISTINCT (((CASE WHEN v0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN rt0.c1 THEN v0.c0 ELSE rt0.c0 END, (+ (rt0.c1)), NULL))!=((MIN(rt0.c2), CAST(v0.c0 AS BLOB), ((rt0.c1)AND('-1024781839'))))) FROM vt0, rt0 INNER JOIN v0 ON CASE 0.6215925461856543  WHEN ((NULL) BETWEEN (vt0.c0) AND (vt0.c1)) THEN (- (v0.c0)) ELSE ((rt0.c1) IS TRUE) END WHERE (CAST('7' AS REAL) COLLATE BINARY) GROUP BY ((',M\n') NOT BETWEEN (rt0.c0) AND (rt0.c1)) COLLATE RTRIM HAVING ((((vt0.c1)IS NOT(rt0.c1))) NOT NULL); -- 0ms;
SELECT DISTINCT TOTAL((NOT (rt0.c2))) OVER () FROM v0, vt0 NOT INDEXED WHERE (CAST((((0X4e4c0b11)) BETWEEN ((NULL)) AND ((0.1569908511089253))) AS TEXT)) GROUP BY x'', (((vt0.c1 IN ())) NOT BETWEEN ('-1928053259' COLLATE NOCASE) AND ((- (NULL)))), ((vt0.c1)%(((NULL) IS FALSE)));SELECT ALL ((rt0.c0 COLLATE RTRIM)<=(((((((((rt0.c2)AND(v0.c0)))OR(v0.c0)))AND(vt0.c1)))AND(v0.c0)))) FROM rt0, vt0 WHERE ((((NULL, NULL, 0x2f35ed05)) BETWEEN (((('J\쬵x5')<=(-1987124150)), ('0.45296694923554015' IN ()), (('')>('#Mo,06&\r')))) AND ((0.8240207984302003 COLLATE NOCASE, (~ (0xffffffffb9888e4d)), ((x'') IS FALSE)))));SELECT ALL GROUP_CONCAT(((rt0.c1) NOTNULL)) OVER () FROM rt0, vt0, v0 WHERE ((+ ('')) COLLATE BINARY); -- 0ms;
SELECT DISTINCT AVG((vt0.c0 IN (rt0.c2))) OVER () FROM vt0 WHERE (CAST(((((NULL)OR(NULL)))AND(x'')) AS REAL)) GROUP BY '-2145568929';SELECT CASE WHEN UPPER(vt0.c0) THEN ((vt0.c0)<>(rt0.c1)) WHEN ((rt0.c1) BETWEEN (vt0.c1) AND (rt0.c1)) THEN ((rt0.c1)>=(vt0.c0)) WHEN CAST(vt0.c1 AS NUMERIC) THEN (((NULL)) BETWEEN ((v0.c0)) AND ((rt0.c0))) END, (((NULL) IS FALSE) IN (((rt0.c2) BETWEEN (rt0.c0) AND (rt0.c1)))), CAST(SQLITE_COMPILEOPTION_GET(vt0.c1) AS NUMERIC) FROM v0 WHERE (888013354);SELECT ALL '-1780124153' FROM rt0 WHERE (0.07868124474788063); -- 0ms;
SELECT DISTINCT CASE COUNT(rt0.c0)  WHEN ((x'')<<(vt0.c0)) THEN (((rt0.c0))<=((vt0.c1))) END FROM v0, vt0 CROSS JOIN rt0 ON (+ (vt0.c0)) WHERE (IFNULL('', CASE WHEN 0x2db8a7b3 THEN 0.9085067263251068 ELSE NULL END)) ORDER BY (((vt0.c1)) NOT BETWEEN (((+ (',M\n')))) AND ((((((vt0.c0)OR(rt0.c2)))OR(vt0.c0))))) ASC  NULLS FIRST; -- 0ms;
SELECT DISTINCT CASE vt0.c1  WHEN (v0.c0 IN (rt0.c1)) THEN 0.21141475921389485 END FROM vt0;SELECT COUNT(NULL) FROM v0 WHERE ((((- (0x3f7e4f68))) NOT BETWEEN ((('みD') BETWEEN (NULL) AND ('1870522385'))) AND ((0.5223978240412122 IN ())))) LIMIT -90162507 OFFSET -648859134; -- 0ms;
SELECT DISTINCT CAST(CASE WHEN rt0.c2 THEN vt0.c1 ELSE rt0.c1 END AS INTEGER) FROM vt0;SELECT ALL NULL, (((CAST(vt0.c0 AS NUMERIC)))>((((((v0.c0)OR(vt0.c1)))OR(vt0.c0))))), ((rt0.c2)<=(vt0.c1)) COLLATE NOCASE FROM rt0, v0 WHERE (DATE(NULL COLLATE BINARY, (0xffffffffa3c52d16 IN ()), ((((x'')OR('152244486')))OR(NULL))));SELECT (((((((vt0.c0)) BETWEEN ((rt0.c0)) AND ((vt0.c1))))AND(((rt0.c0)LIKE(rt0.c1)))))AND(rt0.c0)), LAST_VALUE((((((v0.c0)) BETWEEN ((NULL)) AND ((v0.c0)))) BETWEEN ((NOT (v0.c0))) AND (CAST(v0.c0 AS BLOB)))) OVER ( ROWS BETWEEN (NOT (((rt0.c1)>(v0.c0)))) PRECEDING AND CAST(CASE WHEN rt0.c1 THEN rt0.c0 END AS INTEGER) FOLLOWING EXCLUDE CURRENT ROW), ((((vt0.c1) NOTNULL))+(((vt0.c0) BETWEEN (rt0.c1) AND (rt0.c2)))) FROM v0 WHERE (-1334224477);SELECT ALL CASE LIKELY(DISTINCT vt0.c1)  WHEN 0Xffffffffe502f00c THEN ((rt0.c2)<>(rt0.c2)) ELSE ((vt0.c0) NOT BETWEEN (v0.c0) AND (vt0.c0)) END FROM rt0 LEFT OUTER JOIN vt0 ON CASE WHEN vt0.c0 THEN ((rt0.c1)+(rt0.c0)) WHEN UNLIKELY(DISTINCT '562883382') THEN CASE rt0.c1  WHEN rt0.c1 THEN rt0.c1 WHEN v0.c0 THEN rt0.c2 WHEN rt0.c1 THEN rt0.c1 END WHEN (rt0.c1 IN (vt0.c1)) THEN 0.9928501345792465 COLLATE RTRIM ELSE ((rt0.c2)==(v0.c0)) END FULL OUTER JOIN v0 ON (CASE rt0.c2  WHEN v0.c0 THEN v0.c0 END IN (((x'')+(vt0.c0))));SELECT ALL ((((((vt0.c1)OR('-1740189042')))AND(rt0.c1)))<<(((rt0.c2)&(vt0.c1)))) FROM vt0 WHERE ((((NULL)) NOT BETWEEN (((NOT (-1488114901)))) AND ((x''))));SELECT LIKELIHOOD(DISTINCT CASE v0.c0  WHEN v0.c0 THEN v0.c0 END, 0.06001936268406505) FROM vt0 WHERE (((CASE WHEN 0.737293835500319 THEN NULL ELSE '' END) NOT BETWEEN (((NULL) ISNULL)) AND ((~ ('')))));SELECT DISTINCT ((vt0.c0 COLLATE BINARY)>((~ (vt0.c1)))), ((rt0.c0 COLLATE NOCASE)==(vt0.c0 COLLATE RTRIM)), (('-248633072')%(rt0.c2)) FROM v0 ORDER BY (rt0.c1 IN ()) COLLATE BINARY  NULLS FIRST, ((((NULL))<((rt0.c2))) IN (((((((((rt0.c1)OR(v0.c0)))OR(v0.c0)))AND(rt0.c2)))OR(rt0.c2)), '1678062827'))  NULLS FIRST;SELECT DISTINCT x'' FROM v0 WHERE (0.5561416633630571); -- 0ms;
SELECT DISTINCT NTILE(NULLIF(0Xffffffffe8ced996, 1954134849)) OVER (), CAST(CASE vt0.c0  WHEN v0.c0 THEN 1.6266244E7 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c2 THEN rt0.c1 END AS NUMERIC), ((('1826226160'))>((TRIM(rt0.c2, NULL)))) FROM rt0, v0, vt0 WHERE (CAST(((NULL)IS('1453144899')) AS TEXT)); -- 0ms;
SELECT DISTINCT CASE WHEN rt0.c0 COLLATE NOCASE THEN ((vt0.c0)AND(rt0.c1)) ELSE CAST(rt0.c2 AS REAL) END FROM rt0;SELECT ((((((((((v0.c0) NOTNULL))AND(((rt0.c0)*(rt0.c1)))))AND(v0.c0)))AND((vt0.c0 IN ()))))OR(((NULL) ISNULL))) FROM vt0, v0; -- 0ms;
SELECT DISTINCT SUM(v0.c0 COLLATE RTRIM) COLLATE RTRIM, (((CAST(rt0.c0 AS NUMERIC)))>=((((v0.c0)<>(vt0.c1))))), ((rt0.c1 COLLATE RTRIM)=(((rt0.c2) NOT NULL))) FROM v0;SELECT DISTINCT ((CASE vt0.c1  WHEN vt0.c0 THEN rt0.c0 WHEN vt0.c1 THEN '1572933526' WHEN 0.7012067068915808 THEN vt0.c0 ELSE rt0.c1 END)OR((- (x'')))) FROM v0, vt0, rt0; -- 0ms;
SELECT ALL ((((((rt0.c2)<(NULL)))AND(((rt0.c0) NOTNULL))))OR((('564242259')<=(vt0.c1)))) FROM rt0, v0, vt0; -- 1ms;
SELECT DISTINCT SQLITE_SOURCE_ID() FROM vt0 WHERE (CAST((('')&(NULL)) AS INTEGER)) GROUP BY (-1346259952 IN ()) COLLATE NOCASE; -- 0ms;
SELECT DISTINCT CAST(((v0.c0)>=(vt0.c1)) AS INTEGER), (- (((((rt0.c0)AND(0.34890879422257937)))OR(vt0.c1)))), (((('') NOT BETWEEN (vt0.c0) AND (rt0.c1)))=(((((vt0.c1)AND(rt0.c0)))OR(vt0.c1)))) FROM rt0, vt0 LIMIT 1930557252 OFFSET 2123027160;SELECT ALL ((((((x'') NOT BETWEEN (rt0.c2) AND (v0.c0)))OR(CASE WHEN rt0.c2 THEN vt0.c0 WHEN rt0.c2 THEN vt0.c1 WHEN rt0.c2 THEN rt0.c1 END)))AND('pu')), rt0.c1, v0.c0 FROM v0;SELECT DISTINCT (CAST(rt0.c1 AS BLOB) IN ()) FROM vt0, v0 WHERE (((((0.2647719794581529) IS FALSE))>=(0.9997798571604298 COLLATE BINARY))) LIMIT -2000788221; -- 0ms;
SELECT (((rt0.c0)) NOT BETWEEN ((CAST(v0.c0 AS TEXT))) AND ((((vt0.c1)GLOB(rt0.c0))))), (((0.7362041776782787)) BETWEEN ((('467593739' IN (v0.c0)))) AND ((((rt0.c0)GLOB('0.021099293260491536'))))), ((vt0.c1)%(rt0.c1)) COLLATE NOCASE FROM v0 INNER JOIN rt0 ON CASE WHEN ((vt0.c0) NOT BETWEEN (rt0.c0) AND (vt0.c0)) THEN ((0.40499073440302513)&(rt0.c2)) ELSE ((vt0.c1)IS('-1092545923')) END WHERE ('lz)-');SELECT DISTINCT ((((v0.c0)>=(rt0.c2)))<>((((rt0.c1)) NOT BETWEEN ((v0.c0)) AND ((v0.c0))))) FROM vt0 WHERE (CASE ((NULL) NOT NULL)  WHEN (~ (NULL)) THEN (('-1928053259') NOT BETWEEN ('rX') AND (0.9408392378397148)) WHEN ((x'') BETWEEN (0.6872416020653398) AND ('')) THEN x'' WHEN CASE WHEN 0.17452020638803967 THEN NULL ELSE x'71e7' END THEN ((x'')!=(x'')) ELSE (0.30925038072310007 IN ()) END) GROUP BY ((CASE WHEN NULL THEN rt0.c2 WHEN rt0.c2 THEN rt0.c1 WHEN rt0.c0 THEN vt0.c1 WHEN rt0.c2 THEN v0.c0 WHEN vt0.c0 THEN vt0.c1 END)>((NOT (rt0.c1)))), ((((rt0.c0) IS FALSE))<(vt0.c0)), (((((vt0.c0))>=((v0.c0))))/(401703571));SELECT ALL v0.c0 FROM vt0, rt0;SELECT (((((rt0.c2, vt0.c1, rt0.c0))<=((NULL, rt0.c1, vt0.c0))))>(((vt0.c1)>>(x'')))) FROM vt0 GROUP BY ((((rt0.c0)==(vt0.c0)))||(((v0.c0) IS FALSE))) ORDER BY (((vt0.c0 IN ())) NOT BETWEEN (CAST(rt0.c1 AS REAL)) AND ((NOT (rt0.c2)))) ASC, x'';SELECT DISTINCT CASE WHEN ((rt0.c1) NOT BETWEEN (vt0.c0) AND (rt0.c2)) THEN v0.c0 END FROM vt0, v0 WHERE ((((x'')<('1021213437')) IN (('m-ACmz}y' IN ('1739931897')))));SELECT DISTINCT x'' FROM rt0, vt0, v0 LIMIT -710000634 OFFSET -708214711; -- 0ms;
SELECT DISTINCT STRFTIME((((rt0.c0, rt0.c0, 0.4068397416595272))==((rt0.c2, v0.c0, rt0.c2))), rt0.c0, CASE rt0.c0  WHEN vt0.c0 THEN vt0.c1 END, ((((vt0.c1)AND(rt0.c1)))OR(rt0.c2)), 0.641125604892157) FROM rt0, vt0 WHERE (CASE CASE WHEN 0.33415907547010526 THEN 0.9060789013472319 END  WHEN (('')GLOB(NULL)) THEN (('1643597257')GLOB('0.5874344336859694')) WHEN (~ ('jL')) THEN ((NULL) NOT NULL) WHEN NULL THEN ((NULL)+(-375627405)) ELSE ((0.05433024520243723)>('-867747303')) END) LIMIT -1618542355;SELECT ((CASE WHEN rt0.c0 THEN vt0.c0 END) IS TRUE) FROM vt0, rt0 WHERE (0.5410006195271364) LIMIT -139428682; -- 0ms;
SELECT DISTINCT ((((rt0.c1)||(vt0.c1)))>(CASE WHEN NULL THEN rt0.c0 WHEN rt0.c0 THEN rt0.c2 WHEN vt0.c0 THEN 1.295120072E9 ELSE vt0.c0 END)), vt0.c1 COLLATE BINARY COLLATE NOCASE, CAST(UPPER(rt0.c1) AS NUMERIC) FROM vt0 GROUP BY '' HAVING ((SUM(vt0.c0))>((((x'9342', '뱼U7X咖UO?K', v0.c0)) BETWEEN ((rt0.c2, rt0.c1, rt0.c0)) AND ((NULL, vt0.c0, rt0.c2))))) ORDER BY (- (v0.c0)) COLLATE RTRIM DESC;SELECT DISTINCT (+ (((((rt0.c1)AND(rt0.c1)))OR(rt0.c1)))) FROM vt0, rt0 WHERE ((CAST(1647227107 AS INTEGER) IN ((~ (-1.742460816E9))))); -- 0ms;
SELECT ((highlight(v0.c0, vt0.c1, vt0.c1, rt0.c0)) BETWEEN (SUM(v0.c0)) AND (rt0.c0)), LEAD((((((((v0.c0)) BETWEEN ((NULL)) AND ((rt0.c2))))OR(((NULL) IS FALSE))))OR(((vt0.c1)&(rt0.c0)))), ((vt0.c0 COLLATE BINARY)<=((NOT (rt0.c0)))), (NOT (vt0.c1)) COLLATE NOCASE) OVER (), TOTAL(((((((((rt0.c0)OR(rt0.c1)))OR(rt0.c2)))AND(vt0.c1)))AND(rt0.c2))) OVER () FROM v0, rt0, vt0;SELECT ALL ((v0.c0) IS TRUE), (((vt0.c1)) NOT BETWEEN (((((vt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((rt0.c1))))) AND (((NOT (x''))))), ((((((((((((TRIM(NULL))AND(vt0.c1)))AND(((v0.c0)IS(rt0.c0)))))OR('195416102')))AND(((((rt0.c1)AND(rt0.c2)))OR(vt0.c1)))))OR(((v0.c0) NOTNULL))))OR(((((rt0.c0)OR(x'')))OR(-8.75658907E8)))) FROM vt0, v0 WHERE (((CAST(NULL AS NUMERIC))%((('711098244') BETWEEN ('-13635761') AND (x'')))));SELECT DISTINCT v0.c0, (((((v0.c0) NOTNULL)))=((UNLIKELY(v0.c0)))), 'sf*7G\+.' FROM v0, vt0, rt0 WHERE (((CASE WHEN '䊻>' THEN 0.7891206334193458 WHEN 0.6536741903176627 THEN 'wUz*T' WHEN 0.7557497117584658 THEN x'' END) IS TRUE)); -- 0ms;
SELECT DISTINCT SUM((rt0.c1 IN ()) COLLATE BINARY) OVER (), CAST(rt0.c0 COLLATE NOCASE AS TEXT), NTILE(load_extension(CAST(rt0.c1 AS NUMERIC))) OVER ( ORDER BY ((('芓~XF' IN ())) BETWEEN (((v0.c0) NOT NULL)) AND (NULL COLLATE BINARY))  NULLS FIRST) FROM rt0, vt0, v0 WHERE (((((((NULL)OR(NULL)))OR(NULL))) NOT NULL)); -- 1ms;
SELECT DISTINCT ((((vt0.c0)>(x''))) NOT BETWEEN (CAST(vt0.c0 AS REAL)) AND ((+ (v0.c0)))), ((vt0.c1) IS FALSE), ((CAST(vt0.c0 AS NUMERIC)) NOT NULL) FROM rt0;SELECT DISTINCT LOWER(((rt0.c0) NOT BETWEEN (rt0.c2) AND (v0.c0))) FROM v0, rt0 WHERE ((+ (((x'8359')==('-1303933587'))))) LIMIT -474822765 OFFSET 729098594; -- 0ms;
SELECT ALL ((rt0.c1 COLLATE BINARY)!=(CAST(v0.c0 AS BLOB))) FROM rt0 WHERE (CAST(CASE 0.6852011146447508  WHEN x'b189' THEN 0.038094015046184926 END AS INTEGER));SELECT DISTINCT CASE ((v0.c0)GLOB(vt0.c0))  WHEN ((rt0.c2)>=('')) THEN CASE rt0.c1  WHEN vt0.c1 THEN vt0.c0 WHEN rt0.c0 THEN rt0.c1 WHEN NULL THEN vt0.c1 ELSE rt0.c0 END WHEN (((rt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((rt0.c2))) THEN (rt0.c1 IN ()) WHEN ((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c1)) THEN CAST(rt0.c1 AS REAL) END FROM v0, vt0 WHERE ((('gFX	&}D25')GLOB('')) COLLATE BINARY) ORDER BY vt0.c1 ASC, (((vt0.c1, 1767581287, ((v0.c0)>(rt0.c2))))<((((vt0.c1)GLOB(rt0.c0)), ((rt0.c1) IS FALSE), (rt0.c2 IN (rt0.c0)))));SELECT ALL (((v0.c0 IN (rt0.c1)))AND(((v0.c0) NOT BETWEEN (vt0.c1) AND (rt0.c1)))), TOTAL(((v0.c0)AND(v0.c0))) FILTER(WHERE CAST(((vt0.c1)||(rt0.c0)) AS NUMERIC)) OVER (), rt0.c2 FROM v0 FULL OUTER JOIN rt0 ON ((((((((CASE WHEN vt0.c0 THEN rt0.c2 WHEN vt0.c1 THEN rt0.c2 WHEN rt0.c2 THEN rt0.c2 END)AND((NOT (vt0.c0)))))AND(CASE WHEN rt0.c1 THEN vt0.c0 END)))AND(((('\**w''P0v^'))>((NULL))))))OR(vt0.c0)) WHERE (CAST((x'' IN ()) AS TEXT));SELECT MAX((rt0.c2 IN (rt0.c2, v0.c0)), x'' COLLATE RTRIM), SQLITE_COMPILEOPTION_GET((~ (vt0.c1))), ((((0.5058312319719526) BETWEEN (vt0.c0) AND (rt0.c2)))LIKE(NULLIF(v0.c0, vt0.c1))) FROM v0, rt0, vt0; -- 0ms;
SELECT ((rt0.c0 COLLATE BINARY)+((rt0.c1 IN ()))), NTH_VALUE(LIKELIHOOD(DISTINCT rt0.c1, 0.39281328026951956), (((CAST(0X1069509b AS BLOB), ((((rt0.c2)OR(rt0.c1)))OR(x'5094')), load_extension(rt0.c1, rt0.c0)))==((((0X7eb083e7)<<(rt0.c1)), ((((x'')OR(v0.c0)))AND('0.9046877008430088')), ((((rt0.c1)OR(rt0.c0)))OR(vt0.c1)))))) OVER ( ORDER BY (((((rt0.c2 IN ()))OR(((((rt0.c1)AND(vt0.c1)))OR(vt0.c1)))))AND(((vt0.c0)<<(rt0.c0))))  NULLS LAST, CAST(LIKE(rt0.c1, v0.c0) AS REAL), 0.03933041034543605), SUM(((rt0.c1)<=(rt0.c0))) OVER () FROM rt0, v0, vt0 WHERE (((('') IS FALSE) IN ())); -- 1ms;
SELECT DISTINCT json_remove(CAST('-546557973' AS NUMERIC), CASE rt0.c0  WHEN v0.c0 THEN rt0.c0 END), ((rt0.c0 COLLATE NOCASE)==(ABS(rt0.c0))), CASE ((rt0.c2)==(rt0.c1))  WHEN ((rt0.c2) NOT NULL) THEN CAST(rt0.c2 AS BLOB) ELSE rt0.c0 COLLATE NOCASE END FROM rt0 ORDER BY (((vt0.c0)) NOT BETWEEN ((((vt0.c1) NOT NULL))) AND (((+ (rt0.c2))))) DESC  NULLS LAST;SELECT DISTINCT COUNT(*) OVER ( ORDER BY (((rt0.c2)GLOB(v0.c0)) IN ())) FROM rt0, v0, vt0; -- 0ms;
SELECT ALL TOTAL(CASE WHEN rt0.c1 THEN '' ELSE v0.c0 END) OVER (), CASE WHEN (((v0.c0)) BETWEEN ((rt0.c0)) AND ((rt0.c1))) THEN ((vt0.c1)IS NOT(rt0.c1)) END, ((((rt0.c1 COLLATE BINARY)OR(((((vt0.c0)OR(rt0.c2)))AND(vt0.c1)))))OR(((rt0.c0)<=(vt0.c1)))) FROM vt0;SELECT (((- (rt0.c1))) BETWEEN (((((((((((((v0.c0)AND(rt0.c0)))OR(rt0.c1)))AND(rt0.c1)))OR(rt0.c0)))OR(rt0.c0)))AND(vt0.c1))) AND (((vt0.c0)*(rt0.c0)))) FROM vt0 WHERE (((CAST(1.7976931348623157E308 AS BLOB)) IS FALSE));SELECT ALL (((((((rt0.c1, rt0.c2, rt0.c2))>((vt0.c0, rt0.c1, rt0.c0))))OR(json(NULL))))OR(((vt0.c0)<(rt0.c1)))), CASE rt0.c1  WHEN v0.c0 THEN rt0.c0 ELSE v0.c0 END COLLATE NOCASE, GROUP_CONCAT(((rt0.c1) BETWEEN (rt0.c1) AND (v0.c0))) OVER () FROM v0, rt0;SELECT ALL ((((((rt0.c2)OR(vt0.c0)))OR(vt0.c0))) IS FALSE) FROM v0 WHERE (CAST(((((0.028789037336756973)AND(x'922be170')))OR('K3')) AS TEXT));SELECT DISTINCT (((v0.c0))<=((((vt0.c1)<>(rt0.c1))))) FROM rt0, vt0 WHERE (CASE WHEN CAST(0.587826913707589 AS NUMERIC) THEN ((-1987670173) NOT BETWEEN (0.11723925343707209) AND (-1883279942)) ELSE (+ (0.047341472780075944)) END) GROUP BY ((UPPER(v0.c0))=(((((((((rt0.c2)AND(rt0.c1)))OR(rt0.c1)))AND(vt0.c0)))OR(rt0.c1))));SELECT DISTINCT (x'' IN ()) FROM rt0 LIMIT -1410226383; -- 0ms;
SELECT DISTINCT 0.9126676124869625, COUNT(*) COLLATE NOCASE, ((((vt0.c0) IS TRUE)) NOTNULL) FROM rt0 WHERE (HEX((('438621477') NOT NULL))) GROUP BY CAST(ABS(DISTINCT vt0.c0) AS NUMERIC), 7.27420208E8 COLLATE BINARY, (- ((((rt0.c2))<((v0.c0))))) HAVING UNLIKELY(rt0.c2);SELECT rt0.c0, ((rt0.c2) NOT NULL) COLLATE BINARY, rt0.c2 COLLATE NOCASE FROM rt0, v0, vt0; -- 0ms;
SELECT ALL (((rt0.c1, 0.2923209009248653, vt0.c1)) NOT BETWEEN (((((rt0.c2))<=((vt0.c0))), x'', ((rt0.c2) NOT BETWEEN (vt0.c1) AND (rt0.c1)))) AND ((((((v0.c0)AND(rt0.c2)))AND(vt0.c1)), ((v0.c0) ISNULL), 0.3992402872801727))) FROM v0 ORDER BY ((vt0.c0 COLLATE NOCASE) IS TRUE) ASC;SELECT DISTINCT ((CASE vt0.c0  WHEN x'' THEN rt0.c2 ELSE vt0.c0 END)<>(((vt0.c1)+(rt0.c0)))) FROM vt0;SELECT DISTINCT CASE WHEN vt0.c1 THEN ((rt0.c0) IS FALSE) WHEN ((v0.c0) IS FALSE) THEN ((vt0.c1)IS NOT(v0.c0)) WHEN (rt0.c0 IN (vt0.c1)) THEN CASE rt0.c1  WHEN vt0.c0 THEN rt0.c1 WHEN rt0.c1 THEN rt0.c2 WHEN v0.c0 THEN rt0.c1 END END, (- (rtreenode(rt0.c1, rt0.c2))), (((v0.c0 IN ())) NOT BETWEEN (json_type(rt0.c2)) AND (rt0.c0 COLLATE NOCASE)) FROM vt0;SELECT ALL CASE rt0.c0  WHEN HEX(v0.c0) THEN ((rt0.c2)LIKE(vt0.c0)) END, COUNT(((rt0.c1) BETWEEN (rt0.c2) AND (rt0.c2))) OVER (), CASE vt0.c1  WHEN rt0.c1 THEN rt0.c0 WHEN vt0.c0 THEN vt0.c1 WHEN v0.c0 THEN rt0.c1 END COLLATE NOCASE FROM vt0 WHERE (((CASE NULL  WHEN '-1906222843' THEN x'' END) IS TRUE));SELECT ALL (~ (rt0.c1)) COLLATE BINARY FROM rt0, v0 WHERE ((((4.84897029E8)) BETWEEN ((4.23426019E8 COLLATE NOCASE)) AND ((x'a836')))); -- 0ms;
SELECT DISTINCT NULL FROM v0, rt0 WHERE ((((('-919742625')==(NULL)))IS(CAST(NULL AS INTEGER)))); -- 0ms;
SELECT DISTINCT CASE WHEN vt0.c1 THEN v0.c0 ELSE v0.c0 END COLLATE BINARY, ((((CASE WHEN vt0.c0 THEN rt0.c0 WHEN 0.9637116947522146 THEN rt0.c1 WHEN vt0.c1 THEN vt0.c1 END)OR(((vt0.c0) ISNULL))))AND(((vt0.c0) BETWEEN (rt0.c2) AND (v0.c0)))), (+ (rt0.c2 COLLATE RTRIM)) FROM v0;SELECT DISTINCT ((((((rt0.c1)AND(vt0.c1)))OR(vt0.c0))) NOT BETWEEN ((((rt0.c1, rt0.c0, rt0.c1))!=((v0.c0, rt0.c1, rt0.c2)))) AND ((((v0.c0)) BETWEEN ((vt0.c1)) AND ((vt0.c0))))), LAST_VALUE(((((((((((((((((((((rt0.c1)AND(v0.c0)))OR(rt0.c1)))AND(0x6debefd5)))AND(rt0.c1)))AND((((rt0.c1))>=(('r,'))))))AND((((rt0.c2))>((vt0.c1))))))AND(CAST(v0.c0 AS NUMERIC))))AND(CASE rt0.c1  WHEN v0.c0 THEN rt0.c1 ELSE rt0.c2 END)))AND(CASE rt0.c1  WHEN rt0.c0 THEN v0.c0 ELSE rt0.c2 END)))AND(CASE vt0.c1  WHEN rt0.c2 THEN vt0.c0 ELSE rt0.c2 END))) OVER (), MIN(((rt0.c1)&(rt0.c1))), rt0.c0, CAST(COUNT(vt0.c0) AS NUMERIC) FROM v0, rt0, vt0 GROUP BY (((v0.c0, rt0.c0, rt0.c1)) BETWEEN ((((v0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c2)), ((vt0.c1)IS NOT(vt0.c0)), ((vt0.c1)IS(rt0.c1)))) AND (((~ (rt0.c0)), ((((((((-2026080078)AND(rt0.c2)))AND(rt0.c2)))AND(rt0.c1)))OR(vt0.c0)), ((vt0.c1) IS FALSE)))) HAVING TOTAL(((rt0.c2)==(v0.c0))); -- 0ms;
SELECT DISTINCT rt0.c2 FROM v0, rt0 LIMIT 1841030792; -- 1ms;
SELECT DISTINCT CASE (rt0.c1 IN (0xffffffff8fe67296))  WHEN ((((vt0.c0)OR(rt0.c1)))AND(rt0.c0)) THEN GROUP_CONCAT(0.0644987292207525) END, MAX(((rt0.c0) NOTNULL), GROUP_CONCAT(NULL), (- (vt0.c0)), TRIM(rt0.c0, '''hIVC')), ((0.24931286696103327) NOT BETWEEN (NULL) AND (CASE vt0.c1  WHEN rt0.c1 THEN x'' WHEN '278869215' THEN rt0.c2 WHEN v0.c0 THEN vt0.c1 ELSE 0.21172968470514297 END)) FROM rt0, v0, vt0; -- 0ms;
SELECT v0.c0, ((((rt0.c1)<(rt0.c2))) ISNULL), vt0.c1 FROM vt0, rt0;SELECT DISTINCT ROW_NUMBER() OVER ( ORDER BY (((v0.c0 IN ()))LIKE(((v0.c0)OR(rt0.c0)))) ASC) FROM vt0, v0;SELECT ALL ((CAST(v0.c0 AS NUMERIC)) NOT BETWEEN (0.14862349303438915) AND (((vt0.c1) NOT BETWEEN (rt0.c0) AND (x'')))), LAG(CAST(CAST(vt0.c0 AS REAL) AS TEXT), ((CAST(vt0.c1 AS REAL))==(((((((((v0.c0)OR(vt0.c1)))AND(v0.c0)))OR(vt0.c0)))AND(vt0.c1)))), json_array_length(CAST(vt0.c0 AS INTEGER))) OVER (), NULLIF(DISTINCT 'sm?', ((rt0.c1) ISNULL)) FROM v0, vt0 WHERE (MAX((((('-522954722')AND(NULL)))OR('')), CASE NULL  WHEN NULL THEN 0Xffffffffe55e7199 END));SELECT DISTINCT ((((vt0.c0) NOTNULL))IS NOT((((((((((((('tYJ')AND(vt0.c0)))AND(rt0.c0)))AND(rt0.c1)))AND(rt0.c2)))AND(v0.c0)))OR(rt0.c1)))) FROM vt0 INNER JOIN rt0 ON rt0.c1;SELECT DISTINCT highlight(NULL COLLATE BINARY, ((vt0.c1)IS NOT(v0.c0)), rt0.c0 COLLATE RTRIM, ((vt0.c0)OR(rt0.c2))), ((((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c1))) NOT BETWEEN (vt0.c1) AND (CAST(vt0.c0 AS REAL))), COUNT(((rt0.c1)GLOB(vt0.c0))) OVER () FROM vt0, v0, rt0; -- 0ms;
SELECT v0.c0 FROM rt0 LIMIT 305709770 OFFSET -158513708;SELECT CAST(((rt0.c2)>>(v0.c0)) AS NUMERIC) FROM rt0, v0; -- 0ms;
SELECT ALL v0.c0 FROM rt0;SELECT DISTINCT (+ ((((vt0.c0, v0.c0, vt0.c0))=((vt0.c1, rt0.c0, rt0.c1))))) FROM v0;SELECT DISTINCT ((((NOT (vt0.c0))))==((5.13576678E8))) FROM rt0 ORDER BY 1.6266244E7, ((TRIM(DISTINCT rt0.c0))>((- (NULL))));SELECT DISTINCT CAST(CAST(rt0.c0 AS INTEGER) AS BLOB) FROM vt0, rt0 ORDER BY (~ (((rt0.c0) BETWEEN (v0.c0) AND (vt0.c1)))) DESC  NULLS LAST;SELECT DISTINCT ((GROUP_CONCAT(v0.c0)) NOTNULL) FROM rt0, v0 WHERE (CAST((- (NULL)) AS INTEGER)) ORDER BY ((((v0.c0) ISNULL)) ISNULL) DESC  NULLS LAST, (rt0.c0 IN ()) COLLATE BINARY DESC, 0xffffffffa35b9edd; -- 0ms;
SELECT (LTRIM(x'') IN ((((rt0.c2))=((rt0.c0))), ((rt0.c1)||(vt0.c0)))) FROM vt0, v0, rt0 WHERE ((((((NULL)) NOT BETWEEN ((0.28774374771012934)) AND ((8.72848029E8))))||(CAST('A' AS TEXT)))); -- 0ms;
SELECT DISTINCT LIKE(0.7557497117584658, ((rt0.c0) NOT BETWEEN (v0.c0) AND (v0.c0))) FROM rt0, vt0;SELECT ALL ((((rt0.c2) NOT NULL)) IS TRUE) FROM vt0, rt0; -- 0ms;
SELECT ALL LOWER(((rt0.c1)GLOB(rt0.c1))) FROM rt0, vt0, v0; -- 0ms;
SELECT DISTINCT (((((vt0.c1, rt0.c2, rt0.c2))<>((rt0.c2, rt0.c2, vt0.c1)))) BETWEEN (((vt0.c1)>=(x''))) AND (AVG(vt0.c1))) FROM vt0, rt0 WHERE (CASE WHEN ((NULL)AND(x'')) THEN (((0X6c3183d6))>=(('-485173901'))) END) LIMIT 853623103; -- 1ms;
SELECT DISTINCT x'' FROM v0, rt0, vt0 WHERE (((((0.08182809942805491)) BETWEEN (('5G?}|')) AND ((0.6328574818683902))) IN (((NULL)+(0.6084916376090569))))); -- 0ms;
SELECT DISTINCT '-473488776' COLLATE NOCASE FROM v0, rt0, vt0 WHERE ((((- (0.4234427760447077)))IS NOT((-1.3635761E7 IN ())))); -- 0ms;
SELECT ((NULL)OR(rt0.c1)), (vt0.c1 IN ()) COLLATE NOCASE, (((('735003323')OR((- (rt0.c2)))))OR(rt0.c0 COLLATE BINARY)) FROM rt0; -- 0ms;
SELECT DISTINCT (((((rt0.c0)IS NOT(v0.c0)), ((vt0.c0)<=(v0.c0)), json_valid(v0.c0)))<>((((v0.c0) BETWEEN (rt0.c1) AND (vt0.c1)), CASE vt0.c0  WHEN vt0.c1 THEN v0.c0 WHEN vt0.c1 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 ELSE rt0.c0 END, vt0.c0 COLLATE BINARY))) FROM vt0 ORDER BY '*' DESC;SELECT ((((((((CAST(rt0.c1 AS BLOB))AND(((((((((rt0.c2)AND(rt0.c2)))OR(vt0.c1)))OR(vt0.c0)))AND(rt0.c0)))))AND(0X1ab8f992)))AND(((rt0.c1)AND(NULL)))))OR(CASE 0.40693601983422134  WHEN rt0.c2 THEN rt0.c0 END)) FROM v0 WHERE ((((+ ('')))/(CASE WHEN '1379288531' THEN '0.8318981760935286' WHEN x'' THEN 0.08111023898409031 WHEN NULL THEN x'' ELSE NULL END)));SELECT ALL (NOT (((NULL) IS TRUE))) FROM vt0 WHERE (CASE WHEN (NOT (0xffffffffe4d99685)) THEN ((((NULL)AND(x'')))AND('')) ELSE COALESCE(0.9343535559762204, 1256315512, NULL, x'') END) ORDER BY (~ (((rt0.c2) IS FALSE)))  NULLS LAST;SELECT ALL x'' FROM vt0 WHERE (',X\nn7'); -- 0ms;
SELECT ALL 0xffffffff8322841d FROM rt0, vt0; -- 0ms;
SELECT CAST(NULLIF(rt0.c0, v0.c0) AS TEXT) FROM v0 WHERE (('-13635761' IN ((('-435192963') ISNULL))));SELECT (((CAST(rt0.c0 AS INTEGER)))<>(((- (rt0.c1))))) FROM vt0, v0 GROUP BY ((CASE rt0.c0  WHEN v0.c0 THEN rt0.c0 WHEN rt0.c0 THEN vt0.c1 WHEN v0.c0 THEN vt0.c0 END) NOT BETWEEN (rt0.c0 COLLATE NOCASE) AND (v0.c0)) HAVING ((GROUP_CONCAT(vt0.c0)) NOTNULL);SELECT DISTINCT CAST(((rt0.c2)/(rt0.c0)) AS INTEGER) FROM vt0, v0, rt0; -- 1ms;
SELECT DISTINCT (((((rt0.c0)>>(rt0.c1)), HEX(DISTINCT vt0.c1), CASE rt0.c1  WHEN v0.c0 THEN vt0.c0 ELSE vt0.c1 END))<((((vt0.c0)&(rt0.c0)), CAST(rt0.c0 AS TEXT), ((vt0.c1)=(rt0.c2))))) FROM v0 LIMIT -1400017707 OFFSET 604921206;SELECT vt0.c0 FROM v0;SELECT ALL (((('3vBrEJJYv')LIKE(vt0.c1))) NOTNULL) FROM vt0 WHERE (((NULL) NOT BETWEEN (((0.17489132431553334)-(NULL))) AND (''))) GROUP BY (('1622958889') NOT BETWEEN (rt0.c2) AND (vt0.c1)) COLLATE RTRIM;SELECT ALL ((LIKELIHOOD(DISTINCT -1769952696, 0.4456672286780371))%(((((rt0.c2)AND(rt0.c2)))OR(rt0.c2)))) FROM vt0, v0, rt0; -- 0ms;
SELECT ALL (((+ ('-260179243')))>=(((((((((rt0.c1)AND(v0.c0)))AND(vt0.c1)))AND(rt0.c1)))AND(v0.c0)))) FROM v0, rt0 WHERE ((((((- (x'')))OR(((x'6b3f') ISNULL))))AND((-1182233011 IN ())))) LIMIT 1576247396 OFFSET -1182233011;SELECT ((((rt0.c1 IN ())))>((MIN(rt0.c1)))), ((CAST(vt0.c0 AS REAL))<(CASE WHEN rt0.c0 THEN x'dcae' ELSE vt0.c1 END)), ((((rt0.c0)||(v0.c0))) NOTNULL) FROM v0, rt0;SELECT ALL LAST_VALUE(0.05433954699271171) OVER () FROM vt0 LIMIT 630043274; -- 0ms;
SELECT ((((rt0.c1) BETWEEN (vt0.c0) AND (rt0.c0)))>=(((vt0.c1)<(rt0.c0)))) FROM vt0, rt0 WHERE (ABS((+ ('mmz1,vt粥')))); -- 0ms;
SELECT DISTINCT ((((rt0.c0)/(vt0.c1))) IS FALSE) FROM rt0 WHERE (JULIANDAY((('r,') BETWEEN (x'') AND ('1513163106')), ((((((((NULL)AND('379429237')))OR('792063237')))AND(0.11839559126541654)))OR('1295120072')), ((0.6752520722259739)<<(0Xffffffffe143a466)))) LIMIT 433690293 OFFSET 1634716639;SELECT DISTINCT rt0.c2, CASE CAST(v0.c0 AS NUMERIC)  WHEN (~ (v0.c0)) THEN rt0.c0 ELSE CASE rt0.c1  WHEN rt0.c1 THEN vt0.c1 ELSE v0.c0 END END, v0.c0 FROM rt0, v0;SELECT ALL CASE WHEN TRIM(DISTINCT rt0.c1, v0.c0) THEN '-1064820781' END, ((((vt0.c1) BETWEEN (v0.c0) AND (rt0.c0)))=(((rt0.c0) NOT NULL))), (NOT (CASE v0.c0  WHEN vt0.c1 THEN rt0.c0 END)) FROM v0, rt0, vt0 WHERE (ABS(((0.6852011146447508) BETWEEN (NULL) AND (393549997)))); -- 2ms;
SELECT DISTINCT ((v0.c0) NOT BETWEEN (vt0.c0) AND (v0.c0)) COLLATE NOCASE COLLATE NOCASE FROM v0, vt0, rt0; -- 0ms;
SELECT (((MAX(v0.c0)))<=((NULL))) FROM v0, vt0; -- 0ms;
SELECT ALL rt0.c1 COLLATE RTRIM FROM rt0 LIMIT 423426019 OFFSET -791413727; -- 0ms;
SELECT DISTINCT rtreenode(((((vt0.c0)AND(rt0.c1)))OR(rt0.c0)), x'5555') FROM vt0, v0;SELECT DISTINCT COUNT(((v0.c0) ISNULL)) FILTER(WHERE json_object(((rt0.c1) NOT BETWEEN (vt0.c0) AND (rt0.c1)), ((rt0.c1) NOT NULL))) OVER () FROM vt0, rt0, v0 WHERE (((((0.6654023686042354) IS TRUE))>>((0.5916410115389384 IN ())))); -- 0ms;
SELECT DISTINCT CAST(((((vt0.c1)AND(v0.c0)))OR(rt0.c1)) AS NUMERIC) FROM v0;SELECT DISTINCT COUNT(*) FROM vt0 WHERE ((+ (ABS(0.8698780510259695)))) LIMIT -139428682 OFFSET -1709446135; -- 0ms;
SELECT (- (LTRIM(vt0.c1, v0.c0))) FROM v0 WHERE (CASE WHEN '60538025' THEN 'F' WHEN x'e5be069e' THEN x'ac9b1b7f' WHEN NULL THEN NULL ELSE '^+rQ' END COLLATE BINARY);SELECT TOTAL((v0.c0 IN ())) FROM rt0, v0 WHERE (CAST(CAST(x'' AS TEXT) AS NUMERIC)); -- 0ms;
SELECT ALL (NOT (v0.c0)) FROM vt0;SELECT DISTINCT (+ (CASE -1.769952696E9  WHEN vt0.c0 THEN NULL ELSE vt0.c0 END)) FROM rt0, vt0 WHERE (((((-452792308)==(NULL))) BETWEEN (((((((((x'')AND('491525804')))OR(x'')))AND('1954134849')))OR(x''))) AND (NULL COLLATE RTRIM))); -- 0ms;
SELECT DISTINCT GROUP_CONCAT(((vt0.c0) IS FALSE)) OVER () FROM v0, rt0, vt0 WHERE (((((x'82acfc25') NOT BETWEEN (0.022849052930855485) AND ('0.8240207984302003')))||(TRIM(DISTINCT '붘r', 0xffffffffc92dd75f)))); -- 0ms;
SELECT ALL MAX(((rt0.c2)>=(rt0.c0)), UNLIKELY(vt0.c1)) FROM v0, vt0 WHERE (((((NULL) IS TRUE))>=(CAST('8)<뫁' AS BLOB))));SELECT ALL AVG(((rt0.c0) NOT BETWEEN (vt0.c0) AND (v0.c0))) OVER (), CASE WHEN ((rt0.c1) IS TRUE) THEN '727420208' WHEN COUNT(v0.c0) THEN ((rt0.c1)<<(rt0.c1)) WHEN (NOT (rt0.c1)) THEN IFNULL(rt0.c0, x'') END, '0.6215925461856543' FROM rt0 WHERE ((((('-805085140') BETWEEN (0.2842826398980618) AND (x'')))IS NOT(((8.72848029E8)>=(0.9067384322974388)))));SELECT DISTINCT ((AVG(vt0.c1)) NOT NULL) FROM vt0; -- 0ms;
SELECT ALL CASE (~ (v0.c0))  WHEN 0.39282834185826854 THEN NULL ELSE ((vt0.c0) BETWEEN (rt0.c0) AND (v0.c0)) END FROM rt0, v0, vt0 WHERE (CASE ((NULL)OR(x''))  WHEN (('')IS NOT('')) THEN (((x'1a7b'))<((x''))) WHEN ((-81061804) NOTNULL) THEN ((0x24ebdc8) IS TRUE) WHEN CAST('Sis+ᕙj25\r' AS INTEGER) THEN UNICODE(x'') WHEN json_array_length(NULL, 0.8865363954709057) THEN CAST(0.4092728411431189 AS BLOB) WHEN '-1024781839' THEN ((x'')OR(0.12986594428478115)) END); -- 0ms;
SELECT ALL json_type((NOT (rt0.c2))) FROM vt0, rt0; -- 0ms;
SELECT DISTINCT ((((vt0.c1) IS TRUE)) BETWEEN ((- (v0.c0))) AND ((rt0.c2 IN ()))) FROM v0 WHERE (ABS(-2.086143031E9) COLLATE BINARY);SELECT DISTINCT LAST_VALUE(CASE (vt0.c1 IN ())  WHEN ((rt0.c2) NOT NULL) THEN ((((rt0.c2)AND(rt0.c2)))AND(rt0.c0)) ELSE ((rt0.c1) NOT BETWEEN (rt0.c2) AND (vt0.c0)) END) OVER () FROM v0, rt0, vt0 GROUP BY ((vt0.c0) BETWEEN (CAST(rt0.c2 AS NUMERIC)) AND ((NOT (vt0.c1)))) HAVING ((((rt0.c1) NOT BETWEEN (rt0.c2) AND (vt0.c0)))||(((((vt0.c0)AND(v0.c0)))AND(vt0.c1)))) ORDER BY (((vt0.c0))==((rt0.c0))) COLLATE BINARY, (((x'2309'))>((v0.c0))) COLLATE RTRIM DESC; -- 0ms;
SELECT CAST(MIN(0.314331042157621) AS TEXT) FROM rt0, vt0 LEFT OUTER JOIN v0 ON (1050007718 IN ()) LIMIT -106262475 OFFSET -919742625; -- 0ms;
SELECT DISTINCT ((((rt0.c2) ISNULL))||(LOWER('-438691728'))), vt0.c1 COLLATE BINARY, (~ (((rt0.c1)IS NOT(vt0.c1)))) FROM v0, rt0 WHERE (((((('', x'd3a4', '-1129704951')) NOT BETWEEN ((x'', x'', 0.832570305436357)) AND ((0.14006646046976323, NULL, '0.737293835500319'))))<<((NOT (x'cb4f')))));SELECT DISTINCT (((('-1614099665')>=(rt0.c0))) NOT BETWEEN (rt0.c1 COLLATE RTRIM) AND ((~ (rt0.c2)))) FROM v0 ORDER BY vt0.c1 ASC  NULLS FIRST;SELECT ((NULL)-((~ ('Pz}튎')))) FROM rt0 WHERE (CASE (((x''))<>((0X543bafac)))  WHEN ((0.7151058625847807)>=('-1864267461')) THEN (NOT (x'')) WHEN (+ (x'')) THEN ((('-1762362363'))>((NULL))) WHEN 0Xffffffff9846d28e COLLATE BINARY THEN ((x'') NOT BETWEEN (x'') AND (0.2704244914354218)) ELSE CAST(0Xffffffff898ee44a AS BLOB) END); -- 0ms;
SELECT (((rt0.c0)) BETWEEN ((rt0.c1)) AND (('-366122723'))), TOTAL(((((((((rt0.c1)AND(0.1910656405214528)))AND(rt0.c1)))OR(vt0.c1)))AND(0.1948729346557585))), ((((v0.c0 COLLATE RTRIM)OR(MAX(rt0.c0))))OR(CAST(rt0.c1 AS INTEGER))) FROM v0, vt0, rt0 INTERSECT SELECT DISTINCT ((IFNULL(DISTINCT rt0.c1, rt0.c0))%((rt0.c2 IN (rt0.c0, vt0.c0)))), (+ (CAST(vt0.c1 AS NUMERIC))), (((v0.c0, rt0.c2, v0.c0)) NOT BETWEEN ((v0.c0, vt0.c1, vt0.c0)) AND ((vt0.c0, rt0.c2, rt0.c2))) COLLATE RTRIM FROM vt0 WHERE (((((((NULL)>>(NULL)))AND(((((NULL)OR(x'')))AND(x'')))))OR(x'' COLLATE NOCASE)));SELECT ((((rt0.c0)AND(v0.c0)))OR(vt0.c0)) COLLATE RTRIM FROM rt0, vt0, v0; -- 0ms;
SELECT DISTINCT LIKELIHOOD(((rt0.c2)GLOB(rt0.c2)), 0.5359987666499707), LEAD(((CASE rt0.c2  WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c1 WHEN rt0.c2 THEN v0.c0 WHEN rt0.c1 THEN v0.c0 WHEN rt0.c2 THEN rt0.c1 ELSE rt0.c0 END) NOTNULL), (((rt0.c0 COLLATE BINARY))<=((((((((((rt0.c1)OR(v0.c0)))OR(rt0.c0)))AND('')))AND(rt0.c0))))), ((((v0.c0)OR(NULL)))AND(((rt0.c2)>>(rt0.c0))))) OVER (), ((0.903543538892989)<=(((vt0.c0)+(rt0.c2)))) FROM rt0, v0 WHERE (((CAST(x'' AS NUMERIC)) ISNULL));SELECT DISTINCT COUNT(((v0.c0)<(rt0.c1))) FROM vt0, rt0, v0 LIMIT 1846459907 OFFSET -1740189042; -- 0ms;
SELECT DISTINCT (((NOT ('sf*7g\+.')))/(((((rt0.c1)AND(rt0.c2)))AND(vt0.c0)))) FROM v0 WHERE ((((0.9573388900492925 IN ()))LIKE(((NULL)!=('790970067')))));SELECT DISTINCT CASE WHEN ((vt0.c1)<=(rt0.c2)) THEN vt0.c0 COLLATE RTRIM END FROM vt0, rt0, v0; -- 0ms;
SELECT DISTINCT (+ ((rt0.c1 IN (rt0.c2, vt0.c0)))) FROM vt0, rt0, v0 WHERE (CAST((((('0.709071536189655')OR('\rHJgxᑰ')))OR(NULL)) AS INTEGER)); -- 0ms;
SELECT DISTINCT (((NOT (rt0.c2))) NOT NULL) FROM v0, vt0 WHERE ((((('-2012805287') NOT BETWEEN ('513576678') AND ('\R')))<<(CASE WHEN x'' THEN NULL ELSE 0.822849876322935 END)));SELECT 0.7323546953623172, MAX(SUM(NULL)), CAST(MIN(vt0.c0) AS REAL) FROM vt0, v0, rt0 ORDER BY ((vt0.c1 IN ()) IN ()) ASC  NULLS FIRST, (((rt0.c1 IN ())) IS FALSE)  NULLS FIRST;SELECT DISTINCT SUM(((rt0.c2)<=(vt0.c0))), LIKELIHOOD(DISTINCT (NOT (rt0.c1)), 0.20130936370052632), x'11fc' FROM v0;SELECT DISTINCT vt0.c1 FROM vt0 LEFT OUTER JOIN v0 ON ((((((((((rt0.c1)AND(vt0.c1)))AND(NULL)))OR(v0.c0)))OR(vt0.c0)))GLOB((~ (rt0.c2)))) FULL OUTER JOIN rt0 ON (~ (CAST(rt0.c2 AS BLOB)));SELECT DISTINCT TOTAL(((rt0.c2) IS FALSE)) OVER () FROM v0, vt0;SELECT DISTINCT ((AVG(rt0.c1)) NOTNULL), LAST_INSERT_ROWID(), (((('1379288531')AND(v0.c0 COLLATE RTRIM)))AND(((v0.c0)>>('')))) FROM rt0;SELECT DISTINCT (((vt0.c1 IN (v0.c0)))GLOB(MAX(rt0.c2))) FROM rt0, vt0, v0; -- 0ms;
SELECT DISTINCT (((vt0.c0) NOT BETWEEN (rt0.c2) AND (rt0.c0)) IN ()), CASE STRFTIME(vt0.c1, rt0.c1, v0.c0)  WHEN ((v0.c0) NOT BETWEEN (rt0.c1) AND (v0.c0)) THEN LOWER(DISTINCT v0.c0) END, ((((rt0.c0)==(rt0.c2)))LIKE(vt0.c1)) FROM rt0 WHERE (((((x'47ece541')IS(0.09018690660677564))) IS FALSE));SELECT DISTINCT (((((rt0.c2)) BETWEEN ((rt0.c2)) AND ((v0.c0)))) IS TRUE), CASE WHEN ((rt0.c0)*(NULL)) THEN (((0.7891206334193458, rt0.c2, vt0.c1, rt0.c0, rt0.c1))<((rt0.c2, x'b3bf', vt0.c1, 4.23426019E8, rt0.c1))) WHEN TOTAL(vt0.c1) THEN ((rt0.c2) BETWEEN (vt0.c0) AND ('-1303933587')) WHEN ((((vt0.c0)AND(v0.c0)))OR(NULL)) THEN MAX(vt0.c1) ELSE (+ (rt0.c2)) END, AVG(((vt0.c0) IS TRUE)) OVER () FROM rt0 WHERE ((((((- ('697685595')))OR((-744698149 IN ()))))AND(((((((((0.47926509573277765)AND(x'')))AND(NULL)))AND('v}''X)ewゕ')))OR(0X494e7b49)))));SELECT CASE (((vt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((0.22520170906510528)))  WHEN (((rt0.c2, vt0.c1, rt0.c0))==((rt0.c0, vt0.c0, rt0.c0))) THEN ((((((((rt0.c0)AND(rt0.c0)))AND(vt0.c1)))AND(vt0.c0)))AND(vt0.c1)) WHEN COUNT(*) THEN ((vt0.c0)*(vt0.c1)) WHEN CASE vt0.c1  WHEN NULL THEN rt0.c0 END THEN (v0.c0 IN ()) END, CAST(((v0.c0)AND(rt0.c2)) AS TEXT), MIN(((rt0.c1) NOTNULL), SUM(vt0.c1)) FROM v0, vt0 WHERE ((((((0Xfffffffff1dd27f1, NULL, 730067842)) NOT BETWEEN ((0.7438432554306924, 0Xffffffff86d3f77f, '-1585658182')) AND (('858234982', NULL, -1.98712415E9)))) NOTNULL));SELECT DISTINCT (~ (CAST(vt0.c1 AS TEXT))), ((vt0.c0 COLLATE RTRIM)>=(((rt0.c2)%(vt0.c0)))), ((GROUP_CONCAT(rt0.c2)) NOT BETWEEN (v0.c0) AND (((((vt0.c0)OR(rt0.c2)))AND(rt0.c0)))) FROM v0, rt0, vt0; -- 0ms;
SELECT ALL NULL FROM vt0 RIGHT OUTER JOIN v0 ON ((((rt0.c0) NOTNULL)) NOT BETWEEN (((('-1568997648'))=((rt0.c2)))) AND (NULL));SELECT load_extension(CASE rt0.c0  WHEN vt0.c1 THEN rt0.c1 ELSE rt0.c0 END, vt0.c0 COLLATE BINARY), LIKE((vt0.c0 IN ()), (vt0.c0 IN (rt0.c2))), '-2078821496', (((rt0.c0 IN ())) IS FALSE), CASE (((rt0.c0, rt0.c1, vt0.c0)) BETWEEN ((vt0.c1, vt0.c0, rt0.c1)) AND ((vt0.c1, NULL, rt0.c0)))  WHEN ((((rt0.c1)AND(rt0.c2)))OR(vt0.c0)) THEN ((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c2)) WHEN ((((vt0.c1)AND(rt0.c1)))OR(rt0.c0)) THEN highlight(vt0.c0, x'', rt0.c0, vt0.c0) WHEN v0.c0 COLLATE RTRIM THEN ((vt0.c1)>=(rt0.c1)) END FROM v0, vt0, rt0 WHERE ((((('}贰WIꝓ') IS FALSE))<=(((NULL)AND('393549997'))))); -- 0ms;
SELECT DISTINCT (((((rt0.c0)) BETWEEN ((vt0.c0)) AND ((rt0.c0)))) NOT BETWEEN (GROUP_CONCAT(rt0.c0)) AND ((((rt0.c1, rt0.c1, rt0.c0, rt0.c0, vt0.c0))>((v0.c0, rt0.c0, vt0.c0, rt0.c0, vt0.c0))))) FROM vt0 WHERE ((0.6931771999851892 IN (2.74431947E8, '1513163106')) COLLATE RTRIM);SELECT DISTINCT ((v0.c0 COLLATE BINARY)>>(((v0.c0) NOTNULL))) FROM vt0, rt0, v0 WHERE ((((NULL)) BETWEEN ((0.6430630271466347)) AND (('1954300575'))) COLLATE RTRIM) GROUP BY (~ (((0.530470415967761)|(vt0.c1)))) ORDER BY (((rt0.c2, rt0.c0, vt0.c0)) BETWEEN (((((rt0.c0, vt0.c1, vt0.c1)) BETWEEN ((rt0.c2, v0.c0, v0.c0)) AND ((rt0.c0, rt0.c0, 0.346074447351982))), ((((((((((((v0.c0)OR(rt0.c1)))OR(v0.c0)))OR(vt0.c0)))OR(rt0.c0)))AND(rt0.c1)))OR(vt0.c1)), rt0.c0 COLLATE BINARY)) AND ((vt0.c0, (rt0.c1 IN ()), '0.37266862026030445'))) ASC, (((('')OR('*-_[沰G	Bb')))AND(DATETIME(vt0.c0, v0.c0, vt0.c1)))  NULLS LAST, ((CAST(vt0.c1 AS TEXT)) NOTNULL); -- 0ms;
SELECT ((((('') NOT NULL), ((((rt0.c2)OR(rt0.c2)))AND(vt0.c1)), GROUP_CONCAT(rt0.c1)))!=((TYPEOF(DISTINCT rt0.c0), ((vt0.c0)LIKE(rt0.c0)), MAX(v0.c0)))) FROM rt0, vt0 WHERE ((~ ((('\**w''p0v^') IS FALSE))));SELECT DISTINCT PERCENT_RANK() OVER ( GROUPS  UNBOUNDED PRECEDING EXCLUDE TIES) FROM v0, vt0 WHERE (((((NULL) ISNULL)) NOTNULL)) GROUP BY (((((rt0.c0))=((rt0.c0))))-(((v0.c0)||(v0.c0)))) HAVING IFNULL(((vt0.c0)>(vt0.c1)), CASE WHEN vt0.c1 THEN v0.c0 WHEN vt0.c1 THEN rt0.c2 WHEN rt0.c1 THEN vt0.c1 ELSE v0.c0 END);SELECT DISTINCT CAST(CASE rt0.c0  WHEN rt0.c2 THEN vt0.c0 WHEN vt0.c1 THEN rt0.c0 WHEN v0.c0 THEN rt0.c0 WHEN vt0.c0 THEN rt0.c0 WHEN rt0.c0 THEN NULL ELSE rt0.c2 END AS REAL), (NOT (((vt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c1)))), ((vt0.c1)>=(CASE rt0.c0  WHEN vt0.c0 THEN vt0.c1 WHEN '1421991906' THEN rt0.c1 WHEN vt0.c0 THEN rt0.c1 ELSE rt0.c0 END)) FROM vt0, v0, rt0; -- 0ms;
SELECT DISTINCT CASE WHEN AVG(rt0.c2) THEN ((vt0.c1)<=(vt0.c0)) ELSE vt0.c0 COLLATE BINARY END, COUNT(CAST(rt0.c2 AS INTEGER)), CASE (((vt0.c1))<>((vt0.c1)))  WHEN ((v0.c0) IS FALSE) THEN (vt0.c1 IN ()) WHEN CAST(rt0.c0 AS INTEGER) THEN ((vt0.c0) IS TRUE) WHEN (- (rt0.c1)) THEN COUNT(*) ELSE ((rt0.c1) NOT NULL) END FROM vt0, v0 WHERE (((((((((((NULL)OR(0Xffffffff87d0b9a6)))AND('564242259')))AND('')))OR(NULL))) NOT BETWEEN ((('')-(-522954722))) AND (CASE -1873498534  WHEN 0.6501822689494952 THEN 0.3181920994082016 WHEN '' THEN 0.1562967942306569 WHEN 0x2b83f382 THEN '&~' ELSE '≸E' END)));SELECT DISTINCT ((rt0.c1)GLOB(CAST(rt0.c2 AS INTEGER))), vt0.c0, ((((rt0.c1)OR(rt0.c1)))AND(((rt0.c0) IS TRUE))), (((rt0.c2, v0.c0, vt0.c0)) BETWEEN ((((((vt0.c1)AND(rt0.c0)))OR(rt0.c1)), CAST(rt0.c1 AS BLOB), v0.c0 COLLATE NOCASE)) AND ((CAST(rt0.c1 AS TEXT), ((((((((v0.c0)OR(rt0.c0)))AND(rt0.c0)))AND(v0.c0)))OR(v0.c0)), (rt0.c2 IN ())))), ((TRIM(rt0.c1))&(((vt0.c0) NOT BETWEEN (vt0.c0) AND (v0.c0)))) FROM rt0, v0, vt0 WHERE (((x'' COLLATE NOCASE)|(((NULL) NOT BETWEEN (0.3209336664292659) AND (43261432))))); -- 1ms;
SELECT rt0.c0, CUME_DIST() OVER ( ORDER BY (('&-NMt%ꁦDᮇ')IS NOT(rt0.c1)) COLLATE RTRIM, ((((+ (rt0.c1))))!=((x'a990'))) DESC  NULLS FIRST, CAST(((vt0.c0)>(rt0.c0)) AS BLOB)), ((CASE WHEN rt0.c0 THEN rt0.c0 END) BETWEEN (((NULL) NOT BETWEEN (rt0.c2) AND (vt0.c0))) AND (UNLIKELY(rt0.c2))) FROM rt0, v0 WHERE (CAST(0.6810931734466258 COLLATE NOCASE AS BLOB)) ORDER BY (((rt0.c2)IS(vt0.c1)) IN (json_remove(v0.c0, rt0.c1))) ASC  NULLS LAST, (((v0.c0 IN ()))IS(rt0.c0)) LIMIT -1715752319;SELECT DISTINCT COUNT('-1666862556'), (~ (NULL COLLATE BINARY)), CAST(((rt0.c0) NOT BETWEEN (rt0.c0) AND (v0.c0)) AS INTEGER) FROM v0 WHERE (CASE WHEN CAST(x'' AS NUMERIC) THEN (x'c9e8' IN ()) END);SELECT DISTINCT rt0.c2 FROM v0, rt0 WHERE (((NULL)<=((('O)?-[硈') NOT NULL)))); -- 0ms;
SELECT DISTINCT LOWER(((rt0.c2)IS NOT(vt0.c0))), (((NULL) NOT BETWEEN (vt0.c1) AND (rt0.c1)) IN (((vt0.c0) NOT BETWEEN (vt0.c0) AND (rt0.c1)))), (((vt0.c1 IN (rt0.c0))) NOT BETWEEN ((((rt0.c0, rt0.c0, rt0.c1))>=((vt0.c1, v0.c0, rt0.c1)))) AND (((vt0.c0)*(vt0.c0)))) FROM vt0;SELECT DISTINCT ((((((((((((rt0.c2)OR(rt0.c1)))AND(v0.c0)))OR((vt0.c0 IN (vt0.c1)))))OR((vt0.c1 IN ()))))AND((NOT (rt0.c2)))))AND(MAX(x''))) FROM vt0, rt0, v0 GROUP BY (((vt0.c1) BETWEEN (0.6215925461856543) AND (rt0.c2)) IN ((((vt0.c0, rt0.c0, v0.c0))>=((rt0.c0, rt0.c2, vt0.c0))), (v0.c0 IN ()))); -- 0ms;
SELECT DISTINCT CASE WHEN (NOT (rt0.c0)) THEN vt0.c1 COLLATE RTRIM ELSE 7.92063237E8 END, SUM((- (rt0.c0))) OVER (), NTH_VALUE(NULL, CAST(CAST(0.4073025032428399 AS REAL) AS REAL)) OVER () FROM v0, vt0, rt0; -- 0ms;
SELECT DISTINCT '0.8628234657323446', ((((((vt0.c1)*(vt0.c0)))AND(((v0.c0) BETWEEN (rt0.c1) AND (vt0.c1)))))AND(((((v0.c0)AND(v0.c0)))AND(0x177518ad)))), x'98b870b5' FROM rt0;SELECT ALL CASE rt0.c0  WHEN rt0.c1 THEN vt0.c1 WHEN rt0.c1 THEN vt0.c1 WHEN rt0.c1 THEN 0.24887760790174385 ELSE rt0.c2 END COLLATE RTRIM, 0xffffffffac8d6cd5, (((v0.c0) IS TRUE) IN ()) FROM vt0 WHERE (CAST(TRIM(DISTINCT 0.23724975871290033) AS INTEGER));SELECT DISTINCT ((((rt0.c2)IS(v0.c0))) BETWEEN (CASE vt0.c0  WHEN rt0.c1 THEN rt0.c1 ELSE rt0.c0 END) AND ((vt0.c1 IN ()))), GROUP_CONCAT(((((rt0.c2)OR(rt0.c0)))AND(rt0.c1))) OVER (), CAST((((0.04644012209317894)) NOT BETWEEN ((vt0.c0)) AND ((rt0.c2))) AS INTEGER) FROM rt0, vt0 WHERE (((CAST(0.9123077845207669 AS REAL))OR((((NULL))<>((-536908888))))));SELECT ALL '1902124494' FROM rt0, v0 WHERE (((x'' IN ()) IN ())); -- 0ms;
SELECT DISTINCT rt0.c2, ((json_array(vt0.c0, v0.c0)) NOT BETWEEN ((NOT (vt0.c1))) AND (((((rt0.c0)OR(vt0.c0)))OR(vt0.c0)))), COALESCE(DISTINCT ((rt0.c2)+(v0.c0)), 0xffffffff86d3f77f) FROM vt0, v0, rt0; -- 0ms;
SELECT DISTINCT DENSE_RANK() OVER () FROM rt0, v0 WHERE (CAST('0.2632458321486506' AS REAL) COLLATE BINARY); -- 0ms;
SELECT DISTINCT (((((vt0.c0)OR(v0.c0)))AND(vt0.c0)) IN ((- (vt0.c0)))) FROM rt0 RIGHT OUTER JOIN vt0 ON CASE rt0.c2  WHEN v0.c0 THEN rt0.c0 END COLLATE RTRIM GROUP BY (- (vt0.c1 COLLATE NOCASE));SELECT ((SUM(rt0.c0)) BETWEEN (CAST(rt0.c1 AS REAL)) AND ((((vt0.c0, v0.c0, v0.c0, v0.c0, rt0.c0))>=((rt0.c1, vt0.c0, rt0.c0, rt0.c0, v0.c0))))) FROM rt0, vt0 WHERE ((- (((4.38621477E8)<>(x'')))));SELECT ALL FIRST_VALUE((rt0.c1 IN (v0.c0)) COLLATE NOCASE) OVER (), COUNT(((rt0.c2)GLOB(rt0.c1))) OVER (), CASE WHEN vt0.c0 THEN vt0.c0 ELSE v0.c0 END COLLATE NOCASE FROM rt0, vt0, v0 WHERE ((((0.17243530582989153))>((CAST('' AS INTEGER))))); -- 1ms;
SELECT ALL (((+ (rt0.c0))) ISNULL), ((GROUP_CONCAT(vt0.c0)) BETWEEN (CAST(v0.c0 AS TEXT)) AND (json_patch(vt0.c0, vt0.c0))), CAST(((rt0.c1)-(rt0.c2)) AS REAL) FROM vt0, v0 WHERE (HEX(x'7186') COLLATE BINARY);SELECT ALL (((rt0.c2, rt0.c2, v0.c0))>((v0.c0, vt0.c1, rt0.c0))) COLLATE NOCASE FROM v0, rt0, vt0; -- 0ms;
SELECT ALL AVG(((rt0.c1) NOTNULL)) OVER () FROM rt0; -- 0ms;
SELECT ALL LAST_VALUE((((rt0.c2, rt0.c2, v0.c0, v0.c0, rt0.c0)) NOT BETWEEN ((((((rt0.c2)AND(v0.c0)))AND(rt0.c1)), 0.7328158772488824 COLLATE BINARY, CAST(NULL AS INTEGER), ((v0.c0)IS NOT(rt0.c1)), (+ (v0.c0)))) AND ((TRIM(DISTINCT rt0.c1), ((rt0.c1) IS TRUE), ((rt0.c1) IS TRUE), ((v0.c0) NOT BETWEEN (rt0.c1) AND (v0.c0)), x'')))) OVER () FROM rt0, v0 WHERE (x''); -- 0ms;
SELECT DISTINCT ((((COALESCE(rt0.c0, v0.c0))OR(((0.9253698144737006) BETWEEN (rt0.c0) AND (rt0.c2)))))OR(rt0.c2)) FROM vt0, v0 WHERE (((((0.28716941354952197) BETWEEN ('') AND (x'7890')))AND('-1928053259' COLLATE NOCASE))) LIMIT 1400184809 OFFSET -1003329635;SELECT (((((rt0.c1 IN ()))AND((((v0.c0, vt0.c1, vt0.c0))<=((rt0.c2, v0.c0, vt0.c1))))))AND(((vt0.c1) NOT NULL))) FROM vt0; -- 0ms;
SELECT DISTINCT NULL FROM rt0, vt0, v0 WHERE ((- ((0.17755948334125793 IN (''))))); -- 0ms;
SELECT DISTINCT (((rt0.c0 COLLATE NOCASE))>=((((rt0.c2)|(vt0.c1))))) FROM rt0, v0;SELECT DISTINCT v0.c0 FROM v0; -- 0ms;
SELECT TRIM(vt0.c1, 2.082297645E9) FROM rt0 NOT INDEXED CROSS JOIN v0 ON json(STRFTIME(rt0.c0, rt0.c0, rt0.c2)) LEFT OUTER JOIN vt0 ON CASE ((((rt0.c0)AND(v0.c0)))OR(v0.c0))  WHEN json_type(vt0.c0) THEN ((rt0.c2) NOT NULL) WHEN (rt0.c1 IN ()) THEN ((rt0.c0)IS(rt0.c1)) WHEN ((v0.c0) BETWEEN (rt0.c0) AND (rt0.c2)) THEN CASE WHEN rt0.c0 THEN rt0.c1 WHEN vt0.c1 THEN v0.c0 WHEN '/T[~O%[7ፒ' THEN rt0.c0 ELSE vt0.c0 END ELSE ((vt0.c0) NOTNULL) END LIMIT 1563097759; -- 0ms;
SELECT DISTINCT load_extension(-2035416050) FROM vt0, v0, rt0 WHERE ((((('!\r') BETWEEN ('0.3181920994082016') AND (-2032928897)))<((NULL IN ())))); -- 0ms;
SELECT DISTINCT rt0.c0 FROM v0, vt0;SELECT CAST(((vt0.c0) NOT BETWEEN (vt0.c1) AND (rt0.c0)) AS INTEGER) FROM v0 WHERE ((((((NOT ('0.1827839503072305')))AND(CASE NULL  WHEN NULL THEN -902081148 END)))OR(SQLITE_SOURCE_ID())));SELECT DISTINCT COUNT(*) OVER (), TOTAL(((v0.c0) BETWEEN (v0.c0) AND (rt0.c2))) COLLATE NOCASE, ((((rt0.c1) NOT NULL)) BETWEEN ((rt0.c0 IN ())) AND ((((vt0.c0)) BETWEEN ((v0.c0)) AND ((rt0.c1))))) FROM rt0, vt0, v0 WHERE (CASE (('1145404592')+(NULL))  WHEN (((0x63ff4292)) BETWEEN ((0.40893331183650117)) AND (('0.28616328946168823'))) THEN x'645f' END); -- 0ms;
SELECT ALL ((((v0.c0)OR(rt0.c0))) IS TRUE) FROM v0, rt0 LIMIT 1421991906 OFFSET -875658907; -- 0ms;
SELECT DISTINCT ((CAST(rt0.c2 AS INTEGER)) IS TRUE) FROM vt0, v0 WHERE (CAST(CAST(x'a20c' AS TEXT) AS BLOB));SELECT DISTINCT (((vt0.c0)) BETWEEN ((((rt0.c1)||(vt0.c0)))) AND ((((rt0.c2)/(0x693bcfc4))))) FROM vt0, rt0, v0 GROUP BY 0.021099293260491536 HAVING (('-1856525036' COLLATE RTRIM) BETWEEN (0.7916434369252234) AND ((v0.c0 IN (vt0.c0)))); -- 1ms;
SELECT DISTINCT json_array_length(json_patch(rt0.c2, v0.c0)), vt0.c0, rt0.c2 FROM rt0 WHERE ((+ (0.23003336079824777)) COLLATE BINARY);SELECT ALL ((((v0.c0)OR(rt0.c0)))<(((rt0.c2) NOT NULL))) FROM vt0, rt0, v0 WHERE (CAST('-1585658182' AS TEXT) COLLATE RTRIM); -- 0ms;
SELECT ((((v0.c0)+(x'ebb3'))) IS TRUE) FROM rt0, vt0, v0 WHERE (UPPER(DISTINCT (((('1378668620')AND(0Xffffffffd96879cc)))AND(NULL)))) ORDER BY (- (rt0.c1))  NULLS FIRST, (vt0.c0 IN ())  NULLS LAST, (~ (json_array_length(vt0.c0, '-710894141'))); -- 0ms;
SELECT DISTINCT ((((((((((v0.c0) NOTNULL))AND((~ (vt0.c0)))))AND(((rt0.c0) IS TRUE))))OR(((rt0.c2) NOTNULL))))AND(AVG(rt0.c1))), json_extract(((((((((rt0.c0)AND(rt0.c2)))AND(rt0.c1)))AND(rt0.c2)))OR(rt0.c1)), CAST(vt0.c0 AS NUMERIC)), ((CASE WHEN vt0.c1 THEN rt0.c0 WHEN rt0.c1 THEN rt0.c0 WHEN v0.c0 THEN NULL WHEN 0.8264689008108759 THEN rt0.c1 WHEN x'' THEN rt0.c0 ELSE v0.c0 END) IS FALSE) FROM v0, rt0, vt0 WHERE ((~ (((x'')<<('0.6259220037642621'))))); -- 0ms;
SELECT ALL ((vt0.c1) NOT BETWEEN (v0.c0) AND (rt0.c2)) COLLATE RTRIM FROM v0, vt0, rt0; -- 0ms;
SELECT 0xffffffff898ee44a FROM vt0, v0, rt0 WHERE (CAST(((((-1.924801941E9)AND(0xffffffffe0690d03)))OR(x'')) AS NUMERIC)); -- 0ms;
SELECT DENSE_RANK() OVER (), CASE ((rt0.c2) NOTNULL)  WHEN (((vt0.c1))<=((rt0.c1))) THEN json_array_length(vt0.c1) WHEN ((x'6191')>(v0.c0)) THEN (((rt0.c0)) NOT BETWEEN (('Kfp')) AND (('Sn\n'))) WHEN (rt0.c0 IN ()) THEN ((rt0.c2) NOT NULL) END, COALESCE(GROUP_CONCAT(v0.c0), CAST('){\rYXF' AS TEXT)) FROM rt0 WHERE (CAST(((x'') IS TRUE) AS NUMERIC)) ORDER BY ((CAST(rt0.c0 AS REAL)) ISNULL) ASC  NULLS LAST LIMIT -1875996587;SELECT DISTINCT (((((v0.c0)) BETWEEN ((0.26630287066569935)) AND ((vt0.c0)))) NOT BETWEEN (((rt0.c2) NOT BETWEEN (rt0.c2) AND (v0.c0))) AND (vt0.c0 COLLATE NOCASE)), ((((((((((rt0.c0)==(rt0.c2)))OR((~ (rt0.c1)))))OR(rt0.c2 COLLATE BINARY)))OR(((vt0.c1)=(rt0.c0)))))OR(v0.c0)), CAST(v0.c0 COLLATE RTRIM AS REAL) FROM v0 ORDER BY x'' ASC, ((((vt0.c0) NOT BETWEEN (rt0.c0) AND (vt0.c1)))=(CAST(vt0.c0 AS NUMERIC)));SELECT ALL CASE ((rt0.c0) BETWEEN (v0.c0) AND (vt0.c1))  WHEN (((rt0.c1, vt0.c1, vt0.c0))<=((rt0.c2, rt0.c1, vt0.c0))) THEN 0.6666567165306888 ELSE ((((((((rt0.c2)AND(vt0.c1)))AND(x'')))OR(vt0.c1)))OR(rt0.c2)) END, NULL, v0.c0 FROM vt0, v0, rt0 WHERE (((0.6593600955487418)!=(CASE WHEN ']' THEN 'u((Z뭁 Bx+' ELSE NULL END))) ORDER BY UPPER(DISTINCT ((rt0.c1) BETWEEN (vt0.c0) AND (rt0.c1))) ASC  NULLS FIRST, (((v0.c0) BETWEEN (rt0.c1) AND (v0.c0)) IN ()), x''  NULLS FIRST; -- 0ms;
SELECT DISTINCT (((((((((rt0.c2 IN ()))OR(((((rt0.c2)AND(rt0.c1)))OR(vt0.c1)))))AND(UNICODE(rt0.c1))))OR((rt0.c0 IN (vt0.c1)))))AND(((rt0.c0)>>(x'')))), v0.c0, CAST(v0.c0 COLLATE RTRIM AS INTEGER) FROM v0;SELECT (((((((((rt0.c2)AND(rt0.c0)))AND(0.31690505754397014)))OR(v0.c0)))OR(rt0.c2)) IN ()) FROM v0, vt0; -- 0ms;
SELECT ALL ((CASE WHEN rt0.c0 THEN rt0.c2 WHEN v0.c0 THEN '-668137193' WHEN rt0.c2 THEN vt0.c0 ELSE vt0.c0 END)&((((v0.c0)) BETWEEN ((rt0.c0)) AND ((vt0.c1))))) FROM v0, vt0, rt0 UNION SELECT ALL (((rt0.c2 IN ()))<(rt0.c1)) FROM v0, rt0 WHERE (ABS(DISTINCT (('mh') NOTNULL))); -- 0ms;
SELECT GROUP_CONCAT(((rt0.c2)<=(vt0.c0))) OVER (), ((((COUNT(vt0.c1))AND(v0.c0)))OR(((vt0.c0) NOT BETWEEN (v0.c0) AND (vt0.c0)))), TOTAL(((((rt0.c1)AND(vt0.c0)))AND(vt0.c1))) OVER () FROM vt0, rt0;SELECT ALL (((rt0.c1)) NOT BETWEEN ((CASE rt0.c0  WHEN v0.c0 THEN vt0.c1 ELSE rt0.c0 END)) AND (((((v0.c0)) BETWEEN ((vt0.c1)) AND ((vt0.c1)))))) FROM rt0, v0;SELECT DISTINCT CAST(vt0.c1 AS NUMERIC) COLLATE NOCASE FROM vt0 WHERE ((+ ((- (NULL))))); -- 0ms;
SELECT DISTINCT AVG((0.2796877619095294 IN ())) OVER () FROM v0, vt0 WHERE (((((json_object(NULL, '-1024781839', 1946760233, '1443353008'))AND((('-1987124150') BETWEEN (x'b4d15b0f') AND ('䴵k T')))))AND(0.9694024575107368)));SELECT DISTINCT ((CASE WHEN rt0.c2 THEN rt0.c1 END) IS FALSE) FROM v0, vt0;SELECT ALL (((NULL, rt0.c2, rt0.c2, x'', vt0.c1)) NOT BETWEEN ((vt0.c1 COLLATE BINARY, ((rt0.c2) NOT NULL), (rt0.c0 IN (v0.c0, vt0.c1)), ((rt0.c0)LIKE(rt0.c1)), CASE vt0.c0  WHEN vt0.c1 THEN v0.c0 WHEN rt0.c2 THEN vt0.c0 WHEN rt0.c0 THEN rt0.c0 ELSE v0.c0 END)) AND (((+ (vt0.c1)), ((rt0.c0)&(rt0.c0)), (~ (rt0.c0)), CHAR(rt0.c0), (('') IS FALSE)))) FROM vt0, rt0;SELECT DISTINCT (((GROUP_CONCAT(rt0.c0), (+ (vt0.c0)), vt0.c1))<((IFNULL(DISTINCT rt0.c2, vt0.c0), (((vt0.c1, NULL, NULL))>((v0.c0, v0.c0, vt0.c0))), ((rt0.c1)|(vt0.c1))))) FROM rt0, vt0, v0; -- 0ms;
SELECT (((rt0.c2)) NOT BETWEEN ((0.20346529811588543 COLLATE RTRIM)) AND ((v0.c0 COLLATE NOCASE))) FROM v0, rt0, vt0 WHERE (CASE WHEN 0.530470415967761 THEN load_extension(x'') WHEN CAST(NULL AS NUMERIC) THEN NULL COLLATE NOCASE WHEN ((0.23144558156205908) BETWEEN (0.09638936331294023) AND ('')) THEN ((x'') NOT BETWEEN (0Xffffffff82d78401) AND (923014237)) END) GROUP BY CASE WHEN rt0.c0 THEN ((vt0.c1) BETWEEN (vt0.c0) AND (v0.c0)) ELSE rt0.c0 COLLATE BINARY END;SELECT DISTINCT (((NOT (rt0.c0)))IS NOT(MIN(vt0.c0))) FROM v0, rt0, vt0; -- 1ms;
SELECT DISTINCT SQLITE_VERSION() FROM rt0 LIMIT -791413727 OFFSET -2134884174; -- 0ms;
SELECT COUNT(*) FROM v0, vt0; -- 0ms;
SELECT ((UNICODE(vt0.c0)) NOTNULL) FROM rt0, v0 WHERE (((CAST('1983967991' AS TEXT))|(((((((((NULL)AND(0xffffffff88aa4030)))AND(NULL)))OR(NULL)))OR(0.5082523571057767)))));SELECT ALL ROW_NUMBER() OVER () FROM v0 WHERE (UPPER(DISTINCT ((4.4833013E8) BETWEEN (0.7007315663606543) AND (0.7397257605173088)))); -- 0ms;
SELECT vt0.c0 FROM vt0, v0; -- 0ms;
SELECT DISTINCT CAST(((v0.c0) NOT BETWEEN (vt0.c1) AND ('274431947')) AS INTEGER), CASE ((rt0.c1)||(0.4413747119955854))  WHEN CAST(0.1071995644963023 AS REAL) THEN SUM(rt0.c2) END, rt0.c2 FROM rt0, vt0;SELECT ALL NULLIF(NULL COLLATE BINARY, ((vt0.c1)>>(v0.c0))) FROM rt0, vt0, v0 GROUP BY (((('45079494')AND(rt0.c0)))<=(((((((((rt0.c2)OR(v0.c0)))OR(0X74ca0d68)))OR(v0.c0)))OR(rt0.c1)))), (((((((rt0.c0)) NOT BETWEEN ((v0.c0)) AND ((vt0.c0))))AND(LIKELIHOOD(DISTINCT rt0.c2, 0.9264814478492319))))OR(INSTR(rt0.c0, vt0.c1))), (CAST(rt0.c1 AS BLOB) IN (CASE vt0.c0  WHEN v0.c0 THEN rt0.c1 WHEN rt0.c0 THEN rt0.c0 WHEN vt0.c0 THEN vt0.c1 ELSE rt0.c2 END, x'' COLLATE BINARY)) HAVING (~ ('387566563')) COLLATE RTRIM ORDER BY TRIM(DISTINCT v0.c0, rt0.c0 COLLATE BINARY)  NULLS FIRST, CAST(vt0.c1 AS BLOB) COLLATE BINARY, (((((vt0.c0)) NOT BETWEEN ((v0.c0)) AND ((vt0.c0)))) NOT BETWEEN (CAST(rt0.c1 AS REAL)) AND (CASE WHEN vt0.c0 THEN NULL END)) ASC; -- 1ms;
SELECT (- (rt0.c2)) FROM v0, vt0 WHERE (((CASE WHEN '0.8693079693224595' THEN 640082544 ELSE x'' END)*(TRIM(DISTINCT x''))));SELECT MIN(((rt0.c2)OR(vt0.c0))) FROM vt0, v0, rt0; -- 0ms;
SELECT DISTINCT ((((rt0.c1) IS FALSE))&(((v0.c0)<=(vt0.c0)))) FROM rt0, v0, vt0; -- 0ms;
SELECT DISTINCT (((rt0.c0))!=((rt0.c2))) COLLATE NOCASE FROM rt0, vt0 GROUP BY (NULL IN ()) HAVING ((v0.c0) NOT BETWEEN (vt0.c0) AND (rt0.c2 COLLATE RTRIM)) ORDER BY CAST((rt0.c0 IN ()) AS NUMERIC) ASC  NULLS LAST;SELECT DISTINCT (((((rt0.c1))!=((rt0.c1)))) IS FALSE), (((((rt0.c2) NOTNULL)))!=((rt0.c0))), json_object(CAST(rt0.c2 AS BLOB), (((((((('1811063019')AND(x'')))OR(',m\n')))OR(rt0.c0)))OR(vt0.c1)), UNICODE(v0.c0), CAST(v0.c0 AS INTEGER), CASE WHEN x'' THEN rt0.c0 ELSE v0.c0 END, MAX(v0.c0)), rt0.c2, rt0.c1 FROM rt0, v0, vt0;SELECT DISTINCT (CAST(rt0.c2 AS INTEGER) IN (((vt0.c1) IS FALSE))) FROM v0;SELECT DISTINCT ((CAST(rt0.c0 AS TEXT))<>(CAST(rt0.c2 AS BLOB))), v0.c0, json_array_length(CAST(v0.c0 AS INTEGER)) FROM rt0, v0, vt0 WHERE ((- (((0.40438221607029434)&(0.955634464719689))))) GROUP BY ((((x'') NOT BETWEEN (rt0.c2) AND (rt0.c0))) BETWEEN (((rt0.c1)||(rt0.c2))) AND (((rt0.c1) NOT BETWEEN (vt0.c1) AND (x'')))); -- 0ms;
SELECT DISTINCT GROUP_CONCAT(CAST(vt0.c1 AS BLOB)) OVER (), (((((rt0.c0, v0.c0, rt0.c2))>=((rt0.c2, rt0.c0, vt0.c1)))) NOT BETWEEN (MIN(x'')) AND (((vt0.c1)<>(rt0.c0)))), (CAST(v0.c0 AS INTEGER) IN (CAST(rt0.c0 AS TEXT), CASE WHEN v0.c0 THEN NULL ELSE vt0.c0 END)) FROM vt0 WHERE (CASE (((NULL)) NOT BETWEEN (('lz)-')) AND ((x'')))  WHEN CAST(0xffffffff93e44b17 AS BLOB) THEN (((('769123277')OR(NULL)))AND('')) END) GROUP BY (((((v0.c0)OR(v0.c0)))AND(v0.c0)) IN ()), v0.c0, (((rt0.c0)) NOT BETWEEN ((CASE WHEN rt0.c1 THEN rt0.c2 WHEN vt0.c0 THEN NULL WHEN vt0.c1 THEN rt0.c2 ELSE vt0.c1 END)) AND (((('-1024781839')||(rt0.c2)))));SELECT ALL (~ (TYPEOF(vt0.c1))) FROM v0;SELECT DISTINCT ((((vt0.c1)AND(rt0.c0)))OR(COUNT(vt0.c1))) FROM v0 WHERE (((((x'') IS TRUE)) NOT BETWEEN (PRINTF(0.9815079328146044)) AND ((('Si1+ᕙj25\r')%('0.8628234657323446')))));SELECT DISTINCT CAST(AVG(vt0.c1) AS INTEGER), (+ (((vt0.c0) BETWEEN (rt0.c1) AND (rt0.c0)))), ((((vt0.c0)>=(rt0.c1)))=((rt0.c0 IN ()))), (TRIM(v0.c0, v0.c0) IN ()), COUNT(vt0.c1) FROM rt0, vt0, v0; -- 0ms;
SELECT DISTINCT COUNT(*) FROM v0, vt0 WHERE (CASE WHEN CASE WHEN '0.30492409989256963' THEN '401703571' END THEN (('1576409558')/(NULL)) WHEN ((0.4133333398958784)|('1954134849')) THEN (0.1963696878695439 IN ()) WHEN x'' THEN CAST(x'' AS TEXT) END); -- 0ms;
SELECT DISTINCT TRIM(DISTINCT CAST(rt0.c2 AS NUMERIC), v0.c0) FROM v0, vt0, rt0; -- 0ms;
SELECT ALL ((CAST(rt0.c0 AS REAL))GLOB(x'b33c')) FROM rt0 WHERE ((((0.2680106170686438) BETWEEN (0.5665559055073692) AND (0.22880898405164707)) IN ())) ORDER BY NULL DESC  NULLS FIRST LIMIT 1421991906 OFFSET -2134884174; -- 0ms;
SELECT ALL ((((v0.c0)) NOT BETWEEN ((v0.c0)) AND ((vt0.c0))) IN ()) FROM v0 WHERE (CASE WHEN (('0.25662244096797227') ISNULL) THEN 0.14524824523067625 WHEN ((1.522443526E9)*('垈<P')) THEN (+ (0x17f18293)) WHEN (('-291362497') ISNULL) THEN (- (0.6118881294757582)) ELSE (NOT (-1.644777777E9)) END); -- 0ms;
SELECT SUM((vt0.c0 IN ())) FROM rt0, v0 WHERE (0.051872560703032256); -- 0ms;
SELECT DISTINCT (((v0.c0)) NOT BETWEEN ((((rt0.c1) NOT BETWEEN (rt0.c0) AND (rt0.c0)))) AND ((rt0.c0 COLLATE RTRIM))) FROM v0 WHERE (CAST(((NULL)IS(x'')) AS REAL));SELECT DISTINCT (((((rt0.c0))>=((rt0.c2))))LIKE(rt0.c1)) FROM rt0 WHERE ((((('1513163106') IS TRUE))%(NULL))); -- 0ms;
SELECT DISTINCT (~ (((vt0.c1)LIKE(vt0.c0)))), ((COUNT(*)) BETWEEN (CASE rt0.c1  WHEN rt0.c1 THEN rt0.c0 ELSE v0.c0 END) AND (((((vt0.c0)OR(rt0.c2)))AND(v0.c0)))), (~ ((- (rt0.c2)))) FROM rt0, vt0;SELECT ALL NULLIF(DISTINCT '\nT.>穇x9', rt0.c1) COLLATE RTRIM FROM v0, vt0, rt0; -- 0ms;
SELECT ALL CASE WHEN TRIM(DISTINCT rt0.c1, rt0.c0) THEN ((rt0.c0)>=(vt0.c0)) WHEN ((((vt0.c0)AND(vt0.c1)))AND(rt0.c1)) THEN SUM(rt0.c0) WHEN MIN(vt0.c0) THEN ((((((((0.28259666225614677)OR(v0.c0)))OR(v0.c0)))OR(vt0.c0)))AND(v0.c0)) END, CASE WHEN ((rt0.c1)<>(rt0.c0)) THEN TYPEOF(rt0.c0) ELSE ((rt0.c1) BETWEEN (v0.c0) AND (vt0.c0)) END, NTILE(((((COALESCE(rt0.c2, rt0.c1))OR(((rt0.c1) BETWEEN (rt0.c1) AND (rt0.c2)))))AND((rt0.c0 IN ())))) OVER () FROM rt0 WHERE (((' 3D' IN ()) IN ())) GROUP BY ((rt0.c0) NOT NULL) HAVING GROUP_CONCAT((((rt0.c2, vt0.c1, rt0.c2))>=((rt0.c2, vt0.c1, v0.c0)))) LIMIT -776177182 OFFSET -1644777777;SELECT ALL COUNT(*) OVER () FROM v0 WHERE (((NULL COLLATE BINARY) NOT BETWEEN (((0.779244757918404) NOTNULL)) AND ('1818748336' COLLATE BINARY))); -- 0ms;
SELECT NULL FROM rt0, v0, vt0 WHERE (CASE CASE WHEN '<p' THEN 'PZ}튎' ELSE '0.5263952385818035' END  WHEN (+ (0.024815690554049197)) THEN '' COLLATE NOCASE END); -- 0ms;
SELECT DISTINCT (((((- (rt0.c1)))OR(TRIM(DISTINCT v0.c0))))OR(NULLIF(vt0.c0, rt0.c1))) FROM vt0 WHERE (-875658907);SELECT DISTINCT ((((vt0.c0) NOT BETWEEN (rt0.c1) AND (rt0.c1)))>=(x'e1e5')), RANK() OVER ( GROUPS LIKE(LAST_INSERT_ROWID(), ABS(rt0.c0), 'F') PRECEDING), ((IFNULL(rt0.c1, rt0.c2))IS(rt0.c2 COLLATE BINARY)), CAST((('M8fuE땻')*(rt0.c2)) AS INTEGER), CAST(COALESCE(DISTINCT rt0.c2, rt0.c1) AS BLOB) FROM rt0, v0 WHERE ((((('-19736991')*(NULL))) BETWEEN ((((0.33488838149033096, 0Xfffffffffed285e7, '402092557')) BETWEEN ((0.49953367343894195, '\rHJGXᑰ', '-1924801941')) AND ((0.25662244096797227, 0.9360724857065812, 1203051454)))) AND ((('r#IC')IS(0.6479694715604206)))));SELECT DISTINCT ((((- (rt0.c1))))!=((x''))), COUNT(*), ((rt0.c1)||(rt0.c2)) COLLATE NOCASE FROM v0, vt0, rt0 WHERE ((+ (('-899596201' IN ())))); -- 0ms;
SELECT ALL '' COLLATE NOCASE FROM v0 WHERE ((NOT (NULL COLLATE BINARY))) ORDER BY CASE WHEN ((rt0.c1)AND(rt0.c2)) THEN ((vt0.c0) NOT BETWEEN (rt0.c0) AND (rt0.c1)) WHEN (rt0.c2 IN ()) THEN ((((((((rt0.c1)OR(vt0.c0)))OR(vt0.c1)))AND(rt0.c1)))AND(v0.c0)) WHEN ((rt0.c1) NOTNULL) THEN ((((((((0.853018949319415)OR(vt0.c1)))OR(vt0.c0)))AND(NULL)))OR(rt0.c0)) ELSE highlight(vt0.c0, vt0.c0, rt0.c2, rt0.c2) END  NULLS LAST;SELECT DISTINCT x'' FROM rt0 WHERE (((((0.39362601801367747)<=(NULL))) NOT BETWEEN (CAST(0.9027454421745935 AS TEXT)) AND ((('()') IS FALSE)))) ORDER BY (UPPER(DISTINCT rt0.c0) IN ())  NULLS LAST; -- 0ms;
SELECT TOTAL(TOTAL((('xtO}\zv K') NOT BETWEEN (rt0.c0) AND (rt0.c0)))) FROM rt0, vt0, v0 WHERE ((((((1566843266 IN ()))OR(x'')))AND(((NULL)+('SQ'))))) UNION ALL SELECT DISTINCT SUM(((rt0.c1)-(rt0.c2))) OVER () FROM rt0 WHERE (CASE WHEN ((((((((x'527d')AND('')))AND(77527873)))OR(0.1325658848768384)))AND(x'')) THEN (((('-139428682')OR('-776177182')))OR(x'')) WHEN LIKELY(NULL) THEN (('-1268353185') ISNULL) WHEN ((x'f683') NOTNULL) THEN NULL COLLATE NOCASE END) GROUP BY (((- (vt0.c0))) NOT BETWEEN (((rt0.c2)<<(vt0.c1))) AND (((rt0.c0)<(rt0.c2)))), ((((-753604263) NOT BETWEEN (rt0.c1) AND (vt0.c1))) NOT BETWEEN (((vt0.c1) NOTNULL)) AND (rt0.c2 COLLATE NOCASE)), NULL;SELECT ALL ((((vt0.c0)<=(vt0.c1))) IS TRUE) FROM vt0 WHERE (((((((((((NULL)OR(x'7026')))AND(0.06803488772976374)))OR('')))AND(x''))) NOT BETWEEN ((- (x''))) AND (0.42560745738827443 COLLATE NOCASE))); -- 0ms;
SELECT DISTINCT (((('qxe#8') NOT BETWEEN (rt0.c1) AND (v0.c0)))IS NOT(SUM(rt0.c2))) FROM vt0 GROUP BY (((x'')) NOT BETWEEN (((((rt0.c2, rt0.c0, rt0.c1))>((vt0.c0, NULL, vt0.c0))))) AND ((CASE vt0.c1  WHEN v0.c0 THEN vt0.c1 ELSE NULL END))), ((((((((((((((rt0.c2)AND(v0.c0)))AND(rt0.c1)))OR(vt0.c1)))AND(v0.c0)))OR(vt0.c1)))OR(rt0.c2)))=(((rt0.c1)IS(v0.c0)))), vt0.c1 HAVING ((((v0.c0)||(vt0.c0))) ISNULL);SELECT ALL (((vt0.c0 IN ()))+(AVG(rt0.c1))), ((AVG(vt0.c0))+((vt0.c1 IN ()))), (((vt0.c0)) NOT BETWEEN ((((NULL)>>(vt0.c1)))) AND ((rt0.c2))) FROM rt0, v0, vt0; -- 0ms;
SELECT ALL (- (CASE WHEN v0.c0 THEN rt0.c2 WHEN rt0.c0 THEN vt0.c0 WHEN rt0.c2 THEN vt0.c1 ELSE rt0.c0 END)) FROM v0 WHERE ((((((x'' IN ()))AND(CAST(1.829879056E9 AS NUMERIC))))AND(CAST(0.7545876197697344 AS BLOB)))) LIMIT -1666862556 OFFSET 9223372036854775807;SELECT PERCENT_RANK() OVER () FROM vt0; -- 0ms;
SELECT DISTINCT (((vt0.c1 IN ())) NOT BETWEEN ((rt0.c1 IN ())) AND ((+ (rt0.c2)))) FROM v0 WHERE (CAST(CASE NULL  WHEN 393549997 THEN NULL END AS REAL)) LIMIT 1285188548 OFFSET 909786055;SELECT TYPEOF(DISTINCT ((0.398286807438744) NOTNULL)) FROM vt0, v0, rt0 ORDER BY CAST(CASE ''  WHEN vt0.c0 THEN v0.c0 ELSE rt0.c1 END AS INTEGER); -- 0ms;
SELECT ALL (((rt0.c1, v0.c0, 0x48f2093b)) NOT BETWEEN (((((v0.c0))<((vt0.c1))), vt0.c0 COLLATE NOCASE, rt0.c1)) AND (((((rt0.c0))==((rt0.c0))), CASE vt0.c0  WHEN rt0.c2 THEN vt0.c0 ELSE rt0.c0 END, CASE WHEN rt0.c1 THEN x'' END))), (NOT ((NOT (0.7724602128767828)))), ((((v0.c0)-('T.JD)Vk+')))IS(((v0.c0) BETWEEN (rt0.c1) AND (rt0.c2)))) FROM v0, vt0, rt0 WHERE (((((790970067)AND(NULL)))AND('')) COLLATE RTRIM COLLATE NOCASE); -- 0ms;
SELECT DISTINCT NULLIF(DISTINCT 0.8549769805446601, ((((rt0.c2)OR(rt0.c0)))OR(rt0.c1))), ((UNLIKELY(DISTINCT vt0.c1))>(((((((((vt0.c0)OR(vt0.c1)))OR(vt0.c1)))OR('-843061450')))AND(vt0.c0)))), ((NOT (rt0.c0)) IN (((rt0.c0) IS TRUE))) FROM rt0, vt0, v0 WHERE (((x'9e65')AND((('145952838')<<(0.6138333601877188))))); -- 0ms;
SELECT ALL ((((vt0.c0)AND(v0.c0)))AND(vt0.c0)) COLLATE RTRIM FROM rt0, vt0 WHERE ((((x'3ed2' IN (NULL)))AND(LIKELIHOOD(NULL, 0.9227169179078828))));SELECT DISTINCT ((((vt0.c0)/(rt0.c2)))|((rt0.c0 IN ()))), (((v0.c0)) BETWEEN ((((v0.c0) BETWEEN (rt0.c2) AND (vt0.c1)))) AND ((TYPEOF(DISTINCT rt0.c2)))), GROUP_CONCAT(LIKELY(rt0.c1)) FROM vt0, rt0, v0 WHERE (CASE WHEN (' <r05a%' IN (0.02581042508351461)) THEN ((0.1354582130953984)IS NOT('3s!J')) ELSE ((0x2f253ed3)%(0x18a1f032)) END); -- 0ms;
SELECT GROUP_CONCAT(LIKELIHOOD(rt0.c2, 0.552009826300793)) FILTER(WHERE ((vt0.c0)<=(rt0.c1)) COLLATE NOCASE) OVER () FROM rt0, vt0 WHERE ((((NULL)*('0.8259229585770316')) IN ())); -- 0ms;
SELECT DISTINCT COUNT(*) FROM vt0, v0, rt0 WHERE (((NULL)/(NULL COLLATE RTRIM))); -- 0ms;
SELECT ALL ((CASE WHEN vt0.c1 THEN rt0.c2 ELSE vt0.c0 END) IS FALSE) FROM rt0, v0;SELECT DISTINCT ((CASE vt0.c1  WHEN vt0.c1 THEN vt0.c0 ELSE vt0.c1 END) NOTNULL) FROM vt0, rt0; -- 0ms;
SELECT TRIM(DISTINCT (~ (vt0.c1)), ((vt0.c0)/(rt0.c0))) FROM rt0;