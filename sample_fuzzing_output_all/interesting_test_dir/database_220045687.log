-- Time: 2024/06/07 11:20:14
-- Database: database87
-- Database version: 3.40.0
-- seed value: 220045687
PRAGMA cache_size = 50000; -- 3ms;
PRAGMA temp_store=MEMORY; -- 0ms;
PRAGMA synchronous=off; -- 0ms;
PRAGMA encoding = 'UTF-8'; -- 0ms;
CREATE VIRTUAL TABLE vt0 USING fts5(c0, c1 UNINDEXED); -- 0ms;
CREATE VIRTUAL TABLE vt1 USING fts5(c0 UNINDEXED); -- 1ms;
PRAGMA temp.busy_timeout; -- 0ms;
INSERT OR IGNORE INTO vt0(c0) VALUES (0.8102358454238144), ('c[HMHAk6'), ('8|y2r佴2<'); -- 1ms;
ANALYZE; -- 1ms;
UPDATE OR ABORT vt0 SET c1=x'', c1='G]F', c1=0.8102358454238144; -- 1ms;
INSERT OR FAIL INTO vt0(c1) VALUES (NULL); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
CREATE VIRTUAL TABLE vt2 USING fts4(c0, c1 UNINDEXED, matchinfo=fts3); -- 5ms;
INSERT INTO vt0(vt0, rank) VALUES('merge', -1120392740);\n; -- 1ms;
INSERT OR IGNORE INTO vt2 VALUES (-1.12039274E9, 0.8318594234082713); -- 0ms;
INSERT OR ROLLBACK INTO vt1(c0) VALUES (0X59d4d28); -- 4ms;
INSERT OR ROLLBACK INTO vt0(c1, c0) VALUES ('-2027649588', 0.8102358454238144), ('-429724065', 0.2968900920187386), ('-1120392740', 0.8318594234082713); -- 1ms;
UPDATE OR ABORT vt1 SET (c0)=('8|y2r佴2<'); -- 0ms;
INSERT OR IGNORE INTO vt0(c1, c0) VALUES ('378058961', x''), (NULL, x''), (x'', NULL); -- 0ms;
ROLLBACK TRANSACTION; -- 2ms;
INSERT OR IGNORE INTO vt2(c0) VALUES (0.9943108419463476); -- 4ms;
UPDATE OR IGNORE vt0 SET c1='' WHERE ((((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1))) NOT BETWEEN (IFNULL(vt0.c1, vt0.c0)) AND (((vt0.c1) IS FALSE))); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 12); -- 1ms;
INSERT OR IGNORE INTO vt0(c1) VALUES ('-756176404'); -- 0ms;
PRAGMA temp.cache_spill = -4733309671426758709; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('crisismerge', 860976089); -- 0ms;
INSERT OR REPLACE INTO vt0(c1) VALUES (''); -- 0ms;
UPDATE OR IGNORE vt2 SET c0='1914133802'; -- 0ms;
UPDATE OR FAIL vt1 SET (c0, c0)=(-1120392740, 378058961) WHERE ((CASE WHEN vt1.c0 THEN '378058961' END) BETWEEN (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt1.c0))) AND (((vt1.c0)<>(vt1.c0)))); -- 0ms;
PRAGMA temp.locking_mode = EXCLUSIVE; -- 0ms;
INSERT INTO vt2(vt2) VALUES('automerge=7'); -- 5ms;
REINDEX; -- 0ms;
INSERT OR REPLACE INTO vt0 VALUES (0.39631158365003705, ''); -- 15ms;
REINDEX; -- 0ms;
INSERT INTO vt0(vt0) VALUES('rebuild'); -- 3ms;
UPDATE OR IGNORE vt1 SET (c0, c0, c0)=('-2116944853', x'94b4', '-1176097307'); -- 1ms;
INSERT OR IGNORE INTO vt0(c1) VALUES ('VCt>PCul'); -- 0ms;
ANALYZE; -- 0ms;
INSERT OR FAIL INTO vt0(c1) VALUES ('-1176097307'), (x''), (NULL); -- 0ms;
UPDATE OR IGNORE vt1 SET c0=0.9275340651420406 WHERE ((vt1.c0)>=(vt1.c0)) COLLATE NOCASE; -- 1ms;
INSERT INTO vt1(vt1, rank) VALUES('merge', -526733908);\n; -- 1ms;
PRAGMA temp.cache_spill = false; -- 0ms;
REINDEX; -- 5ms;
UPDATE OR ABORT vt0 SET (c1)=('\Y+_BU.['); -- 23ms;
PRAGMA stats; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
UPDATE OR FAIL vt2 SET c0='-836316899', c0=NULL; -- 0ms;
INSERT INTO vt0(vt0) VALUES('optimize'); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
INSERT OR IGNORE INTO vt1(c0) VALUES (x'4f34'); -- 0ms;
PRAGMA main.short_column_names; -- 0ms;
PRAGMA stats; -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('automerge', 13); -- 0ms;
UPDATE vt1 SET (c0, c0, c0, c0)=(NULL, 0.691663324426641, 0.8102358454238144, x'c2df'); -- 1ms;
REINDEX  vt0; -- 0ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
PRAGMA temp.incremental_vacuum; -- 0ms;
PRAGMA main.mmap_size = -8268050473894500053; -- 0ms;
INSERT OR IGNORE INTO vt1 VALUES ('1698968954'); -- 0ms;
INSERT OR IGNORE INTO vt2(c1) VALUES (NULL), (NULL), (x''); -- 0ms;
DELETE FROM sqlite_stat1; -- 0ms;
UPDATE OR ABORT vt1 SET c0='', c0='0.8102358454238144', c0='' WHERE CAST(CASE vt1.c0  WHEN vt1.c0 THEN vt1.c0 WHEN x'e344fc59' THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END AS REAL); -- 0ms;
REINDEX RTRIM; -- 0ms;
DELETE FROM vt1 WHERE vt1.c0; -- 0ms;
INSERT INTO vt2(vt2, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt2(vt2, rank) VALUES('pgsz', '16939'); -- 0ms;
INSERT INTO vt1(vt1) VALUES('optimize'); -- 0ms;
UPDATE OR IGNORE vt0 SET c0=NULL; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('usermerge', 6); -- 1ms;
UPDATE OR IGNORE vt0 SET c0='' WHERE ((((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c1)))AND((~ ('-1120392740')))); -- 0ms;
UPDATE vt2 SET (c0)=(NULL) WHERE NULL; -- 0ms;
INSERT OR IGNORE INTO vt2(c1) VALUES (x''); -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('pgsz', '35878'); -- 0ms;
INSERT OR ROLLBACK INTO vt0(c0) VALUES ((((3.78058961E8 IN ('-2134409023')))<<(CASE x''  WHEN NULL THEN 0.39631158365003705 WHEN NULL THEN '' WHEN '676586831' THEN x'' END))), (x''), (''); -- 0ms;
INSERT INTO vt2(vt2, rank) VALUES('merge', -2141618206);\n; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('automerge', 14); -- 0ms;
INSERT OR REPLACE INTO vt1(c0) VALUES (NULL); -- 0ms;
PRAGMA main.short_column_names; -- 0ms;
BEGIN  TRANSACTION; -- 0ms;
UPDATE vt1 SET c0=0.9943108419463476, c0=NULL, c0=NULL; -- 0ms;
INSERT OR IGNORE INTO vt2(c0) VALUES (0xffffffffa0e326b6), ('{O'), (NULL), (NULL), (-119992216); -- 0ms;
PRAGMA mmap_size; -- 0ms;
END TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0) VALUES('integrity-check'); -- 0ms;
UPDATE OR FAIL vt2 SET (c1)=(NULL) WHERE CASE WHEN vt2.c0 THEN ((vt2.c0) BETWEEN (vt2.c1) AND (vt2.c1)) END; -- 0ms;
INSERT OR REPLACE INTO vt1 VALUES (NULL); -- 0ms;
UPDATE OR IGNORE vt0 SET (c1)=('') WHERE ((((('676586831') ISNULL)))>=(((NOT (vt0.c1))))); -- 0ms;
PRAGMA main.stats; -- 0ms;
INSERT INTO vt1(vt1, rank) VALUES('merge', -2035664096);\n; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('automerge', 6); -- 0ms;
BEGIN DEFERRED TRANSACTION; -- 0ms;
INSERT INTO vt2(vt2) VALUES('integrity-check'); -- 1ms;
UPDATE OR REPLACE vt2 SET (c1, c0, c1, c0)=('G]F', NULL, 'W5c崪', NULL); -- 0ms;
INSERT OR IGNORE INTO vt1 VALUES (x''); -- 0ms;
ANALYZE vt2; -- 0ms;
INSERT INTO vt2(vt2) VALUES('integrity-check'); -- 0ms;
UPDATE OR IGNORE vt1 SET c0=-8.36316899E8 WHERE ((vt1.c0 COLLATE NOCASE)OR((NOT (vt1.c0)))); -- 1ms;
REINDEX; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
PRAGMA main.optimize; -- 0ms;
PRAGMA main.locking_mode; -- 0ms;
DELETE FROM sqlite_stat1 WHERE ((((((0.2968900920187386)AND('-1')))AND(0Xffffffffbcf2b6c8))) BETWEEN (CASE NULL  WHEN x'e191' THEN 0.2968900920187386 ELSE '981946228' END) AND (json_remove('', '5!Kh?,fyQ', NULL, NULL, 0xffffffffa3ba13b3, 0.8295156990265207))); -- 0ms;
INSERT OR ROLLBACK INTO vt2(c0, c1) VALUES (NULL, 'YA	'), (NULL, x''), (0.2626609538306449, '	&8IPm'); -- 1ms;
UPDATE OR ROLLBACK vt2 SET (c0, c0, c0)=(3.78058961E8, '-1176097307', 646894314); -- 1ms;
PRAGMA temp.reverse_unordered_selects; -- 0ms;
UPDATE vt1 SET c0='f틪S궬!G8a' WHERE (((NOT (vt1.c0)))OR('-2035664096')); -- 1ms;
UPDATE vt0 SET c1=0.2626609538306449; -- 1ms;
BEGIN  TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('usermerge', 10); -- 0ms;
INSERT OR ROLLBACK INTO vt2(c0) VALUES (0.4819948357144552); -- 0ms;
INSERT INTO vt2(vt2) VALUES('optimize'); -- 1ms;
PRAGMA main.journal_size_limit = 1932928082384527556; -- 0ms;
INSERT OR ABORT INTO vt0(c0, c1) VALUES (-624032029, NULL); -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 985926340); -- 1ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 0ms;
INSERT INTO vt2(vt2) VALUES('integrity-check'); -- 0ms;
UPDATE OR FAIL vt1 SET c0=NULL WHERE CASE WHEN ((vt1.c0)IS(vt1.c0)) THEN '-71021363' WHEN ((vt1.c0)/(vt1.c0)) THEN ((vt1.c0) ISNULL) WHEN CASE WHEN vt1.c0 THEN vt1.c0 END THEN vt1.c0 END; -- 0ms;
UPDATE OR IGNORE vt1 SET c0='-1417598274'; -- 0ms;
INSERT OR ROLLBACK INTO vt1(c0) VALUES (x'af56ae76'); -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
INSERT INTO vt0(vt0, rank) VALUES('rank', 'bm25(10.0, 5.0)'); -- 1ms;
UPDATE vt2 SET (c1)=('-1176097307') WHERE CASE WHEN vt2.c1 THEN vt2.c1 END COLLATE RTRIM; -- 0ms;
PRAGMA optimize; -- 0ms;
INSERT OR FAIL INTO vt1 VALUES (x''); -- 0ms;
END TRANSACTION; -- 0ms;
ROLLBACK TRANSACTION; -- 0ms;
SELECT DISTINCT (+ (((vt2.c0)GLOB(NULL)))) FROM vt1, vt0, vt2 WHERE ((((x'')) NOT BETWEEN ((((((-6.24032029E8)OR(0.11359166823603406)))AND(NULL)))) AND ((CAST('' AS REAL))))); -- 0ms;
SELECT DISTINCT AVG(CASE WHEN vt1.c0 THEN vt2.c0 END) FROM vt2 LEFT OUTER JOIN vt0 ON ((vt0.c1 COLLATE BINARY) NOTNULL);SELECT ALL vt0.c1 COLLATE BINARY FROM vt2, vt0 WHERE (((((((-1585166300) NOTNULL))OR((((x''))<>((',Xl㬠3-w'))))))OR((~ (' hwf'))))); -- 0ms;
SELECT DISTINCT ((((vt1.c0) ISNULL))>(vt2.c0 COLLATE NOCASE)) FROM vt2 WHERE (QUOTE(COALESCE('턝L', x''))) ORDER BY (((vt1.c0)) NOT BETWEEN ((((x'b100')||(vt2.c0)))) AND ((vt2.c1 COLLATE NOCASE))) DESC;SELECT DISTINCT ((CASE WHEN vt0.c1 THEN vt1.c0 WHEN vt0.c0 THEN vt2.c1 WHEN vt1.c0 THEN vt1.c0 END) NOT BETWEEN ((NOT (vt0.c0))) AND (vt1.c0 COLLATE RTRIM)) FROM vt0, vt1 WHERE ((((((0.3658204427662416 IN ()))AND((+ (x'')))))OR(CAST('0.9275340651420406' AS NUMERIC))));SELECT (((((vt2.c0) BETWEEN (vt2.c1) AND (vt1.c0))))=((((((vt2.c0)AND(vt0.c0)))OR(vt2.c0))))), vt2.c0, (((vt1.c0 IN (vt1.c0, vt0.c1)))/(CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c1 END)) FROM vt0;SELECT ALL PERCENT_RANK() OVER (), CASE NULL  WHEN ((vt2.c1) NOT BETWEEN (NULL) AND (vt1.c0)) THEN vt2.c1 END, (((~ (0.8318594234082713)))<((vt2.c0 IN (vt1.c0, vt2.c1)))) FROM vt0;SELECT ALL LIKELIHOOD((+ (vt0.c1)), 0.15028802858856882) FROM vt1 WHERE (IFNULL(DISTINCT (('1698968954') NOT BETWEEN (x'') AND (x'')), CAST(0.007586292381641435 AS NUMERIC)));SELECT ALL CASE (((vt1.c0))>((vt2.c0)))  WHEN (~ (vt0.c0)) THEN ((((vt2.c1)AND(0xfffffffff8d91068)))OR(vt2.c1)) ELSE (((0.8384411729137591)) NOT BETWEEN ((vt0.c1)) AND ((vt1.c0))) END FROM vt1 WHERE (ABS(DISTINCT ((NULL)AND(NULL))));SELECT DISTINCT vt0.c0 FROM vt0, vt1, vt2 GROUP BY vt1.c0; -- 2ms;
SELECT DISTINCT TRIM(LIKELY(vt0.c1)) FROM vt1 WHERE ((((('') BETWEEN (NULL) AND (0.8816696260377753)))||(CASE x''  WHEN 0.11359166823603406 THEN 0.7700236919688482 WHEN '-1548086349' THEN 0.7850775566429539 WHEN 0.8429820273966456 THEN x'' ELSE x'' END)));SELECT DISTINCT x'05da' FROM vt1 WHERE (((('8|y2r佴2<')) NOT BETWEEN ((COALESCE(DISTINCT NULL, 0.8178216256672592))) AND (((- (x'')))))); -- 0ms;
SELECT DISTINCT (((0.8178216256672592, vt2.c1, vt2.c1, vt1.c0, vt2.c1)) NOT BETWEEN ((((981946228) BETWEEN (vt0.c0) AND (vt1.c0)), ((((vt2.c0)AND(vt1.c0)))AND(vt1.c0)), ((vt0.c1)OR(vt2.c0)), ((vt2.c0)<=(vt0.c1)), ((vt0.c0)IS(vt2.c0)))) AND ((LIKELIHOOD(vt0.c1, 0.08091259093714775), ((vt2.c0) IS TRUE), ((vt0.c1) ISNULL), ((vt2.c1)GLOB(vt2.c1)), CAST(vt1.c0 AS INTEGER)))) FROM vt2 WHERE (((((((((((((0.3658204427662416)AND(-1595726154)))OR(0xffffffffffe9deca)))OR(((NULL) NOT BETWEEN (0.021842733857990515) AND (NULL)))))OR(((-1.7976931348623157E308)%(NULL)))))AND((((0Xffffffff9d4c9c78))>=(('-1176097307'))))))AND(CAST(x'' AS INTEGER))));SELECT vt0.c1 FROM vt1;SELECT ALL ((vt2.c1)!=(x'b092')) FROM vt1 WHERE (((((x'')+('-1124944184'))) NOT BETWEEN (CASE '-1176097307'  WHEN NULL THEN '-1017909972' END) AND (((('#z')) NOT BETWEEN (('-624032029')) AND ((0.4630496027157248))))));SELECT DISTINCT ((vt0.c1) NOT NULL) FROM vt0, vt1 WHERE (((('', '-2116944853', 0x39577b77)) BETWEEN (((x'' IN ()), '-2141618206', '-1548086349')) AND ((((NULL)!=('646894314')), ((((NULL)AND(x'5ded')))OR(NULL)), (('0.2626609538306449')>>('A/')))))); -- 1ms;
SELECT ((((((vt0.c0)|(0Xffffffffde10b9dc)))OR(CASE WHEN x'' THEN vt1.c0 WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt2.c1 WHEN '-1548086349' THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 END)))AND((+ (vt1.c0)))) FROM vt2, vt1, vt0 WHERE (((((((((('X' IN ('X')))AND(((-1595726154)GLOB(NULL)))))AND(NULL COLLATE BINARY)))OR(((0.16489883272962624) BETWEEN (0.4138580537991583) AND ('uꧬ')))))AND((NOT (NULL))))); -- 0ms;
SELECT DISTINCT (NOT (CASE vt2.c1  WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c0 END)) FROM vt1, vt2 WHERE ((~ (((x'') IS FALSE))));SELECT DISTINCT ((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 END)<<(((vt2.c0)-(vt2.c0)))), (MAX(vt1.c0) IN ('-1176097307', (((vt0.c0))<=((vt2.c1))))), LIKELIHOOD(DISTINCT (+ (vt2.c1)), 0.5143801285561072) FROM vt1, vt2, vt0; -- 1ms;
SELECT DISTINCT COUNT(*) FILTER(WHERE (~ (((0.925084523843171) NOT NULL)))) OVER () FROM vt0, vt1, vt2; -- 1ms;
SELECT ALL ((MAX(vt0.c0))<=(vt1.c0)) FROM vt1, vt0, vt2; -- 1ms;
SELECT DISTINCT ((vt2.c0) NOTNULL) COLLATE BINARY, (~ ((vt2.c1 IN ()))), ((vt2.c0)GLOB(CASE WHEN vt0.c0 THEN vt0.c0 END)) FROM vt0 WHERE (CASE WHEN 0.8429820273966456 THEN ((x'') IS TRUE) END);SELECT DISTINCT vt2.c0 FROM vt1;SELECT DISTINCT (CAST(vt1.c0 AS REAL) IN ()) FROM vt0 WHERE (((CASE WHEN 0.29384370421949146 THEN '0.29384370421949146' ELSE NULL END)-((('') ISNULL)))) LIMIT -2027649588 OFFSET -1775811807; -- 0ms;
SELECT DISTINCT RANK() OVER () FROM vt0, vt2; -- 1ms;
SELECT ALL ((((((((((vt2.c1)OR(vt1.c0)))OR(vt0.c0)))AND(vt0.c1)))OR(vt2.c1))) BETWEEN ((((NULL)) NOT BETWEEN ((vt0.c0)) AND ((vt2.c0)))) AND ((((vt1.c0)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c1))))) FROM vt1, vt2, vt0 WHERE ((((0xfffffffff02c99ab IN (0.6824303391414087, x'826d')))IS(CAST('-2134409023' AS NUMERIC)))) LIMIT -1152481181; -- 0ms;
SELECT ALL FIRST_VALUE((((vt2.c1)) BETWEEN ((CAST(vt0.c0 AS INTEGER))) AND ((((vt2.c1)>(vt0.c1)))))) OVER () FROM vt0, vt1, vt2; -- 2ms;
SELECT DISTINCT ((((((((((((vt2.c1)OR(vt0.c1)))OR(1632284958)))AND(vt0.c0)))AND(vt2.c1)))OR(CASE WHEN vt1.c0 THEN vt1.c0 END)))AND(((vt0.c1)&(vt0.c0)))) FROM vt2, vt1;SELECT DISTINCT LAST_VALUE((NOT (((vt0.c1)-(vt0.c1))))) OVER ( ROWS  UNBOUNDED PRECEDING), CUME_DIST() OVER (), ((((vt2.c1 IN ())))<(((~ (0Xffffffffffe9deca))))), (vt2.c1 IN ()) COLLATE RTRIM, CAST(CAST(vt1.c0 AS NUMERIC) AS INTEGER) FROM vt1, vt0; -- 0ms;
SELECT DISTINCT ((CASE WHEN vt2.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt0.c1 END) ISNULL) FROM vt2, vt0;SELECT GROUP_CONCAT(((vt1.c0) NOT BETWEEN (vt2.c0) AND (vt2.c0))) OVER ( ORDER BY CAST(COALESCE(vt2.c0, vt0.c1, vt1.c0, vt0.c0) AS TEXT)  NULLS FIRST) FROM vt0 WHERE (((((((((CASE WHEN '-2027649588' THEN '-y*z+O' END)OR((('-434083122')==(NULL)))))OR(CASE 's胁YPtCk'  WHEN NULL THEN NULL ELSE 0.8178216256672592 END)))AND(UPPER(0.6218489013303605))))OR(((NULL)LIKE(x'')))));SELECT DISTINCT TOTAL(((vt2.c1) IS FALSE)) FILTER(WHERE LOWER(DISTINCT CAST(vt1.c0 AS NUMERIC))) OVER () FROM vt1, vt0 WHERE (((((x'')>=(0.39631158365003705))) NOT BETWEEN ((~ ('1652867970'))) AND ('' COLLATE RTRIM)));SELECT DISTINCT NULLIF(DISTINCT vt1.c0 COLLATE RTRIM, (vt0.c1 IN ())) FROM vt1 WHERE (NULL); -- 0ms;
SELECT ALL ((vt1.c0) NOT NULL) FROM vt0;SELECT AVG(((((vt0.c1)OR(vt2.c1)))AND(0.8712412810007439))) OVER () FROM vt2;SELECT DISTINCT CAST(((((vt2.c0)OR(vt0.c0)))OR(vt1.c0)) AS REAL) FROM vt1 WHERE (((0Xffffffffd31a8b5f) BETWEEN ((((('&V7XXW䴨2')OR('1698968954')))AND(0.6824303391414087))) AND (((0.06503180997757996) IS FALSE)))) LIMIT 412590552 OFFSET -71021363;SELECT ((((LOWER(vt2.c1))AND(((vt0.c1) IS TRUE))))OR(x'')) FROM vt2, vt0, vt1 WHERE (HEX(DISTINCT ((NULL)*('94194984')))); -- 0ms;
SELECT DISTINCT CAST(AVG(vt0.c1) AS TEXT) FROM vt0 NOT INDEXED WHERE (((x'' COLLATE BINARY)LIKE((((x'', '', 0.007586292381641435)) NOT BETWEEN (('0.2968900920187386', x'2b0f', '-1548086349')) AND ((x'c32d0407', '-1548086349', ''',㱔\[ykV[')))))); -- 0ms;
SELECT DISTINCT NULL COLLATE NOCASE FROM vt1, vt0, vt2 GROUP BY ((((vt0.c0)IS NOT(vt2.c1)))>=((NOT (vt2.c1)))) HAVING AVG(MAX(vt2.c0));SELECT ALL (((vt0.c1 IN (vt0.c0, vt2.c1)))||(((vt0.c1) IS TRUE))), json_extract(3.78058961E8 COLLATE RTRIM, CASE vt1.c0  WHEN vt2.c1 THEN vt0.c0 ELSE vt1.c0 END), ((COUNT(*)) IS FALSE) FROM vt2, vt0, vt1 WHERE ((((((('F湓')/(x'')))AND((((NULL, 0.8429820273966456, '2082756409')) BETWEEN ((x'', 818013466, NULL)) AND ((NULL, 0xfffffffff446c557, '-2063533831'))))))AND(CAST(x'' AS BLOB)))); -- 0ms;
SELECT DISTINCT ((((vt1.c0) NOT BETWEEN (vt2.c1) AND (vt1.c0)))IS NOT(vt0.c1 COLLATE BINARY)) FROM vt1 GROUP BY ((((CASE '㧭{H'  WHEN vt1.c0 THEN vt2.c1 ELSE vt2.c0 END)OR('-265512533')))OR(NULLIF('-1450294', vt2.c0))), (((NOT (vt0.c0)))*(((vt0.c1)OR(vt2.c1)))), ((((((vt2.c1)AND(vt0.c0)))AND(vt1.c0))) NOT BETWEEN (CAST(vt2.c1 AS TEXT)) AND (((vt0.c0)<>(vt0.c1))));SELECT DISTINCT ((vt0.c0 COLLATE BINARY)<(((vt2.c0)||(vt0.c1)))) FROM vt2 WHERE (((((((((CASE NULL  WHEN NULL THEN 0xffffffffde4a1953 WHEN '646894314' THEN NULL WHEN NULL THEN '1nowA' END)AND(CAST('-756176404' AS INTEGER))))OR((- (NULL)))))AND(((('0.8318594234082713', '', NULL)) BETWEEN ((0.028415396396729298, 0.047812941022086664, 's胁yptck')) AND ((0.2633494155984837, x'', ''))))))OR((NOT (NULL))))) UNION SELECT DISTINCT ((vt2.c1 IN ()) IN ((+ (vt2.c1)))) FROM vt2;SELECT ALL ((vt0.c1 COLLATE BINARY)-(SUM(vt0.c1))) FROM vt0, vt2, vt1 WHERE (((((((((((((x'fbf5')OR(NULL)))AND('')))OR(x'')))AND(0xffffffffb1b9c1d5)))OR('')))OR(x'f92d')) COLLATE BINARY COLLATE BINARY); -- 0ms;
SELECT DISTINCT ROW_NUMBER() OVER () FROM vt1, vt2, vt0 WHERE (((CAST('' AS TEXT)) BETWEEN (CASE WHEN x'' THEN 0.06312311268224213 ELSE '1530949923' END) AND (((0x6f14ee6c)LIKE('1x'))))); -- 0ms;
SELECT DISTINCT (COALESCE(NULL, vt0.c1, vt2.c1, vt2.c0) IN (load_extension(x'e307'))) FROM vt1, vt2;SELECT DISTINCT COUNT(*) OVER (), (+ (CASE vt1.c0  WHEN vt0.c0 THEN vt1.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt1.c0 THEN vt2.c1 END)), x'9398' FROM vt0, vt1;SELECT ALL SUM(((vt2.c1)<(x''))) COLLATE NOCASE FROM vt1 WHERE (((((x'') IS TRUE)) NOTNULL)) LIMIT -882237110 OFFSET 1011329133;SELECT DISTINCT MIN(((vt2.c1)>=(vt2.c0))) FROM vt0, vt1, vt2; -- 1ms;
SELECT ((CAST(vt2.c0 AS BLOB)) NOT NULL), (((vt0.c0, vt1.c0, vt2.c1)) BETWEEN ((((vt2.c1)*(vt0.c1)), (((vt2.c1)) BETWEEN ((vt2.c0)) AND ((vt0.c0))), (((vt2.c1)) BETWEEN ((vt0.c0)) AND ((vt0.c1))))) AND ((((0X75cdf157)&(vt0.c0)), NULL, vt2.c0))), ((CASE WHEN vt2.c1 THEN vt2.c0 END) IS FALSE) FROM vt2, vt0, vt1; -- 0ms;
SELECT ALL CAST(0.3939091112807641 AS REAL) FROM vt0, vt1 RIGHT OUTER JOIN vt2 ON (vt2.c0 IN ()) COLLATE RTRIM COLLATE NOCASE; -- 2ms;
SELECT ALL ((((((vt2.c1)AND(vt1.c0)))AND(((vt0.c1)OR(vt2.c1)))))OR((- (vt0.c0)))) FROM vt2 WHERE (((CASE 1876627857  WHEN '1914133802' THEN '1530949923' WHEN 0.6218489013303605 THEN '0.007586292381641435' WHEN NULL THEN '1933727407' ELSE NULL END) NOTNULL)) ORDER BY (((((vt2.c0 IN ()))OR((vt0.c0 IN ()))))OR(vt0.c0 COLLATE BINARY))  NULLS FIRST, CASE WHEN ABS(DISTINCT vt0.c1) THEN vt2.c1 COLLATE NOCASE ELSE vt0.c0 COLLATE NOCASE END  NULLS LAST;SELECT DISTINCT CAST((vt2.c1 IN ()) AS REAL) FROM vt2 LIMIT 860738294 OFFSET -257882277; -- 0ms;
SELECT ALL CAST((((vt1.c0))=((vt2.c1))) AS BLOB), vt1.c0, PERCENT_RANK() OVER () FROM vt0 WHERE ((- ((('-882237110')LIKE(NULL))))) UNION ALL SELECT ALL NULL, LOWER(DISTINCT CASE WHEN vt0.c0 THEN 0.8991661241571484 WHEN vt0.c0 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c1 ELSE vt2.c0 END), CASE WHEN ((vt0.c1)<<(vt2.c0)) THEN vt1.c0 COLLATE BINARY WHEN (- (vt2.c0)) THEN (NOT (vt2.c1)) WHEN COUNT(vt2.c1) THEN CAST(vt2.c1 AS REAL) END FROM vt1 WHERE (UNLIKELY(DISTINCT (('-1655923592')>=('xoᨔ7*'))));SELECT DISTINCT (+ (TOTAL(x'06a7'))), CASE (((vt1.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0)))  WHEN vt2.c1 COLLATE RTRIM THEN ((vt2.c1)/(vt2.c1)) ELSE vt0.c1 END, ((vt0.c0 COLLATE BINARY)*(HEX(vt2.c1))) FROM vt1, vt0, vt2 LIMIT -1176867737 OFFSET -1797370983; -- 1ms;
SELECT (((((vt2.c0, vt2.c1, vt2.c0))==((vt2.c0, vt0.c1, vt2.c1)))) BETWEEN (((((((((vt1.c0)AND(vt2.c0)))AND(vt0.c1)))AND(vt2.c1)))OR(vt0.c0))) AND (CASE vt0.c0  WHEN vt0.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt2.c1 END)), vt0.c0, (((- (vt2.c1)))<>(((vt2.c0)+(vt0.c0)))) FROM vt0, vt2 WHERE (((((0xffffffffa110d5a9)/(780785830))) BETWEEN (CASE x''  WHEN x'cde0' THEN NULL WHEN 0.3101243846437908 THEN x'29f4' WHEN 1.933727407E9 THEN 0.49046567402160157 ELSE 0xffffffffce26d11d END) AND ((('') BETWEEN (-1.592732247E9) AND (NULL)))));SELECT DISTINCT (+ ('1694078846' COLLATE RTRIM)) FROM vt1, vt2 WHERE ((((((('1865881303')AND('')))AND(0.9941485504786068))) NOTNULL)); -- 0ms;
SELECT DISTINCT (- (((vt2.c0) BETWEEN (vt0.c1) AND (vt2.c0)))) FROM vt2 WHERE (CAST(((1.011329133E9)GLOB(x'')) AS TEXT)) ORDER BY '' DESC  NULLS LAST, ((((vt2.c1 COLLATE RTRIM)AND(((vt0.c0)+(vt0.c0)))))AND(CAST(vt0.c1 AS INTEGER)))  NULLS FIRST, CAST(vt2.c0 AS TEXT);SELECT DISTINCT TOTAL((vt1.c0 IN ())) COLLATE BINARY FROM vt1, vt2 WHERE ((((((((((((((((x'', 0.6956989474739945, x''))==((x'', 0.28530361660953596, 0.083604384273125))))AND(CAST(0.6573811675357147 AS TEXT))))AND(((x'4c3c')&(0.6956989474739945)))))AND(((NULL)IS NOT(NULL)))))OR((((('')AND(NULL)))OR(NULL)))))AND(((0.20397029179303006) NOT NULL))))OR(0.8207663816684411 COLLATE BINARY))); -- 0ms;
SELECT (((vt0.c1 IN (vt0.c0))) NOTNULL) FROM vt2;SELECT ALL NULL FROM vt0 WHERE ((((NULL)) NOT BETWEEN (((((('()<ry}')AND('')))AND(0.5100500481615997)))) AND (((0.6716564582484209 IN ()))))); -- 0ms;
SELECT DISTINCT vt2.c1, TRIM((+ (vt2.c1))), ((((((((((vt0.c1)>=(vt2.c0)))AND(((vt2.c1) BETWEEN (vt0.c1) AND (vt0.c0)))))AND((vt0.c0 IN ()))))OR(((0.758403777372904) NOT BETWEEN (vt2.c0) AND (vt1.c0)))))OR(IFNULL(DISTINCT vt1.c0, vt2.c1))) FROM vt0, vt1, vt2; -- 0ms;
SELECT UPPER(DISTINCT (NOT (vt2.c0))), x'1a68', ((((((vt2.c0) IS FALSE))AND(NULL)))AND(CAST(vt2.c0 AS TEXT))), (((vt2.c0)) NOT BETWEEN (((((vt0.c1))<>((vt2.c0))))) AND (((vt2.c0 IN ())))), CAST(CAST(vt2.c0 AS NUMERIC) AS NUMERIC) FROM vt1 WHERE (CASE WHEN x'db39' THEN ((x'')|(NULL)) ELSE ((1.788964435E9) IS TRUE) END) LIMIT -265512533;SELECT ALL rtreenode(((vt0.c1) NOTNULL), ((vt2.c0)%(vt2.c0))), ((vt1.c0)||(vt0.c0)) COLLATE NOCASE, AVG(CAST(vt2.c1 AS INTEGER)) OVER (), ((CASE WHEN vt2.c0 THEN vt2.c1 ELSE vt0.c1 END)>>(((vt2.c0)+(vt0.c0)))), 0.6573811675357147, ((-1547786208) IS FALSE), 0xffffffff9d5c988b FROM vt0, vt2, vt1; -- 3ms;
SELECT DISTINCT ((CAST(NULL AS TEXT)) IS TRUE) FROM vt1 WHERE (INSTR('-1797370983', 0.2642375207912675) COLLATE NOCASE); -- 0ms;
SELECT ALL (((('676586831') IS TRUE)) IS FALSE), TYPEOF(CAST(vt2.c1 AS INTEGER)), 0.9762278942450078 FROM vt0, vt1 WHERE (((CAST(NULL AS INTEGER)) BETWEEN (NULL COLLATE NOCASE) AND (CASE WHEN NULL THEN x'ad32' WHEN 0x29c1771d THEN 9.62034551E8 WHEN NULL THEN 'tku\rm9⪾bT' ELSE NULL END))) ORDER BY CASE ((vt0.c1)IS(vt0.c0))  WHEN (((vt0.c1, vt0.c1, vt0.c1))<((vt2.c0, vt0.c1, vt2.c1))) THEN CAST(vt2.c0 AS TEXT) END, CAST((NOT (vt0.c0)) AS NUMERIC) DESC LIMIT -1313226283 OFFSET 1144498840;SELECT ALL SUM(((((vt0.c1)AND(vt0.c1)))OR(vt1.c0))) FROM vt0, vt1, vt2; -- 1ms;
SELECT ALL (((vt0.c0 IN ()))IS NOT(((vt0.c1) BETWEEN (vt0.c1) AND (vt0.c0)))) FROM vt0 ORDER BY vt0.c0; -- 0ms;
SELECT DISTINCT (vt2.c1 IN (vt2.c1)) COLLATE NOCASE FROM vt0 WHERE (0xffffffffc9721747);SELECT (+ ((((vt2.c0))>=((vt1.c0))))), CAST(CASE WHEN vt2.c0 THEN vt1.c0 WHEN vt0.c1 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt1.c0 WHEN vt0.c0 THEN vt0.c0 END AS TEXT), ((((((vt2.c1) IS TRUE))OR(MAX(vt1.c0))))AND(UPPER(DISTINCT vt0.c0))) FROM vt1, vt2 NOT INDEXED;SELECT DISTINCT (((vt2.c0, vt1.c0, -1831065235)) BETWEEN ((CAST(vt0.c1 AS INTEGER), CASE vt2.c1  WHEN vt1.c0 THEN x'' END, vt0.c0 COLLATE NOCASE)) AND ((((((vt2.c0)AND(vt0.c0)))AND(vt2.c0)), UNLIKELY(DISTINCT '423036691'), (NOT (vt0.c0))))) FROM vt1 WHERE ((+ (CASE WHEN NULL THEN 0.06408774676200824 ELSE NULL END)));SELECT CAST(vt0.c0 AS INTEGER) COLLATE NOCASE, (NULL IN (vt1.c0 COLLATE NOCASE)), vt2.c0 FROM vt0, vt1 WHERE (((((x'')OR(IFNULL(x'', '1282643705'))))AND((('()')<(2057708390)))));SELECT ALL '-165657766' FROM vt0, vt1 WHERE (((x'2e7d' COLLATE BINARY) NOTNULL)); -- 0ms;
SELECT DISTINCT vt2.c1 FROM vt1, vt2 WHERE (((0.007586292381641435)IS((((NULL)) BETWEEN ((NULL)) AND (('-165657766')))))); -- 0ms;
SELECT ALL ((((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c1)))|((NOT (vt0.c0)))) FROM vt1, vt2 WHERE ((((NOT (x''))) BETWEEN (((((x'')AND(x'')))AND(x''))) AND ((0.24666848963261245 IN (NULL, NULL)))));SELECT ALL ((((((vt0.c1)AND(vt1.c0)))AND(NULL)))>=(vt0.c1 COLLATE RTRIM)) FROM vt0;SELECT DISTINCT (((((vt2.c1)) BETWEEN ((vt2.c0)) AND ((vt1.c0)))) BETWEEN (vt2.c0) AND (((vt2.c1)!=(vt0.c0)))) FROM vt1, vt0, vt2; -- 0ms;
SELECT ALL ((COUNT(*))IS NOT(NULLIF(vt0.c0, vt2.c1))) FROM vt2;SELECT vt1.c0 COLLATE RTRIM, x'', (((((x'', vt0.c1, vt0.c1))>=((vt2.c0, vt0.c0, vt0.c0)))) IS TRUE) FROM vt2;SELECT DISTINCT ((CAST(vt2.c0 AS BLOB))OR((vt1.c0 IN ()))) FROM vt0;SELECT DISTINCT COUNT(*) OVER (), (((x'', vt2.c0, vt1.c0)) BETWEEN ((0.15303931842204477, vt2.c0, vt0.c1)) AND ((vt2.c1, vt0.c1, vt2.c0))) COLLATE BINARY, MAX(((vt0.c0) NOT BETWEEN (vt0.c1) AND (''))), CAST(((vt1.c0) BETWEEN (vt0.c0) AND ('\r')) AS BLOB), ((((vt1.c0) ISNULL))==(((vt0.c0) NOT BETWEEN (vt1.c0) AND (vt2.c0)))) FROM vt0;SELECT ALL ((((vt2.c0)OR(((vt2.c1)IS(vt0.c0)))))AND((((vt0.c0, vt2.c0, vt0.c0, vt1.c0, vt0.c1, vt2.c1, vt1.c0)) BETWEEN ((vt0.c0, 0.6470365752918712, vt2.c1, vt1.c0, '', vt1.c0, vt0.c0)) AND ((vt2.c1, vt0.c0, vt2.c0, vt2.c0, vt2.c0, vt2.c1, vt0.c1))))) FROM vt2, vt0, vt1 WHERE ((((((((-915269817)OR(x'')))AND('4Jgr懄ue77')), CASE 0X55f150af  WHEN NULL THEN 0.7750232037331626 END, (('700544797')<(-257882277)), ((NULL)!=(0.29384370421949146)), ('1865881303' IN ())))<>((((((x'ad1d')AND('')))OR(x'')), x'' COLLATE BINARY, ((((0.7597010756393976)AND('761656720')))AND('1865881303')), ((0.5509626756558462) NOT BETWEEN ('>D{}\4c') AND (x'')), ((((0.35724811259189027)AND(0x30c1e51a)))OR(x'')))))); -- 1ms;
SELECT DISTINCT (((vt0.c1)) BETWEEN ((((vt2.c0) NOT NULL))) AND ((load_extension(vt2.c0, vt2.c1)))) FROM vt1 LIMIT -1666980631 OFFSET -1369664454;SELECT (((((vt0.c1))<((vt0.c1)))) NOTNULL) FROM vt0, vt1; -- 0ms;
SELECT CASE ((vt0.c1)*(vt0.c0))  WHEN NULL THEN vt2.c0 COLLATE RTRIM END, (GROUP_CONCAT(NULL) IN ()), DENSE_RANK() OVER () FROM vt1;SELECT ((((((vt2.c1)+(vt0.c1)))AND(TOTAL_CHANGES())))AND(NULL)), PERCENT_RANK() OVER ( RANGE  CURRENT ROW EXCLUDE TIES), 0.2642375207912675 FROM vt2;SELECT ALL CASE ((vt1.c0)IS NOT(vt2.c1))  WHEN 1 THEN x'' WHEN (vt0.c1 IN (vt2.c1)) THEN NULL WHEN ((vt2.c1) NOT BETWEEN (-8.36316899E8) AND (vt1.c0)) THEN CAST(vt0.c0 AS TEXT) ELSE '761656720' END FROM vt2, vt0, vt1 WHERE (((CASE ''  WHEN x'' THEN -140053774 ELSE 0xffffffff985e5cd7 END) IS TRUE)); -- 0ms;
SELECT DISTINCT NTH_VALUE(CASE (((0.8991661241571484)) NOT BETWEEN ((0.7334398983013257)) AND ((vt2.c1)))  WHEN vt2.c0 THEN ((vt0.c0)||(0X6544357a)) WHEN CAST(x'c1a3' AS TEXT) THEN ((vt1.c0) NOTNULL) WHEN SQLITE_COMPILEOPTION_GET(x'') THEN vt0.c0 ELSE vt0.c1 COLLATE NOCASE END, TRIM(DISTINCT CASE vt0.c1  WHEN vt0.c0 THEN NULL WHEN vt0.c1 THEN vt2.c1 WHEN 0.6956989474739945 THEN vt0.c1 END, ((vt2.c0)<>(vt0.c1)))) OVER () FROM vt1, vt2, vt0 GROUP BY 0.4082346548018194 ORDER BY LIKELY(DISTINCT (((vt0.c0))==((0.04373912073802955)))) DESC;SELECT ALL (+ (((vt0.c1)/(vt1.c0)))) FROM vt1;SELECT DISTINCT (vt2.c1 COLLATE RTRIM IN ()), (NOT (vt0.c0)) COLLATE RTRIM, '646894314' FROM vt1 WHERE (((('#誧呶')) BETWEEN (('676586831' COLLATE NOCASE)) AND ((((((x'49668dd3')AND(x'')))AND(x''))))));SELECT DISTINCT (((NOT (vt2.c0)))IS(((vt2.c0)<=(''']cSa{NG')))) FROM vt2, vt0 WHERE (((((((0.8429820273966456)+(NULL)))OR(((0.0034908025015712996) IS FALSE))))OR(-827267839 COLLATE BINARY))); -- 1ms;
SELECT ((LTRIM(vt0.c0)) NOT NULL) FROM vt2, vt1;SELECT ALL x'6436', (~ ((((vt1.c0, vt0.c0, vt0.c1, vt0.c0, vt0.c0))>=((vt2.c0, NULL, vt1.c0, vt1.c0, vt1.c0))))), NULL, CAST(((vt2.c0) BETWEEN (-1683154778) AND (x'3697')) AS INTEGER), ((CAST(vt1.c0 AS INTEGER))-(CAST(vt1.c0 AS BLOB))) FROM vt2, vt0, vt1 WHERE ((NOT (0.8168092674316784))); -- 0ms;
SELECT ((vt2.c1) NOT BETWEEN (((((vt1.c0)AND(vt1.c0)))AND(vt0.c1))) AND (0.8816696260377753)) FROM vt1, vt2, vt0 WHERE (((CASE WHEN x'' THEN ')lTQSM7' ELSE x'1d46' END)<(CASE WHEN 0Xfffffffff02c99ab THEN 0Xffffffff8fe2acbc END))); -- 0ms;
SELECT DISTINCT COUNT(*), ((CAST(vt0.c0 AS INTEGER))|(vt2.c0 COLLATE BINARY)), ((((vt2.c0) IS FALSE))AND(TYPEOF(vt0.c1))) FROM vt0 WHERE (CAST((NULL IN (x'', 'LN&fZo>')) AS TEXT)) LIMIT 1004712575;SELECT NTILE((~ ((((vt2.c1, vt1.c0, vt1.c0)) BETWEEN ((vt2.c0, vt2.c1, vt2.c1)) AND ((vt2.c0, vt1.c0, vt2.c0)))))) OVER (), ((((vt0.c0) BETWEEN (vt1.c0) AND (vt0.c0)))<<(GROUP_CONCAT(vt2.c1))), LAG(((((vt1.c0)OR(vt1.c0))) BETWEEN ((+ (0.6957936177061289))) AND (((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)))), ((NULLIF(DISTINCT vt1.c0, vt1.c0)) IS TRUE), CASE CAST(vt1.c0 AS INTEGER)  WHEN CAST(vt2.c1 AS NUMERIC) THEN ((vt1.c0)GLOB(vt1.c0)) END) OVER () FROM vt2, vt1 GROUP BY ((((vt2.c1) NOTNULL))>=(((vt2.c0) ISNULL))) HAVING CASE COUNT(*)  WHEN (- (vt0.c0)) THEN LTRIM(vt0.c0) ELSE (((vt1.c0))!=((vt2.c0))) END;SELECT ALL ((((vt0.c0) IS TRUE)) NOT BETWEEN (((vt0.c1)==(vt0.c1))) AND (vt2.c1)), -1.12039274E9, ((((vt0.c0)-(vt0.c1))) IS FALSE) FROM vt0, vt2; -- 0ms;
SELECT ALL (NULL IN ()) FROM vt1, vt0 WHERE ((NULL IN ()) COLLATE RTRIM COLLATE RTRIM) ORDER BY (vt1.c0 COLLATE RTRIM IN (CAST(vt0.c0 AS TEXT), ((vt2.c1)<>(vt2.c1))))  NULLS FIRST, (((((((vt1.c0, '', vt2.c1)) NOT BETWEEN ((vt2.c1, vt0.c1, vt0.c0)) AND ((vt0.c0, vt1.c0, vt0.c0))))OR(((vt2.c1)%(vt0.c1)))))OR(' *7쓹t~_r')), ((((vt0.c0) IS FALSE)) NOTNULL)  NULLS FIRST;SELECT ALL (((CAST(vt2.c0 AS BLOB)))<((vt1.c0))) FROM vt2 WHERE (-8.8223711E8);SELECT DISTINCT ((((CAST(vt1.c0 AS INTEGER))AND((- (1668701272)))))OR((~ (vt0.c0)))) FROM vt0, vt1 WHERE (((NULL) IS FALSE)); -- 0ms;
SELECT DISTINCT NULL FROM vt2; -- 0ms;
SELECT DISTINCT ((((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt0.c1))) NOT BETWEEN ((- (vt2.c1))) AND (((vt2.c1)/(vt2.c1)))) FROM vt0, vt2 WHERE (((((((((((-5.65569197E8)<=('101074744')))AND((((1.65286797E9, x'', ''))==((NULL, NULL, x'a6eb'))))))AND((+ (1.011329133E9)))))OR(((x'0792') NOT BETWEEN (1282643705) AND ('1988850454')))))OR((NULL IN (NULL))))); -- 0ms;
SELECT DISTINCT LAST_VALUE(((((((vt1.c0)*(vt1.c0)))OR(((vt0.c0) IS FALSE))))AND(vt1.c0 COLLATE BINARY))) OVER ( ORDER BY x'0589', (((((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c0)), (vt0.c0 IN ()), HEX(vt2.c0)))<=((((vt1.c0)LIKE(vt1.c0)), ((x'') BETWEEN (vt2.c0) AND (vt0.c1)), 0.5623088501960829))) ASC, 0X334dd2f6 DESC  NULLS FIRST) FROM vt1, vt0 WHERE (((CAST(0.6464092990656618 AS INTEGER)) NOTNULL));SELECT DISTINCT COUNT(*) OVER () FROM vt0, vt1; -- 1ms;
SELECT ((vt2.c1 IN ()) IN (SUM(vt2.c0), (((vt0.c1)) BETWEEN ((vt0.c1)) AND ((vt2.c1))))) FROM vt2 WHERE (((((NULL)!=(NULL))) BETWEEN (CASE 0xffffffffa70a4bbb  WHEN '-429724065' THEN '2082756409' WHEN '-385799882' THEN 0.5674612428501574 WHEN '331410151' THEN '1581812391' END) AND ((('-857352259') BETWEEN (NULL) AND (NULL)))));SELECT COUNT(*) FROM vt1, vt0 WHERE (((((((((UNLIKELY(DISTINCT 0.33445410537401465))OR((+ ('')))))OR(NULLIF(DISTINCT '0.9943108419463476', 0.5348440265335948))))AND(((NULL) BETWEEN (0X3f8ea289) AND (NULL)))))OR((('-1683154778')IS(0X2f10246f))))); -- 0ms;
SELECT ((json_array(0.7305112629695967, vt1.c0))||((('257741995')IS NOT(vt0.c0)))) FROM vt1, vt0 WHERE (CASE WHEN ((0.8052520610053653) NOTNULL) THEN (NULL IN ()) END) ORDER BY vt0.c1 COLLATE NOCASE  NULLS LAST; -- 0ms;
SELECT ALL LEAD(json_object(vt0.c1, vt1.c0) COLLATE NOCASE COLLATE NOCASE, ((MAX(vt1.c0, vt0.c1))IS NOT(CAST('vr~QQmk' AS NUMERIC))), CAST(((vt0.c1)<<(vt1.c0)) AS INTEGER)) OVER () FROM vt0, vt1 WHERE (((((1876627857)>>(1.694078846E9)))|(((NULL)IS(0.4595140123600385))))) LIMIT -1450294; -- 0ms;
SELECT NULL FROM vt2; -- 0ms;
SELECT ALL ROW_NUMBER() OVER () FROM vt0 GROUP BY (- (CAST(vt2.c1 AS TEXT))) HAVING (vt1.c0 IN (((((((((vt0.c1)AND(vt2.c1)))OR(vt0.c1)))AND(vt0.c1)))AND(vt1.c0))));SELECT DISTINCT (((((((((((((((vt1.c0)) NOT BETWEEN ((vt2.c0)) AND ((vt0.c1))))OR(((vt0.c0) BETWEEN (vt0.c0) AND (x'')))))OR(((((((((vt0.c0)AND(vt2.c0)))OR(vt0.c1)))OR(vt2.c1)))OR(vt1.c0)))))AND(((vt0.c1)<<(vt0.c1)))))AND(((vt0.c1) NOT NULL))))OR(CAST(vt0.c0 AS INTEGER))))OR((NOT (vt0.c0)))) FROM vt2, vt0, vt1 WHERE ((('') NOT BETWEEN ('') AND (x'')) COLLATE NOCASE); -- 0ms;
SELECT DISTINCT (CAST(vt0.c1 AS NUMERIC) IN ()) FROM vt1, vt0, vt2 ORDER BY vt2.c0  NULLS LAST; -- 0ms;
SELECT DISTINCT ((CAST('_癎(Fld8' AS NUMERIC))|(((((((((vt1.c0)OR(vt0.c1)))OR(vt2.c0)))OR(vt2.c1)))OR(vt2.c0)))) FROM vt1, vt2, vt0 ORDER BY ((0x78f625c7) BETWEEN (vt0.c0) AND (((((vt1.c0)AND(vt1.c0)))AND(vt2.c0)))), ((((vt0.c1)IS NOT(vt2.c1)))LIKE(((0.1068507861842729) IS FALSE))), (((vt2.c1) IS FALSE) IN ())  NULLS FIRST; -- 1ms;
SELECT DISTINCT ']()t㖿C' FROM vt1, vt2, vt0 NOT INDEXED; -- 0ms;
SELECT DISTINCT IFNULL(DISTINCT ((vt0.c0)<(vt1.c0)), x'') FROM vt2, vt1 LIMIT 589354654;SELECT ALL (((vt0.c0 IN ()))|(((((vt0.c0)OR(vt2.c1)))AND(vt0.c0)))) FROM vt2, vt0, vt1 ORDER BY ((((((((CAST(vt2.c1 AS TEXT))OR(((NULL) IS FALSE))))OR((~ (vt2.c1)))))AND(((vt0.c1)/(vt2.c1)))))AND(CASE vt2.c1  WHEN 0.8489507734770866 THEN vt0.c1 END)) ASC  NULLS LAST, LOWER(DISTINCT ((((((((vt0.c0)OR(vt0.c1)))AND(vt0.c1)))AND(vt2.c0)))AND(vt2.c0)))  NULLS FIRST, CASE WHEN vt1.c0 THEN vt2.c0 WHEN vt0.c0 THEN vt1.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt0.c0 END COLLATE RTRIM  NULLS LAST; -- 3ms;
SELECT DISTINCT (((((~ (vt0.c1)))AND(CHAR(vt1.c0))))OR((vt2.c0 IN (vt0.c0, NULL)))), AVG((((vt1.c0, vt0.c0, vt1.c0))==((vt0.c1, vt0.c1, NULL)))), CASE ((((((((vt1.c0)AND(0xffffffffe09aadac)))OR(vt2.c0)))AND(vt1.c0)))OR(x'a73da31d'))  WHEN x'' THEN ((((((((((((vt0.c1)AND(vt0.c0)))AND(vt1.c0)))OR(vt2.c1)))AND(vt1.c0)))OR(vt1.c0)))AND(vt0.c0)) END, (((CASE WHEN vt0.c1 THEN vt0.c0 ELSE vt2.c0 END))>=((vt2.c0))), COUNT(*) OVER () FROM vt1 WHERE (((CAST(0.6470365752918712 AS REAL))+(x'')));SELECT DISTINCT (((((vt2.c0) NOT BETWEEN (x'3c7ead7a') AND (vt1.c0))))<=((MAX('Yl鐺w''')))) FROM vt2;SELECT DISTINCT ((((((vt2.c0) IS FALSE))AND(vt0.c0)))OR((vt1.c0 IN (vt1.c0)))) FROM vt2, vt1 ORDER BY vt2.c0 DESC, ((((vt0.c1) BETWEEN (vt1.c0) AND (0X5b940a6e))) NOTNULL) DESC;SELECT ((PRINTF(vt0.c1)) IS FALSE) FROM vt2 WHERE ((((CAST(0X2f10246f AS NUMERIC)))==((CAST(')lTQSM7' AS TEXT)))));SELECT DISTINCT (((vt1.c0, vt1.c0, vt2.c0)) NOT BETWEEN (((((vt2.c1)) NOT BETWEEN ((vt0.c0)) AND ((vt1.c0))), ((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c1)), ((vt2.c1) NOTNULL))) AND ((CAST('378058961' AS NUMERIC), (('cIs^칍&\t ')IS NOT(vt2.c1)), json_array(vt1.c0, vt2.c0)))) FROM vt0, vt1, vt2; -- 0ms;
SELECT QUOTE(((vt0.c1) IS TRUE)) FROM vt0, vt2 WHERE ((((- (x''))) NOT BETWEEN ((0.9647024882881888 IN ())) AND (0X610a7664))); -- 0ms;
SELECT FIRST_VALUE((((vt1.c0)<>(vt1.c0)) IN (((0x307ce082) NOT BETWEEN (vt1.c0) AND (vt1.c0))))) OVER () FROM vt1 WHERE ((highlight(0X37411b04, '-1728127579', NULL, 7.89587055E8) IN ())) ORDER BY ((CAST(vt0.c0 AS NUMERIC)) IS TRUE)  NULLS LAST;SELECT LIKELIHOOD((vt0.c1 IN (vt0.c0)), 0.15819217738451086) FROM vt1, vt2 ORDER BY ((((vt2.c0) IS FALSE))|(CAST(vt1.c0 AS REAL))) DESC;SELECT DISTINCT NULL FROM vt1, vt2 WHERE (CASE ((('', NULL, 0xffffffffe662ee5f)) BETWEEN (('-1831065235', NULL, '-429724065')) AND ((0.8894841892057208, NULL, -2.035664096E9)))  WHEN ((((0Xffffffff81d1fc2b)AND(NULL)))AND('1788964435')) THEN (x'' IN (NULL)) WHEN (('') BETWEEN (-1.176097307E9) AND ('0.1068507861842729')) THEN ((NULL)OR('1804866406')) WHEN (NOT ('A/')) THEN NULL COLLATE NOCASE END); -- 0ms;
SELECT DISTINCT NULLIF((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((vt2.c0))), vt2.c1) FROM vt0, vt2; -- 1ms;
SELECT ALL ((vt2.c1) BETWEEN (vt2.c1 COLLATE RTRIM) AND (CASE WHEN vt1.c0 THEN vt0.c0 WHEN vt2.c1 THEN 0.6966550747225773 WHEN vt2.c0 THEN vt0.c0 ELSE vt0.c0 END)) FROM vt0, vt1, vt2; -- 0ms;
SELECT DISTINCT '[]', (((x'')&(vt2.c1)) IN (CASE vt0.c0  WHEN vt2.c0 THEN vt1.c0 END)), ((0.5570640739950887) NOTNULL) FROM vt1, vt0 WHERE ((((+ ('᭓TDh'))) NOT BETWEEN (((x'')<>(0X6cc09ac9))) AND (json_remove(x'71fa', 'G]F', x'', 'g|Iq2'))));SELECT CAST(((vt2.c1) NOT BETWEEN (vt2.c1) AND (vt2.c0)) AS INTEGER) FROM vt0;SELECT DISTINCT ((((((vt2.c0)OR(vt1.c0)))OR(vt2.c1)))&(vt2.c0)), RANK() OVER (), CASE NULL  WHEN MIN(vt0.c0) THEN ((vt2.c0)||(0.6169257790543295)) END FROM vt2, vt0, vt1; -- 0ms;
SELECT DISTINCT COUNT(*) OVER () FROM vt1 WHERE (CAST((0xffffffff89cdbbe6 IN (NULL, 0.20205908358073899)) AS REAL)) ORDER BY TYPEOF(0.534333076317299); -- 0ms;
SELECT ALL (((vt2.c1 IN (vt0.c0)))IS NOT(NULLIF(DISTINCT vt0.c1, 0.020005243162795172))) FROM vt1, vt2, vt0 GROUP BY NULLIF(((NULL) IS FALSE), ((((vt1.c0)OR(vt2.c1)))AND('-1313226283'))), '679314154', (- (((vt0.c0)>(vt2.c1)))), ((((0.021842733857990515)OR(vt0.c0)))OR(vt0.c1)) COLLATE NOCASE, (((HEX(vt0.c0)))>((rtreenode(vt1.c0, vt0.c0)))) HAVING ((((((((((vt2.c1)OR(vt2.c1)))OR(vt2.c1)))AND(vt2.c0)))AND(vt0.c0)))-(CAST(vt2.c0 AS REAL))) LIMIT -1313226283; -- 2ms;
SELECT CAST(SUM(vt0.c0) AS TEXT) FROM vt2 WHERE (TYPEOF(DISTINCT (((('0.06408774676200824')AND(-219044756)))OR(NULL)))) GROUP BY ((((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c1)))<((vt2.c0 IN ())));SELECT (((vt2.c0 IN ())) IS FALSE) FROM vt1 WHERE (('-1450294' COLLATE BINARY IN (CAST(0.40835206373203514 AS REAL), CASE WHEN 'PD' THEN 'c[HMHAk6' END))) LIMIT -9223372036854775808; -- 0ms;
SELECT ALL ((((((((((0.19607836922071442)-(vt1.c0)))AND(vt2.c0)))OR(CASE WHEN vt0.c1 THEN vt1.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt0.c0 END)))OR(((vt0.c0)<>(vt1.c0)))))AND(((vt1.c0) NOT NULL))) FROM vt0;SELECT DISTINCT UNLIKELY(AVG(vt0.c0)) FROM vt0, vt1 LIMIT -385799882 OFFSET -367263083; -- 0ms;
SELECT ALL (((vt0.c1)) NOT BETWEEN (((vt1.c0 IN ()))) AND ((((x'') IS TRUE)))) FROM vt2, vt1, vt0 WHERE (((((((NULL, 0Xffffffff8a7cd516, NULL)) BETWEEN ((0.2700170900456421, x'2eb0', x'f98c')) AND ((0.37087312736270694, '1R쿆g', NULL))), json(x''), (('Dqv*♐') IS FALSE)))<=((((0.58222252378232)GLOB('1005764540')), CAST(NULL AS BLOB), ((('', 0.11003573559694768, NULL)) NOT BETWEEN (('WN', x'1c58', '-1467631477')) AND (('0.5674612428501574', NULL, '-2035664096'))))))); -- 0ms;
SELECT ALL CAST(CAST(vt2.c1 AS TEXT) AS REAL) FROM vt1 WHERE ((('860738294')AND('*H6a')) COLLATE BINARY);SELECT DISTINCT MIN(json_type(vt0.c1) COLLATE BINARY) FROM vt2, vt1 WHERE (CAST(((0.8532443782142887) IS TRUE) AS BLOB)) ORDER BY ((((- (vt0.c0))))>((CAST(vt2.c0 AS TEXT)))) DESC;SELECT ALL CAST((- (vt2.c1)) AS BLOB), GROUP_CONCAT(((vt1.c0) NOT NULL)) OVER ( RANGE  CURRENT ROW EXCLUDE GROUP), ((((vt2.c0) BETWEEN (vt0.c0) AND (vt1.c0)))>>(((0.465468958102946)>=(vt0.c1)))) FROM vt0, vt2, vt1 WHERE (x'') ORDER BY '', (((vt0.c0 IN (vt0.c0)))GLOB(vt0.c0 COLLATE NOCASE)); -- 0ms;
SELECT ALL TYPEOF(DISTINCT vt2.c1), ((ABS(DISTINCT vt0.c1)) IS FALSE), CASE (vt2.c1 IN ())  WHEN ((vt2.c0)*(vt0.c1)) THEN ((((vt0.c0)AND(vt0.c0)))OR(vt2.c1)) WHEN vt2.c0 COLLATE BINARY THEN MAX(vt0.c1) WHEN vt0.c1 COLLATE RTRIM THEN ((((x'')OR(vt2.c0)))OR(vt0.c1)) ELSE (~ (vt2.c1)) END FROM vt0, vt1, vt2; -- 0ms;
SELECT DISTINCT ((((vt0.c0)AND(vt1.c0)))OR(vt2.c0)) COLLATE RTRIM, CAST((- (vt2.c1)) AS INTEGER), (vt1.c0 IN (CAST(vt0.c1 AS REAL))) FROM vt0, vt1, vt2; -- 0ms;
SELECT DISTINCT ((((vt2.c0) IS TRUE)) BETWEEN (((vt2.c0)>>(vt0.c0))) AND (((vt2.c1) IS FALSE))) FROM vt2 WHERE (0.7620996553139072);SELECT ALL 2033043045 FROM vt1 WHERE (((x'3729be05') NOT NULL)) ORDER BY CAST(((((vt2.c1)OR(2057708390)))OR(vt2.c0)) AS TEXT) ASC, CAST((((vt0.c0))!=((vt2.c1))) AS INTEGER) DESC;SELECT DISTINCT LIKELIHOOD(vt0.c0, 0.6919427245282668) COLLATE NOCASE FROM vt0, vt1, vt2; -- 1ms;
SELECT CAST(LOWER(vt1.c0) AS BLOB), ((((((((((vt0.c1) BETWEEN (vt2.c0) AND (vt2.c0)))OR((('0.4082346548018194') NOT BETWEEN (vt0.c1) AND (vt1.c0)))))AND(((vt0.c1)IS NOT('-882237110')))))OR(((((vt2.c0)AND(vt1.c0)))OR(vt1.c0)))))AND(((vt2.c0)>>(vt2.c0)))), LOWER(DISTINCT vt1.c0 COLLATE BINARY), MIN(CAST(vt0.c1 AS INTEGER)), LAST_VALUE((((vt0.c0, vt1.c0, vt0.c1)) BETWEEN (((vt1.c0 IN ()), (((vt1.c0)) BETWEEN ((vt1.c0)) AND ((vt1.c0))), ('-1417598274' IN ()))) AND ((((vt0.c0)AND(vt0.c1)), (((vt0.c0, vt0.c1, vt1.c0))>((vt0.c1, vt0.c0, vt0.c0))), CAST(vt1.c0 AS REAL))))) OVER ( GROUPS  UNBOUNDED PRECEDING EXCLUDE GROUP) FROM vt0, vt1;SELECT CAST((((vt1.c0)) BETWEEN ((vt2.c1)) AND ((vt0.c0))) AS BLOB), ((((((vt2.c0) NOT NULL))OR(UPPER('-443777714'))))AND(vt2.c1 COLLATE BINARY)), CAST((+ (vt0.c0)) AS BLOB), ((CASE vt2.c0  WHEN vt0.c1 THEN vt2.c0 WHEN vt2.c1 THEN vt1.c0 WHEN vt2.c1 THEN 0.4691349461469242 ELSE vt2.c0 END) NOT BETWEEN (CAST(vt0.c1 AS REAL)) AND (((vt0.c0) BETWEEN (vt1.c0) AND (vt2.c0)))), (NOT (CASE WHEN vt2.c0 THEN vt0.c0 ELSE vt0.c0 END)) FROM vt1 WHERE (0.5060057876497527) ORDER BY vt0.c1 DESC  NULLS LAST;SELECT CAST(CASE vt1.c0  WHEN vt0.c1 THEN vt2.c0 END AS BLOB) FROM vt2;SELECT ALL COUNT(*) OVER () FROM vt2, vt1, vt0 WHERE ((((('1635733947' COLLATE NOCASE)AND('-282100565')))AND(NULL COLLATE NOCASE))) GROUP BY ((NULLIF(DISTINCT vt2.c0, vt0.c0)) BETWEEN (CASE vt0.c1  WHEN vt2.c1 THEN vt0.c0 WHEN vt0.c1 THEN vt2.c1 WHEN vt1.c0 THEN vt1.c0 END) AND ((((x'0200'))<((0.8295156990265207))))), (NOT (vt0.c0 COLLATE BINARY)), CASE WHEN ((vt0.c0) NOTNULL) THEN ((vt2.c0)>(vt0.c0)) WHEN ((vt0.c0) IS TRUE) THEN ((vt1.c0) NOTNULL) WHEN vt2.c1 THEN (vt1.c0 IN (vt0.c1, 'g|iq2')) WHEN ((((vt1.c0)OR(vt2.c1)))AND(vt1.c0)) THEN vt0.c1 WHEN ((vt2.c0)==(vt1.c0)) THEN (vt0.c0 IN ()) ELSE vt2.c0 COLLATE BINARY END HAVING (vt0.c0 COLLATE NOCASE IN ()); -- 0ms;
SELECT DISTINCT LIKELIHOOD(LIKELY(vt2.c1), 0.13342498051914542), TRIM(DISTINCT CAST(vt0.c1 AS NUMERIC), ((vt2.c0) NOT NULL)), (((((vt2.c1)) BETWEEN ((vt0.c0)) AND ((vt1.c0)))) NOT BETWEEN (((vt2.c0)+(vt0.c1))) AND (0.9648831371814414)) FROM vt0, vt2, vt1 GROUP BY '' HAVING ((((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt2.c1))), CASE x''  WHEN vt0.c0 THEN vt2.c1 ELSE '-272813991' END, CAST(vt1.c0 AS TEXT), ((vt2.c1) BETWEEN (x'') AND (vt1.c0)), (vt0.c0 IN (vt2.c0, vt0.c0))))<=(((~ (vt2.c1)), CAST(vt1.c0 AS TEXT), CASE WHEN vt2.c1 THEN vt2.c0 ELSE vt0.c0 END, ((((((((vt1.c0)AND(vt0.c1)))OR(vt2.c1)))OR(vt1.c0)))OR(vt0.c1)), CAST(vt0.c0 AS BLOB)))); -- 1ms;
SELECT DISTINCT CAST((- (vt0.c1)) AS BLOB) FROM vt2;SELECT ((((vt1.c0) BETWEEN (vt0.c0) AND (vt2.c0))) IS TRUE), (((((vt0.c1)<>(vt0.c0)), x'', (('1661879628')+(vt0.c0))))>((vt0.c1, ((vt2.c0)IS NOT(x'')), (((vt0.c1))<((vt2.c1)))))), ((((vt0.c1) ISNULL))IS NOT(((vt0.c1) NOT NULL))) FROM vt2, vt1 WHERE ((x'de89' IN (0.7508624315854442)) COLLATE RTRIM);SELECT (((vt2.c1)) NOT BETWEEN ((((vt2.c1) IS FALSE))) AND ((((vt1.c0)==(vt0.c0))))) FROM vt0, vt2, vt1; -- 0ms;
SELECT ALL ((((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt2.c0)))||(0.5576154315637308)), ((((((((((vt0.c0)OR(vt0.c1)))AND(vt2.c0)))OR(vt2.c0)))AND(vt0.c0)))<<(((vt0.c1) BETWEEN (vt2.c1) AND (vt0.c1)))), (((- (vt0.c1)))==((vt0.c1 IN ()))), ((((vt1.c0) NOT BETWEEN (vt0.c1) AND (vt2.c0)))LIKE(CAST(0.3970798655718639 AS TEXT))), CASE ((vt0.c0)AND(vt0.c1))  WHEN 0.8690021004468119 THEN ((vt0.c1)AND(vt1.c0)) ELSE ((vt2.c1) ISNULL) END FROM vt0 WHERE (x'');SELECT IFNULL(CAST(vt1.c0 AS NUMERIC), (NOT (vt1.c0))) FROM vt0, vt2, vt1 WHERE (((+ (NULL)) IN ())); -- 0ms;
SELECT ALL (NOT (CAST(vt2.c1 AS INTEGER))), ((SQLITE_VERSION()) ISNULL), CASE WHEN ((-1.492497477E9)||(vt2.c0)) THEN ((vt0.c1)IS NOT(vt2.c0)) END FROM vt0, vt2 WHERE (CAST(((('110406875')) NOT BETWEEN (('-938889804')) AND ((-5.65569197E8))) AS BLOB)); -- 1ms;
SELECT ALL (CASE WHEN vt0.c0 THEN vt1.c0 ELSE vt2.c1 END IN (COUNT(*))) FROM vt0, vt1, vt2; -- 0ms;
SELECT ALL ((((vt1.c0) BETWEEN (vt2.c0) AND (vt2.c1)))||(vt2.c0 COLLATE NOCASE)) FROM vt1, vt2; -- 0ms;
SELECT ALL CAST(COUNT(vt1.c0) AS REAL), ((((('257741995'))=((vt1.c0))))=(vt2.c0)), (((vt2.c0)) NOT BETWEEN (((NOT (vt2.c1)))) AND (((((vt1.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt1.c0)))))) FROM vt0 LIMIT -1152481181 OFFSET -119992216;SELECT DISTINCT CAST(NULL COLLATE RTRIM AS BLOB) FROM vt0, vt2, vt1 WHERE ((((('853957823') BETWEEN (' hwf') AND ('L.'))) NOT NULL)); -- 0ms;
SELECT ((CAST(vt2.c1 AS REAL)) NOTNULL) FROM vt2, vt1 WHERE (((NULL COLLATE BINARY)IS NOT((0xffffffff8b95e89b IN (x'ea3b6f50'))))); -- 0ms;
SELECT DISTINCT NULL FROM vt2, vt1, vt0 WHERE ((((((((((((((0.6020821468513357)OR('')))AND(x'd311')))AND(x'9803')))AND(0Xffffffffe09aadac)))OR(x'')))AND('앗^')) IN ())); -- 0ms;
SELECT DISTINCT x'', ((vt2.c1) BETWEEN (vt0.c1) AND (vt2.c1)) COLLATE NOCASE, (+ (CAST('658539878' AS BLOB))), json_object(((vt0.c0)=(0.6518628694625461)), LIKELIHOOD(DISTINCT vt0.c1, 0.514286073578066)), (((~ (vt1.c0)))-((((vt0.c0))<((vt2.c0))))) FROM vt2, vt1, vt0;SELECT DISTINCT CAST(CASE WHEN vt2.c0 THEN vt0.c0 WHEN 'jQC%W_''#' THEN vt0.c1 WHEN 0.5671655906194922 THEN vt0.c0 ELSE vt0.c1 END AS INTEGER), CASE WHEN (vt0.c1 IN ()) THEN CAST(vt0.c1 AS TEXT) ELSE ((vt2.c0)<>(vt2.c1)) END, CASE ((vt2.c0)||(vt0.c0))  WHEN vt2.c0 THEN ((vt0.c1)>=(vt2.c1)) ELSE CASE WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt2.c1 WHEN vt0.c0 THEN vt2.c0 ELSE 0xffffffffd2eda9ec END END FROM vt1, vt0 GROUP BY UPPER(CAST(vt2.c0 AS INTEGER)), 0Xffffffffa70a4bbb, (- (0.8865848399558965)) ORDER BY vt0.c1 COLLATE RTRIM COLLATE BINARY COLLATE NOCASE DESC, ABS(((vt0.c0) BETWEEN (vt0.c1) AND (vt0.c0))) ASC  NULLS FIRST, vt2.c1 COLLATE RTRIM ASC;SELECT DISTINCT CAST((~ ('743539566')) AS BLOB), (((vt0.c1)) BETWEEN ((MIN(vt1.c0))) AND ((CASE WHEN vt2.c1 THEN vt2.c1 ELSE vt2.c0 END))), ((AVG(vt2.c0)) IS FALSE) FROM vt2, vt0, vt1; -- 1ms;
SELECT DISTINCT (NOT (((vt1.c0)IS NOT(vt0.c1)))) FROM vt1, vt2, vt0; -- 0ms;
SELECT ALL CASE WHEN x'1a96' THEN (((vt1.c0, vt0.c0, vt0.c1)) BETWEEN ((vt0.c0, vt1.c0, vt0.c1)) AND ((vt0.c0, vt0.c1, vt2.c0))) WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt2.c0)) THEN NULL COLLATE RTRIM WHEN ((vt1.c0)OR(vt2.c0)) THEN (((vt1.c0))<=(('-1717972819'))) ELSE (+ (vt0.c1)) END, ((vt1.c0 COLLATE BINARY) NOT BETWEEN (CASE WHEN vt0.c1 THEN vt1.c0 END) AND ((((vt1.c0, vt0.c0, vt2.c0)) BETWEEN ((vt2.c0, vt0.c0, vt0.c1)) AND ((vt0.c1, vt2.c0, vt0.c0))))), ((((((((((vt0.c0) BETWEEN (vt2.c0) AND (vt0.c1)))OR(NULL)))AND(((vt2.c1)>(vt2.c1)))))OR(DATE(NULL, vt0.c0, vt2.c1, vt2.c0, vt2.c0))))OR(CASE vt0.c1  WHEN vt2.c0 THEN vt2.c1 ELSE vt2.c0 END)) FROM vt1, vt0 WHERE (((x'' COLLATE NOCASE)AND((NULL IN ())))) ORDER BY ((x'') NOT BETWEEN (((((vt0.c1)AND(vt2.c1)))AND(''))) AND (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt2.c0))));SELECT DISTINCT (+ (MAX(vt1.c0))), MIN(((vt2.c1)||(0.07076604370285577))), ((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c0)))>('0.19607836922071442')) FROM vt0;SELECT ((CAST(vt1.c0 AS TEXT))GLOB(vt1.c0 COLLATE BINARY)) FROM vt0, vt2 NOT INDEXED WHERE (CAST(LIKELIHOOD(DISTINCT '', 0.94257768921589) AS INTEGER));SELECT DISTINCT CAST((((vt0.c1, 0.691663324426641, vt2.c0)) BETWEEN ((vt0.c0, vt2.c1, vt1.c0)) AND ((vt0.c1, x'f690', vt2.c1))) AS BLOB) FROM vt0 WHERE ((((NULL)) BETWEEN ((UPPER(DISTINCT '쩇'))) AND (('~kZ6v|%D(Y)'))));SELECT ALL ((((((vt1.c0)OR(vt1.c0)))AND(vt0.c1)))IS(((vt0.c0)+(vt2.c0)))) FROM vt1, vt0 WHERE ((((((((((('962034551')OR('119850380')))OR(1e500)))AND(0.06408774676200824)))AND(x''))) NOT BETWEEN (CAST(0Xfffffffff228dcb8 AS TEXT)) AND (CASE NULL  WHEN '0.7305112629695967' THEN '-691771123' END)));SELECT DISTINCT CASE WHEN ((NULL)OR(vt2.c1)) THEN NULL WHEN CASE vt0.c0  WHEN vt0.c0 THEN vt2.c1 ELSE vt0.c0 END THEN vt0.c1 COLLATE NOCASE WHEN (((vt2.c1))<((vt2.c1))) THEN ((vt2.c0)AND(vt0.c0)) END FROM vt1, vt2 WHERE (((NULL)<(0.28513737192188005)) COLLATE NOCASE);SELECT ALL ((TRIM(DISTINCT vt2.c0, vt0.c0)) IS TRUE) FROM vt1, vt2 WHERE ((((((('0.04373912073802955') BETWEEN (-2.116944853E9) AND (0.34932737350361664)))AND(('' IN ()))))AND(((0.7899778112041805)IS(1.788964435E9)))));SELECT DISTINCT LIKELIHOOD(NULLIF(DISTINCT vt2.c1, '-428077407'), 0.6168543873414594), TOTAL(CAST(vt1.c0 AS INTEGER)), CASE WHEN 0xffffffffca80c0dc THEN (- (vt0.c1)) WHEN ((vt2.c1) IS FALSE) THEN '' WHEN (~ (vt0.c1)) THEN CASE vt0.c1  WHEN vt2.c0 THEN vt0.c0 END END FROM vt2, vt0, vt1 WHERE ((((NULL IN ()))>=(((1.914133802E9)LIKE(x''))))); -- 0ms;
SELECT DISTINCT UNLIKELY((-2134409023 IN ())), ((((vt2.c1)>=(vt2.c0)))<=(SQLITE_VERSION())), (CAST(vt1.c0 AS BLOB) IN ()) FROM vt1 WHERE (IFNULL(DISTINCT (((('-1654876021')OR('k޽')))AND('fzD9')), (('5i') NOT BETWEEN ('-1369664454') AND ('1066312329'))));SELECT ALL CASE WHEN (((vt2.c0))>((0.016729061365491793))) THEN ((vt0.c0) NOT BETWEEN (vt0.c0) AND (vt0.c0)) END FROM vt1 WHERE (x'f7e0' COLLATE RTRIM);SELECT ALL SUM(((((((((vt2.c1)OR(vt0.c0)))AND(x'')))AND(vt2.c1)))AND(vt0.c1))) FROM vt2, vt1, vt0 WHERE ((CAST(NULL AS NUMERIC) IN ())) GROUP BY (~ (((vt1.c0)AND(vt1.c0)))); -- 0ms;
SELECT ALL UPPER(DISTINCT GROUP_CONCAT(vt2.c1)) FROM vt1, vt2, vt0; -- 0ms;
SELECT DISTINCT ((SUBSTR('259644071', vt2.c0)) BETWEEN ((vt0.c1 IN ())) AND (rtreenode(vt1.c0, vt1.c0))) FROM vt2, vt1 WHERE (NULL) ORDER BY (((vt0.c0 IN (vt2.c0, vt2.c1)))IS NOT(''));SELECT ALL vt0.c0 FROM vt1;SELECT DISTINCT (((vt2.c1)) BETWEEN ((CAST(vt2.c1 AS TEXT))) AND ((TOTAL(NULL)))), COUNT((- (vt1.c0))), NTH_VALUE(((((((vt2.c0)AND(vt2.c1)))OR(vt0.c0)))LIKE(CAST(vt0.c1 AS INTEGER))), ((((vt0.c0)*(vt0.c1))) NOT BETWEEN (ROUND(vt2.c0, vt0.c1)) AND (CAST(vt0.c1 AS BLOB)))) OVER () FROM vt2, vt0;SELECT DISTINCT ((MIN(vt0.c0))>(((((0.2697840486471428)AND(NULL)))OR(vt2.c0)))) FROM vt1, vt2, vt0 WHERE (((('CR' IN ())) IS FALSE)); -- 1ms;
SELECT DISTINCT ((((((((vt2.c0 COLLATE NOCASE)OR(MAX(vt2.c1))))OR(((vt2.c0) IS FALSE))))AND(CASE WHEN vt0.c1 THEN vt0.c0 ELSE vt1.c0 END)))OR(TOTAL_CHANGES())) FROM vt2, vt0, vt1 ORDER BY (((((((vt0.c1, vt2.c0, vt0.c0))==((vt0.c1, vt2.c1, vt0.c1))))AND(vt0.c0)))OR(((vt2.c1) NOTNULL))) DESC, CAST(((((vt2.c0)AND(vt0.c0)))AND(vt1.c0)) AS BLOB); -- 0ms;
SELECT DISTINCT AVG(((((vt0.c1)OR(vt2.c0)))AND(vt0.c0))) FROM vt1;SELECT ALL COUNT(*) OVER (), (((vt2.c0, vt2.c1, vt2.c1, vt2.c1, 0xffffffffd31a8b5f)) NOT BETWEEN ((((vt0.c1) BETWEEN (vt0.c1) AND (vt2.c1)), vt2.c1, ((x'') BETWEEN (vt1.c0) AND (vt1.c0)), CAST(vt0.c0 AS TEXT), ((vt1.c0)IS(vt1.c0)))) AND (((+ (vt0.c0)), CASE WHEN vt2.c1 THEN vt0.c1 WHEN vt0.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END, TOTAL(vt2.c0), COUNT(*), SUM(vt0.c0)))), LEAD(CASE ((((vt0.c1)AND(vt1.c0)))AND(vt0.c0))  WHEN ((vt1.c0) NOT NULL) THEN (((vt0.c0))<=((vt0.c0))) ELSE vt0.c0 END, (((vt0.c1)) NOT BETWEEN ((((((vt0.c0)OR(vt0.c0)))AND(vt1.c0)))) AND (((NOT (vt1.c0))))), TRIM(DISTINCT TRIM(vt1.c0))) OVER (), ((((((vt2.c0)AND(vt0.c1)))AND(vt2.c0))) NOT BETWEEN (((vt0.c1)-(vt2.c0))) AND (CAST(vt0.c0 AS INTEGER))), ((((((vt1.c0)AND(vt0.c0)))OR(vt0.c1))) NOT BETWEEN ((- (vt0.c0))) AND (((vt2.c0)>>(vt0.c1)))) FROM vt1, vt0;SELECT ((vt0.c1) NOTNULL), GROUP_CONCAT(((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt0.c0))), (+ (CASE WHEN vt2.c1 THEN vt0.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt2.c0 THEN vt1.c0 ELSE vt1.c0 END)) FROM vt1, vt0, vt2; -- 1ms;
SELECT DISTINCT ((CAST(vt1.c0 AS REAL)) BETWEEN (vt0.c1 COLLATE RTRIM) AND ((NOT (vt0.c0)))) FROM vt1 WHERE ((((~ (x'')))<=(CAST(x'' AS REAL)))) ORDER BY load_extension((+ (vt2.c0))) ASC  NULLS FIRST;SELECT vt2.c0 FROM vt1, vt2, vt0; -- 0ms;
SELECT DISTINCT COUNT((- (vt1.c0))) OVER () FROM vt0, vt2, vt1 WHERE (NULLIF(DISTINCT ((((x'')OR('')))AND(NULL)), (('-2027649588')>>(x'e615')))); -- 0ms;
SELECT (((vt1.c0) NOT NULL) IN ()) FROM vt2, vt0 ORDER BY (+ (vt0.c0)) DESC, (((((vt0.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt0.c1)))) ISNULL) ASC  NULLS LAST;SELECT vt2.c0, CASE (- ('c'))  WHEN LOWER(vt0.c1) THEN ((vt0.c1)IS(vt2.c1)) WHEN MAX(vt0.c0) THEN UPPER(DISTINCT vt0.c0) WHEN (vt2.c1 IN (vt0.c1)) THEN ((vt0.c0) IS TRUE) ELSE LOWER(vt0.c0) END, (((+ (vt2.c1))) NOT BETWEEN (((vt0.c0)/(vt1.c0))) AND (CAST(vt0.c0 AS REAL))) FROM vt1;SELECT ((CASE vt0.c1  WHEN vt0.c0 THEN vt0.c0 END)||(((((vt2.c0)OR(vt2.c0)))OR(0.7680908811179612)))), vt0.c1, CASE ((((vt2.c0)AND(vt2.c0)))AND(vt1.c0))  WHEN ((((vt0.c1)AND(vt0.c1)))OR(vt2.c1)) THEN (~ (vt0.c0)) END FROM vt0 NOT INDEXED, vt2 WHERE ((+ (LENGTH(0.8011793336010575)))) ORDER BY ((CASE WHEN vt0.c1 THEN vt2.c1 END) NOT NULL)  NULLS FIRST;SELECT DISTINCT (+ ((+ (vt2.c0)))), AVG(((vt0.c0) IS FALSE)), ((CASE WHEN vt0.c1 THEN vt2.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt2.c1 THEN vt1.c0 END) ISNULL), ((((vt2.c0)GLOB(vt0.c0))) NOT NULL), ((((vt1.c0) IS FALSE)) NOT BETWEEN (COUNT(*)) AND (((((((((vt0.c0)AND(vt2.c0)))AND(vt0.c1)))AND(vt0.c1)))OR(vt0.c1)))) FROM vt0, vt1, vt2; -- 1ms;
SELECT CASE (NOT (vt0.c1))  WHEN TOTAL(vt2.c0) THEN COUNT(vt0.c0) ELSE vt2.c1 END, MIN(-1797370983), (((vt1.c0)||(x'de81')) IN ()) FROM vt1 WHERE ((x'' IN ()) COLLATE BINARY);SELECT ALL ((CASE WHEN vt2.c1 THEN vt2.c0 END) IS FALSE) FROM vt1, vt0, vt2 WHERE (CAST('-1775811807' AS REAL)); -- 0ms;
SELECT ALL HEX(NULL) FROM vt0, vt2, vt1; -- 0ms;
SELECT DISTINCT (((vt2.c0)) BETWEEN ((((vt0.c1)<>(vt0.c1)))) AND ((CAST(vt2.c1 AS TEXT)))) FROM vt2, vt1 WHERE ((NOT (RTRIM(x'aaaa'))));SELECT DISTINCT ((0.12094845716817426 COLLATE RTRIM)/((vt0.c1 IN ()))), ((- (vt0.c1)) IN ((((vt0.c1)) NOT BETWEEN ((vt1.c0)) AND ((vt0.c1))))), COUNT(*) FILTER(WHERE ((vt0.c1)<=(((vt0.c1) IS TRUE)))) OVER () FROM vt1, vt0, vt2 WHERE (LIKELIHOOD(((NULL)<(x'41f6')), 0.6658679545782975)); -- 0ms;
SELECT LAG(((CASE WHEN vt0.c1 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt0.c0 THEN vt0.c1 ELSE vt0.c1 END) NOT NULL), x'' COLLATE NOCASE, (NOT (vt0.c1))) OVER () FROM vt0; -- 0ms;
SELECT x'', CAST(((vt1.c0) BETWEEN (vt0.c1) AND (vt2.c0)) AS TEXT), LIKELY(DISTINCT vt2.c0) COLLATE NOCASE FROM vt1, vt0, vt2 ORDER BY (((NOT (vt2.c0)))<(((vt2.c1) IS TRUE))) ASC, ROUND('{H', (- (vt0.c0))) ASC LIMIT 1369258258; -- 2ms;
SELECT DISTINCT (+ (vt1.c0)) COLLATE NOCASE FROM vt1, vt2, vt0 WHERE ('516407563'); -- 0ms;
SELECT DISTINCT ((((((vt2.c0) BETWEEN (vt0.c0) AND (vt0.c1)))OR(CAST(vt1.c0 AS TEXT))))AND(vt1.c0 COLLATE RTRIM)) FROM vt2 ORDER BY (((NOT (vt1.c0)))LIKE(((vt2.c0)%(vt0.c0)))) DESC;SELECT DISTINCT (- ('()')) FROM vt2 WHERE ((((~ (NULL)))GLOB(((0.5078529991589037)|(NULL))))) LIMIT 1032707372; -- 0ms;
SELECT DISTINCT ((((vt2.c0) BETWEEN (x'6c9d') AND (vt2.c1))) IS FALSE), vt1.c0, (NOT (((vt0.c0)=(vt1.c0)))) FROM vt1;SELECT DISTINCT CASE WHEN ((vt2.c1)/(vt0.c1)) THEN MAX(vt1.c0) ELSE CASE WHEN vt0.c1 THEN '1668701272' END END FROM vt1, vt2, vt0; -- 1ms;
SELECT DISTINCT (((vt1.c0 IN (vt0.c0)))>>(vt1.c0 COLLATE NOCASE)) FROM vt2, vt0, vt1 WHERE ((((('hCt,*b')IS(x'')))>>((((('fE')OR(0.14765365679815046)))OR('1731908725'))))) GROUP BY ((((0x15c05338)OR((((x'', vt0.c0, vt2.c0, vt0.c1, vt1.c0))>((vt2.c0, vt2.c1, vt2.c1, vt2.c1, vt2.c1))))))AND((+ (vt1.c0)))) ORDER BY ((vt0.c1 COLLATE NOCASE)IS((vt2.c1 IN ()))) DESC  NULLS FIRST, -1443027719;SELECT CASE WHEN (vt0.c1 IN ()) THEN ((vt0.c1) NOT NULL) ELSE (vt0.c1 IN (vt0.c0)) END FROM vt1, vt0 WHERE (((((((0x64f9977e)OR('1402897673')))OR(0.4154065905598112))) BETWEEN ((+ (1.066312329E9))) AND ((((('-756176404')AND(NULL)))AND(x''))))) LIMIT 253603742; -- 0ms;
SELECT ALL CAST((((((((('-554171139')AND(vt2.c0)))OR(vt0.c1)))OR(vt0.c1)))AND(vt2.c1)) AS NUMERIC), CASE ((vt2.c1) NOT BETWEEN (vt0.c0) AND (vt2.c1))  WHEN ((((vt1.c0)AND(vt1.c0)))OR(vt1.c0)) THEN CASE WHEN NULL THEN vt2.c0 WHEN vt0.c1 THEN vt2.c0 WHEN vt0.c0 THEN vt0.c0 ELSE vt2.c1 END WHEN (~ (vt2.c0)) THEN (((vt0.c1)) BETWEEN ((vt1.c0)) AND ((vt2.c1))) WHEN x'' COLLATE BINARY THEN ((((((((vt0.c0)OR(vt2.c0)))AND(vt0.c0)))OR(vt2.c0)))OR(vt2.c1)) END, (((CAST(vt2.c0 AS TEXT)))<=((((vt2.c0) IS TRUE)))), ((((((((vt2.c1)OR(x'')))AND(vt2.c0)))AND(vt1.c0 COLLATE RTRIM)))AND(((((vt2.c1)AND(vt2.c1)))OR(vt0.c0)))), (((vt2.c1)) BETWEEN ((TYPEOF(vt2.c0))) AND ((((vt0.c0)>>(vt2.c1))))) FROM vt1, vt0;SELECT ALL vt2.c0 FROM vt2, vt0, vt1 WHERE (0.3136483685436876); -- 0ms;
SELECT DISTINCT ((((vt2.c1) ISNULL))GLOB(TYPEOF(vt2.c0))), CASE WHEN MIN(vt0.c0) THEN ((((0.328484065954219)OR(vt2.c1)))AND(NULL)) ELSE (vt2.c0 IN ()) END, ((((vt0.c1)+(vt2.c1)))<(vt2.c1)), ((CASE vt0.c1  WHEN vt2.c1 THEN vt0.c1 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt1.c0 ELSE vt2.c0 END)||(vt1.c0 COLLATE RTRIM)), ((vt0.c0)GLOB(vt0.c0)) COLLATE NOCASE FROM vt0;SELECT DISTINCT '596770348' FROM vt2, vt0, vt1 WHERE (((CASE x'be14b07e'  WHEN x'' THEN '-734246668' WHEN NULL THEN '' WHEN NULL THEN x'3c58' END) ISNULL)); -- 0ms;
SELECT DISTINCT (((((0.13371299367065093, vt2.c1, vt2.c1, 0.7338385530980253, vt2.c0))==((vt1.c0, vt1.c0, vt0.c0, vt0.c1, vt0.c1))))GLOB(NULL)) FROM vt2, vt1, vt0 WHERE ((x'' IN ())) LIMIT 101074744 OFFSET -570310771; -- 0ms;
SELECT DISTINCT ((vt0.c1 IN ()) IN ()) FROM vt2 WHERE (TRIM(DISTINCT '912760177', 0X1897a1d8 COLLATE NOCASE)); -- 0ms;
SELECT LOWER(((((((((vt1.c0)AND(vt2.c1)))AND(vt2.c1)))OR(vt0.c0)))AND(vt2.c1))) FROM vt1, vt2;SELECT vt2.c1 FROM vt2, vt1, vt0; -- 1ms;
SELECT NULL, (((((vt2.c0)) NOT BETWEEN ((vt0.c0)) AND ((vt0.c1)))) BETWEEN (NULL) AND (CAST(vt0.c1 AS NUMERIC))), CAST(((vt2.c0) NOT BETWEEN (vt0.c1) AND (vt2.c1)) AS NUMERIC) FROM vt2, vt1, vt0; -- 0ms;
SELECT ALL ((CAST(vt2.c1 AS NUMERIC))IS(((((vt1.c0)OR(vt0.c0)))AND(vt2.c1)))) FROM vt1 NATURAL JOIN vt2 WHERE (((0.7067640340085684) NOT BETWEEN (NULL) AND (x'3f2e')) COLLATE RTRIM) GROUP BY vt1.c0, ((((vt1.c0)>=('-2116944853')))IS NOT((((vt1.c0, vt1.c0, vt2.c0)) NOT BETWEEN ((vt2.c0, vt2.c1, vt2.c1)) AND ((vt2.c1, vt0.c1, 0.48742179366541294))))), SQLITE_SOURCE_ID();SELECT LOWER(DISTINCT SUM('-451659283')) FROM vt0, vt1; -- 0ms;
SELECT DISTINCT ((SUM('-1017909972')) BETWEEN (((vt2.c0)GLOB(vt1.c0))) AND (TOTAL(vt2.c1))), SQLITE_COMPILEOPTION_USED(vt1.c0), ((vt0.c1)>=(NULL)) COLLATE RTRIM FROM vt1 WHERE ((('-1520785058' COLLATE RTRIM) IS FALSE)) LIMIT 1865881303 OFFSET 1988850454;SELECT (((+ (NULL)))<(vt1.c0)) FROM vt2, vt0 WHERE ((((x'6841b087' IN ())) NOT BETWEEN (((0.7469354989536899) IS FALSE)) AND (x'')));SELECT ALL CAST((((vt1.c0)) BETWEEN ((vt0.c1)) AND ((vt2.c1))) AS INTEGER) FROM vt1 WHERE ((('L.')OR(0.8201146635858085)) COLLATE RTRIM) ORDER BY 1144498840 ASC;SELECT DISTINCT x'0425073b' FROM vt2, vt0, vt1 WHERE ((~ (x'')) COLLATE RTRIM); -- 0ms;
SELECT DISTINCT IFNULL(((((vt0.c0)AND(vt2.c0)))AND(vt2.c1)), (vt2.c1 IN ())) FROM vt1, vt0 GROUP BY CAST(((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1)) AS TEXT);SELECT DISTINCT '-1547786208' FROM vt1, vt2, vt0 WHERE (((CAST(x'0108' AS REAL)) NOT NULL)); -- 0ms;
SELECT DISTINCT COUNT(*) FROM vt1, vt2; -- 0ms;
SELECT ((vt0.c0) ISNULL) COLLATE RTRIM FROM vt1, vt0, vt2 WHERE ((CAST(NULL AS REAL) IN (CAST('⥭/5嚯' AS NUMERIC)))); -- 0ms;
SELECT DISTINCT ((~ (vt1.c0)) IN (((vt2.c1) NOT NULL))) FROM vt2, vt1; -- 0ms;
SELECT (((vt0.c0, vt2.c0, vt1.c0, vt1.c0, vt0.c1)) BETWEEN ((rtreenode(vt2.c1, vt0.c1), vt0.c0, (((vt2.c0)) BETWEEN ((vt0.c1)) AND ((vt0.c0))), (~ (vt0.c0)), SUM(vt0.c1))) AND ((((((vt0.c1)AND(vt1.c0)))OR(vt0.c1)), ((vt0.c0)%(vt1.c0)), MIN(vt2.c1), ((vt0.c1) NOTNULL), ((vt1.c0) IS TRUE)))) FROM vt0, vt1 WHERE (CAST(((((NULL)OR(NULL)))OR('-1708568981')) AS TEXT));SELECT ((((vt2.c1 COLLATE BINARY)OR(((((vt0.c0)AND(vt0.c0)))OR(vt0.c1)))))AND((+ (vt0.c1)))), AVG(CAST(vt0.c0 AS BLOB)) COLLATE RTRIM, LAG((+ (((vt0.c1)=(vt0.c0)))), CASE (vt1.c0 IN ())  WHEN vt0.c1 THEN (~ (vt1.c0)) ELSE (vt1.c0 IN ()) END, ((vt0.c1) NOT BETWEEN (vt0.c1) AND (vt1.c0)) COLLATE RTRIM) OVER (), ((((vt0.c1)>=(vt2.c0)))-((((vt0.c1, vt0.c1, vt2.c0)) NOT BETWEEN ((vt1.c0, vt0.c0, vt0.c0)) AND ((vt2.c0, vt2.c1, vt2.c1))))), ((((vt2.c0) IS FALSE))>(((((((((((((vt2.c0)AND(vt0.c0)))OR(vt2.c1)))OR(vt2.c0)))OR(vt2.c1)))AND(vt2.c1)))AND('')))) FROM vt0, vt1 WHERE (((((NULL)LIKE(NULL))) IS TRUE));SELECT DISTINCT vt2.c0, '' COLLATE NOCASE, ((TRIM(vt2.c1)) IS FALSE) FROM vt2, vt0, vt1; -- 0ms;
SELECT ALL (((('-693925874')OR(vt2.c0 COLLATE BINARY)))AND((+ (vt2.c0)))), ((((vt1.c0)GLOB(vt1.c0)))<=(vt1.c0 COLLATE BINARY)), vt0.c1 FROM vt2, vt1 WHERE ((((x'')IS(0.8433855361927721)) IN (CASE WHEN '' THEN '-429724065' END))) LIMIT -119992216 OFFSET -1;SELECT TOTAL(CASE vt1.c0  WHEN vt2.c0 THEN NULL ELSE x'ef90' END) FROM vt2 WHERE (((((((0X7c245739))==((x'')))))=(((('#誧呶') NOT NULL)))));SELECT ((('-1152481181' IN (vt2.c1)))IS(CAST(vt2.c1 AS REAL))) FROM vt0;SELECT LAST_VALUE(((((vt2.c1) BETWEEN (x'') AND (vt1.c0))) IS TRUE)) OVER (), ((((((vt0.c1)-(vt0.c0)))AND((vt2.c0 IN ()))))AND(GROUP_CONCAT(vt2.c1))), vt0.c0 FROM vt2, vt1 GROUP BY ((((vt1.c0)|(vt2.c1))) NOT BETWEEN (((vt0.c1) NOT NULL)) AND ((('94194984')IS NOT(vt2.c0)))), CASE vt2.c0  WHEN DATETIME(vt1.c0, vt2.c0, vt0.c1, vt2.c1, vt2.c0) THEN (((vt1.c0))>=((vt2.c1))) WHEN (((vt2.c1)) NOT BETWEEN ((vt2.c0)) AND ((vt0.c0))) THEN (vt2.c0 IN ()) WHEN CAST('1788964435' AS NUMERIC) THEN CASE vt2.c1  WHEN vt2.c0 THEN vt0.c0 END END, vt1.c0 HAVING CAST(MAX(vt0.c1) AS NUMERIC);SELECT ALL x'' FROM vt2, vt0 WHERE (CASE (((0.33454138657570476)) BETWEEN ((0Xffffffff8275c0de)) AND ((NULL)))  WHEN (~ (0xffffffffb05c5e2b)) THEN load_extension('-1137031094') WHEN x'3a8a' COLLATE BINARY THEN ((0.2065490724831356)IS(x'')) WHEN (('-505582856')&(0.5911530401862534)) THEN (((''))<(('1788964435'))) WHEN ((x'') IS FALSE) THEN CASE NULL  WHEN 0.8532443782142887 THEN NULL ELSE '-766355893' END WHEN (- ('糧l')) THEN (('P~03Iu') BETWEEN (0.8691725466262232) AND ('970573524')) END); -- 0ms;
SELECT DISTINCT SQLITE_VERSION() FROM vt1, vt2; -- 0ms;
SELECT DISTINCT CAST((((vt2.c1)) BETWEEN ((vt2.c1)) AND ((vt2.c1))) AS REAL), MAX(((((vt0.c0)AND('')))AND(vt1.c0))), CASE WHEN AVG(vt2.c0) THEN TRIM(DISTINCT vt2.c0) ELSE vt0.c0 END FROM vt0, vt2, vt1; -- 1ms;
SELECT DISTINCT TRIM((((vt0.c1))<=((vt2.c0)))) FROM vt0, vt1, vt2 WHERE (((('-1089784109')) BETWEEN ((NULLIF(x'', 129732002))) AND (((((-1927750028))<(('331410151'))))))) GROUP BY vt0.c1 HAVING CAST(((vt0.c1) NOT BETWEEN (vt1.c0) AND (NULL)) AS INTEGER); -- 0ms;
SELECT ALL IFNULL(vt0.c1, ((vt1.c0) BETWEEN (vt0.c0) AND (vt0.c0))) FROM vt0;SELECT CAST(vt2.c1 AS REAL) FROM vt1 WHERE (((x'' IN (NULL)) IN ()));SELECT (~ (CAST(vt2.c0 AS BLOB))) FROM vt0 WHERE (((1386005753 COLLATE BINARY)>(((NULL)<=('')))));SELECT ALL ((CAST(vt0.c0 AS INTEGER))IS((- (vt0.c0)))) FROM vt0, vt1 WHERE (CASE WHEN CASE x''  WHEN NULL THEN '-1313184502' WHEN 0.643172337491804 THEN NULL WHEN NULL THEN '1481849940' ELSE 1167487079 END THEN CASE WHEN '-120745065' THEN x'' WHEN 0.7446003339564365 THEN 'g|Iq2' WHEN '3(3BB' THEN 0x2b3e338a ELSE x'ca65b903' END WHEN ((x'a860') NOT BETWEEN ('1583403229') AND (0xffffffffbb1d7693)) THEN ((-216829025)<<(1.581812391E9)) WHEN 0.7103999850617327 COLLATE BINARY THEN (('q&&h|6') IS FALSE) WHEN ((0.27763385782908645)+(NULL)) THEN ((NULL) IS TRUE) WHEN CAST(0.4038938140345997 AS TEXT) THEN CASE WHEN 0.07968172237348481 THEN x'' ELSE x'' END ELSE CASE NULL  WHEN '-569329188' THEN x'' WHEN '1988850454' THEN 0Xffffffffa1844824 WHEN 0.3101243846437908 THEN 0.7620996553139072 END END); -- 0ms;
SELECT ALL x'' FROM vt2, vt0, vt1 ORDER BY ROUND(((((vt2.c1)AND(x'dd71')))AND(NULL)), (vt0.c0 IN (vt0.c1))) DESC  NULLS LAST, ((((0.602567238102046)OR(vt0.c1 COLLATE BINARY)))OR(((((vt1.c0)AND(vt1.c0)))AND(vt2.c1)))); -- 2ms;
SELECT ALL 'ᘑ^)yM9', (((CASE vt0.c1  WHEN vt2.c0 THEN vt1.c0 ELSE vt2.c1 END))<>((((vt2.c1)/(vt1.c0))))), (((0.6070433802666071) NOT BETWEEN (vt0.c0) AND (vt2.c0)) IN (CAST(vt0.c0 AS REAL))), ((((vt2.c1)<<(vt2.c1))) BETWEEN (json_insert(vt2.c0, vt2.c1, vt2.c1)) AND ((((0.5561834792864847)) BETWEEN ((vt2.c0)) AND ((0Xffffffffb9da6c67))))), ((((vt0.c1)==(vt2.c1)))GLOB(((vt2.c0)==(vt2.c1)))) FROM vt0 WHERE (((((-1585166300)+('94194984')))OR((x'' IN ('0.8384411729137591'))))) ORDER BY ((CAST('' AS NUMERIC))<<(CAST('<L6]鉀' AS NUMERIC)))  NULLS LAST;SELECT ALL ((COUNT(vt0.c1))LIKE(((vt0.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)))) FROM vt2, vt0 WHERE (((((0.8489507734770866) IS TRUE)) NOTNULL)); -- 0ms;
SELECT DISTINCT ((((vt1.c0)>(vt1.c0)))*(json_insert(vt2.c1, vt0.c1, vt1.c0, vt0.c0, vt1.c0))), LAST_VALUE((((vt2.c1 IN (vt0.c0)))IS NOT((((vt2.c1))!=((vt2.c0)))))) OVER (), COUNT((((vt1.c0, vt2.c1, vt2.c0))<((vt2.c0, vt0.c1, vt0.c0)))), ((((vt2.c1) ISNULL))&(vt2.c1 COLLATE NOCASE)), vt0.c1 FROM vt0, vt2;SELECT DISTINCT (((((((((((((((vt0.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))))OR((NOT (vt0.c0)))))AND(((vt1.c0) BETWEEN (vt2.c0) AND (vt2.c0)))))OR(vt2.c0)))AND(CAST(vt0.c1 AS BLOB))))AND(((vt2.c1) NOT BETWEEN (vt0.c1) AND (vt1.c0)))))OR(TOTAL(vt2.c0))) FROM vt0, vt2;SELECT ALL LIKE(((((((((vt1.c0)OR(vt2.c1)))AND(vt1.c0)))AND(vt0.c1)))AND(vt2.c0)), UPPER(DISTINCT vt0.c0), '0') FROM vt1, vt0, vt2 WHERE ((((((NULL)) NOT BETWEEN ((0.4602171287600779)) AND ((-1969159321))))%(CAST(NULL AS BLOB)))); -- 0ms;
SELECT DISTINCT (((((((((vt0.c1)OR(vt2.c0)))OR(x'')))AND(vt0.c0)))OR(vt0.c1)) IN ()) FROM vt2, vt0, vt1; -- 0ms;
SELECT DISTINCT CASE json_array_length(vt2.c1)  WHEN (vt0.c1 IN ()) THEN vt0.c0 COLLATE NOCASE ELSE vt0.c0 END FROM vt1, vt2, vt0 WHERE (((CAST('378058961' AS TEXT)) NOT BETWEEN (0.4691349461469242 COLLATE BINARY) AND (((0.5394128148370855) BETWEEN (0.9275340651420406) AND (NULL))))); -- 0ms;
SELECT DISTINCT COUNT(0.9168382067118729) OVER () FROM vt0, vt2; -- 0ms;
SELECT LAG((((((vt0.c1, vt0.c0, vt0.c1)) BETWEEN ((vt0.c1, vt0.c1, vt0.c0)) AND ((vt0.c0, vt0.c1, vt0.c0))))GLOB(vt0.c0)), json_patch(vt0.c1, x''), CASE vt0.c1 COLLATE BINARY  WHEN ((vt0.c1)OR(vt0.c0)) THEN ((0X55f150af)IS NOT(vt0.c1)) ELSE ((vt0.c0)AND(x'')) END) OVER (), AVG(vt2.c1), CAST((+ (vt1.c0)) AS TEXT) FROM vt0 NOT INDEXED WHERE ((CAST(x'' AS INTEGER) IN ()));SELECT DISTINCT ((((((vt1.c0)AND(vt2.c1)))OR(vt2.c0)))>>(((vt0.c0) BETWEEN (-8.27267839E8) AND (vt1.c0)))) FROM vt2, vt1, vt0 WHERE (((((NULL) NOT BETWEEN (0.43560845682746574) AND (x'')))<(('59553000' IN ())))); -- 0ms;
SELECT (('-1795601418') NOT NULL) FROM vt1, vt2; -- 0ms;
SELECT DISTINCT ((((vt0.c0)) BETWEEN ((vt2.c1)) AND ((vt2.c0))) IN ((((vt2.c0, vt0.c1, vt1.c0)) NOT BETWEEN ((vt0.c1, vt2.c0, vt1.c0)) AND ((vt0.c1, vt2.c1, vt1.c0))))), CAST(((vt2.c1) BETWEEN (vt2.c1) AND (vt0.c1)) AS INTEGER), ROW_NUMBER() OVER (), CAST((+ (vt1.c0)) AS BLOB), RANK() OVER ( ORDER BY ((((vt1.c0)+(vt0.c1)))-((vt0.c0 IN ())))) FROM vt0, vt2 WHERE ((((('697877584') NOT BETWEEN (0.083604384273125) AND (x'')))<>(('1763611754' IN (1144498840, x''))))) GROUP BY ((((vt0.c1) BETWEEN (vt2.c1) AND (vt2.c1)))GLOB(json(vt2.c1))), (NOT (((vt2.c1) IS FALSE))), CASE WHEN (((vt2.c0, vt0.c0, vt0.c1))!=((vt2.c1, vt2.c0, vt0.c0))) THEN ((vt0.c0) BETWEEN (vt1.c0) AND (NULL)) ELSE ((vt0.c1) NOT BETWEEN (vt0.c1) AND (vt0.c0)) END, (((((((((- (vt0.c1)))AND(json_extract(vt0.c1, 0.028292114121652112))))AND(CAST(860738294 AS INTEGER))))AND(vt2.c0)))OR(((vt0.c0)==(vt2.c0)))), vt1.c0 HAVING ((((vt0.c1)AND(vt2.c0)))|(MAX(vt2.c0)));SELECT ALL vt2.c0, (((~ (vt2.c1))) IS FALSE), MIN(vt0.c1 COLLATE RTRIM) FROM vt1, vt0, vt2 WHERE (CAST(2092365914 AS NUMERIC)); -- 0ms;
SELECT ALL x'8d0d', GROUP_CONCAT(((vt1.c0)<<(vt0.c1)) COLLATE RTRIM), (+ (((vt2.c1)>(vt0.c0)))) FROM vt2, vt0 WHERE (NULL) LIMIT -2141618206 OFFSET -1363078281;SELECT (('') NOT BETWEEN (vt0.c0 COLLATE RTRIM) AND (CASE WHEN vt2.c1 THEN vt0.c0 WHEN vt1.c0 THEN vt2.c0 WHEN vt2.c1 THEN vt0.c0 ELSE vt0.c0 END)) FROM vt1 WHERE (CASE WHEN ((1.48184994E9) BETWEEN (x'2e2d') AND (0.3130261553764796)) THEN (-1.19992216E8 IN ()) WHEN (((x'4961'))=((''))) THEN UPPER('2007439571') WHEN ((0.984134755140848)IS NOT(x'')) THEN '0.1068507861842729' COLLATE NOCASE END) LIMIT -709019108 OFFSET 987968763;SELECT (((vt0.c1)/(vt0.c1)) IN ()) FROM vt1 WHERE (((CASE 0X32b6a860  WHEN x'' THEN '0.3658204427662416' END)IS NOT(((-279785407)&('-1017909972'))))) ORDER BY ((('FALSE')) NOT BETWEEN ((vt2.c1)) AND ((vt0.c1))) COLLATE BINARY DESC  NULLS FIRST, (NOT (vt0.c1)) COLLATE BINARY  NULLS LAST LIMIT 1386005753;SELECT ALL (((vt0.c0)) BETWEEN ((vt2.c1 COLLATE BINARY)) AND (((~ (vt2.c0))))) FROM vt0 WHERE ((((('1451546389') NOTNULL)) NOT BETWEEN (json_insert(NULL, '-196688553', '-434083122')) AND (((((x'')OR(x'')))OR('')))));SELECT DISTINCT ((((vt1.c0) NOTNULL))GLOB(((vt0.c1)==(vt1.c0)))) FROM vt1 WHERE ('-1747465863');SELECT (+ (((vt2.c0) BETWEEN (vt0.c0) AND (vt0.c1)))) FROM vt0, vt2; -- 0ms;
SELECT DISTINCT ((((vt0.c1) IS FALSE))<<(CASE vt2.c1  WHEN vt0.c0 THEN vt2.c0 ELSE vt1.c0 END)) FROM vt2 LIMIT 962034551;SELECT ALL 0.7032622860124255 FROM vt1, vt2, vt0 WHERE (CASE CASE NULL  WHEN 'x' THEN 1494536505 END  WHEN (0.23546610962921855 IN ()) THEN CASE WHEN NULL THEN 'l3DGkb?W' END END); -- 0ms;
SELECT DISTINCT ((((vt2.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1)))<(CASE WHEN vt2.c1 THEN vt1.c0 END)) FROM vt2, vt1 GROUP BY TIME(1.865881303E9, UNLIKELY(vt0.c0), (((NULL)) NOT BETWEEN ((vt1.c0)) AND ((vt2.c1))));SELECT ALL (+ (((vt1.c0) NOT BETWEEN (vt1.c0) AND (vt0.c1)))), ((vt1.c0) IS TRUE), (((vt0.c0 IN (vt0.c1, vt0.c0)))-((+ (vt0.c0)))) FROM vt2, vt0, vt1 WHERE ((- ((((NULL, NULL, x''))>(('Z\n', 'HmJo', -170877717)))))) ORDER BY (CASE -1713354755  WHEN vt0.c1 THEN vt1.c0 ELSE vt2.c1 END IN ())  NULLS FIRST, CAST(((x'2fc4') NOT NULL) AS NUMERIC)  NULLS LAST; -- 0ms;
SELECT DISTINCT PERCENT_RANK() OVER () FROM vt2, vt0 WHERE (((CASE 0.5879604654766153  WHEN 'Dl]' THEN x'c568' ELSE NULL END)-((NOT (x''))))); -- 0ms;
SELECT DISTINCT LIKELIHOOD(((vt2.c0) IS TRUE), 0.9784781605180443), '0.691663324426641', ((((((((((vt2.c1) NOT NULL))AND((((vt2.c1, vt2.c0, vt0.c0)) BETWEEN ((NULL, vt0.c1, vt0.c1)) AND ((vt2.c1, vt2.c0, vt2.c1))))))OR(vt0.c1)))AND(((((vt0.c1)AND(vt2.c1)))AND(vt1.c0)))))OR(((vt2.c1)||(vt0.c1)))), ((((vt0.c1)LIKE(vt0.c1)))&(((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt0.c1)))), ((vt1.c0 COLLATE NOCASE) NOT BETWEEN (-257882277) AND (vt0.c0 COLLATE BINARY)) FROM vt1 WHERE (((('VU3L嚍e堭c')<<('94194984')) IN ((0.07477605659236009 IN ('''Y\rFzi4zz')), ('-1595726154' IN (0.7675557309428758)))));SELECT ALL AVG((~ (vt2.c0))) OVER () FROM vt0, vt1 GROUP BY ((0xffffffffcc8f4d3d) ISNULL), CASE WHEN ROUND(0X78e6eaf7, vt1.c0) THEN vt0.c1 COLLATE RTRIM WHEN ((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1)) THEN (((vt1.c0))>=((vt2.c1))) WHEN LIKELY(vt1.c0) THEN ((((0.7873494417201675)AND(vt2.c1)))AND(vt2.c0)) ELSE CAST(vt0.c1 AS BLOB) END, (((vt2.c0, vt2.c0, vt2.c0)) BETWEEN ((TRIM(vt2.c0), ((x'f703') NOT BETWEEN (vt1.c0) AND (vt0.c1)), vt2.c0)) AND ((((((vt2.c1)OR(vt0.c0)))OR(vt2.c0)), vt1.c0, ((((vt2.c1)AND(vt1.c0)))OR(vt1.c0))))) HAVING (- (json_object(vt2.c0, vt2.c1))) LIMIT 2101983383 OFFSET -1080913261;SELECT DISTINCT ((vt1.c0)GLOB(NULL)) FROM vt2, vt1 WHERE ((('cF')>=(NULL)) COLLATE BINARY) LIMIT -1654876021; -- 0ms;
SELECT ((vt2.c0) ISNULL), NTILE((~ (((NULL) IS TRUE)))) OVER ( ORDER BY ((CASE vt0.c1  WHEN vt1.c0 THEN vt0.c1 END) IS FALSE) DESC), CASE WHEN vt2.c1 THEN vt1.c0 END COLLATE NOCASE FROM vt2, vt0, vt1;SELECT DISTINCT x'' FROM vt2 GROUP BY (((((((('-1017909972')OR(((((vt0.c0)AND(vt1.c0)))AND(vt0.c0)))))AND(CASE WHEN vt2.c1 THEN vt0.c1 ELSE '' END)))OR(vt0.c0 COLLATE BINARY)))AND(CASE vt2.c0  WHEN vt2.c1 THEN vt1.c0 END)), (((- (NULL)))%(CAST(vt2.c0 AS NUMERIC))), NULL;SELECT CAST(CAST(vt0.c0 AS NUMERIC) AS INTEGER) FROM vt0 ORDER BY ((((((NULL)AND(vt0.c1)))AND(vt2.c1)))IS(((vt0.c1)OR(vt0.c0)))) ASC  NULLS LAST, CASE vt1.c0 COLLATE NOCASE  WHEN CASE vt0.c0  WHEN vt2.c0 THEN vt2.c0 ELSE vt0.c0 END THEN vt2.c1 END ASC;SELECT DISTINCT CUME_DIST() OVER (), ((((((((((((((((CASE vt2.c0  WHEN vt2.c0 THEN vt2.c0 END)AND(((((((((vt0.c1)AND(vt1.c0)))AND(vt0.c0)))AND(vt0.c1)))AND(vt2.c0)))))AND(vt0.c1 COLLATE BINARY)))OR(vt0.c1)))AND(LIKE(vt2.c0, vt2.c1, '-'))))AND(((vt0.c0)OR(vt0.c1)))))OR(vt0.c0)))OR(vt0.c0 COLLATE BINARY)))AND(((vt0.c0)>=(vt0.c1)))), CAST(COUNT(NULL) AS TEXT) FROM vt1, vt2 WHERE (('!wq*cO' IN ()) COLLATE BINARY);SELECT json(CAST(vt1.c0 AS TEXT)) FROM vt1, vt2 WHERE (((((((x'')AND(x'6f4a')))AND(0.7752224503447589)))>>(((((((((NULL)AND(NULL)))OR(0.3970798655718639)))OR(NULL)))AND(0.021427318272267182))))) LIMIT -836316899 OFFSET -1784907496; -- 0ms;
SELECT (((vt2.c1 IN ()))>>(UNLIKELY(vt0.c1))), ((((vt2.c0) BETWEEN (vt2.c0) AND (vt2.c0)))IS(UNLIKELY(vt2.c0))), ((TYPEOF(DISTINCT vt0.c1)) NOT BETWEEN (((vt0.c1)<=(vt2.c1))) AND (SUM(vt1.c0))) FROM vt2, vt1;SELECT DISTINCT ((CAST(0.6554270211678725 AS BLOB))LIKE(vt2.c0 COLLATE NOCASE)) FROM vt2, vt1, vt0; -- 0ms;
SELECT DISTINCT ((NULL)=(CASE WHEN NULL THEN vt2.c1 END)) FROM vt2, vt1, vt0; -- 0ms;
SELECT ALL CASE ((vt1.c0) BETWEEN (0X6f3716d7) AND (vt2.c1))  WHEN (vt1.c0 IN ()) THEN (~ (vt0.c1)) END FROM vt1, vt0, vt2; -- 0ms;
SELECT ALL ((((vt1.c0) NOT BETWEEN (vt0.c0) AND (vt1.c0))) NOTNULL) FROM vt0 WHERE (((SQLITE_COMPILEOPTION_USED('0.2633494155984837')) IS FALSE));SELECT ALL ((vt2.c0) ISNULL) FROM vt1, vt0, vt2 WHERE ((NOT (TYPEOF(DISTINCT NULL)))); -- 0ms;
SELECT DISTINCT vt0.c1, x'', CUME_DIST() OVER ( ORDER BY CAST((vt0.c0 IN ()) AS INTEGER) DESC  NULLS LAST), (((((0.758403777372904)AND(vt0.c0)))OR(vt2.c0)) IN ()), vt1.c0 FROM vt2, vt1, vt0 WHERE (((('-569329188' IN ())) ISNULL)); -- 0ms;
SELECT DISTINCT LAG(CAST((((vt0.c1))>=((NULL))) AS TEXT), CASE WHEN (~ (0.034429465238035584)) THEN (((vt0.c1, vt0.c0, vt0.c1)) BETWEEN ((vt0.c0, vt0.c1, vt0.c0)) AND ((vt0.c0, NULL, vt0.c0))) END, (((((vt0.c0 IN ()))OR((((vt0.c1))<=((vt0.c1))))))AND(DATE(NULL, vt0.c1, NULL)))) OVER (), ((((vt0.c0) IS TRUE)) BETWEEN ((((vt0.c0, vt1.c0, vt2.c1)) NOT BETWEEN ((vt0.c1, vt2.c1, vt2.c0)) AND ((vt2.c1, 2.082756409E9, vt0.c1)))) AND (UNLIKELY(vt2.c1))), (((CASE WHEN vt0.c0 THEN x'' END))!=((CAST(vt1.c0 AS NUMERIC)))) FROM vt0 LIMIT -1176867737;SELECT ALL ((((((((((vt0.c0)OR(vt2.c1)))OR(vt1.c0)))AND(vt1.c0)))OR(vt2.c1))) IS TRUE), ((((vt2.c0) NOTNULL)) NOTNULL), ROW_NUMBER() OVER () FROM vt2 WHERE ((('	M++') IS TRUE) COLLATE BINARY);SELECT DISTINCT MIN((('-1884100982') NOT BETWEEN (vt0.c0) AND (vt2.c1))), 0.9019444657719506, ((((((vt1.c0)) NOT BETWEEN ((vt2.c1)) AND (('')))))<((TRIM(vt1.c0, vt0.c0)))) FROM vt2 GROUP BY ((CAST(vt1.c0 AS BLOB)) BETWEEN (CASE WHEN vt0.c0 THEN vt1.c0 WHEN vt2.c0 THEN vt2.c0 WHEN vt0.c1 THEN vt0.c1 ELSE vt2.c1 END) AND (CAST(vt1.c0 AS TEXT)));SELECT ALL vt2.c1 FROM vt2, vt0 GROUP BY ((vt0.c0 COLLATE NOCASE)&((((vt0.c1, vt2.c1, vt1.c0, '', vt2.c0))<((vt0.c1, vt2.c0, vt2.c1, vt0.c0, '')))));SELECT (((vt0.c1, vt0.c1, x'')) BETWEEN ((vt2.c0, vt0.c1, vt0.c1)) AND ((vt1.c0, vt2.c1, vt1.c0))) COLLATE RTRIM FROM vt0, vt2 WHERE (((((x'')AND(x'7f8d')))*(((((((((x'a6da2620')AND('2075681220')))AND('-756176404')))OR(0.1940622903273712)))OR(0.8969699002148079)))));SELECT ALL (((((((((((vt0.c0, vt0.c1, vt1.c0))>((vt0.c0, vt0.c0, vt2.c0))))AND(((vt1.c0)-(vt0.c0)))))OR(json_patch(vt1.c0, vt1.c0))))OR(vt0.c0 COLLATE NOCASE)))AND((0x3be2b27f IN ()))), CAST(((vt2.c0)>=(vt0.c0)) AS TEXT), (~ (json_quote(vt0.c0))) FROM vt1, vt2 WHERE (NULL);SELECT DISTINCT ((CAST(vt1.c0 AS TEXT))<=(vt2.c0 COLLATE BINARY)) FROM vt1, vt2, vt0; -- 0ms;
SELECT ALL '	9' FROM vt0, vt2, vt1 WHERE ((('' COLLATE NOCASE)IS((('631013740') NOT BETWEEN ('3<MsZs|&j') AND (0.7780538745827329))))) LIMIT -484863434 OFFSET 388974900; -- 0ms;
SELECT COUNT(*), GROUP_CONCAT(''), (vt2.c1 COLLATE NOCASE IN ()), NULL, (((vt0.c0 IN ())) BETWEEN (CAST(vt1.c0 AS TEXT)) AND (((NULL) NOT BETWEEN (vt1.c0) AND (vt0.c0)))) FROM vt2, vt0 WHERE (((CAST(0.3162143305890649 AS NUMERIC)) BETWEEN ((0xffffffff9d5c988b IN ())) AND ((NULL IN ()))));SELECT ALL ((vt0.c0) NOTNULL), ((((vt2.c1)IS(vt0.c1)))<(((((vt0.c0)OR(vt0.c0)))OR(vt0.c0)))), '0.20205908358073899' FROM vt1, vt0, vt2 WHERE (HEX(MIN('0.35724811259189027', x'', NULL, -802776001))); -- 0ms;
SELECT DISTINCT NTH_VALUE(CAST(((vt2.c1)||(0.532247314673045)) AS TEXT), ((((((((vt0.c1)OR(vt0.c0)))OR(vt0.c1)))AND('-1017909972')))AND(vt0.c1)) COLLATE BINARY) OVER () FROM vt2, vt1, vt0; -- 2ms;
SELECT ((UNLIKELY(DISTINCT vt0.c0))<(CASE vt0.c0  WHEN vt2.c0 THEN vt1.c0 END)) FROM vt2, vt1, vt0 WHERE ((('GdBp' COLLATE NOCASE) NOT BETWEEN (x'') AND (('-234246329' IN ())))); -- 0ms;
SELECT ALL ((COUNT(*)) IS TRUE) FROM vt0, vt2; -- 0ms;
SELECT DISTINCT ((((vt1.c0)+(vt0.c0))) BETWEEN (vt0.c0) AND (((vt0.c1) BETWEEN (vt1.c0) AND (vt0.c1)))), ((((((((json_array_length(vt2.c0, vt2.c1))OR(CASE vt0.c1  WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt0.c1 END)))AND(((vt0.c0)==(vt0.c0)))))OR(TRIM(DISTINCT vt2.c0))))OR(vt2.c1 COLLATE BINARY)), MAX(((NULL) NOT BETWEEN (vt0.c0) AND (vt1.c0))) FROM vt2 WHERE (CAST((+ (x'64a4')) AS NUMERIC));SELECT DISTINCT ((((((((CAST(vt1.c0 AS BLOB))OR(TRIM(vt1.c0, vt0.c0))))AND(((vt0.c0)IS NOT(vt0.c0)))))AND(json_extract(vt0.c1, vt2.c0))))AND(((vt2.c1) BETWEEN (vt2.c0) AND (vt1.c0)))) FROM vt0;SELECT ((((vt0.c1)<=(vt0.c1))) NOT BETWEEN (vt2.c0) AND (vt1.c0)) FROM vt2, vt1, vt0; -- 0ms;
SELECT ALL PERCENT_RANK() OVER () FROM vt2, vt1, vt0 ORDER BY ((CAST(vt2.c1 AS REAL))<<(((0Xffffffff8500f8f9) BETWEEN (vt0.c0) AND (vt0.c0)))) DESC; -- 1ms;
SELECT CAST(vt2.c1 AS INTEGER), (((CASE WHEN vt2.c0 THEN vt1.c0 END, 0.7507188289688793, (vt1.c0 IN (vt1.c0, vt2.c0))))>(((vt2.c0 IN (vt2.c1)), (((vt0.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt2.c1))), ((0.5234278422007279)|(vt0.c0))))), RANK() OVER () FROM vt2;SELECT (- (((vt0.c0)/(vt0.c1)))) FROM vt0, vt2; -- 0ms;
SELECT DISTINCT (((((+ ('0.028415396396729298')))AND(CAST(vt0.c0 AS BLOB))))OR(CASE vt1.c0  WHEN vt2.c0 THEN vt2.c0 ELSE vt2.c1 END)) FROM vt2, vt1, vt0 WHERE (CASE WHEN ((NULL) BETWEEN ('-1999911459') AND (0.7900675390057166)) THEN (('Oxs翢w1 ') NOT BETWEEN (0.465468958102946) AND (NULL)) ELSE CAST(NULL AS REAL) END); -- 1ms;
SELECT (((((((vt0.c1, vt2.c1, vt2.c1)) BETWEEN ((vt2.c0, vt0.c1, vt1.c0)) AND ((vt2.c1, vt2.c0, vt2.c0))))AND(vt0.c0)))OR(((vt0.c0)-(vt2.c0)))) FROM vt2 WHERE (((((CAST('-836316899' AS INTEGER))AND((+ (1558100839)))))OR(((((((((0Xffffffffc81a57fb)OR(-8.57352259E8)))OR(x'b9fd')))AND('-895761334')))AND(0x6aa16e53)))));SELECT DISTINCT ((CASE WHEN vt2.c0 THEN vt1.c0 WHEN vt2.c0 THEN vt0.c1 WHEN vt2.c1 THEN vt1.c0 END)LIKE(vt0.c1)), ((((vt2.c1)|(vt2.c0))) IS TRUE), CASE ((vt2.c0) BETWEEN (vt1.c0) AND (vt0.c1))  WHEN CASE vt0.c1  WHEN vt1.c0 THEN 646894314 WHEN vt1.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt2.c0 ELSE vt0.c1 END THEN vt1.c0 ELSE x'' END FROM vt2, vt0, vt1 ORDER BY ((((vt0.c0))<=((vt0.c0))) IN ()); -- 2ms;
SELECT ALL CASE COUNT(vt2.c0)  WHEN vt2.c0 THEN COUNT(vt0.c0) END, AVG(((vt2.c1)%(vt2.c0))) OVER (), ((((((((TOTAL(x''))OR(((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt0.c1)))))AND(SUM(vt0.c1))))AND(CAST(vt0.c1 AS BLOB))))AND((vt0.c0 IN (vt2.c0)))) FROM vt0 NOT INDEXED, vt1, vt2 WHERE ((((((NULL) NOTNULL), TRIM(x'5e72'), ((x'')<(0.4334193095530423)), (('968797696')<=(x'41b23265')), CASE WHEN 0.9073114086008488 THEN 0.15768210744598266 ELSE x'' END))>((((((((((x'')OR(x'8a2c')))AND(NULL)))OR(0.20397029179303006)))OR(x'')), (('Wz')&(1614677631)), (((('')OR(-1.124944184E9)))OR(x'')), 0.11835323219840799 COLLATE BINARY, ((0Xffffffff9560b0d0) NOT BETWEEN ('994427159') AND (0x2e89d8a6)))))); -- 0ms;
SELECT DISTINCT ((((vt2.c1, vt0.c1, vt1.c0)) NOT BETWEEN ((vt2.c0, vt2.c0, vt0.c1)) AND ((vt0.c1, vt1.c0, vt2.c0))) IN ()) FROM vt1, vt0, vt2 WHERE (0.321310990054804); -- 0ms;
SELECT vt0.c0 FROM vt2 WHERE ((((((('-518939277') NOT BETWEEN (0.6513938808452792) AND (NULL)))AND(((((-1880970052)AND(0.49046567402160157)))AND(NULL)))))AND(x'' COLLATE NOCASE)));SELECT ((CAST(vt2.c1 AS REAL)) NOT BETWEEN (CAST(vt2.c0 AS REAL)) AND (CASE vt1.c0  WHEN vt0.c0 THEN '-1176867737' WHEN vt2.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt0.c1 ELSE vt2.c1 END)), ((((((vt0.c0)OR(vt0.c0)))AND(vt0.c1)))AND(((vt0.c0) ISNULL))), ((CAST(vt0.c1 AS BLOB)) NOT BETWEEN (((vt0.c0) BETWEEN (vt2.c1) AND (vt2.c0))) AND (((vt2.c1) BETWEEN (vt0.c0) AND (vt2.c0)))) FROM vt0, vt1, vt2 WHERE (((x'')OR(CAST(-1996874586 AS REAL)))); -- 0ms;
SELECT DISTINCT (((~ (vt0.c1))) NOT NULL) FROM vt2 WHERE (((((724198185) BETWEEN ('-609424829') AND ('')))AND(x'')));SELECT DISTINCT CASE WHEN CAST(vt0.c1 AS NUMERIC) THEN ((vt1.c0)!=(vt2.c1)) ELSE vt2.c1 COLLATE BINARY END, (((vt2.c1)) NOT BETWEEN ((((vt2.c0)|(vt2.c1)))) AND ((CASE WHEN vt2.c0 THEN vt2.c1 END))), CASE vt0.c0  WHEN (('1995339342') BETWEEN (vt0.c0) AND (vt0.c1)) THEN (((vt0.c0)) BETWEEN ((vt0.c1)) AND ((vt2.c1))) END FROM vt1, vt0;SELECT ((((0.6003891992248589)AND(vt2.c1)))AND(UNLIKELY(vt0.c0))) FROM vt2, vt1, vt0 LIMIT 1524200507; -- 0ms;
SELECT ((((vt2.c0)IS(vt1.c0)))>((+ (vt2.c0)))) FROM vt0, vt2;SELECT (((vt1.c0) BETWEEN (vt0.c1) AND (vt1.c0)) IN ()) FROM vt0, vt2, vt1 NOT INDEXED LIMIT 1553552746; -- 0ms;
SELECT ALL ((NULLIF(vt2.c1, vt2.c1)) NOT BETWEEN (((((vt0.c1)AND(vt0.c0)))AND(vt1.c0))) AND (((((((((vt2.c0)AND(vt2.c0)))AND(vt0.c1)))OR(vt1.c0)))AND(vt2.c0)))), NULL, x'' FROM vt1 WHERE (((CASE 0.691663324426641  WHEN 1.788964435E9 THEN '0-䅺mLX%' END) BETWEEN ((NULL IN (1.976430935E9, NULL))) AND (((1.863642732E9)>=(x'b118')))));SELECT ((((((((((((vt2.c1)OR(vt2.c1)))AND(vt0.c1)))AND((+ (vt0.c1)))))AND(NULL)))AND((vt2.c1 IN ()))))AND(CASE vt0.c0  WHEN vt0.c0 THEN vt2.c1 END)) FROM vt0; -- 0ms;
SELECT DISTINCT ((((((((((((vt0.c1)OR(vt2.c0)))OR(x'')))OR(vt0.c1)))OR(vt2.c0)))OR(((vt2.c1) IS TRUE))))OR(CASE vt2.c0  WHEN '-1888429828' THEN vt0.c0 ELSE vt2.c1 END)), (((vt2.c1)<(vt0.c0)) IN ()), ((UPPER(DISTINCT vt1.c0)) NOTNULL) FROM vt0 WHERE ((((0.4013950927030111 IN ()))>=(CAST(-1334135540 AS BLOB))));SELECT DISTINCT (((vt2.c0 IN ())) IS FALSE) FROM vt1 WHERE (((NULL IN (-1.7976931348623157E308)) IN ())); -- 0ms;
SELECT ALL (CASE WHEN vt2.c0 THEN vt2.c0 WHEN vt2.c0 THEN 1825260248 WHEN vt0.c1 THEN vt2.c1 ELSE vt2.c1 END IN ()) FROM vt0, vt2, vt1 WHERE ((CAST(x'' AS BLOB) IN ((('-1313226283') NOT BETWEEN (-0.0) AND (0X4826ae0d))))); -- 0ms;
SELECT ALL NTH_VALUE(x'', ((((vt0.c0)!=(0x7c245739)))IS NOT((- (vt0.c1))))) OVER () FROM vt0, vt1; -- 0ms;
SELECT DISTINCT CASE WHEN ((vt2.c0)IS NOT(vt2.c0)) THEN (NOT (vt0.c1)) END FROM vt2, vt0; -- 0ms;
SELECT DISTINCT (((vt0.c1 IN (vt2.c1, vt1.c0)))/(vt0.c0 COLLATE BINARY)), NTILE(vt0.c1) OVER (), NULL FROM vt0;SELECT DISTINCT 0.27442897615462103 FROM vt2, vt1, vt0; -- 0ms;
SELECT DISTINCT (~ (LOWER(vt0.c0))) FROM vt1, vt0, vt2; -- 0ms;
SELECT (NOT (((vt0.c0)LIKE(vt2.c0)))) FROM vt2, vt1;SELECT ((vt0.c0 IN (vt0.c1)) IN ()), COUNT(((vt0.c1) NOT BETWEEN (vt2.c1) AND (vt0.c0))), MAX(((vt2.c0) NOT BETWEEN (vt0.c0) AND (vt0.c1))) FROM vt2, vt1;SELECT DISTINCT ((((((((((vt1.c0)AND(vt2.c1)))AND(vt2.c1)))OR(vt2.c0)))AND(vt2.c0))) NOT BETWEEN (((((vt0.c0)OR(vt1.c0)))OR(vt1.c0))) AND (vt1.c0)) FROM vt2 LEFT OUTER JOIN vt1 ON CASE WHEN ((1.632284958E9)OR(vt0.c1)) THEN (+ (vt1.c0)) ELSE (((vt0.c1)) NOT BETWEEN ((vt2.c0)) AND ((vt2.c0))) END RIGHT OUTER JOIN vt0 ON ((((+ (vt1.c0)), ((((((((vt0.c0)OR('')))OR(vt0.c1)))OR(vt0.c1)))AND(vt1.c0)), (vt0.c0 IN ())))!=((vt2.c1 COLLATE NOCASE, ((vt0.c1) BETWEEN (vt0.c0) AND (vt1.c0)), ((((vt0.c0)OR(vt0.c0)))OR(vt2.c1))))) WHERE (((((NULL)<=(0.980769758864205))) BETWEEN (DATETIME('', -5.26733908E8, 0.083604384273125)) AND (((NULL) NOT BETWEEN (NULL) AND ('\zP9煡)idc')))));SELECT ALL ((((-375808169)<(vt2.c1)))-((~ (vt0.c1)))), ((CAST(vt2.c1 AS INTEGER))AND(NULL)), MAX(((vt0.c0) ISNULL)) FROM vt0, vt1, vt2 WHERE ((((CAST('hu' AS NUMERIC)))>=((((-5.26733908E8) NOT BETWEEN (NULL) AND (NULL)))))); -- 0ms;
SELECT (+ ((vt2.c0 IN ()))) FROM vt0 WHERE (json_array_length((+ (-1e500))));SELECT ((CAST(vt2.c1 AS TEXT))OR(CAST(vt0.c0 AS REAL))), NULL, ((AVG(vt0.c0)) NOT BETWEEN (HEX(vt2.c0)) AND ((vt0.c0 IN ()))) FROM vt0, vt1, vt2 WHERE ((('F3ke') IS FALSE)); -- 0ms;
SELECT DISTINCT COUNT((- (vt2.c0))) FROM vt0;SELECT DISTINCT ((NULLIF(DISTINCT vt1.c0, vt1.c0))OR(x'5b04')), vt0.c1 COLLATE BINARY, (((((vt2.c1) ISNULL)))<((vt0.c0))) FROM vt1, vt0, vt2; -- 1ms;
SELECT DISTINCT SUM((NOT (vt2.c1)) COLLATE NOCASE) FROM vt1, vt0 ORDER BY (((vt0.c1)) NOT BETWEEN ((((vt0.c0) BETWEEN (vt1.c0) AND (vt2.c1)))) AND ((((((vt2.c0)OR(vt2.c0)))AND(vt0.c1))))) DESC LIMIT -565569197 OFFSET -735628326;SELECT MAX(CASE NULL  WHEN vt2.c0 THEN vt1.c0 END), (((vt1.c0))<=((vt2.c1))) COLLATE RTRIM, ((((vt0.c0)>>(vt0.c0))) ISNULL) FROM vt0, vt1, vt2; -- 0ms;
SELECT DISTINCT CASE ((vt2.c1) NOT BETWEEN (NULL) AND (vt1.c0))  WHEN ((vt1.c0) NOT BETWEEN (vt0.c0) AND (vt2.c1)) THEN ((vt2.c1)!=(vt1.c0)) ELSE ((vt1.c0)&(vt0.c1)) END FROM vt0, vt2, vt1; -- 1ms;
SELECT (- (vt2.c0)) COLLATE RTRIM FROM vt0, vt2 WHERE ((LIKELIHOOD(NULL, 0.042221092533587856) IN ())) ORDER BY (((vt1.c0)) BETWEEN ((((vt2.c0) NOT BETWEEN (vt0.c0) AND (NULL)))) AND ((((((vt2.c0)AND(vt0.c0)))OR(vt0.c0)))));SELECT DISTINCT CAST((((vt2.c0, vt2.c1, vt0.c1))>=((vt2.c1, vt1.c0, vt2.c0))) AS TEXT) FROM vt2, vt0, vt1 WHERE ((((((NULL) IS TRUE), ('-485502299' IN ()), (~ (x''))))>((((((1252323838)AND(x'')))OR(2.05770839E9)), ((NULL)==(x'')), ((0Xffffffffe09aadac) NOT BETWEEN (-1.176867737E9) AND (NULL)))))) LIMIT -1496376564 OFFSET 2113269542; -- 0ms;
SELECT DISTINCT (NOT (vt0.c0)) COLLATE BINARY FROM vt1 WHERE (((NULL IN ()) IN ()));SELECT ALL NULL FROM vt0, vt1, vt2 WHERE ((((CAST(NULL AS BLOB)))<((-1610630918)))); -- 0ms;
SELECT ALL COUNT(*) OVER () FROM vt0, vt2 WHERE ((('0.7597010756393976') NOT BETWEEN (NULL) AND ('-1017909972')) COLLATE RTRIM); -- 0ms;
SELECT DISTINCT vt2.c0 FROM vt1, vt2 WHERE (QUOTE(0X40ee4f65 COLLATE BINARY)); -- 0ms;
SELECT DISTINCT ((((vt2.c1)GLOB(vt0.c1)))IS NOT(SUM(vt0.c0))) FROM vt1, vt0;SELECT DISTINCT (((COALESCE(vt2.c0, NULL, vt2.c1, vt0.c1)))<=((((vt1.c0) IS TRUE)))) FROM vt1 WHERE ('1914133802');SELECT LTRIM(UNLIKELY(vt2.c1)) FROM vt2 WHERE (((0.08105354682508426)|(CASE x''  WHEN NULL THEN -1182037219 WHEN -1067845584 THEN 1145359858 WHEN '' THEN '-569329188' END))) ORDER BY CASE (vt1.c0 IN ())  WHEN CASE WHEN vt1.c0 THEN vt0.c1 ELSE x'' END THEN (((vt0.c1, vt0.c1, vt2.c0))>((vt0.c0, vt2.c0, vt0.c0))) END, (((((((vt2.c0)) BETWEEN ((vt0.c1)) AND ((0.20501831453451447))))OR(((((vt0.c1)AND(vt0.c0)))AND(vt0.c1)))))OR(((vt1.c0)!=(x''))))  NULLS FIRST;SELECT ((x'') NOT BETWEEN (((vt2.c0) BETWEEN (vt2.c0) AND (vt0.c1))) AND (json_extract(vt2.c1, vt2.c1))) FROM vt0, vt2;SELECT ALL LEAD(((((vt2.c0)>(vt1.c0))) NOT BETWEEN (CAST(vt1.c0 AS INTEGER)) AND ((('') NOT BETWEEN (vt2.c0) AND (vt2.c1)))), '', vt2.c1) OVER () FROM vt0, vt1, vt2; -- 2ms;
SELECT ALL ((((((vt2.c0)AND(vt2.c1)))AND(vt1.c0))) ISNULL) FROM vt1, vt0 LIMIT -1775811807 OFFSET -1118809707;SELECT DISTINCT (((vt0.c0, vt0.c1, vt2.c1)) BETWEEN ((CAST(vt2.c1 AS INTEGER), ((vt2.c1) BETWEEN (vt2.c0) AND (vt2.c0)), ((((((((vt2.c1)AND(vt0.c1)))AND(vt0.c1)))OR(vt2.c0)))OR(-1.124944184E9)))) AND (((((vt2.c0, vt2.c0, vt0.c1)) NOT BETWEEN ((vt2.c1, vt1.c0, vt1.c0)) AND ((NULL, vt0.c1, vt0.c0))), ((((vt1.c0)OR(vt0.c1)))OR(vt2.c0)), ((vt1.c0)GLOB(vt2.c1))))) FROM vt1, vt2 ORDER BY (NOT (CAST('<ꑣ' AS NUMERIC))) ASC, ((vt2.c0) NOT NULL) COLLATE NOCASE ASC  NULLS FIRST;SELECT (((vt2.c1, vt2.c1, vt0.c1)) BETWEEN ((vt1.c0, vt2.c1, vt1.c0)) AND ((vt1.c0, vt1.c0, vt0.c0))) COLLATE RTRIM FROM vt2 NOT INDEXED WHERE (((NULL) BETWEEN (((x'29b7') NOT BETWEEN (x'') AND (0.6561940041217053))) AND (CASE WHEN '禂bo' THEN x'ee8ff28e' END)));SELECT DISTINCT CAST(json_valid(vt2.c0) AS INTEGER) FROM vt0, vt2; -- 0ms;
SELECT ALL SQLITE_SOURCE_ID(), vt0.c0, TOTAL((+ (vt2.c1))) FROM vt1, vt0 LIMIT -1585166300 OFFSET 1676963670;SELECT DISTINCT ((((vt2.c1) ISNULL))/(IFNULL(DISTINCT vt2.c1, vt1.c0))) FROM vt2, vt0, vt1 WHERE (x'c460'); -- 0ms;
SELECT DISTINCT vt1.c0, ((((((vt0.c0)AND(vt2.c0)))AND(vt0.c1))) IS TRUE), RTRIM(((((vt0.c1)OR(vt0.c1)))AND(vt2.c0))) FROM vt1, vt0 LIMIT -1880970052;SELECT ALL ((CAST(vt2.c0 AS NUMERIC)) BETWEEN (((((vt0.c0)OR(vt1.c0)))OR(vt2.c1))) AND ((((vt1.c0))<=((vt2.c0))))) FROM vt1, vt0 ORDER BY (json_quote(vt1.c0) IN (vt0.c1 COLLATE BINARY, CASE WHEN vt0.c0 THEN vt0.c0 END)) DESC  NULLS LAST, CAST(vt2.c0 AS TEXT)  NULLS LAST, CASE WHEN ((x'') IS FALSE) THEN vt2.c0 COLLATE RTRIM ELSE ((vt0.c0) BETWEEN (vt1.c0) AND (vt2.c0)) END ASC LIMIT -1655923592;SELECT CASE WHEN ('' IN ()) THEN vt0.c1 COLLATE BINARY ELSE (((vt1.c0)) NOT BETWEEN ((vt2.c1)) AND ((0.10353556370984174))) END, ((((vt0.c1)>(vt2.c1))) ISNULL), ((((((((((vt0.c1) BETWEEN (x'46ce') AND (vt0.c1)))OR(CAST(vt1.c0 AS BLOB))))OR(((vt1.c0) IS TRUE))))AND(CASE vt0.c1  WHEN vt2.c1 THEN vt2.c1 END)))OR(vt1.c0)) FROM vt0, vt2 WHERE ((((((x'')AND('-911508440')))AND('b ')) IN ()));SELECT DISTINCT ((0xffffffff92dc296d)<=((('-753235105') NOTNULL))), (+ (LIKELIHOOD(vt2.c1, 0.4047475801408944))), NTILE(((((((vt1.c0) IS TRUE))OR(CAST(vt1.c0 AS INTEGER))))OR(vt1.c0))) OVER () FROM vt1 WHERE (x'af668b0c' COLLATE BINARY);SELECT DISTINCT 0.5723757477336955 FROM vt0, vt2, vt1 ORDER BY ((((((((CAST(vt2.c0 AS NUMERIC))AND(CASE WHEN vt0.c1 THEN vt2.c0 ELSE vt2.c0 END)))OR(CAST(vt0.c1 AS BLOB))))OR((- (x'')))))AND(((vt0.c1) IS TRUE))) ASC  NULLS FIRST; -- 1ms;
SELECT ALL x'' FROM vt0, vt1, vt2; -- 0ms;
SELECT DISTINCT ((CAST('jQC%W_''#' AS TEXT)) IS FALSE) FROM vt0 WHERE (((((0.501161537276212) NOT NULL)) NOT BETWEEN ((1.441878191E9 IN ())) AND (CAST('' AS INTEGER)))); -- 0ms;
SELECT (NOT (((vt2.c1)AND(vt0.c0)))) FROM vt2;SELECT DISTINCT ((((((((vt0.c1)OR(vt0.c1)))OR(vt0.c1)))AND(vt2.c1)))OR(((vt2.c0)/(vt1.c0)))), vt2.c0, (SUM(vt2.c1) IN ()) FROM vt1, vt2, vt0 WHERE (CAST((('-66727485')%(0.27626969261888845)) AS NUMERIC)); -- 0ms;
SELECT DISTINCT CASE ((vt1.c0)LIKE(vt0.c1))  WHEN TRIM(vt1.c0, vt0.c1) THEN ((((((((vt1.c0)OR(vt2.c0)))AND(vt0.c0)))OR(vt0.c1)))AND(vt0.c0)) ELSE ((((vt2.c0)OR(vt0.c1)))OR(vt2.c1)) END, CASE WHEN vt2.c0 COLLATE RTRIM THEN CAST(vt2.c1 AS TEXT) END, TOTAL(((vt1.c0) NOTNULL)) FROM vt1, vt2, vt0; -- 0ms;
SELECT DISTINCT (((((((((((vt1.c0, vt2.c0, vt0.c0)) NOT BETWEEN ((vt0.c0, vt0.c0, vt2.c0)) AND ((vt2.c1, vt0.c1, vt1.c0))))AND(((vt2.c0) IS FALSE))))AND(x'')))AND(((vt1.c0) IS TRUE))))OR((vt0.c1 IN (vt0.c0)))) FROM vt2, vt0, vt1; -- 1ms;
SELECT DISTINCT CAST(CASE WHEN vt0.c1 THEN vt2.c1 WHEN vt1.c0 THEN vt0.c1 WHEN vt0.c0 THEN vt2.c1 ELSE vt2.c1 END AS REAL), PERCENT_RANK() OVER ( ORDER BY (CASE vt1.c0  WHEN vt0.c1 THEN vt0.c0 WHEN vt2.c0 THEN vt0.c0 WHEN vt0.c0 THEN '' ELSE vt1.c0 END IN ())  NULLS LAST), (((((~ (vt2.c1)))OR(((((((((((((vt2.c0)OR(vt2.c0)))AND(vt2.c0)))AND(vt2.c0)))AND(vt0.c1)))AND(vt0.c1)))OR(0.16587121919619918)))))OR((+ (NULL)))) FROM vt1, vt0 WHERE (CAST(((0.06945434154324748) BETWEEN (0.1812526786933033) AND (1980287406)) AS NUMERIC)) UNION SELECT DISTINCT COUNT(*) OVER (), ROW_NUMBER() OVER ( GROUPS BETWEEN  UNBOUNDED PRECEDING AND  UNBOUNDED FOLLOWING), vt0.c0 COLLATE BINARY FROM vt1 WHERE (((TYPEOF(NULL)) ISNULL));SELECT (((((((vt0.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt0.c0))))AND(((vt0.c1) BETWEEN (vt0.c1) AND (vt1.c0)))))OR(((((vt0.c0)OR(vt0.c1)))OR(vt0.c0)))) FROM vt0, vt1, vt2; -- 0ms;
SELECT DISTINCT CASE WHEN ((vt0.c0) BETWEEN (vt2.c1) AND (vt0.c0)) THEN (- (vt1.c0)) ELSE (('-1654876021') BETWEEN (vt1.c0) AND (0Xffffffffcd384e7f)) END FROM vt1 WHERE (((((((('-1654876021'))<=((-5.65569197E8))))OR(0.11134966539088198)))OR(((0.4595140123600385)|(x''))))) LIMIT 816503802 OFFSET -1159862531;SELECT DISTINCT CAST(CAST(vt2.c0 AS INTEGER) AS REAL) FROM vt2 WHERE (CAST('%H' COLLATE NOCASE AS INTEGER)) ORDER BY vt2.c0; -- 0ms;
SELECT DENSE_RANK() OVER () FROM vt2, vt1, vt0; -- 0ms;
SELECT DISTINCT LOWER('590872088') COLLATE NOCASE FROM vt1 WHERE ((((NULL)) NOT BETWEEN ((((((x'')AND(NULL)))AND(0.7282720327120616)))) AND ((NULL)))) ORDER BY CASE WHEN ((vt2.c1) IS TRUE) THEN '1988850454' ELSE vt0.c0 COLLATE RTRIM END ASC  NULLS FIRST LIMIT 1224037561 OFFSET 1220396200;SELECT DISTINCT ((LIKELIHOOD(vt2.c0, 0.6855448018269119)) ISNULL), COUNT(*), (+ (((vt1.c0) ISNULL))) FROM vt1, vt0 WHERE ((((x'', '1203393949', x'6555')) NOT BETWEEN (('PN&ca~?', ((1187918380)||(0.4087029655383235)), CAST(x'8302db19' AS NUMERIC))) AND ((('1178308325' IN ('-1666980631')), (((0.7700236919688482))>((1454210268))), (((NULL, '1011329133', '1865881303')) NOT BETWEEN ((NULL, NULL, -1350660523)) AND ((NULL, NULL, 0xffffffff9ca3e4e9))))))) LIMIT -2022115481;SELECT CASE (((vt2.c0))!=((vt1.c0)))  WHEN vt2.c1 COLLATE NOCASE THEN ((((((((vt0.c1)AND(vt2.c0)))AND(vt2.c0)))AND(0.6957936177061289)))AND(vt0.c0)) WHEN CASE vt1.c0  WHEN vt2.c0 THEN '嚮acy' ELSE vt2.c1 END THEN vt2.c0 WHEN CAST(x'' AS INTEGER) THEN TRIM(DISTINCT vt1.c0, vt1.c0) ELSE (((vt2.c1))!=((vt1.c0))) END FROM vt0 WHERE (JULIANDAY('^(鿍k!W' COLLATE BINARY, ((x'') IS TRUE), CAST(NULL AS NUMERIC)));SELECT DISTINCT (- (vt2.c0 COLLATE NOCASE)) FROM vt2, vt0, vt1 WHERE (((((NULL)AND(x'')))AND(x'781a' COLLATE NOCASE))); -- 0ms;
SELECT DISTINCT CASE WHEN ((vt1.c0) NOT BETWEEN (vt1.c0) AND ('Dl]')) THEN vt2.c0 COLLATE NOCASE WHEN (vt2.c0 IN ()) THEN ((vt2.c0)LIKE(vt0.c1)) WHEN x'' THEN CASE WHEN vt1.c0 THEN NULL WHEN NULL THEN vt2.c1 WHEN vt0.c1 THEN vt2.c0 WHEN vt0.c0 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 END END, RANK() OVER (), ((CASE WHEN vt0.c1 THEN vt1.c0 WHEN x'0f67' THEN vt0.c1 WHEN vt2.c0 THEN vt0.c0 ELSE vt0.c1 END)/(((vt0.c0) IS TRUE))) FROM vt2 WHERE (TYPEOF(((x'') NOT BETWEEN (0.011835958010680714) AND (0.38558714318407805)))) ORDER BY (((((vt0.c1))<=((vt0.c1))))==((NOT (vt2.c0)))) DESC, CASE WHEN ((vt2.c1)IS NOT(vt1.c0)) THEN UPPER(vt2.c1) ELSE (NOT (vt2.c0)) END  NULLS FIRST LIMIT 1684633433 OFFSET -592834060;SELECT DISTINCT CAST(((NULL) BETWEEN (vt0.c1) AND (x'')) AS NUMERIC) FROM vt1, vt0, vt2 LIMIT 1011329133; -- 0ms;
SELECT DISTINCT (vt1.c0 COLLATE BINARY IN ()) FROM vt1, vt2, vt0 GROUP BY ((((vt2.c0) BETWEEN (vt0.c0) AND (vt0.c0))) NOTNULL); -- 1ms;
SELECT DISTINCT ROW_NUMBER() OVER () FROM vt1 LIMIT 1053312576 OFFSET 2069670040; -- 0ms;
SELECT DISTINCT ROW_NUMBER() OVER () FROM vt2, vt0, vt1 WHERE ((((0X66a109dd, 0X16cc7ca9, 0.313360141920044)) NOT BETWEEN ((((((x'4ca6')OR(x'')))AND(1451206861)), (('2088271835') NOT NULL), ((NULL) NOTNULL))) AND ((0.2968900920187386, (x'c3d7' IN ()), ((538687665)<=('-1547786208')))))); -- 0ms;
SELECT CASE (~ (vt2.c0))  WHEN (((vt1.c0)) BETWEEN ((vt2.c0)) AND ((vt0.c1))) THEN CASE WHEN vt2.c1 THEN vt2.c1 END ELSE (~ (vt2.c0)) END, (((vt2.c1) BETWEEN ('柅j쏳7') AND (vt1.c0)) IN ()), SUM(NULL) OVER () FROM vt1, vt0, vt2 WHERE (((TIME('QWhb崪oMV', -1.65657766E8, 1282643705, 0.883715930459922, 409708557)) NOT BETWEEN ((+ (x''))) AND ((((0.8429820273966456)) BETWEEN (('1694078846')) AND (('-394668554')))))) ORDER BY ((vt2.c0 COLLATE RTRIM)>(((vt1.c0) NOT NULL))); -- 0ms;
SELECT ALL GROUP_CONCAT((vt0.c1 IN ())) FILTER(WHERE (((vt1.c0, vt1.c0, vt0.c0)) NOT BETWEEN (((((vt2.c1, vt0.c0, x''))<>((vt2.c1, vt0.c1, vt0.c0))), vt2.c1, UPPER(vt0.c0))) AND ((DATETIME(vt2.c1, vt2.c1, vt1.c0), ((vt0.c0)IS(vt1.c0)), ((((vt2.c1)AND(vt2.c1)))AND(vt1.c0)))))) OVER () FROM vt2 WHERE ((((x'', '0fL', x'')) NOT BETWEEN ((-638164620, ((x'bce3')IS(x'')), ((-1357283948) NOT BETWEEN ('1764037649') AND (0.4132342696176511)))) AND ((IFNULL(x'db11', x'e2509d2a'), CASE WHEN 0Xffffffffd62c1e44 THEN NULL END, (~ (x'8918'))))));SELECT ALL (((((('g|Iq2') ISNULL))OR(((vt1.c0) IS TRUE))))AND(COALESCE(vt2.c0, vt0.c1, vt2.c0, vt1.c0))), ((((((((NULL)OR(vt1.c0 COLLATE NOCASE)))OR(((vt2.c0) IS TRUE))))AND(((vt2.c0) BETWEEN (vt1.c0) AND (vt0.c1)))))AND(vt0.c1 COLLATE BINARY)), (((((((((vt2.c1 IN (vt0.c1, vt2.c0)))AND(LIKELY(DISTINCT vt1.c0))))OR(((vt0.c1) NOT NULL))))AND(((vt2.c1) NOT BETWEEN (vt2.c1) AND (-1.369664454E9)))))OR(vt0.c1)) FROM vt0, vt1, vt2 WHERE (((((0xffffffffe33fe6c7))>=((0.21707756653978505))) IN (((0.24708925774651314) NOT BETWEEN (0.9660373706283175) AND (-594084758))))); -- 0ms;
SELECT DISTINCT (((((((vt2.c1)OR(vt0.c0)))AND(vt2.c1))))>(('-569329188'))) FROM vt1, vt0, vt2 WHERE ((((~ (0.8384411729137591))) BETWEEN ('-1176097307') AND (((NULL) ISNULL)))); -- 0ms;
SELECT ALL ((vt1.c0) BETWEEN ('-624032029') AND (x'')) COLLATE NOCASE FROM vt0, vt2 WHERE (HEX(((NULL) IS FALSE)));SELECT DISTINCT ((COALESCE(vt0.c1, vt2.c1))||((vt0.c0 IN (vt2.c1)))) FROM vt0, vt1, vt2 LIMIT 1417018290 OFFSET -2027649588; -- 0ms;
SELECT DISTINCT ((TOTAL(vt2.c0))<((NOT (vt2.c1)))) FROM vt1, vt2; -- 0ms;
SELECT (((- (vt0.c1))) NOT BETWEEN ((((vt0.c0)) NOT BETWEEN ((vt1.c0)) AND ((vt1.c0)))) AND (((vt0.c1)<<(vt1.c0)))) FROM vt0, vt1, vt2 WHERE (((((((((0xffffffff86aa3b20)OR(0xffffffff81f3bafe)))OR(0Xffffffffd2eda9ec)))AND(((x'a10f176b') NOT BETWEEN (0Xffffffffa3ba13b3) AND (0.34946149742987453)))))OR(''))) ORDER BY (((vt0.c1 IN ())) NOT BETWEEN (UNICODE(vt2.c1)) AND ('')) DESC; -- 1ms;
SELECT DISTINCT CASE WHEN NULL THEN (vt1.c0 IN ()) WHEN CASE WHEN vt0.c1 THEN vt2.c0 END THEN vt0.c1 WHEN CASE vt0.c1  WHEN vt0.c0 THEN '-1738646313' ELSE vt0.c0 END THEN ((vt1.c0)LIKE(vt0.c1)) ELSE vt1.c0 COLLATE NOCASE END FROM vt0 WHERE ((((0.8776639346630439 IN ())) BETWEEN (0X63715791 COLLATE RTRIM) AND ((('sn') ISNULL))));SELECT DISTINCT CAST((NOT (vt2.c0)) AS TEXT), CASE WHEN 0.7686546820181724 THEN vt2.c1 ELSE 0.06590498164636771 COLLATE RTRIM END, ((CAST(vt1.c0 AS TEXT)) NOT BETWEEN (CAST(vt0.c1 AS INTEGER)) AND (NULL)), TYPEOF(GROUP_CONCAT(vt2.c1)), vt1.c0 FROM vt0 WHERE ((('-1880970052') NOT BETWEEN ('j[^6') AND (x'3f567d89')) COLLATE RTRIM);SELECT CASE WHEN ((((vt0.c0)AND(vt2.c1)))OR(vt2.c0)) THEN ((((((((vt0.c1)AND(vt0.c0)))AND(vt1.c0)))OR(vt0.c0)))AND(vt2.c0)) ELSE ((((((((vt1.c0)OR(vt1.c0)))OR(vt2.c1)))OR(vt2.c1)))AND(vt1.c0)) END, vt2.c1, vt2.c1 FROM vt2, vt0;SELECT CAST(CASE WHEN 0.3495949973002864 THEN vt0.c0 ELSE vt0.c1 END AS NUMERIC) FROM vt1 WHERE ((((((0.6735991048726889)) NOT BETWEEN ((x'')) AND ((NULL))))<<((((0.5717719925881857, NULL, '-140053774'))=(('716376311', x'', 7.00544797E8))))));SELECT DISTINCT LOWER(((vt0.c1)<<('~kz6v|%d(y)'))) FROM vt0, vt2, vt1; -- 0ms;
SELECT DISTINCT 'EV5beu', TOTAL((vt0.c0 IN ())), ((((vt0.c1) IS TRUE)) NOT NULL) FROM vt1 WHERE (((((('嚮acy' IN (x'', x'')))AND(UPPER(DISTINCT NULL))))AND((((x'1987', '', NULL))<>((x'', x'', x'a40c')))))) ORDER BY NULL, vt2.c0  NULLS FIRST;SELECT DISTINCT (((vt2.c1)) NOT BETWEEN ((x'')) AND ((x''))) COLLATE BINARY, ABS(CAST(vt2.c1 AS BLOB)), ((0.5317199112829379)*(0.5437823154482418)) FROM vt0, vt2 WHERE (((((x'')!=(x''))) IS TRUE)) ORDER BY (((((((vt2.c0, vt0.c0, vt1.c0, vt0.c1, vt1.c0))<=((vt0.c0, vt1.c0, x'1c99', vt2.c0, vt0.c1))))AND('')))OR((NOT (vt2.c1)))), 0.10429340426654266 ASC;SELECT ALL ((NULLIF(DISTINCT vt0.c1, vt2.c0))|(((((vt2.c0)OR(vt0.c1)))OR(vt1.c0)))) FROM vt0, vt1 WHERE (((x'e5e3e748' COLLATE NOCASE) NOT NULL)) ORDER BY x'e810' ASC;SELECT DISTINCT COUNT(*), (((((((((+ (vt2.c0)))OR((vt1.c0 IN (NULL)))))AND(CAST(vt0.c1 AS BLOB))))OR(vt1.c0)))OR(CAST(vt2.c1 AS REAL))), ((((vt2.c0)&(vt2.c0))) NOTNULL) FROM vt2 WHERE (CAST(((0.6084592154425047)<<(x'')) AS NUMERIC));SELECT ((((vt2.c0) NOT BETWEEN (vt0.c1) AND (vt2.c0)))/(((vt0.c1)IS(vt2.c1)))) FROM vt2, vt0, vt1 LIMIT 1250065780; -- 0ms;
SELECT ALL MIN(MAX(((((8.60738294E8)OR(vt0.c1)))AND(vt2.c0)))), (((vt0.c0 IN ()))<(((vt1.c0) BETWEEN (vt2.c0) AND (vt0.c1)))), (+ (vt2.c0)) COLLATE NOCASE FROM vt0, vt2;SELECT (((((vt0.c0 IN (vt2.c0)))AND(CASE vt1.c0  WHEN vt2.c0 THEN vt1.c0 ELSE vt0.c1 END)))OR(COUNT(*))) FROM vt0, vt2, vt1 LIMIT 1460515687; -- 1ms;
SELECT DISTINCT (NOT ((vt1.c0 IN ()))) FROM vt2, vt1 INTERSECT SELECT (((((((vt0.c0))>=((vt2.c1))))AND(CAST(vt2.c0 AS REAL))))AND(vt2.c0 COLLATE RTRIM)) FROM vt0 WHERE ((+ (0.8723363602214965 COLLATE RTRIM))) GROUP BY ((CASE vt1.c0  WHEN vt2.c0 THEN vt0.c1 END)>(json_type(vt0.c0)));SELECT CASE COUNT(vt2.c0)  WHEN (vt0.c1 IN (vt2.c0)) THEN ((vt2.c1) BETWEEN (vt1.c0) AND (vt0.c0)) WHEN 0.8014920834599503 COLLATE NOCASE THEN ((vt0.c1) BETWEEN (vt0.c1) AND ('')) WHEN CASE WHEN vt1.c0 THEN x'' ELSE x'' END THEN CASE WHEN vt2.c0 THEN vt1.c0 END ELSE TOTAL('0.8532443782142887') END FROM vt0 WHERE (CAST((('1756417080') BETWEEN ('M#W-') AND (0.9788480657994065)) AS TEXT));SELECT ((vt0.c0 IN (vt2.c0)) IN ((((vt0.c0))>((vt0.c1))))) FROM vt2 LEFT OUTER JOIN vt0 ON (((vt0.c1)LIKE(vt0.c1)) IN ()) RIGHT OUTER JOIN vt1 ON (((vt2.c1, vt0.c0, vt0.c1)) NOT BETWEEN (('981946228', ((vt0.c1)-(vt0.c0)), vt2.c1 COLLATE BINARY)) AND ((vt2.c1 COLLATE BINARY, UNLIKELY(vt2.c1), (((vt0.c1))=((x'2e303368')))))) LIMIT 1037645351; -- 0ms;
SELECT DISTINCT ((((((vt2.c0)>(NULL)))AND(((((((((vt1.c0)AND(vt2.c1)))OR(0.7805572371118155)))OR('')))OR(vt0.c0)))))OR(((vt0.c0)-(vt1.c0)))) FROM vt2;SELECT ALL ROW_NUMBER() OVER (), CAST(vt2.c1 AS NUMERIC), CAST(((vt1.c0)!=(vt0.c0)) AS INTEGER) FROM vt0;SELECT DISTINCT 0x37bcc25c FROM vt1, vt2, vt0 GROUP BY CASE (vt2.c0 IN ())  WHEN ((vt0.c1) NOT BETWEEN (vt1.c0) AND (vt0.c0)) THEN ((vt2.c0) NOT BETWEEN (vt2.c0) AND (vt2.c1)) ELSE (vt2.c1 IN ('1383246125', vt1.c0)) END HAVING 0.018655712202504282; -- 1ms;
SELECT ALL UPPER(x'44ec'), (NULL COLLATE BINARY IN ()), TRIM(DISTINCT TOTAL(vt0.c0)) FROM vt2, vt0; -- 0ms;
SELECT ALL CASE WHEN (vt0.c0 IN (vt1.c0)) THEN vt2.c1 COLLATE RTRIM ELSE IFNULL(DISTINCT vt2.c1, vt2.c1) END FROM vt1, vt0, vt2; -- 0ms;
SELECT (((+ ('1988850454')))<=((((vt2.c1)) BETWEEN ((vt0.c0)) AND ((vt1.c0))))) FROM vt1;SELECT ALL UNLIKELY((vt2.c0 IN ())), x'', ((((((vt2.c0)OR(vt0.c0)))OR(vt0.c1))) IS FALSE), ((CASE vt2.c0  WHEN vt0.c0 THEN '_Ln' END) IS FALSE), ((((vt0.c0)%(2075681220))) NOT BETWEEN (((((vt2.c0)OR(vt0.c1)))OR(vt0.c0))) AND ((((vt0.c0, vt2.c0, vt0.c1)) BETWEEN ((vt0.c0, vt1.c0, vt0.c1)) AND ((vt0.c0, vt2.c0, vt2.c0))))) FROM vt1, vt0, vt2 WHERE (((((0.13832058242062195) BETWEEN (NULL) AND (0.3666379369894619))) ISNULL)); -- 0ms;
SELECT ALL (((((vt0.c0)AND(vt1.c0)))AND(vt0.c0)) IN ()) FROM vt0, vt2, vt1 LIMIT 1865881303 OFFSET 401920178; -- 0ms;
SELECT ((json_array_length(vt0.c0)) IS FALSE), ((((2075681220) NOTNULL))IS(CAST(vt0.c0 AS INTEGER))), (CASE vt0.c1  WHEN vt1.c0 THEN vt0.c0 END IN ()) FROM vt2, vt0, vt1 WHERE ((((((NULL)>>(x'3459')), x'' COLLATE BINARY, (0Xffffffffe4bedbf9 IN (x'ce9fff40', NULL))))==((CAST(NULL AS INTEGER), ((NULL)%(0.6353510192996602)), CAST(NULL AS REAL))))); -- 0ms;
SELECT DISTINCT (((((((vt1.c0))!=((vt0.c0))))AND(SQLITE_COMPILEOPTION_GET(vt2.c1))))AND(CASE vt0.c0  WHEN vt2.c1 THEN vt1.c0 END)) FROM vt1 WHERE (CAST(CASE x''  WHEN '-1120392740' THEN '-1326711471' ELSE 1.65286797E9 END AS BLOB)) LIMIT 2082756409;SELECT DISTINCT COUNT((vt0.c0 IN ())) FROM vt0, vt1, vt2; -- 1ms;
SELECT DISTINCT ((MIN(vt1.c0))<=(((((vt0.c1)AND(vt0.c0)))OR(vt1.c0)))) FROM vt2, vt0 WHERE (((((('LW仔vkCDb䠤') NOT BETWEEN (NULL) AND (0x69c4c355))))<=((CAST(NULL AS INTEGER)))));SELECT ALL '305020917' FROM vt2, vt1 WHERE (((((x'4ad8')==(x''))) BETWEEN ((~ (NULL))) AND ((NOT (0.8816013158922751))))) LIMIT -1797370983 OFFSET 1470128356; -- 0ms;
SELECT DISTINCT ((CASE vt2.c0  WHEN vt0.c0 THEN vt1.c0 END) NOT BETWEEN (CASE WHEN NULL THEN vt0.c0 ELSE vt2.c1 END) AND (COUNT(vt1.c0))) FROM vt2, vt1;SELECT ALL CASE ((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c1))  WHEN CASE WHEN vt0.c0 THEN vt0.c1 ELSE vt2.c0 END THEN ('7|e&KXH%' IN ()) WHEN vt1.c0 COLLATE BINARY THEN GROUP_CONCAT(vt0.c0) WHEN vt2.c0 THEN ((vt2.c0)IS(vt0.c0)) END FROM vt2, vt1;SELECT DISTINCT (+ (((vt0.c1)IS NOT(vt2.c0)))) FROM vt1, vt0 LIMIT -1775811807 OFFSET -648520805;SELECT ALL (((vt0.c0)) NOT BETWEEN ((((vt0.c1) BETWEEN (vt1.c0) AND (vt2.c1)))) AND ((CASE WHEN 0.8323741236684403 THEN vt2.c0 WHEN vt0.c1 THEN vt0.c0 WHEN vt1.c0 THEN vt2.c1 ELSE vt2.c1 END))) FROM vt2 RIGHT OUTER JOIN vt0 ON (((vt2.c0, 0Xffffffffb5402728, vt0.c0))<=((vt2.c0, vt1.c0, vt2.c0))) COLLATE RTRIM;SELECT LAG(((((((vt0.c0)<=(vt0.c0)))OR((vt0.c1 IN ()))))AND(((((vt0.c1)AND(vt2.c1)))AND(vt0.c1)))), ((((((vt2.c1) IS TRUE))AND(CAST('-2035664096' AS REAL))))OR(((((vt2.c1)AND(vt0.c0)))AND(vt2.c0)))), UPPER(((vt2.c1)<(vt2.c0)))) OVER () FROM vt0, vt2; -- 0ms;
SELECT DISTINCT (((('-958068798')<<(vt0.c0))) IS FALSE) FROM vt1, vt0, vt2 WHERE ((((NOT ('-165657766')))|(CASE x''  WHEN NULL THEN NULL ELSE '780785830' END))); -- 0ms;
SELECT (((0X2853e54f)) NOT BETWEEN ((((vt0.c0) NOT BETWEEN (vt0.c1) AND (vt2.c0)))) AND ((((((((((vt2.c0)AND(vt0.c0)))AND(NULL)))OR(vt2.c0)))AND(vt2.c1))))), ((x'')<<((~ (vt2.c0)))), (NOT ((((vt2.c0, vt0.c0, vt2.c1))<((vt0.c0, vt1.c0, vt0.c1))))) FROM vt2, vt0;SELECT (((x'' IN (vt2.c1))) NOT BETWEEN ((((vt0.c0, vt1.c0, vt1.c0))>((vt1.c0, vt0.c0, vt1.c0)))) AND (((vt0.c0) NOT BETWEEN (x'') AND (vt0.c1)))), COUNT(*) OVER ( RANGE BETWEEN CASE TRIM(DISTINCT vt0.c0)  WHEN (vt2.c0 IN ()) THEN CASE WHEN vt1.c0 THEN vt2.c0 WHEN vt1.c0 THEN vt0.c1 WHEN vt1.c0 THEN vt0.c0 END END FOLLOWING AND  CURRENT ROW), GROUP_CONCAT(((vt0.c0) ISNULL)) FROM vt2, vt0;SELECT DISTINCT vt2.c0, COUNT(((vt2.c0)|(vt2.c1))) OVER (), ((((vt0.c0) IS FALSE))>>(MAX(vt0.c0, vt2.c0))) FROM vt0;SELECT ALL vt1.c0 FROM vt0, vt1; -- 0ms;
SELECT DISTINCT MAX(CAST(vt2.c0 AS INTEGER), ((vt1.c0) BETWEEN (vt0.c0) AND (x''))) FROM vt0, vt1 WHERE (TYPEOF(((NULL)<=(NULL)))) GROUP BY (((((((vt0.c0)) NOT BETWEEN ((vt2.c1)) AND ((vt0.c1))))AND((vt2.c0 IN ()))))AND(((vt1.c0)%(vt2.c1)))), CAST(CAST(vt2.c1 AS REAL) AS NUMERIC), ((CASE WHEN vt2.c1 THEN 'is' END) ISNULL) HAVING MIN(COUNT(*)) LIMIT -2027649588 OFFSET 1698968954;SELECT DISTINCT ((CASE WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c0 THEN vt0.c0 WHEN vt2.c1 THEN vt2.c1 END)||(((vt0.c1) BETWEEN (vt1.c0) AND (vt0.c0)))) FROM vt1, vt2;SELECT LOWER(((vt0.c1)||(vt0.c1))) FROM vt0 WHERE (CASE (0.027681836319574438 IN (x''))  WHEN ((NULL)%(x'5772')) THEN '' END); -- 1ms;
SELECT DISTINCT CASE WHEN CAST(vt0.c0 AS TEXT) THEN vt0.c1 COLLATE NOCASE WHEN ((vt1.c0) IS FALSE) THEN CAST(vt0.c1 AS TEXT) WHEN CAST(vt0.c0 AS REAL) THEN ((((vt2.c1)AND(vt2.c0)))AND(vt0.c1)) ELSE ((vt0.c1) BETWEEN ('') AND (vt2.c1)) END, CASE ((vt0.c1)<<(2063598170))  WHEN (NOT (vt1.c0)) THEN (((vt0.c0, vt0.c0, vt1.c0)) NOT BETWEEN ((vt0.c1, vt0.c1, vt1.c0)) AND ((vt0.c0, vt1.c0, vt2.c0))) END, '0.2626609538306449' FROM vt1, vt0;SELECT ((NOT (vt1.c0)) IN ()) FROM vt1, vt2; -- 0ms;
SELECT DISTINCT ((((((((vt1.c0)OR(vt1.c0)))AND(vt2.c0)))OR(CASE WHEN vt0.c1 THEN vt2.c1 ELSE vt0.c0 END)))AND(((((vt0.c0)AND(vt0.c1)))OR(vt2.c1)))) FROM vt1;SELECT ALL vt2.c1 COLLATE NOCASE FROM vt2, vt0 WHERE (((LIKELY(DISTINCT x''))==(0.6211070143081783))) LIMIT 1859620815; -- 0ms;
SELECT ALL SQLITE_COMPILEOPTION_GET((((vt2.c1, vt0.c1, vt2.c0))<((0.9922134417259894, vt0.c1, vt0.c1)))) FROM vt0 LIMIT -397432539;SELECT ((((vt0.c0)<>(vt1.c0)))+((~ (x'')))) FROM vt0 WHERE (((NULL)AND(0.31609801890805167)) COLLATE NOCASE);SELECT ALL (~ (vt2.c0)) FROM vt1, vt2, vt0; -- 0ms;
SELECT DISTINCT COALESCE(vt0.c1 COLLATE NOCASE, (- (vt0.c0))) FROM vt2 WHERE (((((((((0.1106082368987974)AND(NULL)))AND('-1313226283')))OR(CAST(NULL AS REAL))))AND(CASE WHEN 0.7620996553139072 THEN x'' WHEN -4.51659283E8 THEN 'vt톩)' WHEN '331410151' THEN '' END)));SELECT DISTINCT ((CAST(vt2.c0 AS TEXT)) NOTNULL) FROM vt0 WHERE ((((CAST('' AS REAL)))>((((x'')%(0.5773339382455989)))))) GROUP BY ((((vt1.c0)AND(CAST(vt2.c1 AS REAL))))OR(CASE WHEN vt2.c1 THEN vt1.c0 END)), NULL, x'' HAVING (((LOWER(DISTINCT NULL), COUNT(*), IFNULL(vt1.c0, vt2.c1), (NOT (vt2.c1)), ((((((((((((vt2.c1)AND(vt2.c0)))OR(vt0.c0)))OR(vt2.c1)))AND(vt2.c0)))AND(vt1.c0)))OR(x''))))>=((((((vt0.c0)AND(vt2.c1)))AND(vt0.c0)), CASE vt2.c0  WHEN vt2.c1 THEN vt0.c1 END, TYPEOF(vt2.c0), CASE WHEN '0.7597010756393976' THEN vt0.c1 WHEN vt1.c0 THEN vt0.c1 WHEN vt1.c0 THEN -750117691 END, CASE vt0.c1  WHEN vt0.c0 THEN NULL WHEN vt1.c0 THEN vt0.c0 WHEN vt2.c0 THEN vt2.c0 END)));SELECT DISTINCT ((CASE WHEN vt0.c1 THEN '姂e' END) BETWEEN (((vt0.c0)IS(vt2.c0))) AND (((((vt2.c1)AND(vt2.c0)))OR(x'')))) FROM vt0, vt2 WHERE (UPPER(((0.40257572086494464)+(-2134409023)))); -- 0ms;
SELECT ((((((vt1.c0)<=(vt0.c0)))OR(COALESCE(DISTINCT vt2.c0, vt0.c0))))AND(((vt0.c1) NOT NULL))) FROM vt0, vt1, vt2 WHERE ((~ (((0.9719089748698294)*(0.30657459642691753))))); -- 0ms;
SELECT CAST((((vt2.c0)) BETWEEN ((vt0.c1)) AND ((vt0.c1))) AS INTEGER), ((((x'a876') ISNULL))+(((vt0.c1) NOT BETWEEN (vt2.c1) AND (vt0.c0)))), (GROUP_CONCAT(vt2.c0) IN ()) FROM vt1, vt0, vt2 WHERE (((('V苛!I6\')*(x'')) IN (((0.38389176109889045) ISNULL)))); -- 0ms;
SELECT DISTINCT SUM(vt0.c0), CAST(((((vt0.c0)OR(vt2.c1)))OR(vt0.c1)) AS TEXT), AVG(((vt2.c1) NOTNULL)) OVER () FROM vt2 WHERE ((NOT ('' COLLATE NOCASE))) GROUP BY CAST((((vt2.c0))>((vt0.c0))) AS TEXT);SELECT DISTINCT CASE (vt1.c0 IN (vt0.c0))  WHEN ((((((((vt2.c0)OR(vt1.c0)))OR(vt0.c1)))AND(vt2.c1)))AND(vt2.c0)) THEN QUOTE('') ELSE (vt0.c1 IN (vt0.c0)) END FROM vt1 WHERE (((('[]')) NOT BETWEEN ((CAST(NULL AS BLOB))) AND ((x''))));SELECT ALL (('-786536960') ISNULL) FROM vt2, vt1, vt0; -- 1ms;
SELECT DISTINCT ((((((((((vt1.c0)AND(vt2.c1)))OR(vt0.c1)))OR(vt1.c0)))AND(vt2.c1)))!=(((((((((vt0.c0)OR(vt0.c0)))AND(vt0.c1)))OR(vt0.c0)))AND(vt1.c0)))) FROM vt2, vt0, vt1; -- 0ms;
SELECT ALL COUNT(*) OVER ( ORDER BY 0.472948092410048  NULLS LAST) FROM vt2 WHERE ((((x'')) NOT BETWEEN ((x'a78c' COLLATE NOCASE)) AND ((((-1.124944184E9) NOT BETWEEN (x'') AND (0X53544ce0)))))) ORDER BY x'ec44'  NULLS LAST; -- 0ms;
SELECT ((((vt0.c0)/(vt0.c1)))+(((vt2.c1)||(vt0.c1)))), (vt0.c1 COLLATE RTRIM IN ()), ((((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c0))) NOT BETWEEN (CAST(vt2.c1 AS BLOB)) AND (((vt2.c1)<(vt2.c1)))) FROM vt2, vt0, vt1; -- 0ms;
SELECT DISTINCT CASE (vt1.c0 IN ())  WHEN vt2.c0 THEN LOWER(vt1.c0) WHEN ((vt0.c1)IS NOT(vt0.c0)) THEN CASE vt2.c0  WHEN vt1.c0 THEN vt0.c0 ELSE vt1.c0 END WHEN vt0.c0 THEN CASE vt0.c1  WHEN vt1.c0 THEN vt1.c0 END END FROM vt0, vt1 WHERE ((((((1770100133))>(('-368253932')))) IS TRUE));SELECT DISTINCT COUNT(*) OVER () FROM vt1 ORDER BY ((vt0.c1)IS(vt0.c0)) COLLATE BINARY;SELECT DISTINCT (((((vt0.c1, vt0.c0, vt2.c1))>((vt0.c1, vt2.c1, vt2.c1))))AND(((x'')>>(vt0.c1)))) FROM vt1, vt2, vt0 WHERE (CAST((((x'', x'28a8', '굞{7'))>(('-1331320739', x'', x''))) AS BLOB)); -- 0ms;
SELECT DISTINCT ((vt2.c0)IS NOT(vt2.c0)) COLLATE RTRIM, COUNT(*), ((vt1.c0)AND(0.45597451482745777)) COLLATE RTRIM FROM vt1 WHERE ((((((''))<(('g>FGZ冠䒔g')))) IS TRUE));SELECT ALL ((((vt1.c0)*(vt1.c0)))IS(LTRIM(0.49046567402160157))) FROM vt0, vt2, vt1 WHERE ((((((1914133802 IN (NULL, '')))AND(CAST(0.2646707947054753 AS NUMERIC))))OR(((0X2a89cdc1) ISNULL)))) ORDER BY ((((vt1.c0 COLLATE NOCASE)OR((((vt1.c0)) NOT BETWEEN ((vt0.c1)) AND ((vt0.c1))))))OR((vt2.c0 IN ())))  NULLS FIRST; -- 0ms;
SELECT DISTINCT CAST(((((vt2.c0)AND(vt0.c1)))OR(vt1.c0)) AS REAL) FROM vt2 GROUP BY ((TIME(vt2.c1, vt1.c0, vt0.c0)) NOT BETWEEN (CAST(vt0.c0 AS INTEGER)) AND (vt2.c1 COLLATE RTRIM)), ((vt2.c0)<(vt0.c1)) COLLATE BINARY, 'dh锉G?s' HAVING (((vt0.c1 COLLATE BINARY))<>((vt0.c1 COLLATE BINARY)));SELECT ALL (vt0.c0 COLLATE NOCASE IN (((vt0.c1) IS FALSE))), ((TOTAL(vt0.c0))==(vt0.c1 COLLATE NOCASE)), ((((((vt2.c1)<=(vt2.c1)))OR(CASE vt0.c1  WHEN vt2.c0 THEN vt1.c0 WHEN vt0.c1 THEN vt2.c1 WHEN vt2.c1 THEN vt2.c0 ELSE vt0.c0 END)))AND(((vt2.c0) NOT BETWEEN (vt0.c1) AND (vt2.c0)))) FROM vt2, vt0 WHERE ((((x'' IN ()))<<((((('nkDfa\r')OR(0.19138287117947994)))AND(x''))))) ORDER BY ((((vt0.c0) NOTNULL)) BETWEEN (vt2.c0 COLLATE BINARY) AND (CASE vt0.c0  WHEN vt0.c0 THEN vt0.c0 END)) LIMIT 333045063;SELECT ((((((vt2.c0)AND(vt1.c0)))AND(vt0.c0)))OR(vt2.c1 COLLATE BINARY)), (((((vt0.c1))>((vt2.c0)))) IS TRUE), ((json(vt0.c1))GLOB(((((x'')AND(vt2.c0)))OR(vt0.c1)))) FROM vt0;SELECT DISTINCT (((((((vt0.c0)) BETWEEN ((vt2.c1)) AND ((vt0.c1))))AND(AVG(vt1.c0))))OR(vt2.c0)) FROM vt1, vt0;SELECT DISTINCT ((-1194023035)<=('1312305079')) FROM vt1, vt0 WHERE ((NOT (((NULL) BETWEEN ('vQ^C眝C풫SR') AND ('1494132854'))))); -- 0ms;
SELECT CASE (((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((vt1.c0)))  WHEN (vt2.c0 IN (vt1.c0)) THEN ((x'a5db')|(vt2.c1)) WHEN ((((((((NULL)OR(vt2.c1)))OR(vt2.c0)))OR(vt0.c1)))OR(vt0.c1)) THEN (vt2.c0 IN (vt2.c0)) WHEN ((vt0.c1) IS TRUE) THEN ((vt1.c0) NOT BETWEEN (0xffffffffb21db2d3) AND (vt2.c0)) ELSE ((((((((vt0.c1)AND(vt0.c0)))OR(vt2.c0)))AND(vt0.c0)))AND(vt1.c0)) END, CAST((vt0.c1 IN (vt0.c0)) AS BLOB), NULL FROM vt0 WHERE ((((('')&(0.3101243846437908))) BETWEEN (CASE WHEN NULL THEN NULL END) AND (CASE WHEN NULL THEN 0.11541203390071131 ELSE x'' END))) ORDER BY (+ (((((((((vt2.c0)AND(vt0.c0)))OR(vt0.c1)))OR(vt2.c0)))OR(vt0.c0)))) DESC;SELECT DISTINCT load_extension('', ((vt0.c0) BETWEEN (vt2.c1) AND (vt1.c0))) FROM vt2, vt1, vt0;SELECT ALL (vt2.c0 IN ()) COLLATE RTRIM, ((((((((((vt1.c0)<<(vt0.c0)))AND(((vt0.c0)||(0x30c1e51a)))))OR(CASE WHEN vt2.c0 THEN vt0.c1 ELSE vt0.c1 END)))AND(vt0.c1 COLLATE BINARY)))OR((vt2.c0 IN (vt1.c0)))), (((vt2.c1 IN (vt1.c0))) BETWEEN (((vt2.c0) NOT NULL)) AND ((((vt2.c0)) BETWEEN ((vt1.c0)) AND ((vt0.c0))))) FROM vt0, vt1 WHERE (CAST(x'' COLLATE RTRIM AS INTEGER)) ORDER BY ((vt2.c0)>(((vt0.c0)/(vt2.c0)))) DESC;SELECT DISTINCT ((((vt0.c1) NOTNULL)) IS TRUE) FROM vt2 ORDER BY LOWER(vt2.c1 COLLATE RTRIM);SELECT CAST(SUM(vt0.c1) AS INTEGER) FROM vt2, vt0; -- 0ms;
SELECT ALL AVG(CAST(vt2.c1 AS TEXT)) FROM vt2, vt0; -- 0ms;
SELECT DISTINCT (((vt1.c0 IN ()))GLOB(load_extension(vt1.c0))), (((vt2.c0) NOT BETWEEN (vt0.c1) AND (vt0.c1)) IN ()), (((vt1.c0))<=((ROUND(vt1.c0, vt0.c1)))) FROM vt1 WHERE (UPPER((('<ꑣ') NOT NULL)));SELECT DISTINCT (((vt2.c1 IN ())) IS TRUE), (((NOT (vt2.c1)))<(vt2.c0)), TOTAL(vt2.c1), ((((vt2.c1)IS(vt0.c1))) NOT BETWEEN (((1.865881303E9)>>(vt2.c0))) AND (vt1.c0)), vt2.c0 FROM vt1 WHERE (((SQLITE_COMPILEOPTION_USED(NULL)) NOT BETWEEN ('1004712575' COLLATE BINARY) AND (CASE '0.8052520610053653'  WHEN NULL THEN 1621956537 WHEN 'q\ᵧV' THEN x'' WHEN '-249305532' THEN '' ELSE 0.396331689570688 END))) GROUP BY ((((vt0.c0) NOT BETWEEN (vt2.c1) AND (vt0.c1))) ISNULL) HAVING (((((((vt2.c1, vt0.c1, vt0.c1, 0.8733661311132839, vt1.c0)) BETWEEN ((vt0.c0, vt0.c0, vt2.c1, vt2.c1, vt2.c0)) AND ((vt0.c1, vt2.c1, vt2.c0, vt2.c0, vt2.c0))))OR(((((vt0.c0)AND(vt2.c0)))OR(0.6169257790543295)))))AND(((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c0))));SELECT ((HEX(DISTINCT vt1.c0)) NOTNULL) FROM vt1, vt0, vt2; -- 0ms;
SELECT DISTINCT ((((vt0.c1)/(vt2.c1)))IS NOT(((vt0.c0) BETWEEN (vt0.c0) AND (vt0.c1)))) FROM vt2, vt1 WHERE (CASE WHEN '-1654876021' COLLATE RTRIM THEN ((x'')OR(909336212)) WHEN ((0.3442331690087397)<('331410151')) THEN ((x'')IS(0.5324607343263682)) WHEN ((x'')<<('1788964435')) THEN (- (x'')) END);SELECT DISTINCT ((vt2.c0) NOTNULL) COLLATE BINARY FROM vt2, vt0, vt1; -- 0ms;
SELECT (((vt1.c0)) NOT BETWEEN ((LTRIM(vt1.c0))) AND ((((vt0.c1) BETWEEN (vt0.c0) AND (vt0.c0))))), CAST(vt2.c1 COLLATE RTRIM AS NUMERIC), (0.534333076317299 IN (CASE vt2.c1  WHEN vt0.c1 THEN '0.5348440265335948' ELSE vt0.c1 END)) FROM vt0, vt2 WHERE (x'f390') ORDER BY ((vt1.c0 COLLATE NOCASE)AND(((vt1.c0) IS TRUE))) DESC;SELECT DISTINCT MAX((vt0.c0 IN ())), ((COUNT('?'))|(COALESCE(DISTINCT vt2.c0, vt1.c0, vt0.c1, vt2.c0))), ((HEX(vt1.c0))||('0.691663324426641')) FROM vt1, vt2 WHERE (((UNLIKELY(DISTINCT x''))<=((('1842393600') IS TRUE))));SELECT DISTINCT LOWER(vt0.c1 COLLATE NOCASE), ((0.30546554444947793)IS NOT(GROUP_CONCAT(vt2.c1))), ((IFNULL(vt0.c1, vt1.c0)) NOT BETWEEN (((((((((vt2.c1)AND(vt2.c0)))AND(vt0.c0)))AND(NULL)))OR(vt2.c1))) AND (((vt2.c1) ISNULL))) FROM vt0, vt1, vt2 WHERE ((+ (((NULL)-(''))))); -- 0ms;
SELECT DISTINCT vt0.c1 FROM vt1, vt0 WHERE (UNICODE(0X13c0eae7) COLLATE NOCASE); -- 0ms;
SELECT ALL ((((vt2.c1) NOTNULL))&(vt2.c0)), ((vt2.c0)>=(vt0.c0)) COLLATE NOCASE, CASE WHEN (((vt2.c0, vt2.c0, vt1.c0))>=((vt0.c0, vt1.c0, '-479597005'))) THEN ((vt2.c0)+(vt0.c0)) END FROM vt2 WHERE (CASE WHEN ((NULL)%(x'f81f')) THEN ((NULL)IS NOT(x'')) WHEN CASE 0.9004393662546845  WHEN 0xffffffffb1bc13db THEN 0X268ed2ea WHEN x'' THEN 0.2667232420366955 WHEN '3(36B' THEN x'' END THEN NULL COLLATE NOCASE WHEN CASE NULL  WHEN 0.8348354541979832 THEN NULL ELSE x'' END THEN NULL COLLATE NOCASE ELSE ((x'8368')>(x'')) END) ORDER BY (vt2.c0 IN ()) COLLATE BINARY, ((CASE vt1.c0  WHEN vt0.c1 THEN 0.7100212759384117 END) NOT NULL), vt0.c1  NULLS FIRST;SELECT ALL NULL, ((((vt2.c1 COLLATE NOCASE)AND(((vt0.c0) BETWEEN (vt0.c0) AND (vt2.c0)))))OR('-1962924232')), SUM('') FILTER(WHERE (((vt0.c0) IS FALSE) IN (x'7e3c25a6'))) OVER () FROM vt2 NOT INDEXED, vt1, vt0 WHERE ((+ (((NULL) NOT BETWEEN (x'') AND (0.849128277795187))))); -- 0ms;
SELECT ((((vt0.c0)LIKE(vt0.c0))) IS TRUE), ((((vt2.c1)>>(vt2.c1)))>>(((vt0.c0)<=(vt2.c0)))), ((json_insert(vt2.c1, vt2.c0, vt2.c1)) NOT BETWEEN (((vt0.c1)/(vt2.c1))) AND ((~ (vt0.c0)))) FROM vt2, vt0;SELECT DISTINCT ((CASE x'e1e5'  WHEN vt0.c0 THEN vt2.c1 WHEN vt2.c1 THEN vt0.c1 WHEN NULL THEN vt2.c1 END)LIKE(((((((((vt0.c1)AND(vt1.c0)))AND(vt1.c0)))AND(vt0.c1)))AND(vt0.c1)))) FROM vt1 WHERE (CASE WHEN (((0.09776141329576349)) BETWEEN ((0.11359166823603406)) AND ((NULL))) THEN ((x'') BETWEEN (1628974761) AND (-8.36316899E8)) END);SELECT LIKELY(vt1.c0) COLLATE BINARY FROM vt2, vt0 WHERE ((- ((('-526733908')OR(0.46954407723243263)))));SELECT DISTINCT (((vt2.c1)) NOT BETWEEN (((1.48184994E9 IN (vt0.c0)))) AND ((CASE WHEN vt0.c1 THEN vt1.c0 WHEN vt1.c0 THEN vt1.c0 WHEN vt2.c0 THEN vt0.c1 ELSE vt2.c1 END))) FROM vt2, vt1, vt0; -- 0ms;
SELECT DISTINCT (~ (COUNT(*))) FROM vt0, vt1, vt2; -- 1ms;
SELECT SUM(json_array_length(vt1.c0)) OVER () FROM vt0, vt1 WHERE (CAST(0X5a4fe0f4 AS NUMERIC) COLLATE BINARY);SELECT DISTINCT (((COALESCE(DISTINCT vt2.c1, vt2.c1, vt0.c1, vt0.c1, vt2.c0, vt0.c1)))<>((CAST(vt0.c0 AS NUMERIC)))) FROM vt0, vt1 WHERE ((((0.15868026801187785)) BETWEEN (('-257882277' COLLATE RTRIM)) AND (((('-Lm	BK') NOT BETWEEN ('') AND (0.776389401126263)))))) LIMIT 1635843879;SELECT DISTINCT HEX(((vt0.c1) BETWEEN (vt2.c1) AND (vt0.c1))) FROM vt2 WHERE (((((1.066312329E9) BETWEEN (NULL) AND (x'cf36')))LIKE(((('0.49046567402160157'))>(('kW!+ⷥ0')))))) ORDER BY ((LIKE(vt0.c1, vt0.c1)) NOT BETWEEN (vt2.c0 COLLATE RTRIM) AND ((vt2.c0 IN ()))) DESC  NULLS FIRST;SELECT (((vt2.c0)) NOT BETWEEN ((vt0.c0)) AND (((((vt2.c1)) NOT BETWEEN ((vt2.c1)) AND ((vt0.c0)))))) FROM vt0 WHERE (((NULL COLLATE NOCASE)>=(((x'56d2')IS('1581812391')))));SELECT ALL ((((json_array_length(vt0.c0, vt1.c0))AND(((vt2.c1)AND(0xffffffff81d1fc2b)))))OR(((vt1.c0) NOT BETWEEN (vt2.c1) AND (vt0.c1)))), (CAST(vt2.c1 AS NUMERIC) IN (TRIM(DISTINCT vt0.c1), ((vt2.c1) BETWEEN (vt2.c1) AND (vt2.c1)))), SUM(x'54bd') OVER () FROM vt2, vt1 WHERE (((CASE '-624032029'  WHEN x'' THEN NULL END)<=((NULL IN ()))));SELECT DISTINCT GROUP_CONCAT(((vt0.c0) NOT NULL)) OVER () FROM vt2 WHERE (LIKELY(DISTINCT UPPER(DISTINCT NULL)));SELECT (((((vt0.c0, vt2.c0, vt2.c1)) NOT BETWEEN ((vt0.c0, vt0.c0, vt2.c0)) AND ((vt0.c0, vt2.c1, vt2.c1)))) NOT BETWEEN (((vt2.c1) BETWEEN (vt2.c0) AND (vt0.c1))) AND (((vt0.c1) IS FALSE))) FROM vt0;SELECT DISTINCT CAST(vt0.c1 AS BLOB) COLLATE NOCASE COLLATE BINARY FROM vt0, vt2 GROUP BY CAST(0.691663324426641 COLLATE RTRIM AS NUMERIC); -- 0ms;
SELECT (LIKELIHOOD(vt1.c0, 0.834012408149018) IN ((~ (vt0.c1)))) FROM vt2 LIMIT 701298579;SELECT DISTINCT NULLIF(DISTINCT -1.492497477E9, (vt0.c0 IN ())) FROM vt1, vt0 WHERE (1.988850454E9); -- 0ms;
SELECT DISTINCT (((vt2.c1 IN (vt2.c0, vt0.c0))) ISNULL), CASE WHEN COUNT(*) THEN vt2.c0 ELSE (vt0.c1 IN ()) END, ROW_NUMBER() OVER ( ORDER BY (x'' COLLATE RTRIM IN (LAST_INSERT_ROWID()))  NULLS FIRST, (vt2.c0 IN ()) COLLATE RTRIM  NULLS LAST) FROM vt2 WHERE ((((0.9647024882881888)=(x'480d')) IN ()));SELECT ((((vt0.c1) NOT BETWEEN (vt0.c0) AND (vt0.c0))) NOT BETWEEN (CASE vt2.c0  WHEN vt2.c0 THEN x'' END) AND (0.9648831371814414 COLLATE RTRIM)), ((vt2.c1 COLLATE RTRIM)>(CAST(vt2.c0 AS REAL))), CAST((vt0.c1 IN (vt0.c1, vt0.c1)) AS INTEGER) FROM vt0, vt2 WHERE (703221467) ORDER BY CASE ((((((((vt2.c1)AND(vt2.c0)))AND(vt0.c1)))OR(vt1.c0)))AND(vt0.c0))  WHEN ((NULL) NOTNULL) THEN ((vt2.c0) NOT BETWEEN (vt0.c1) AND (x'')) WHEN CAST(vt0.c0 AS REAL) THEN ((vt1.c0) NOT BETWEEN (vt2.c1) AND (vt0.c1)) WHEN (+ (vt0.c1)) THEN ((vt0.c0)IS NOT(vt0.c0)) END DESC  NULLS LAST, CASE ((((((((vt0.c0)AND(vt2.c0)))AND(x'e917')))AND(vt1.c0)))AND(vt1.c0))  WHEN (((vt0.c0)) BETWEEN ((x'')) AND ((vt2.c1))) THEN CASE WHEN vt1.c0 THEN vt0.c0 WHEN vt0.c1 THEN vt0.c1 WHEN vt1.c0 THEN vt0.c1 END END ASC  NULLS LAST, CAST((vt1.c0 IN ()) AS BLOB) ASC  NULLS LAST;SELECT DISTINCT ((((('0.15303931842204477'))>=((vt0.c0))))|(((((vt1.c0)OR(vt2.c0)))AND(vt0.c0)))) FROM vt1, vt0;SELECT ALL vt0.c0, ((((vt2.c0) BETWEEN (vt0.c0) AND (vt2.c0)))<<(CASE WHEN vt1.c0 THEN vt2.c1 WHEN vt1.c0 THEN vt1.c0 WHEN vt2.c0 THEN vt2.c1 ELSE '' END)), CUME_DIST() OVER () FROM vt0, vt1, vt2 GROUP BY 0xffffffffbe0e84cc; -- 1ms;
SELECT ((((AVG(vt0.c1))AND((((vt0.c0)) BETWEEN ((vt0.c0)) AND ((vt1.c0))))))OR((NOT (vt2.c1)))) FROM vt0, vt1 ORDER BY ((((((vt2.c0)AND(vt2.c1)))AND(vt1.c0))) ISNULL);SELECT DISTINCT ((CASE vt0.c0  WHEN vt2.c0 THEN vt0.c1 WHEN vt0.c1 THEN vt0.c1 WHEN vt1.c0 THEN vt2.c1 ELSE vt2.c0 END)>>(((vt1.c0) IS TRUE))) FROM vt1, vt0, vt2 WHERE ('1694078846'); -- 0ms;
SELECT DISTINCT (((((vt0.c1)) NOT BETWEEN ((vt1.c0)) AND ((vt0.c1))))%(vt0.c1)) FROM vt0 LIMIT 536496219;SELECT DISTINCT (NOT (CAST(vt0.c1 AS REAL))) FROM vt2, vt0, vt1; -- 0ms;
SELECT ((CASE WHEN vt0.c1 THEN vt0.c1 END) NOTNULL) FROM vt1, vt2;SELECT DISTINCT ((vt0.c0 COLLATE BINARY) NOTNULL), CUME_DIST() OVER (), (((('2025886926')AND(((((vt0.c1)OR(vt2.c1)))OR(vt1.c0)))))AND((((vt0.c0))<=((vt1.c0))))) FROM vt1, vt2 ORDER BY (((- (vt0.c0)))LIKE(((vt1.c0) ISNULL))), vt0.c0  NULLS FIRST;SELECT DISTINCT AVG(((vt1.c0) BETWEEN (vt1.c0) AND (vt2.c0))) FROM vt1, vt0, vt2 WHERE (json_array((((0.7883365988170685))>=(('-59515177'))), ('486150770' IN ()))); -- 0ms;
SELECT DISTINCT (((((vt0.c1))!=((vt0.c0))))IS NOT(((vt2.c1) BETWEEN (0Xffffffff9d5c988b) AND (vt1.c0)))) FROM vt1, vt2 WHERE ((((((('?蘰64{\r-') IS FALSE))OR('948950622' COLLATE BINARY)))AND((('aL') IS TRUE))));SELECT ALL NULL FROM vt0, vt1 WHERE (((((x'')|(x''))) NOT NULL)) ORDER BY (+ (CAST(vt2.c1 AS REAL))) ASC, ((vt2.c0)>>(vt0.c1)) COLLATE NOCASE ASC;SELECT DISTINCT (0.625776129644239 IN ()), ((CAST(vt2.c1 AS BLOB))-(((vt0.c1)-('1694078846')))), '' COLLATE BINARY FROM vt2, vt1, vt0 WHERE (((NULL COLLATE BINARY) ISNULL)) ORDER BY CASE vt2.c1 COLLATE NOCASE  WHEN (vt1.c0 IN ()) THEN ((NULL)==(vt2.c1)) ELSE CASE WHEN vt0.c1 THEN vt1.c0 END END ASC  NULLS FIRST, vt1.c0 ASC; -- 1ms;
SELECT ALL (((+ (vt1.c0)))/((((vt0.c0, vt2.c0, vt0.c1))=((vt1.c0, vt1.c0, vt2.c1))))) FROM vt1;SELECT ALL SUM(((vt2.c1)IS NOT(x''))) OVER () FROM vt2 WHERE (((((((1.066312329E9)AND(x'')))AND(x''))) NOTNULL)) GROUP BY CAST(vt2.c0 COLLATE NOCASE AS NUMERIC), TIME(((vt2.c1) NOT NULL), (((vt1.c0))<((vt2.c0))), vt0.c0 COLLATE RTRIM, vt0.c0, 0.27088074093581394), (((- (vt2.c1))) IS TRUE) HAVING (CASE vt2.c1  WHEN vt2.c1 THEN vt2.c0 WHEN vt0.c0 THEN vt0.c1 WHEN NULL THEN vt1.c0 WHEN vt0.c0 THEN vt0.c0 WHEN vt1.c0 THEN vt2.c0 ELSE '^~kB' END IN (MIN(vt1.c0), CAST(vt1.c0 AS NUMERIC)));